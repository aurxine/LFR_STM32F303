
LFR_STM32F303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a828  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  0800a9b8  0800a9b8  0001a9b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac58  0800ac58  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  0800ac58  0800ac58  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ac58  0800ac58  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac58  0800ac58  0001ac58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac5c  0800ac5c  0001ac5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800ac60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003184  2000007c  0800acdc  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003200  0800acdc  00023200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bc5d  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038fc  00000000  00000000  0003bd09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001428  00000000  00000000  0003f608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001290  00000000  00000000  00040a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021421  00000000  00000000  00041cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017212  00000000  00000000  000630e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3678  00000000  00000000  0007a2f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013d96b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000612c  00000000  00000000  0013d9c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a9a0 	.word	0x0800a9a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800a9a0 	.word	0x0800a9a0

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20003148 	.word	0x20003148
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	; 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_dmul>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800068e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000692:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000696:	bf1d      	ittte	ne
 8000698:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800069c:	ea94 0f0c 	teqne	r4, ip
 80006a0:	ea95 0f0c 	teqne	r5, ip
 80006a4:	f000 f8de 	bleq	8000864 <__aeabi_dmul+0x1dc>
 80006a8:	442c      	add	r4, r5
 80006aa:	ea81 0603 	eor.w	r6, r1, r3
 80006ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ba:	bf18      	it	ne
 80006bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006c8:	d038      	beq.n	800073c <__aeabi_dmul+0xb4>
 80006ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ce:	f04f 0500 	mov.w	r5, #0
 80006d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006de:	f04f 0600 	mov.w	r6, #0
 80006e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006e6:	f09c 0f00 	teq	ip, #0
 80006ea:	bf18      	it	ne
 80006ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80006f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006fc:	d204      	bcs.n	8000708 <__aeabi_dmul+0x80>
 80006fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000702:	416d      	adcs	r5, r5
 8000704:	eb46 0606 	adc.w	r6, r6, r6
 8000708:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800070c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000710:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000714:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000718:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800071c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000720:	bf88      	it	hi
 8000722:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000726:	d81e      	bhi.n	8000766 <__aeabi_dmul+0xde>
 8000728:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800072c:	bf08      	it	eq
 800072e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000732:	f150 0000 	adcs.w	r0, r0, #0
 8000736:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000740:	ea46 0101 	orr.w	r1, r6, r1
 8000744:	ea40 0002 	orr.w	r0, r0, r2
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000750:	bfc2      	ittt	gt
 8000752:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000756:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800075a:	bd70      	popgt	{r4, r5, r6, pc}
 800075c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000760:	f04f 0e00 	mov.w	lr, #0
 8000764:	3c01      	subs	r4, #1
 8000766:	f300 80ab 	bgt.w	80008c0 <__aeabi_dmul+0x238>
 800076a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800076e:	bfde      	ittt	le
 8000770:	2000      	movle	r0, #0
 8000772:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000776:	bd70      	pople	{r4, r5, r6, pc}
 8000778:	f1c4 0400 	rsb	r4, r4, #0
 800077c:	3c20      	subs	r4, #32
 800077e:	da35      	bge.n	80007ec <__aeabi_dmul+0x164>
 8000780:	340c      	adds	r4, #12
 8000782:	dc1b      	bgt.n	80007bc <__aeabi_dmul+0x134>
 8000784:	f104 0414 	add.w	r4, r4, #20
 8000788:	f1c4 0520 	rsb	r5, r4, #32
 800078c:	fa00 f305 	lsl.w	r3, r0, r5
 8000790:	fa20 f004 	lsr.w	r0, r0, r4
 8000794:	fa01 f205 	lsl.w	r2, r1, r5
 8000798:	ea40 0002 	orr.w	r0, r0, r2
 800079c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a8:	fa21 f604 	lsr.w	r6, r1, r4
 80007ac:	eb42 0106 	adc.w	r1, r2, r6
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 040c 	rsb	r4, r4, #12
 80007c0:	f1c4 0520 	rsb	r5, r4, #32
 80007c4:	fa00 f304 	lsl.w	r3, r0, r4
 80007c8:	fa20 f005 	lsr.w	r0, r0, r5
 80007cc:	fa01 f204 	lsl.w	r2, r1, r4
 80007d0:	ea40 0002 	orr.w	r0, r0, r2
 80007d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007dc:	f141 0100 	adc.w	r1, r1, #0
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f1c4 0520 	rsb	r5, r4, #32
 80007f0:	fa00 f205 	lsl.w	r2, r0, r5
 80007f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007f8:	fa20 f304 	lsr.w	r3, r0, r4
 80007fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000800:	ea43 0302 	orr.w	r3, r3, r2
 8000804:	fa21 f004 	lsr.w	r0, r1, r4
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	fa21 f204 	lsr.w	r2, r1, r4
 8000810:	ea20 0002 	bic.w	r0, r0, r2
 8000814:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000818:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800081c:	bf08      	it	eq
 800081e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000822:	bd70      	pop	{r4, r5, r6, pc}
 8000824:	f094 0f00 	teq	r4, #0
 8000828:	d10f      	bne.n	800084a <__aeabi_dmul+0x1c2>
 800082a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800082e:	0040      	lsls	r0, r0, #1
 8000830:	eb41 0101 	adc.w	r1, r1, r1
 8000834:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3c01      	subeq	r4, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1a6>
 800083e:	ea41 0106 	orr.w	r1, r1, r6
 8000842:	f095 0f00 	teq	r5, #0
 8000846:	bf18      	it	ne
 8000848:	4770      	bxne	lr
 800084a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800084e:	0052      	lsls	r2, r2, #1
 8000850:	eb43 0303 	adc.w	r3, r3, r3
 8000854:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000858:	bf08      	it	eq
 800085a:	3d01      	subeq	r5, #1
 800085c:	d0f7      	beq.n	800084e <__aeabi_dmul+0x1c6>
 800085e:	ea43 0306 	orr.w	r3, r3, r6
 8000862:	4770      	bx	lr
 8000864:	ea94 0f0c 	teq	r4, ip
 8000868:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800086c:	bf18      	it	ne
 800086e:	ea95 0f0c 	teqne	r5, ip
 8000872:	d00c      	beq.n	800088e <__aeabi_dmul+0x206>
 8000874:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000878:	bf18      	it	ne
 800087a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087e:	d1d1      	bne.n	8000824 <__aeabi_dmul+0x19c>
 8000880:	ea81 0103 	eor.w	r1, r1, r3
 8000884:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000888:	f04f 0000 	mov.w	r0, #0
 800088c:	bd70      	pop	{r4, r5, r6, pc}
 800088e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000892:	bf06      	itte	eq
 8000894:	4610      	moveq	r0, r2
 8000896:	4619      	moveq	r1, r3
 8000898:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800089c:	d019      	beq.n	80008d2 <__aeabi_dmul+0x24a>
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	d102      	bne.n	80008aa <__aeabi_dmul+0x222>
 80008a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008a8:	d113      	bne.n	80008d2 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	d105      	bne.n	80008bc <__aeabi_dmul+0x234>
 80008b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008b4:	bf1c      	itt	ne
 80008b6:	4610      	movne	r0, r2
 80008b8:	4619      	movne	r1, r3
 80008ba:	d10a      	bne.n	80008d2 <__aeabi_dmul+0x24a>
 80008bc:	ea81 0103 	eor.w	r1, r1, r3
 80008c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008cc:	f04f 0000 	mov.w	r0, #0
 80008d0:	bd70      	pop	{r4, r5, r6, pc}
 80008d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008da:	bd70      	pop	{r4, r5, r6, pc}

080008dc <__aeabi_ddiv>:
 80008dc:	b570      	push	{r4, r5, r6, lr}
 80008de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ea:	bf1d      	ittte	ne
 80008ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008f0:	ea94 0f0c 	teqne	r4, ip
 80008f4:	ea95 0f0c 	teqne	r5, ip
 80008f8:	f000 f8a7 	bleq	8000a4a <__aeabi_ddiv+0x16e>
 80008fc:	eba4 0405 	sub.w	r4, r4, r5
 8000900:	ea81 0e03 	eor.w	lr, r1, r3
 8000904:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000908:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800090c:	f000 8088 	beq.w	8000a20 <__aeabi_ddiv+0x144>
 8000910:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000914:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000918:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800091c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000920:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000924:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000928:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800092c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000930:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000934:	429d      	cmp	r5, r3
 8000936:	bf08      	it	eq
 8000938:	4296      	cmpeq	r6, r2
 800093a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800093e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000942:	d202      	bcs.n	800094a <__aeabi_ddiv+0x6e>
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	1ab6      	subs	r6, r6, r2
 800094c:	eb65 0503 	sbc.w	r5, r5, r3
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800095a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000988:	085b      	lsrs	r3, r3, #1
 800098a:	ea4f 0232 	mov.w	r2, r2, rrx
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ae:	bf22      	ittt	cs
 80009b0:	1ab6      	subcs	r6, r6, r2
 80009b2:	4675      	movcs	r5, lr
 80009b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009bc:	d018      	beq.n	80009f0 <__aeabi_ddiv+0x114>
 80009be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009da:	d1c0      	bne.n	800095e <__aeabi_ddiv+0x82>
 80009dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009e0:	d10b      	bne.n	80009fa <__aeabi_ddiv+0x11e>
 80009e2:	ea41 0100 	orr.w	r1, r1, r0
 80009e6:	f04f 0000 	mov.w	r0, #0
 80009ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ee:	e7b6      	b.n	800095e <__aeabi_ddiv+0x82>
 80009f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009f4:	bf04      	itt	eq
 80009f6:	4301      	orreq	r1, r0
 80009f8:	2000      	moveq	r0, #0
 80009fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009fe:	bf88      	it	hi
 8000a00:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a04:	f63f aeaf 	bhi.w	8000766 <__aeabi_dmul+0xde>
 8000a08:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a0c:	bf04      	itt	eq
 8000a0e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a12:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a16:	f150 0000 	adcs.w	r0, r0, #0
 8000a1a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a1e:	bd70      	pop	{r4, r5, r6, pc}
 8000a20:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a24:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a28:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a2c:	bfc2      	ittt	gt
 8000a2e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a32:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a36:	bd70      	popgt	{r4, r5, r6, pc}
 8000a38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a3c:	f04f 0e00 	mov.w	lr, #0
 8000a40:	3c01      	subs	r4, #1
 8000a42:	e690      	b.n	8000766 <__aeabi_dmul+0xde>
 8000a44:	ea45 0e06 	orr.w	lr, r5, r6
 8000a48:	e68d      	b.n	8000766 <__aeabi_dmul+0xde>
 8000a4a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a4e:	ea94 0f0c 	teq	r4, ip
 8000a52:	bf08      	it	eq
 8000a54:	ea95 0f0c 	teqeq	r5, ip
 8000a58:	f43f af3b 	beq.w	80008d2 <__aeabi_dmul+0x24a>
 8000a5c:	ea94 0f0c 	teq	r4, ip
 8000a60:	d10a      	bne.n	8000a78 <__aeabi_ddiv+0x19c>
 8000a62:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a66:	f47f af34 	bne.w	80008d2 <__aeabi_dmul+0x24a>
 8000a6a:	ea95 0f0c 	teq	r5, ip
 8000a6e:	f47f af25 	bne.w	80008bc <__aeabi_dmul+0x234>
 8000a72:	4610      	mov	r0, r2
 8000a74:	4619      	mov	r1, r3
 8000a76:	e72c      	b.n	80008d2 <__aeabi_dmul+0x24a>
 8000a78:	ea95 0f0c 	teq	r5, ip
 8000a7c:	d106      	bne.n	8000a8c <__aeabi_ddiv+0x1b0>
 8000a7e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a82:	f43f aefd 	beq.w	8000880 <__aeabi_dmul+0x1f8>
 8000a86:	4610      	mov	r0, r2
 8000a88:	4619      	mov	r1, r3
 8000a8a:	e722      	b.n	80008d2 <__aeabi_dmul+0x24a>
 8000a8c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a96:	f47f aec5 	bne.w	8000824 <__aeabi_dmul+0x19c>
 8000a9a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a9e:	f47f af0d 	bne.w	80008bc <__aeabi_dmul+0x234>
 8000aa2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000aa6:	f47f aeeb 	bne.w	8000880 <__aeabi_dmul+0x1f8>
 8000aaa:	e712      	b.n	80008d2 <__aeabi_dmul+0x24a>

08000aac <__gedf2>:
 8000aac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000ab0:	e006      	b.n	8000ac0 <__cmpdf2+0x4>
 8000ab2:	bf00      	nop

08000ab4 <__ledf2>:
 8000ab4:	f04f 0c01 	mov.w	ip, #1
 8000ab8:	e002      	b.n	8000ac0 <__cmpdf2+0x4>
 8000aba:	bf00      	nop

08000abc <__cmpdf2>:
 8000abc:	f04f 0c01 	mov.w	ip, #1
 8000ac0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad0:	bf18      	it	ne
 8000ad2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ad6:	d01b      	beq.n	8000b10 <__cmpdf2+0x54>
 8000ad8:	b001      	add	sp, #4
 8000ada:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ade:	bf0c      	ite	eq
 8000ae0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ae4:	ea91 0f03 	teqne	r1, r3
 8000ae8:	bf02      	ittt	eq
 8000aea:	ea90 0f02 	teqeq	r0, r2
 8000aee:	2000      	moveq	r0, #0
 8000af0:	4770      	bxeq	lr
 8000af2:	f110 0f00 	cmn.w	r0, #0
 8000af6:	ea91 0f03 	teq	r1, r3
 8000afa:	bf58      	it	pl
 8000afc:	4299      	cmppl	r1, r3
 8000afe:	bf08      	it	eq
 8000b00:	4290      	cmpeq	r0, r2
 8000b02:	bf2c      	ite	cs
 8000b04:	17d8      	asrcs	r0, r3, #31
 8000b06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b0a:	f040 0001 	orr.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__cmpdf2+0x64>
 8000b1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b1e:	d107      	bne.n	8000b30 <__cmpdf2+0x74>
 8000b20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d1d6      	bne.n	8000ad8 <__cmpdf2+0x1c>
 8000b2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b2e:	d0d3      	beq.n	8000ad8 <__cmpdf2+0x1c>
 8000b30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <__aeabi_cdrcmple>:
 8000b38:	4684      	mov	ip, r0
 8000b3a:	4610      	mov	r0, r2
 8000b3c:	4662      	mov	r2, ip
 8000b3e:	468c      	mov	ip, r1
 8000b40:	4619      	mov	r1, r3
 8000b42:	4663      	mov	r3, ip
 8000b44:	e000      	b.n	8000b48 <__aeabi_cdcmpeq>
 8000b46:	bf00      	nop

08000b48 <__aeabi_cdcmpeq>:
 8000b48:	b501      	push	{r0, lr}
 8000b4a:	f7ff ffb7 	bl	8000abc <__cmpdf2>
 8000b4e:	2800      	cmp	r0, #0
 8000b50:	bf48      	it	mi
 8000b52:	f110 0f00 	cmnmi.w	r0, #0
 8000b56:	bd01      	pop	{r0, pc}

08000b58 <__aeabi_dcmpeq>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff fff4 	bl	8000b48 <__aeabi_cdcmpeq>
 8000b60:	bf0c      	ite	eq
 8000b62:	2001      	moveq	r0, #1
 8000b64:	2000      	movne	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmplt>:
 8000b6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b70:	f7ff ffea 	bl	8000b48 <__aeabi_cdcmpeq>
 8000b74:	bf34      	ite	cc
 8000b76:	2001      	movcc	r0, #1
 8000b78:	2000      	movcs	r0, #0
 8000b7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7e:	bf00      	nop

08000b80 <__aeabi_dcmple>:
 8000b80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b84:	f7ff ffe0 	bl	8000b48 <__aeabi_cdcmpeq>
 8000b88:	bf94      	ite	ls
 8000b8a:	2001      	movls	r0, #1
 8000b8c:	2000      	movhi	r0, #0
 8000b8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b92:	bf00      	nop

08000b94 <__aeabi_dcmpge>:
 8000b94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b98:	f7ff ffce 	bl	8000b38 <__aeabi_cdrcmple>
 8000b9c:	bf94      	ite	ls
 8000b9e:	2001      	movls	r0, #1
 8000ba0:	2000      	movhi	r0, #0
 8000ba2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_dcmpgt>:
 8000ba8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bac:	f7ff ffc4 	bl	8000b38 <__aeabi_cdrcmple>
 8000bb0:	bf34      	ite	cc
 8000bb2:	2001      	movcc	r0, #1
 8000bb4:	2000      	movcs	r0, #0
 8000bb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bba:	bf00      	nop

08000bbc <__aeabi_dcmpun>:
 8000bbc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bc4:	d102      	bne.n	8000bcc <__aeabi_dcmpun+0x10>
 8000bc6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bca:	d10a      	bne.n	8000be2 <__aeabi_dcmpun+0x26>
 8000bcc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bd4:	d102      	bne.n	8000bdc <__aeabi_dcmpun+0x20>
 8000bd6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_dcmpun+0x26>
 8000bdc:	f04f 0000 	mov.w	r0, #0
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0001 	mov.w	r0, #1
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2iz>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d215      	bcs.n	8000c1e <__aeabi_d2iz+0x36>
 8000bf2:	d511      	bpl.n	8000c18 <__aeabi_d2iz+0x30>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d912      	bls.n	8000c24 <__aeabi_d2iz+0x3c>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c12:	bf18      	it	ne
 8000c14:	4240      	negne	r0, r0
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d105      	bne.n	8000c30 <__aeabi_d2iz+0x48>
 8000c24:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	bf08      	it	eq
 8000c2a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c3e:	f000 fe15 	bl	800186c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c42:	f000 f855 	bl	8000cf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c46:	f000 f9cb 	bl	8000fe0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000c4a:	f000 f8a9 	bl	8000da0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000c4e:	f000 f8fb 	bl	8000e48 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000c52:	f000 f95f 	bl	8000f14 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL |= (1 << 0);
 8000c56:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <main+0xa0>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a1f      	ldr	r2, [pc, #124]	; (8000cd8 <main+0xa0>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6013      	str	r3, [r2, #0]

//  SEGGER_SYSVIEW_Conf();
//
//  SEGGER_SYSVIEW_Start();
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // Starting PWM
 8000c62:	2104      	movs	r1, #4
 8000c64:	481d      	ldr	r0, [pc, #116]	; (8000cdc <main+0xa4>)
 8000c66:	f002 fcdb 	bl	8003620 <HAL_TIM_PWM_Start>

  status = xTaskCreate(svIRSensorReadTask, "IR_Sensor_Reading_Task", 200, NULL, 3, &IR_sensor_task_handle);
 8000c6a:	f107 0308 	add.w	r3, r7, #8
 8000c6e:	9301      	str	r3, [sp, #4]
 8000c70:	2303      	movs	r3, #3
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	2300      	movs	r3, #0
 8000c76:	22c8      	movs	r2, #200	; 0xc8
 8000c78:	4919      	ldr	r1, [pc, #100]	; (8000ce0 <main+0xa8>)
 8000c7a:	481a      	ldr	r0, [pc, #104]	; (8000ce4 <main+0xac>)
 8000c7c:	f004 fbc0 	bl	8005400 <xTaskCreate>
 8000c80:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d00a      	beq.n	8000c9e <main+0x66>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c8c:	f383 8811 	msr	BASEPRI, r3
 8000c90:	f3bf 8f6f 	isb	sy
 8000c94:	f3bf 8f4f 	dsb	sy
 8000c98:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000c9a:	bf00      	nop
 8000c9c:	e7fe      	b.n	8000c9c <main+0x64>

  status = xTaskCreate(svMotorRunTask, "Motor_Run_Task", 400, NULL, 4, &motor_run_task_handle);
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	9301      	str	r3, [sp, #4]
 8000ca2:	2304      	movs	r3, #4
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000cac:	490e      	ldr	r1, [pc, #56]	; (8000ce8 <main+0xb0>)
 8000cae:	480f      	ldr	r0, [pc, #60]	; (8000cec <main+0xb4>)
 8000cb0:	f004 fba6 	bl	8005400 <xTaskCreate>
 8000cb4:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d00a      	beq.n	8000cd2 <main+0x9a>
        __asm volatile
 8000cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cc0:	f383 8811 	msr	BASEPRI, r3
 8000cc4:	f3bf 8f6f 	isb	sy
 8000cc8:	f3bf 8f4f 	dsb	sy
 8000ccc:	60fb      	str	r3, [r7, #12]
    }
 8000cce:	bf00      	nop
 8000cd0:	e7fe      	b.n	8000cd0 <main+0x98>

  vTaskStartScheduler();
 8000cd2:	f004 fd31 	bl	8005738 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <main+0x9e>
 8000cd8:	e0001000 	.word	0xe0001000
 8000cdc:	2000306c 	.word	0x2000306c
 8000ce0:	0800a9b8 	.word	0x0800a9b8
 8000ce4:	08001161 	.word	0x08001161
 8000ce8:	0800a9d0 	.word	0x0800a9d0
 8000cec:	08001345 	.word	0x08001345

08000cf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b09e      	sub	sp, #120	; 0x78
 8000cf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cf6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000cfa:	2228      	movs	r2, #40	; 0x28
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f007 ff0a 	bl	8008b18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d04:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d14:	463b      	mov	r3, r7
 8000d16:	223c      	movs	r2, #60	; 0x3c
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f007 fefc 	bl	8008b18 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d20:	2302      	movs	r3, #2
 8000d22:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d24:	2301      	movs	r3, #1
 8000d26:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d28:	2310      	movs	r3, #16
 8000d2a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d30:	2300      	movs	r3, #0
 8000d32:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000d34:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8000d38:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d3a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f001 f856 	bl	8001df0 <HAL_RCC_OscConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000d4a:	f000 fb8b 	bl	8001464 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d4e:	230f      	movs	r3, #15
 8000d50:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d52:	2302      	movs	r3, #2
 8000d54:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d56:	2300      	movs	r3, #0
 8000d58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d68:	2101      	movs	r1, #1
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f001 ff48 	bl	8002c00 <HAL_RCC_ClockConfig>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000d76:	f000 fb75 	bl	8001464 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000d7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000d80:	2300      	movs	r3, #0
 8000d82:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d84:	463b      	mov	r3, r7
 8000d86:	4618      	mov	r0, r3
 8000d88:	f002 f980 	bl	800308c <HAL_RCCEx_PeriphCLKConfig>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000d92:	f000 fb67 	bl	8001464 <Error_Handler>
  }
}
 8000d96:	bf00      	nop
 8000d98:	3778      	adds	r7, #120	; 0x78
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000da6:	f107 0310 	add.w	r3, r7, #16
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dbe:	4b20      	ldr	r3, [pc, #128]	; (8000e40 <MX_TIM1_Init+0xa0>)
 8000dc0:	4a20      	ldr	r2, [pc, #128]	; (8000e44 <MX_TIM1_Init+0xa4>)
 8000dc2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000dc4:	4b1e      	ldr	r3, [pc, #120]	; (8000e40 <MX_TIM1_Init+0xa0>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dca:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <MX_TIM1_Init+0xa0>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000dd0:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <MX_TIM1_Init+0xa0>)
 8000dd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dd6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd8:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <MX_TIM1_Init+0xa0>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dde:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <MX_TIM1_Init+0xa0>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de4:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <MX_TIM1_Init+0xa0>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dea:	4815      	ldr	r0, [pc, #84]	; (8000e40 <MX_TIM1_Init+0xa0>)
 8000dec:	f002 fafe 	bl	80033ec <HAL_TIM_Base_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000df6:	f000 fb35 	bl	8001464 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dfe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	4619      	mov	r1, r3
 8000e06:	480e      	ldr	r0, [pc, #56]	; (8000e40 <MX_TIM1_Init+0xa0>)
 8000e08:	f002 ff3a 	bl	8003c80 <HAL_TIM_ConfigClockSource>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000e12:	f000 fb27 	bl	8001464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e16:	2300      	movs	r3, #0
 8000e18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	4619      	mov	r1, r3
 8000e26:	4806      	ldr	r0, [pc, #24]	; (8000e40 <MX_TIM1_Init+0xa0>)
 8000e28:	f003 fc3e 	bl	80046a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000e32:	f000 fb17 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	3720      	adds	r7, #32
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	2000306c 	.word	0x2000306c
 8000e44:	40012c00 	.word	0x40012c00

08000e48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e4e:	f107 031c 	add.w	r3, r7, #28
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
 8000e68:	615a      	str	r2, [r3, #20]
 8000e6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e6c:	4b27      	ldr	r3, [pc, #156]	; (8000f0c <MX_TIM3_Init+0xc4>)
 8000e6e:	4a28      	ldr	r2, [pc, #160]	; (8000f10 <MX_TIM3_Init+0xc8>)
 8000e70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 8000e72:	4b26      	ldr	r3, [pc, #152]	; (8000f0c <MX_TIM3_Init+0xc4>)
 8000e74:	222f      	movs	r2, #47	; 0x2f
 8000e76:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e78:	4b24      	ldr	r3, [pc, #144]	; (8000f0c <MX_TIM3_Init+0xc4>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000e7e:	4b23      	ldr	r3, [pc, #140]	; (8000f0c <MX_TIM3_Init+0xc4>)
 8000e80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e84:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e86:	4b21      	ldr	r3, [pc, #132]	; (8000f0c <MX_TIM3_Init+0xc4>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8c:	4b1f      	ldr	r3, [pc, #124]	; (8000f0c <MX_TIM3_Init+0xc4>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e92:	481e      	ldr	r0, [pc, #120]	; (8000f0c <MX_TIM3_Init+0xc4>)
 8000e94:	f002 fb6c 	bl	8003570 <HAL_TIM_PWM_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000e9e:	f000 fae1 	bl	8001464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000eaa:	f107 031c 	add.w	r3, r7, #28
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4816      	ldr	r0, [pc, #88]	; (8000f0c <MX_TIM3_Init+0xc4>)
 8000eb2:	f003 fbf9 	bl	80046a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000ebc:	f000 fad2 	bl	8001464 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ec0:	2360      	movs	r3, #96	; 0x60
 8000ec2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	480d      	ldr	r0, [pc, #52]	; (8000f0c <MX_TIM3_Init+0xc4>)
 8000ed8:	f002 fdc2 	bl	8003a60 <HAL_TIM_PWM_ConfigChannel>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000ee2:	f000 fabf 	bl	8001464 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	2204      	movs	r2, #4
 8000eea:	4619      	mov	r1, r3
 8000eec:	4807      	ldr	r0, [pc, #28]	; (8000f0c <MX_TIM3_Init+0xc4>)
 8000eee:	f002 fdb7 	bl	8003a60 <HAL_TIM_PWM_ConfigChannel>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000ef8:	f000 fab4 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000efc:	4803      	ldr	r0, [pc, #12]	; (8000f0c <MX_TIM3_Init+0xc4>)
 8000efe:	f000 fb2f 	bl	8001560 <HAL_TIM_MspPostInit>

}
 8000f02:	bf00      	nop
 8000f04:	3728      	adds	r7, #40	; 0x28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20003020 	.word	0x20003020
 8000f10:	40000400 	.word	0x40000400

08000f14 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	; 0x28
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f1a:	f107 031c 	add.w	r3, r7, #28
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f26:	463b      	mov	r3, r7
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
 8000f34:	615a      	str	r2, [r3, #20]
 8000f36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f38:	4b27      	ldr	r3, [pc, #156]	; (8000fd8 <MX_TIM4_Init+0xc4>)
 8000f3a:	4a28      	ldr	r2, [pc, #160]	; (8000fdc <MX_TIM4_Init+0xc8>)
 8000f3c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 47;
 8000f3e:	4b26      	ldr	r3, [pc, #152]	; (8000fd8 <MX_TIM4_Init+0xc4>)
 8000f40:	222f      	movs	r2, #47	; 0x2f
 8000f42:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f44:	4b24      	ldr	r3, [pc, #144]	; (8000fd8 <MX_TIM4_Init+0xc4>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000f4a:	4b23      	ldr	r3, [pc, #140]	; (8000fd8 <MX_TIM4_Init+0xc4>)
 8000f4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f50:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f52:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <MX_TIM4_Init+0xc4>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f58:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <MX_TIM4_Init+0xc4>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f5e:	481e      	ldr	r0, [pc, #120]	; (8000fd8 <MX_TIM4_Init+0xc4>)
 8000f60:	f002 fb06 	bl	8003570 <HAL_TIM_PWM_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000f6a:	f000 fa7b 	bl	8001464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f72:	2300      	movs	r3, #0
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f76:	f107 031c 	add.w	r3, r7, #28
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4816      	ldr	r0, [pc, #88]	; (8000fd8 <MX_TIM4_Init+0xc4>)
 8000f7e:	f003 fb93 	bl	80046a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000f88:	f000 fa6c 	bl	8001464 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f8c:	2360      	movs	r3, #96	; 0x60
 8000f8e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <MX_TIM4_Init+0xc4>)
 8000fa4:	f002 fd5c 	bl	8003a60 <HAL_TIM_PWM_ConfigChannel>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000fae:	f000 fa59 	bl	8001464 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	2204      	movs	r2, #4
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4807      	ldr	r0, [pc, #28]	; (8000fd8 <MX_TIM4_Init+0xc4>)
 8000fba:	f002 fd51 	bl	8003a60 <HAL_TIM_PWM_ConfigChannel>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000fc4:	f000 fa4e 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000fc8:	4803      	ldr	r0, [pc, #12]	; (8000fd8 <MX_TIM4_Init+0xc4>)
 8000fca:	f000 fac9 	bl	8001560 <HAL_TIM_MspPostInit>

}
 8000fce:	bf00      	nop
 8000fd0:	3728      	adds	r7, #40	; 0x28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20002fd4 	.word	0x20002fd4
 8000fdc:	40000800 	.word	0x40000800

08000fe0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08c      	sub	sp, #48	; 0x30
 8000fe4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe6:	f107 031c 	add.w	r3, r7, #28
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
 8000ff4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ff6:	4b56      	ldr	r3, [pc, #344]	; (8001150 <MX_GPIO_Init+0x170>)
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	4a55      	ldr	r2, [pc, #340]	; (8001150 <MX_GPIO_Init+0x170>)
 8000ffc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001000:	6153      	str	r3, [r2, #20]
 8001002:	4b53      	ldr	r3, [pc, #332]	; (8001150 <MX_GPIO_Init+0x170>)
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800100a:	61bb      	str	r3, [r7, #24]
 800100c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100e:	4b50      	ldr	r3, [pc, #320]	; (8001150 <MX_GPIO_Init+0x170>)
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	4a4f      	ldr	r2, [pc, #316]	; (8001150 <MX_GPIO_Init+0x170>)
 8001014:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001018:	6153      	str	r3, [r2, #20]
 800101a:	4b4d      	ldr	r3, [pc, #308]	; (8001150 <MX_GPIO_Init+0x170>)
 800101c:	695b      	ldr	r3, [r3, #20]
 800101e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001026:	4b4a      	ldr	r3, [pc, #296]	; (8001150 <MX_GPIO_Init+0x170>)
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	4a49      	ldr	r2, [pc, #292]	; (8001150 <MX_GPIO_Init+0x170>)
 800102c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001030:	6153      	str	r3, [r2, #20]
 8001032:	4b47      	ldr	r3, [pc, #284]	; (8001150 <MX_GPIO_Init+0x170>)
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	4b44      	ldr	r3, [pc, #272]	; (8001150 <MX_GPIO_Init+0x170>)
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	4a43      	ldr	r2, [pc, #268]	; (8001150 <MX_GPIO_Init+0x170>)
 8001044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001048:	6153      	str	r3, [r2, #20]
 800104a:	4b41      	ldr	r3, [pc, #260]	; (8001150 <MX_GPIO_Init+0x170>)
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001056:	4b3e      	ldr	r3, [pc, #248]	; (8001150 <MX_GPIO_Init+0x170>)
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	4a3d      	ldr	r2, [pc, #244]	; (8001150 <MX_GPIO_Init+0x170>)
 800105c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001060:	6153      	str	r3, [r2, #20]
 8001062:	4b3b      	ldr	r3, [pc, #236]	; (8001150 <MX_GPIO_Init+0x170>)
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106e:	4b38      	ldr	r3, [pc, #224]	; (8001150 <MX_GPIO_Init+0x170>)
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	4a37      	ldr	r2, [pc, #220]	; (8001150 <MX_GPIO_Init+0x170>)
 8001074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001078:	6153      	str	r3, [r2, #20]
 800107a:	4b35      	ldr	r3, [pc, #212]	; (8001150 <MX_GPIO_Init+0x170>)
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001086:	2200      	movs	r2, #0
 8001088:	f64f 7108 	movw	r1, #65288	; 0xff08
 800108c:	4831      	ldr	r0, [pc, #196]	; (8001154 <MX_GPIO_Init+0x174>)
 800108e:	f000 fe97 	bl	8001dc0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8001092:	2337      	movs	r3, #55	; 0x37
 8001094:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001096:	4b30      	ldr	r3, [pc, #192]	; (8001158 <MX_GPIO_Init+0x178>)
 8001098:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800109e:	f107 031c 	add.w	r3, r7, #28
 80010a2:	4619      	mov	r1, r3
 80010a4:	482b      	ldr	r0, [pc, #172]	; (8001154 <MX_GPIO_Init+0x174>)
 80010a6:	f000 fcf9 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           PE11 LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80010aa:	f64f 7308 	movw	r3, #65288	; 0xff08
 80010ae:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b0:	2301      	movs	r3, #1
 80010b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010bc:	f107 031c 	add.w	r3, r7, #28
 80010c0:	4619      	mov	r1, r3
 80010c2:	4824      	ldr	r0, [pc, #144]	; (8001154 <MX_GPIO_Init+0x174>)
 80010c4:	f000 fcea 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010c8:	2301      	movs	r3, #1
 80010ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010cc:	2300      	movs	r3, #0
 80010ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010d4:	f107 031c 	add.w	r3, r7, #28
 80010d8:	4619      	mov	r1, r3
 80010da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010de:	f000 fcdd 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80010e2:	23e0      	movs	r3, #224	; 0xe0
 80010e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2300      	movs	r3, #0
 80010f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010f2:	2305      	movs	r3, #5
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f6:	f107 031c 	add.w	r3, r7, #28
 80010fa:	4619      	mov	r1, r3
 80010fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001100:	f000 fccc 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001104:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001112:	2303      	movs	r3, #3
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001116:	230e      	movs	r3, #14
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111a:	f107 031c 	add.w	r3, r7, #28
 800111e:	4619      	mov	r1, r3
 8001120:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001124:	f000 fcba 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001128:	23c0      	movs	r3, #192	; 0xc0
 800112a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800112c:	2312      	movs	r3, #18
 800112e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001130:	2301      	movs	r3, #1
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2300      	movs	r3, #0
 8001136:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001138:	2304      	movs	r3, #4
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	4619      	mov	r1, r3
 8001142:	4806      	ldr	r0, [pc, #24]	; (800115c <MX_GPIO_Init+0x17c>)
 8001144:	f000 fcaa 	bl	8001a9c <HAL_GPIO_Init>

}
 8001148:	bf00      	nop
 800114a:	3730      	adds	r7, #48	; 0x30
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40021000 	.word	0x40021000
 8001154:	48001000 	.word	0x48001000
 8001158:	10120000 	.word	0x10120000
 800115c:	48000400 	.word	0x48000400

08001160 <svIRSensorReadTask>:

/* USER CODE BEGIN 4 */
static void svIRSensorReadTask(void* parameters)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	while(1)
	{
		uint8_t sensor_data = ucReadAllIRSensors();
 8001168:	f000 f80a 	bl	8001180 <ucReadAllIRSensors>
 800116c:	4603      	mov	r3, r0
 800116e:	73fb      	strb	r3, [r7, #15]
		int error = iExponentialWeightedError(sensor_data, 2);
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	2102      	movs	r1, #2
 8001174:	4618      	mov	r0, r3
 8001176:	f000 f849 	bl	800120c <iExponentialWeightedError>
 800117a:	60b8      	str	r0, [r7, #8]
	{
 800117c:	e7f4      	b.n	8001168 <svIRSensorReadTask+0x8>
	...

08001180 <ucReadAllIRSensors>:
	}
}

uint8_t ucReadAllIRSensors()
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
	uint8_t sensor_vals = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	71fb      	strb	r3, [r7, #7]

	for(int i = 0; i < TOTAL_IR_SENSORS; i++)
 800118a:	2300      	movs	r3, #0
 800118c:	603b      	str	r3, [r7, #0]
 800118e:	e033      	b.n	80011f8 <ucReadAllIRSensors+0x78>
	{
		HAL_GPIO_WritePin(S0_PORT, S0, i & (1 << 0));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	b2db      	uxtb	r3, r3
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	b2db      	uxtb	r3, r3
 800119a:	461a      	mov	r2, r3
 800119c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011a0:	4819      	ldr	r0, [pc, #100]	; (8001208 <ucReadAllIRSensors+0x88>)
 80011a2:	f000 fe0d 	bl	8001dc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S1_PORT, S1, i & (1 << 1));
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	461a      	mov	r2, r3
 80011b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011b6:	4814      	ldr	r0, [pc, #80]	; (8001208 <ucReadAllIRSensors+0x88>)
 80011b8:	f000 fe02 	bl	8001dc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S2_PORT, S2, i & (1 << 2));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	461a      	mov	r2, r3
 80011c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011cc:	480e      	ldr	r0, [pc, #56]	; (8001208 <ucReadAllIRSensors+0x88>)
 80011ce:	f000 fdf7 	bl	8001dc0 <HAL_GPIO_WritePin>

		sensor_vals |= HAL_GPIO_ReadPin(IR_CHANNEL_PORT, IR_CHANNEL) << i;
 80011d2:	2101      	movs	r1, #1
 80011d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d8:	f000 fdda 	bl	8001d90 <HAL_GPIO_ReadPin>
 80011dc:	4603      	mov	r3, r0
 80011de:	461a      	mov	r2, r3
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	b25a      	sxtb	r2, r3
 80011e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	b25b      	sxtb	r3, r3
 80011f0:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < TOTAL_IR_SENSORS; i++)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	3301      	adds	r3, #1
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	2b07      	cmp	r3, #7
 80011fc:	ddc8      	ble.n	8001190 <ucReadAllIRSensors+0x10>
	}

	return sensor_vals;
 80011fe:	79fb      	ldrb	r3, [r7, #7]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	48001000 	.word	0x48001000

0800120c <iExponentialWeightedError>:
 * 			errors are exponentially increasing from the center
 *
 *
 * */
int iExponentialWeightedError(uint8_t sensor_data, int weight)
{
 800120c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001210:	b086      	sub	sp, #24
 8001212:	af00      	add	r7, sp, #0
 8001214:	4603      	mov	r3, r0
 8001216:	6039      	str	r1, [r7, #0]
 8001218:	71fb      	strb	r3, [r7, #7]
	int error = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]

	for(int i = 1; i <= TOTAL_IR_SENSORS/2; i++)
 800121e:	2301      	movs	r3, #1
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	e03f      	b.n	80012a4 <iExponentialWeightedError+0x98>
	{
		error += ((sensor_data & (1 << (TOTAL_IR_SENSORS/2 - i))) >> (TOTAL_IR_SENSORS/2 - i)) * pow(weight, i);
 8001224:	79fa      	ldrb	r2, [r7, #7]
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	f1c3 0304 	rsb	r3, r3, #4
 800122c:	2101      	movs	r1, #1
 800122e:	fa01 f303 	lsl.w	r3, r1, r3
 8001232:	401a      	ands	r2, r3
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	f1c3 0304 	rsb	r3, r3, #4
 800123a:	fa42 f303 	asr.w	r3, r2, r3
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff f9b8 	bl	80005b4 <__aeabi_i2d>
 8001244:	4604      	mov	r4, r0
 8001246:	460d      	mov	r5, r1
 8001248:	6838      	ldr	r0, [r7, #0]
 800124a:	f7ff f9b3 	bl	80005b4 <__aeabi_i2d>
 800124e:	4680      	mov	r8, r0
 8001250:	4689      	mov	r9, r1
 8001252:	6938      	ldr	r0, [r7, #16]
 8001254:	f7ff f9ae 	bl	80005b4 <__aeabi_i2d>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	ec43 2b11 	vmov	d1, r2, r3
 8001260:	ec49 8b10 	vmov	d0, r8, r9
 8001264:	f008 fbd8 	bl	8009a18 <pow>
 8001268:	ec53 2b10 	vmov	r2, r3, d0
 800126c:	4620      	mov	r0, r4
 800126e:	4629      	mov	r1, r5
 8001270:	f7ff fa0a 	bl	8000688 <__aeabi_dmul>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4614      	mov	r4, r2
 800127a:	461d      	mov	r5, r3
 800127c:	6978      	ldr	r0, [r7, #20]
 800127e:	f7ff f999 	bl	80005b4 <__aeabi_i2d>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4620      	mov	r0, r4
 8001288:	4629      	mov	r1, r5
 800128a:	f7ff f847 	bl	800031c <__adddf3>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4610      	mov	r0, r2
 8001294:	4619      	mov	r1, r3
 8001296:	f7ff fca7 	bl	8000be8 <__aeabi_d2iz>
 800129a:	4603      	mov	r3, r0
 800129c:	617b      	str	r3, [r7, #20]
	for(int i = 1; i <= TOTAL_IR_SENSORS/2; i++)
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	3301      	adds	r3, #1
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	ddbc      	ble.n	8001224 <iExponentialWeightedError+0x18>
	}


	for(int i = 0; i < TOTAL_IR_SENSORS/2; i++)
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e040      	b.n	8001332 <iExponentialWeightedError+0x126>
	{
 		error += ((sensor_data & (1 << (TOTAL_IR_SENSORS/2 + i))) >> (TOTAL_IR_SENSORS/2 + i)) * -1* pow(weight, i + 1);
 80012b0:	79fa      	ldrb	r2, [r7, #7]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	3304      	adds	r3, #4
 80012b6:	2101      	movs	r1, #1
 80012b8:	fa01 f303 	lsl.w	r3, r1, r3
 80012bc:	401a      	ands	r2, r3
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	3304      	adds	r3, #4
 80012c2:	fa42 f303 	asr.w	r3, r2, r3
 80012c6:	425b      	negs	r3, r3
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff f973 	bl	80005b4 <__aeabi_i2d>
 80012ce:	4604      	mov	r4, r0
 80012d0:	460d      	mov	r5, r1
 80012d2:	6838      	ldr	r0, [r7, #0]
 80012d4:	f7ff f96e 	bl	80005b4 <__aeabi_i2d>
 80012d8:	4680      	mov	r8, r0
 80012da:	4689      	mov	r9, r1
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	3301      	adds	r3, #1
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff f967 	bl	80005b4 <__aeabi_i2d>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	ec43 2b11 	vmov	d1, r2, r3
 80012ee:	ec49 8b10 	vmov	d0, r8, r9
 80012f2:	f008 fb91 	bl	8009a18 <pow>
 80012f6:	ec53 2b10 	vmov	r2, r3, d0
 80012fa:	4620      	mov	r0, r4
 80012fc:	4629      	mov	r1, r5
 80012fe:	f7ff f9c3 	bl	8000688 <__aeabi_dmul>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4614      	mov	r4, r2
 8001308:	461d      	mov	r5, r3
 800130a:	6978      	ldr	r0, [r7, #20]
 800130c:	f7ff f952 	bl	80005b4 <__aeabi_i2d>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4620      	mov	r0, r4
 8001316:	4629      	mov	r1, r5
 8001318:	f7ff f800 	bl	800031c <__adddf3>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4610      	mov	r0, r2
 8001322:	4619      	mov	r1, r3
 8001324:	f7ff fc60 	bl	8000be8 <__aeabi_d2iz>
 8001328:	4603      	mov	r3, r0
 800132a:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < TOTAL_IR_SENSORS/2; i++)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	3301      	adds	r3, #1
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2b03      	cmp	r3, #3
 8001336:	ddbb      	ble.n	80012b0 <iExponentialWeightedError+0xa4>
	}

	return error;
 8001338:	697b      	ldr	r3, [r7, #20]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001344 <svMotorRunTask>:
	return error;
}


static void svMotorRunTask(void* parameters)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		vRunMotor(500, -500);
 800134c:	4909      	ldr	r1, [pc, #36]	; (8001374 <svMotorRunTask+0x30>)
 800134e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001352:	f000 f811 	bl	8001378 <vRunMotor>
		vTaskDelay(pdMS_TO_TICKS(5000));
 8001356:	f241 3088 	movw	r0, #5000	; 0x1388
 800135a:	f004 f9b5 	bl	80056c8 <vTaskDelay>
		vRunMotor(-500, 500);
 800135e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001362:	4804      	ldr	r0, [pc, #16]	; (8001374 <svMotorRunTask+0x30>)
 8001364:	f000 f808 	bl	8001378 <vRunMotor>
		vTaskDelay(pdMS_TO_TICKS(5000));
 8001368:	f241 3088 	movw	r0, #5000	; 0x1388
 800136c:	f004 f9ac 	bl	80056c8 <vTaskDelay>
		vRunMotor(500, -500);
 8001370:	e7ec      	b.n	800134c <svMotorRunTask+0x8>
 8001372:	bf00      	nop
 8001374:	fffffe0c 	.word	0xfffffe0c

08001378 <vRunMotor>:
	}
}

void vRunMotor(int left_speed, int right_speed)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
	assert(left_speed <= MAX_PWM_VAL && left_speed >= -1*MAX_PWM_VAL);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001388:	dc03      	bgt.n	8001392 <vRunMotor+0x1a>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001390:	da06      	bge.n	80013a0 <vRunMotor+0x28>
 8001392:	4b25      	ldr	r3, [pc, #148]	; (8001428 <vRunMotor+0xb0>)
 8001394:	4a25      	ldr	r2, [pc, #148]	; (800142c <vRunMotor+0xb4>)
 8001396:	f240 11f1 	movw	r1, #497	; 0x1f1
 800139a:	4825      	ldr	r0, [pc, #148]	; (8001430 <vRunMotor+0xb8>)
 800139c:	f007 fb46 	bl	8008a2c <__assert_func>
	assert(right_speed < MAX_PWM_VAL && right_speed >= -1*MAX_PWM_VAL);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013a6:	da03      	bge.n	80013b0 <vRunMotor+0x38>
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80013ae:	da06      	bge.n	80013be <vRunMotor+0x46>
 80013b0:	4b20      	ldr	r3, [pc, #128]	; (8001434 <vRunMotor+0xbc>)
 80013b2:	4a1e      	ldr	r2, [pc, #120]	; (800142c <vRunMotor+0xb4>)
 80013b4:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 80013b8:	481d      	ldr	r0, [pc, #116]	; (8001430 <vRunMotor+0xb8>)
 80013ba:	f007 fb37 	bl	8008a2c <__assert_func>

	if(left_speed < 0)//roate backwards
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	da0c      	bge.n	80013de <vRunMotor+0x66>
	{
		__HAL_TIM_SetCompare(LEFT_MOTOR_TIM, LEFT_MOTOR_PIN_1_CH, abs(left_speed));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80013ca:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80013ce:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <vRunMotor+0xc0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(LEFT_MOTOR_TIM, LEFT_MOTOR_PIN_2_CH, 0);
 80013d4:	4b18      	ldr	r3, [pc, #96]	; (8001438 <vRunMotor+0xc0>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2200      	movs	r2, #0
 80013da:	635a      	str	r2, [r3, #52]	; 0x34
 80013dc:	e007      	b.n	80013ee <vRunMotor+0x76>
	}
	else
	{
		__HAL_TIM_SetCompare(LEFT_MOTOR_TIM, LEFT_MOTOR_PIN_2_CH, left_speed);
 80013de:	4b16      	ldr	r3, [pc, #88]	; (8001438 <vRunMotor+0xc0>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(LEFT_MOTOR_TIM, LEFT_MOTOR_PIN_1_CH, 0);
 80013e6:	4b14      	ldr	r3, [pc, #80]	; (8001438 <vRunMotor+0xc0>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2200      	movs	r2, #0
 80013ec:	635a      	str	r2, [r3, #52]	; 0x34
	}

	if(right_speed < 0)//roate backwards
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	da0c      	bge.n	800140e <vRunMotor+0x96>
	{
		__HAL_TIM_SetCompare(RIGHT_MOTOR_TIM, RIGHT_MOTOR_PIN_1_CH, abs(right_speed));
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80013fa:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80013fe:	4b0f      	ldr	r3, [pc, #60]	; (800143c <vRunMotor+0xc4>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(RIGHT_MOTOR_TIM, RIGHT_MOTOR_PIN_2_CH, 0);
 8001404:	4b0d      	ldr	r3, [pc, #52]	; (800143c <vRunMotor+0xc4>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2200      	movs	r2, #0
 800140a:	639a      	str	r2, [r3, #56]	; 0x38
	{
		__HAL_TIM_SetCompare(RIGHT_MOTOR_TIM, RIGHT_MOTOR_PIN_2_CH, right_speed);
		__HAL_TIM_SetCompare(RIGHT_MOTOR_TIM, RIGHT_MOTOR_PIN_1_CH, 0);
	}

}
 800140c:	e007      	b.n	800141e <vRunMotor+0xa6>
		__HAL_TIM_SetCompare(RIGHT_MOTOR_TIM, RIGHT_MOTOR_PIN_2_CH, right_speed);
 800140e:	4b0b      	ldr	r3, [pc, #44]	; (800143c <vRunMotor+0xc4>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	683a      	ldr	r2, [r7, #0]
 8001414:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SetCompare(RIGHT_MOTOR_TIM, RIGHT_MOTOR_PIN_1_CH, 0);
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <vRunMotor+0xc4>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2200      	movs	r2, #0
 800141c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	0800a9e0 	.word	0x0800a9e0
 800142c:	0800aaf4 	.word	0x0800aaf4
 8001430:	0800aa1c 	.word	0x0800aa1c
 8001434:	0800aa30 	.word	0x0800aa30
 8001438:	20003020 	.word	0x20003020
 800143c:	20002fd4 	.word	0x20002fd4

08001440 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a04      	ldr	r2, [pc, #16]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d101      	bne.n	8001456 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001452:	f000 fa21 	bl	8001898 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40001000 	.word	0x40001000

08001464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001468:	b672      	cpsid	i
}
 800146a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800146c:	e7fe      	b.n	800146c <Error_Handler+0x8>
	...

08001470 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001476:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <HAL_MspInit+0x44>)
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	4a0e      	ldr	r2, [pc, #56]	; (80014b4 <HAL_MspInit+0x44>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6193      	str	r3, [r2, #24]
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <HAL_MspInit+0x44>)
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <HAL_MspInit+0x44>)
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	4a08      	ldr	r2, [pc, #32]	; (80014b4 <HAL_MspInit+0x44>)
 8001494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001498:	61d3      	str	r3, [r2, #28]
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_MspInit+0x44>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 80014a6:	f005 fad7 	bl	8006a58 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40021000 	.word	0x40021000

080014b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <HAL_TIM_Base_MspInit+0x38>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d10b      	bne.n	80014e2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014ca:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <HAL_TIM_Base_MspInit+0x3c>)
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	4a09      	ldr	r2, [pc, #36]	; (80014f4 <HAL_TIM_Base_MspInit+0x3c>)
 80014d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014d4:	6193      	str	r3, [r2, #24]
 80014d6:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <HAL_TIM_Base_MspInit+0x3c>)
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80014e2:	bf00      	nop
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40012c00 	.word	0x40012c00
 80014f4:	40021000 	.word	0x40021000

080014f8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a13      	ldr	r2, [pc, #76]	; (8001554 <HAL_TIM_PWM_MspInit+0x5c>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d10c      	bne.n	8001524 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800150a:	4b13      	ldr	r3, [pc, #76]	; (8001558 <HAL_TIM_PWM_MspInit+0x60>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	4a12      	ldr	r2, [pc, #72]	; (8001558 <HAL_TIM_PWM_MspInit+0x60>)
 8001510:	f043 0302 	orr.w	r3, r3, #2
 8001514:	61d3      	str	r3, [r2, #28]
 8001516:	4b10      	ldr	r3, [pc, #64]	; (8001558 <HAL_TIM_PWM_MspInit+0x60>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001522:	e010      	b.n	8001546 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a0c      	ldr	r2, [pc, #48]	; (800155c <HAL_TIM_PWM_MspInit+0x64>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d10b      	bne.n	8001546 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <HAL_TIM_PWM_MspInit+0x60>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	4a09      	ldr	r2, [pc, #36]	; (8001558 <HAL_TIM_PWM_MspInit+0x60>)
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	61d3      	str	r3, [r2, #28]
 800153a:	4b07      	ldr	r3, [pc, #28]	; (8001558 <HAL_TIM_PWM_MspInit+0x60>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]
}
 8001546:	bf00      	nop
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	40000400 	.word	0x40000400
 8001558:	40021000 	.word	0x40021000
 800155c:	40000800 	.word	0x40000800

08001560 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	; 0x28
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a22      	ldr	r2, [pc, #136]	; (8001608 <HAL_TIM_MspPostInit+0xa8>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d11c      	bne.n	80015bc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001582:	4b22      	ldr	r3, [pc, #136]	; (800160c <HAL_TIM_MspPostInit+0xac>)
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	4a21      	ldr	r2, [pc, #132]	; (800160c <HAL_TIM_MspPostInit+0xac>)
 8001588:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800158c:	6153      	str	r3, [r2, #20]
 800158e:	4b1f      	ldr	r3, [pc, #124]	; (800160c <HAL_TIM_MspPostInit+0xac>)
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800159a:	23c0      	movs	r3, #192	; 0xc0
 800159c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015aa:	2302      	movs	r3, #2
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	4619      	mov	r1, r3
 80015b4:	4816      	ldr	r0, [pc, #88]	; (8001610 <HAL_TIM_MspPostInit+0xb0>)
 80015b6:	f000 fa71 	bl	8001a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80015ba:	e021      	b.n	8001600 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM4)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a14      	ldr	r2, [pc, #80]	; (8001614 <HAL_TIM_MspPostInit+0xb4>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d11c      	bne.n	8001600 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <HAL_TIM_MspPostInit+0xac>)
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	4a10      	ldr	r2, [pc, #64]	; (800160c <HAL_TIM_MspPostInit+0xac>)
 80015cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80015d0:	6153      	str	r3, [r2, #20]
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <HAL_TIM_MspPostInit+0xac>)
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80015de:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80015e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015f0:	2302      	movs	r3, #2
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	4619      	mov	r1, r3
 80015fa:	4807      	ldr	r0, [pc, #28]	; (8001618 <HAL_TIM_MspPostInit+0xb8>)
 80015fc:	f000 fa4e 	bl	8001a9c <HAL_GPIO_Init>
}
 8001600:	bf00      	nop
 8001602:	3728      	adds	r7, #40	; 0x28
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40000400 	.word	0x40000400
 800160c:	40021000 	.word	0x40021000
 8001610:	48000800 	.word	0x48000800
 8001614:	40000800 	.word	0x40000800
 8001618:	48000c00 	.word	0x48000c00

0800161c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08c      	sub	sp, #48	; 0x30
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800162c:	2200      	movs	r2, #0
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	2036      	movs	r0, #54	; 0x36
 8001632:	f000 fa09 	bl	8001a48 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001636:	2036      	movs	r0, #54	; 0x36
 8001638:	f000 fa22 	bl	8001a80 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800163c:	4b1f      	ldr	r3, [pc, #124]	; (80016bc <HAL_InitTick+0xa0>)
 800163e:	69db      	ldr	r3, [r3, #28]
 8001640:	4a1e      	ldr	r2, [pc, #120]	; (80016bc <HAL_InitTick+0xa0>)
 8001642:	f043 0310 	orr.w	r3, r3, #16
 8001646:	61d3      	str	r3, [r2, #28]
 8001648:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <HAL_InitTick+0xa0>)
 800164a:	69db      	ldr	r3, [r3, #28]
 800164c:	f003 0310 	and.w	r3, r3, #16
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001654:	f107 0210 	add.w	r2, r7, #16
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	4611      	mov	r1, r2
 800165e:	4618      	mov	r0, r3
 8001660:	f001 fce2 	bl	8003028 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001664:	f001 fcbe 	bl	8002fe4 <HAL_RCC_GetPCLK1Freq>
 8001668:	4603      	mov	r3, r0
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800166e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001670:	4a13      	ldr	r2, [pc, #76]	; (80016c0 <HAL_InitTick+0xa4>)
 8001672:	fba2 2303 	umull	r2, r3, r2, r3
 8001676:	0c9b      	lsrs	r3, r3, #18
 8001678:	3b01      	subs	r3, #1
 800167a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <HAL_InitTick+0xa8>)
 800167e:	4a12      	ldr	r2, [pc, #72]	; (80016c8 <HAL_InitTick+0xac>)
 8001680:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <HAL_InitTick+0xa8>)
 8001684:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001688:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800168a:	4a0e      	ldr	r2, [pc, #56]	; (80016c4 <HAL_InitTick+0xa8>)
 800168c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800168e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001690:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <HAL_InitTick+0xa8>)
 8001692:	2200      	movs	r2, #0
 8001694:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <HAL_InitTick+0xa8>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800169c:	4809      	ldr	r0, [pc, #36]	; (80016c4 <HAL_InitTick+0xa8>)
 800169e:	f001 fea5 	bl	80033ec <HAL_TIM_Base_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d104      	bne.n	80016b2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80016a8:	4806      	ldr	r0, [pc, #24]	; (80016c4 <HAL_InitTick+0xa8>)
 80016aa:	f001 fef7 	bl	800349c <HAL_TIM_Base_Start_IT>
 80016ae:	4603      	mov	r3, r0
 80016b0:	e000      	b.n	80016b4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3730      	adds	r7, #48	; 0x30
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40021000 	.word	0x40021000
 80016c0:	431bde83 	.word	0x431bde83
 80016c4:	200030b8 	.word	0x200030b8
 80016c8:	40001000 	.word	0x40001000

080016cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <NMI_Handler+0x4>

080016d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d6:	e7fe      	b.n	80016d6 <HardFault_Handler+0x4>

080016d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016dc:	e7fe      	b.n	80016dc <MemManage_Handler+0x4>

080016de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e2:	e7fe      	b.n	80016e2 <BusFault_Handler+0x4>

080016e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <UsageFault_Handler+0x4>

080016ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016fc:	4802      	ldr	r0, [pc, #8]	; (8001708 <TIM6_DAC_IRQHandler+0x10>)
 80016fe:	f002 f88f 	bl	8003820 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200030b8 	.word	0x200030b8

0800170c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
	return 1;
 8001710:	2301      	movs	r3, #1
}
 8001712:	4618      	mov	r0, r3
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <_kill>:

int _kill(int pid, int sig)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001726:	f007 f99f 	bl	8008a68 <__errno>
 800172a:	4603      	mov	r3, r0
 800172c:	2216      	movs	r2, #22
 800172e:	601a      	str	r2, [r3, #0]
	return -1;
 8001730:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001734:	4618      	mov	r0, r3
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <_exit>:

void _exit (int status)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001744:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff ffe7 	bl	800171c <_kill>
	while (1) {}		/* Make sure we hang here */
 800174e:	e7fe      	b.n	800174e <_exit+0x12>

08001750 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	e00a      	b.n	8001778 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001762:	f3af 8000 	nop.w
 8001766:	4601      	mov	r1, r0
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	1c5a      	adds	r2, r3, #1
 800176c:	60ba      	str	r2, [r7, #8]
 800176e:	b2ca      	uxtb	r2, r1
 8001770:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	3301      	adds	r3, #1
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	429a      	cmp	r2, r3
 800177e:	dbf0      	blt.n	8001762 <_read+0x12>
	}

return len;
 8001780:	687b      	ldr	r3, [r7, #4]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <_close>:
	}
	return len;
}

int _close(int file)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
	return -1;
 8001792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001796:	4618      	mov	r0, r3
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017b2:	605a      	str	r2, [r3, #4]
	return 0;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <_isatty>:

int _isatty(int file)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
	return 1;
 80017ca:	2301      	movs	r3, #1
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
	return 0;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <SystemInit+0x20>)
 80017fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017fe:	4a05      	ldr	r2, [pc, #20]	; (8001814 <SystemInit+0x20>)
 8001800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001818:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001850 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800181c:	480d      	ldr	r0, [pc, #52]	; (8001854 <LoopForever+0x6>)
  ldr r1, =_edata
 800181e:	490e      	ldr	r1, [pc, #56]	; (8001858 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001820:	4a0e      	ldr	r2, [pc, #56]	; (800185c <LoopForever+0xe>)
  movs r3, #0
 8001822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001824:	e002      	b.n	800182c <LoopCopyDataInit>

08001826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800182a:	3304      	adds	r3, #4

0800182c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800182c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800182e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001830:	d3f9      	bcc.n	8001826 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001832:	4a0b      	ldr	r2, [pc, #44]	; (8001860 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001834:	4c0b      	ldr	r4, [pc, #44]	; (8001864 <LoopForever+0x16>)
  movs r3, #0
 8001836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001838:	e001      	b.n	800183e <LoopFillZerobss>

0800183a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800183a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800183c:	3204      	adds	r2, #4

0800183e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800183e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001840:	d3fb      	bcc.n	800183a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001842:	f7ff ffd7 	bl	80017f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001846:	f007 f927 	bl	8008a98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800184a:	f7ff f9f5 	bl	8000c38 <main>

0800184e <LoopForever>:

LoopForever:
    b LoopForever
 800184e:	e7fe      	b.n	800184e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001850:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001858:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800185c:	0800ac60 	.word	0x0800ac60
  ldr r2, =_sbss
 8001860:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001864:	20003200 	.word	0x20003200

08001868 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001868:	e7fe      	b.n	8001868 <ADC1_2_IRQHandler>
	...

0800186c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001870:	4b08      	ldr	r3, [pc, #32]	; (8001894 <HAL_Init+0x28>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a07      	ldr	r2, [pc, #28]	; (8001894 <HAL_Init+0x28>)
 8001876:	f043 0310 	orr.w	r3, r3, #16
 800187a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800187c:	2003      	movs	r0, #3
 800187e:	f000 f8d8 	bl	8001a32 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001882:	2000      	movs	r0, #0
 8001884:	f7ff feca 	bl	800161c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001888:	f7ff fdf2 	bl	8001470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40022000 	.word	0x40022000

08001898 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_IncTick+0x20>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_IncTick+0x24>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4413      	add	r3, r2
 80018a8:	4a04      	ldr	r2, [pc, #16]	; (80018bc <HAL_IncTick+0x24>)
 80018aa:	6013      	str	r3, [r2, #0]
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	20000008 	.word	0x20000008
 80018bc:	20003104 	.word	0x20003104

080018c0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return uwTick;  
 80018c4:	4b03      	ldr	r3, [pc, #12]	; (80018d4 <HAL_GetTick+0x14>)
 80018c6:	681b      	ldr	r3, [r3, #0]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	20003104 	.word	0x20003104

080018d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <__NVIC_SetPriorityGrouping+0x44>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018f4:	4013      	ands	r3, r2
 80018f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001900:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800190a:	4a04      	ldr	r2, [pc, #16]	; (800191c <__NVIC_SetPriorityGrouping+0x44>)
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	60d3      	str	r3, [r2, #12]
}
 8001910:	bf00      	nop
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001924:	4b04      	ldr	r3, [pc, #16]	; (8001938 <__NVIC_GetPriorityGrouping+0x18>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	0a1b      	lsrs	r3, r3, #8
 800192a:	f003 0307 	and.w	r3, r3, #7
}
 800192e:	4618      	mov	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	2b00      	cmp	r3, #0
 800194c:	db0b      	blt.n	8001966 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	f003 021f 	and.w	r2, r3, #31
 8001954:	4907      	ldr	r1, [pc, #28]	; (8001974 <__NVIC_EnableIRQ+0x38>)
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	095b      	lsrs	r3, r3, #5
 800195c:	2001      	movs	r0, #1
 800195e:	fa00 f202 	lsl.w	r2, r0, r2
 8001962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	e000e100 	.word	0xe000e100

08001978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	6039      	str	r1, [r7, #0]
 8001982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001988:	2b00      	cmp	r3, #0
 800198a:	db0a      	blt.n	80019a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	b2da      	uxtb	r2, r3
 8001990:	490c      	ldr	r1, [pc, #48]	; (80019c4 <__NVIC_SetPriority+0x4c>)
 8001992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001996:	0112      	lsls	r2, r2, #4
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	440b      	add	r3, r1
 800199c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a0:	e00a      	b.n	80019b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	4908      	ldr	r1, [pc, #32]	; (80019c8 <__NVIC_SetPriority+0x50>)
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	3b04      	subs	r3, #4
 80019b0:	0112      	lsls	r2, r2, #4
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	440b      	add	r3, r1
 80019b6:	761a      	strb	r2, [r3, #24]
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000e100 	.word	0xe000e100
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b089      	sub	sp, #36	; 0x24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f1c3 0307 	rsb	r3, r3, #7
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	bf28      	it	cs
 80019ea:	2304      	movcs	r3, #4
 80019ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3304      	adds	r3, #4
 80019f2:	2b06      	cmp	r3, #6
 80019f4:	d902      	bls.n	80019fc <NVIC_EncodePriority+0x30>
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3b03      	subs	r3, #3
 80019fa:	e000      	b.n	80019fe <NVIC_EncodePriority+0x32>
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43da      	mvns	r2, r3
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	401a      	ands	r2, r3
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1e:	43d9      	mvns	r1, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	4313      	orrs	r3, r2
         );
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3724      	adds	r7, #36	; 0x24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff ff4c 	bl	80018d8 <__NVIC_SetPriorityGrouping>
}
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
 8001a54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a5a:	f7ff ff61 	bl	8001920 <__NVIC_GetPriorityGrouping>
 8001a5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	68b9      	ldr	r1, [r7, #8]
 8001a64:	6978      	ldr	r0, [r7, #20]
 8001a66:	f7ff ffb1 	bl	80019cc <NVIC_EncodePriority>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a70:	4611      	mov	r1, r2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff ff80 	bl	8001978 <__NVIC_SetPriority>
}
 8001a78:	bf00      	nop
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff ff54 	bl	800193c <__NVIC_EnableIRQ>
}
 8001a94:	bf00      	nop
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b087      	sub	sp, #28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aaa:	e154      	b.n	8001d56 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f000 8146 	beq.w	8001d50 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d00b      	beq.n	8001ae4 <HAL_GPIO_Init+0x48>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d007      	beq.n	8001ae4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ad8:	2b11      	cmp	r3, #17
 8001ada:	d003      	beq.n	8001ae4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b12      	cmp	r3, #18
 8001ae2:	d130      	bne.n	8001b46 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	2203      	movs	r2, #3
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4013      	ands	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	68da      	ldr	r2, [r3, #12]
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4013      	ands	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	091b      	lsrs	r3, r3, #4
 8001b30:	f003 0201 	and.w	r2, r3, #1
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	2203      	movs	r2, #3
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43db      	mvns	r3, r3
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d003      	beq.n	8001b86 <HAL_GPIO_Init+0xea>
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b12      	cmp	r3, #18
 8001b84:	d123      	bne.n	8001bce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	08da      	lsrs	r2, r3, #3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3208      	adds	r2, #8
 8001b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	220f      	movs	r2, #15
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	691a      	ldr	r2, [r3, #16]
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	f003 0307 	and.w	r3, r3, #7
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	08da      	lsrs	r2, r3, #3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3208      	adds	r2, #8
 8001bc8:	6939      	ldr	r1, [r7, #16]
 8001bca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	2203      	movs	r2, #3
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43db      	mvns	r3, r3
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4013      	ands	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f003 0203 	and.w	r2, r3, #3
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 80a0 	beq.w	8001d50 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c10:	4b58      	ldr	r3, [pc, #352]	; (8001d74 <HAL_GPIO_Init+0x2d8>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	4a57      	ldr	r2, [pc, #348]	; (8001d74 <HAL_GPIO_Init+0x2d8>)
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	6193      	str	r3, [r2, #24]
 8001c1c:	4b55      	ldr	r3, [pc, #340]	; (8001d74 <HAL_GPIO_Init+0x2d8>)
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c28:	4a53      	ldr	r2, [pc, #332]	; (8001d78 <HAL_GPIO_Init+0x2dc>)
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	089b      	lsrs	r3, r3, #2
 8001c2e:	3302      	adds	r3, #2
 8001c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	220f      	movs	r2, #15
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c52:	d019      	beq.n	8001c88 <HAL_GPIO_Init+0x1ec>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a49      	ldr	r2, [pc, #292]	; (8001d7c <HAL_GPIO_Init+0x2e0>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d013      	beq.n	8001c84 <HAL_GPIO_Init+0x1e8>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a48      	ldr	r2, [pc, #288]	; (8001d80 <HAL_GPIO_Init+0x2e4>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d00d      	beq.n	8001c80 <HAL_GPIO_Init+0x1e4>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a47      	ldr	r2, [pc, #284]	; (8001d84 <HAL_GPIO_Init+0x2e8>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d007      	beq.n	8001c7c <HAL_GPIO_Init+0x1e0>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a46      	ldr	r2, [pc, #280]	; (8001d88 <HAL_GPIO_Init+0x2ec>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d101      	bne.n	8001c78 <HAL_GPIO_Init+0x1dc>
 8001c74:	2304      	movs	r3, #4
 8001c76:	e008      	b.n	8001c8a <HAL_GPIO_Init+0x1ee>
 8001c78:	2305      	movs	r3, #5
 8001c7a:	e006      	b.n	8001c8a <HAL_GPIO_Init+0x1ee>
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e004      	b.n	8001c8a <HAL_GPIO_Init+0x1ee>
 8001c80:	2302      	movs	r3, #2
 8001c82:	e002      	b.n	8001c8a <HAL_GPIO_Init+0x1ee>
 8001c84:	2301      	movs	r3, #1
 8001c86:	e000      	b.n	8001c8a <HAL_GPIO_Init+0x1ee>
 8001c88:	2300      	movs	r3, #0
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	f002 0203 	and.w	r2, r2, #3
 8001c90:	0092      	lsls	r2, r2, #2
 8001c92:	4093      	lsls	r3, r2
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c9a:	4937      	ldr	r1, [pc, #220]	; (8001d78 <HAL_GPIO_Init+0x2dc>)
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	089b      	lsrs	r3, r3, #2
 8001ca0:	3302      	adds	r3, #2
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ca8:	4b38      	ldr	r3, [pc, #224]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ccc:	4a2f      	ldr	r2, [pc, #188]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cd2:	4b2e      	ldr	r3, [pc, #184]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001cf6:	4a25      	ldr	r2, [pc, #148]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cfc:	4b23      	ldr	r3, [pc, #140]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d20:	4a1a      	ldr	r2, [pc, #104]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d26:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	4013      	ands	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d4a:	4a10      	ldr	r2, [pc, #64]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	3301      	adds	r3, #1
 8001d54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f47f aea3 	bne.w	8001aac <HAL_GPIO_Init+0x10>
  }
}
 8001d66:	bf00      	nop
 8001d68:	bf00      	nop
 8001d6a:	371c      	adds	r7, #28
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40010000 	.word	0x40010000
 8001d7c:	48000400 	.word	0x48000400
 8001d80:	48000800 	.word	0x48000800
 8001d84:	48000c00 	.word	0x48000c00
 8001d88:	48001000 	.word	0x48001000
 8001d8c:	40010400 	.word	0x40010400

08001d90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691a      	ldr	r2, [r3, #16]
 8001da0:	887b      	ldrh	r3, [r7, #2]
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d002      	beq.n	8001dae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001da8:	2301      	movs	r3, #1
 8001daa:	73fb      	strb	r3, [r7, #15]
 8001dac:	e001      	b.n	8001db2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dae:	2300      	movs	r3, #0
 8001db0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	807b      	strh	r3, [r7, #2]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dd0:	787b      	ldrb	r3, [r7, #1]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dd6:	887a      	ldrh	r2, [r7, #2]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ddc:	e002      	b.n	8001de4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dde:	887a      	ldrh	r2, [r7, #2]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	1d3b      	adds	r3, r7, #4
 8001dfa:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dfc:	1d3b      	adds	r3, r7, #4
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d102      	bne.n	8001e0a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	f000 bef4 	b.w	8002bf2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e0a:	1d3b      	adds	r3, r7, #4
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f000 816a 	beq.w	80020ee <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e1a:	4bb3      	ldr	r3, [pc, #716]	; (80020e8 <HAL_RCC_OscConfig+0x2f8>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d00c      	beq.n	8001e40 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e26:	4bb0      	ldr	r3, [pc, #704]	; (80020e8 <HAL_RCC_OscConfig+0x2f8>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
 8001e2e:	2b08      	cmp	r3, #8
 8001e30:	d159      	bne.n	8001ee6 <HAL_RCC_OscConfig+0xf6>
 8001e32:	4bad      	ldr	r3, [pc, #692]	; (80020e8 <HAL_RCC_OscConfig+0x2f8>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e3e:	d152      	bne.n	8001ee6 <HAL_RCC_OscConfig+0xf6>
 8001e40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e44:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e48:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001e4c:	fa93 f3a3 	rbit	r3, r3
 8001e50:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e54:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e58:	fab3 f383 	clz	r3, r3
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	095b      	lsrs	r3, r3, #5
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d102      	bne.n	8001e72 <HAL_RCC_OscConfig+0x82>
 8001e6c:	4b9e      	ldr	r3, [pc, #632]	; (80020e8 <HAL_RCC_OscConfig+0x2f8>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	e015      	b.n	8001e9e <HAL_RCC_OscConfig+0xae>
 8001e72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e76:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001e7e:	fa93 f3a3 	rbit	r3, r3
 8001e82:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001e86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e8a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001e8e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001e92:	fa93 f3a3 	rbit	r3, r3
 8001e96:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001e9a:	4b93      	ldr	r3, [pc, #588]	; (80020e8 <HAL_RCC_OscConfig+0x2f8>)
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ea2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001ea6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001eaa:	fa92 f2a2 	rbit	r2, r2
 8001eae:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001eb2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001eb6:	fab2 f282 	clz	r2, r2
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	f042 0220 	orr.w	r2, r2, #32
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	f002 021f 	and.w	r2, r2, #31
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 810c 	beq.w	80020ec <HAL_RCC_OscConfig+0x2fc>
 8001ed4:	1d3b      	adds	r3, r7, #4
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f040 8106 	bne.w	80020ec <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	f000 be86 	b.w	8002bf2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ee6:	1d3b      	adds	r3, r7, #4
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef0:	d106      	bne.n	8001f00 <HAL_RCC_OscConfig+0x110>
 8001ef2:	4b7d      	ldr	r3, [pc, #500]	; (80020e8 <HAL_RCC_OscConfig+0x2f8>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a7c      	ldr	r2, [pc, #496]	; (80020e8 <HAL_RCC_OscConfig+0x2f8>)
 8001ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	e030      	b.n	8001f62 <HAL_RCC_OscConfig+0x172>
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10c      	bne.n	8001f24 <HAL_RCC_OscConfig+0x134>
 8001f0a:	4b77      	ldr	r3, [pc, #476]	; (80020e8 <HAL_RCC_OscConfig+0x2f8>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a76      	ldr	r2, [pc, #472]	; (80020e8 <HAL_RCC_OscConfig+0x2f8>)
 8001f10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	4b74      	ldr	r3, [pc, #464]	; (80020e8 <HAL_RCC_OscConfig+0x2f8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a73      	ldr	r2, [pc, #460]	; (80020e8 <HAL_RCC_OscConfig+0x2f8>)
 8001f1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	e01e      	b.n	8001f62 <HAL_RCC_OscConfig+0x172>
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f2e:	d10c      	bne.n	8001f4a <HAL_RCC_OscConfig+0x15a>
 8001f30:	4b6d      	ldr	r3, [pc, #436]	; (80020e8 <HAL_RCC_OscConfig+0x2f8>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a6c      	ldr	r2, [pc, #432]	; (80020e8 <HAL_RCC_OscConfig+0x2f8>)
 8001f36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4b6a      	ldr	r3, [pc, #424]	; (80020e8 <HAL_RCC_OscConfig+0x2f8>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a69      	ldr	r2, [pc, #420]	; (80020e8 <HAL_RCC_OscConfig+0x2f8>)
 8001f42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	e00b      	b.n	8001f62 <HAL_RCC_OscConfig+0x172>
 8001f4a:	4b67      	ldr	r3, [pc, #412]	; (80020e8 <HAL_RCC_OscConfig+0x2f8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a66      	ldr	r2, [pc, #408]	; (80020e8 <HAL_RCC_OscConfig+0x2f8>)
 8001f50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	4b64      	ldr	r3, [pc, #400]	; (80020e8 <HAL_RCC_OscConfig+0x2f8>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a63      	ldr	r2, [pc, #396]	; (80020e8 <HAL_RCC_OscConfig+0x2f8>)
 8001f5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f60:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f62:	4b61      	ldr	r3, [pc, #388]	; (80020e8 <HAL_RCC_OscConfig+0x2f8>)
 8001f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f66:	f023 020f 	bic.w	r2, r3, #15
 8001f6a:	1d3b      	adds	r3, r7, #4
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	495d      	ldr	r1, [pc, #372]	; (80020e8 <HAL_RCC_OscConfig+0x2f8>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f76:	1d3b      	adds	r3, r7, #4
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d059      	beq.n	8002034 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f80:	f7ff fc9e 	bl	80018c0 <HAL_GetTick>
 8001f84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f88:	e00a      	b.n	8001fa0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f8a:	f7ff fc99 	bl	80018c0 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b64      	cmp	r3, #100	; 0x64
 8001f98:	d902      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	f000 be29 	b.w	8002bf2 <HAL_RCC_OscConfig+0xe02>
 8001fa0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fa4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001fac:	fa93 f3a3 	rbit	r3, r3
 8001fb0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001fb4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb8:	fab3 f383 	clz	r3, r3
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d102      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x1e2>
 8001fcc:	4b46      	ldr	r3, [pc, #280]	; (80020e8 <HAL_RCC_OscConfig+0x2f8>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	e015      	b.n	8001ffe <HAL_RCC_OscConfig+0x20e>
 8001fd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fd6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fda:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001fde:	fa93 f3a3 	rbit	r3, r3
 8001fe2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001fe6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fea:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001fee:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001ff2:	fa93 f3a3 	rbit	r3, r3
 8001ff6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001ffa:	4b3b      	ldr	r3, [pc, #236]	; (80020e8 <HAL_RCC_OscConfig+0x2f8>)
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002002:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002006:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800200a:	fa92 f2a2 	rbit	r2, r2
 800200e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002012:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002016:	fab2 f282 	clz	r2, r2
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	f042 0220 	orr.w	r2, r2, #32
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	f002 021f 	and.w	r2, r2, #31
 8002026:	2101      	movs	r1, #1
 8002028:	fa01 f202 	lsl.w	r2, r1, r2
 800202c:	4013      	ands	r3, r2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0ab      	beq.n	8001f8a <HAL_RCC_OscConfig+0x19a>
 8002032:	e05c      	b.n	80020ee <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002034:	f7ff fc44 	bl	80018c0 <HAL_GetTick>
 8002038:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800203c:	e00a      	b.n	8002054 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800203e:	f7ff fc3f 	bl	80018c0 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b64      	cmp	r3, #100	; 0x64
 800204c:	d902      	bls.n	8002054 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	f000 bdcf 	b.w	8002bf2 <HAL_RCC_OscConfig+0xe02>
 8002054:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002058:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002060:	fa93 f3a3 	rbit	r3, r3
 8002064:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002068:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800206c:	fab3 f383 	clz	r3, r3
 8002070:	b2db      	uxtb	r3, r3
 8002072:	095b      	lsrs	r3, r3, #5
 8002074:	b2db      	uxtb	r3, r3
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b01      	cmp	r3, #1
 800207e:	d102      	bne.n	8002086 <HAL_RCC_OscConfig+0x296>
 8002080:	4b19      	ldr	r3, [pc, #100]	; (80020e8 <HAL_RCC_OscConfig+0x2f8>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	e015      	b.n	80020b2 <HAL_RCC_OscConfig+0x2c2>
 8002086:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800208a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002092:	fa93 f3a3 	rbit	r3, r3
 8002096:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800209a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800209e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80020a2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80020a6:	fa93 f3a3 	rbit	r3, r3
 80020aa:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80020ae:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <HAL_RCC_OscConfig+0x2f8>)
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020b6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80020ba:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80020be:	fa92 f2a2 	rbit	r2, r2
 80020c2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80020c6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80020ca:	fab2 f282 	clz	r2, r2
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	f042 0220 	orr.w	r2, r2, #32
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	f002 021f 	and.w	r2, r2, #31
 80020da:	2101      	movs	r1, #1
 80020dc:	fa01 f202 	lsl.w	r2, r1, r2
 80020e0:	4013      	ands	r3, r2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1ab      	bne.n	800203e <HAL_RCC_OscConfig+0x24e>
 80020e6:	e002      	b.n	80020ee <HAL_RCC_OscConfig+0x2fe>
 80020e8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ee:	1d3b      	adds	r3, r7, #4
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 816f 	beq.w	80023dc <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80020fe:	4bd0      	ldr	r3, [pc, #832]	; (8002440 <HAL_RCC_OscConfig+0x650>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 030c 	and.w	r3, r3, #12
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00b      	beq.n	8002122 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800210a:	4bcd      	ldr	r3, [pc, #820]	; (8002440 <HAL_RCC_OscConfig+0x650>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f003 030c 	and.w	r3, r3, #12
 8002112:	2b08      	cmp	r3, #8
 8002114:	d16c      	bne.n	80021f0 <HAL_RCC_OscConfig+0x400>
 8002116:	4bca      	ldr	r3, [pc, #808]	; (8002440 <HAL_RCC_OscConfig+0x650>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d166      	bne.n	80021f0 <HAL_RCC_OscConfig+0x400>
 8002122:	2302      	movs	r3, #2
 8002124:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002128:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800212c:	fa93 f3a3 	rbit	r3, r3
 8002130:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002134:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002138:	fab3 f383 	clz	r3, r3
 800213c:	b2db      	uxtb	r3, r3
 800213e:	095b      	lsrs	r3, r3, #5
 8002140:	b2db      	uxtb	r3, r3
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b01      	cmp	r3, #1
 800214a:	d102      	bne.n	8002152 <HAL_RCC_OscConfig+0x362>
 800214c:	4bbc      	ldr	r3, [pc, #752]	; (8002440 <HAL_RCC_OscConfig+0x650>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	e013      	b.n	800217a <HAL_RCC_OscConfig+0x38a>
 8002152:	2302      	movs	r3, #2
 8002154:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002158:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800215c:	fa93 f3a3 	rbit	r3, r3
 8002160:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002164:	2302      	movs	r3, #2
 8002166:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800216a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800216e:	fa93 f3a3 	rbit	r3, r3
 8002172:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002176:	4bb2      	ldr	r3, [pc, #712]	; (8002440 <HAL_RCC_OscConfig+0x650>)
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	2202      	movs	r2, #2
 800217c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002180:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002184:	fa92 f2a2 	rbit	r2, r2
 8002188:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800218c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002190:	fab2 f282 	clz	r2, r2
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	f042 0220 	orr.w	r2, r2, #32
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	f002 021f 	and.w	r2, r2, #31
 80021a0:	2101      	movs	r1, #1
 80021a2:	fa01 f202 	lsl.w	r2, r1, r2
 80021a6:	4013      	ands	r3, r2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d007      	beq.n	80021bc <HAL_RCC_OscConfig+0x3cc>
 80021ac:	1d3b      	adds	r3, r7, #4
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d002      	beq.n	80021bc <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	f000 bd1b 	b.w	8002bf2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021bc:	4ba0      	ldr	r3, [pc, #640]	; (8002440 <HAL_RCC_OscConfig+0x650>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021c4:	1d3b      	adds	r3, r7, #4
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	21f8      	movs	r1, #248	; 0xf8
 80021cc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80021d4:	fa91 f1a1 	rbit	r1, r1
 80021d8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80021dc:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80021e0:	fab1 f181 	clz	r1, r1
 80021e4:	b2c9      	uxtb	r1, r1
 80021e6:	408b      	lsls	r3, r1
 80021e8:	4995      	ldr	r1, [pc, #596]	; (8002440 <HAL_RCC_OscConfig+0x650>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ee:	e0f5      	b.n	80023dc <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021f0:	1d3b      	adds	r3, r7, #4
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f000 8085 	beq.w	8002306 <HAL_RCC_OscConfig+0x516>
 80021fc:	2301      	movs	r3, #1
 80021fe:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002202:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002206:	fa93 f3a3 	rbit	r3, r3
 800220a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800220e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002212:	fab3 f383 	clz	r3, r3
 8002216:	b2db      	uxtb	r3, r3
 8002218:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800221c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	461a      	mov	r2, r3
 8002224:	2301      	movs	r3, #1
 8002226:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002228:	f7ff fb4a 	bl	80018c0 <HAL_GetTick>
 800222c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002230:	e00a      	b.n	8002248 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002232:	f7ff fb45 	bl	80018c0 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d902      	bls.n	8002248 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	f000 bcd5 	b.w	8002bf2 <HAL_RCC_OscConfig+0xe02>
 8002248:	2302      	movs	r3, #2
 800224a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002252:	fa93 f3a3 	rbit	r3, r3
 8002256:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800225a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225e:	fab3 f383 	clz	r3, r3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	095b      	lsrs	r3, r3, #5
 8002266:	b2db      	uxtb	r3, r3
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b01      	cmp	r3, #1
 8002270:	d102      	bne.n	8002278 <HAL_RCC_OscConfig+0x488>
 8002272:	4b73      	ldr	r3, [pc, #460]	; (8002440 <HAL_RCC_OscConfig+0x650>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	e013      	b.n	80022a0 <HAL_RCC_OscConfig+0x4b0>
 8002278:	2302      	movs	r3, #2
 800227a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002282:	fa93 f3a3 	rbit	r3, r3
 8002286:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800228a:	2302      	movs	r3, #2
 800228c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002290:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002294:	fa93 f3a3 	rbit	r3, r3
 8002298:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800229c:	4b68      	ldr	r3, [pc, #416]	; (8002440 <HAL_RCC_OscConfig+0x650>)
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	2202      	movs	r2, #2
 80022a2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80022a6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80022aa:	fa92 f2a2 	rbit	r2, r2
 80022ae:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80022b2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80022b6:	fab2 f282 	clz	r2, r2
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	f042 0220 	orr.w	r2, r2, #32
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	f002 021f 	and.w	r2, r2, #31
 80022c6:	2101      	movs	r1, #1
 80022c8:	fa01 f202 	lsl.w	r2, r1, r2
 80022cc:	4013      	ands	r3, r2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0af      	beq.n	8002232 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d2:	4b5b      	ldr	r3, [pc, #364]	; (8002440 <HAL_RCC_OscConfig+0x650>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022da:	1d3b      	adds	r3, r7, #4
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	21f8      	movs	r1, #248	; 0xf8
 80022e2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80022ea:	fa91 f1a1 	rbit	r1, r1
 80022ee:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80022f2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80022f6:	fab1 f181 	clz	r1, r1
 80022fa:	b2c9      	uxtb	r1, r1
 80022fc:	408b      	lsls	r3, r1
 80022fe:	4950      	ldr	r1, [pc, #320]	; (8002440 <HAL_RCC_OscConfig+0x650>)
 8002300:	4313      	orrs	r3, r2
 8002302:	600b      	str	r3, [r1, #0]
 8002304:	e06a      	b.n	80023dc <HAL_RCC_OscConfig+0x5ec>
 8002306:	2301      	movs	r3, #1
 8002308:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002310:	fa93 f3a3 	rbit	r3, r3
 8002314:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002318:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800231c:	fab3 f383 	clz	r3, r3
 8002320:	b2db      	uxtb	r3, r3
 8002322:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002326:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	461a      	mov	r2, r3
 800232e:	2300      	movs	r3, #0
 8002330:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002332:	f7ff fac5 	bl	80018c0 <HAL_GetTick>
 8002336:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233a:	e00a      	b.n	8002352 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800233c:	f7ff fac0 	bl	80018c0 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d902      	bls.n	8002352 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	f000 bc50 	b.w	8002bf2 <HAL_RCC_OscConfig+0xe02>
 8002352:	2302      	movs	r3, #2
 8002354:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002358:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800235c:	fa93 f3a3 	rbit	r3, r3
 8002360:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002364:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002368:	fab3 f383 	clz	r3, r3
 800236c:	b2db      	uxtb	r3, r3
 800236e:	095b      	lsrs	r3, r3, #5
 8002370:	b2db      	uxtb	r3, r3
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b01      	cmp	r3, #1
 800237a:	d102      	bne.n	8002382 <HAL_RCC_OscConfig+0x592>
 800237c:	4b30      	ldr	r3, [pc, #192]	; (8002440 <HAL_RCC_OscConfig+0x650>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	e013      	b.n	80023aa <HAL_RCC_OscConfig+0x5ba>
 8002382:	2302      	movs	r3, #2
 8002384:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002388:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800238c:	fa93 f3a3 	rbit	r3, r3
 8002390:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002394:	2302      	movs	r3, #2
 8002396:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800239a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800239e:	fa93 f3a3 	rbit	r3, r3
 80023a2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80023a6:	4b26      	ldr	r3, [pc, #152]	; (8002440 <HAL_RCC_OscConfig+0x650>)
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	2202      	movs	r2, #2
 80023ac:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80023b0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80023b4:	fa92 f2a2 	rbit	r2, r2
 80023b8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80023bc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80023c0:	fab2 f282 	clz	r2, r2
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	f042 0220 	orr.w	r2, r2, #32
 80023ca:	b2d2      	uxtb	r2, r2
 80023cc:	f002 021f 	and.w	r2, r2, #31
 80023d0:	2101      	movs	r1, #1
 80023d2:	fa01 f202 	lsl.w	r2, r1, r2
 80023d6:	4013      	ands	r3, r2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1af      	bne.n	800233c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023dc:	1d3b      	adds	r3, r7, #4
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 80da 	beq.w	80025a0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023ec:	1d3b      	adds	r3, r7, #4
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d069      	beq.n	80024ca <HAL_RCC_OscConfig+0x6da>
 80023f6:	2301      	movs	r3, #1
 80023f8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002400:	fa93 f3a3 	rbit	r3, r3
 8002404:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002408:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800240c:	fab3 f383 	clz	r3, r3
 8002410:	b2db      	uxtb	r3, r3
 8002412:	461a      	mov	r2, r3
 8002414:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <HAL_RCC_OscConfig+0x654>)
 8002416:	4413      	add	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	461a      	mov	r2, r3
 800241c:	2301      	movs	r3, #1
 800241e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002420:	f7ff fa4e 	bl	80018c0 <HAL_GetTick>
 8002424:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002428:	e00e      	b.n	8002448 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800242a:	f7ff fa49 	bl	80018c0 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d906      	bls.n	8002448 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e3d9      	b.n	8002bf2 <HAL_RCC_OscConfig+0xe02>
 800243e:	bf00      	nop
 8002440:	40021000 	.word	0x40021000
 8002444:	10908120 	.word	0x10908120
 8002448:	2302      	movs	r3, #2
 800244a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002452:	fa93 f3a3 	rbit	r3, r3
 8002456:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800245a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800245e:	2202      	movs	r2, #2
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	fa93 f2a3 	rbit	r2, r3
 800246c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002476:	2202      	movs	r2, #2
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	fa93 f2a3 	rbit	r2, r3
 8002484:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002488:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800248a:	4ba5      	ldr	r3, [pc, #660]	; (8002720 <HAL_RCC_OscConfig+0x930>)
 800248c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800248e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002492:	2102      	movs	r1, #2
 8002494:	6019      	str	r1, [r3, #0]
 8002496:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	fa93 f1a3 	rbit	r1, r3
 80024a0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80024a4:	6019      	str	r1, [r3, #0]
  return result;
 80024a6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	fab3 f383 	clz	r3, r3
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	f003 031f 	and.w	r3, r3, #31
 80024bc:	2101      	movs	r1, #1
 80024be:	fa01 f303 	lsl.w	r3, r1, r3
 80024c2:	4013      	ands	r3, r2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0b0      	beq.n	800242a <HAL_RCC_OscConfig+0x63a>
 80024c8:	e06a      	b.n	80025a0 <HAL_RCC_OscConfig+0x7b0>
 80024ca:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80024ce:	2201      	movs	r2, #1
 80024d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	fa93 f2a3 	rbit	r2, r3
 80024dc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80024e0:	601a      	str	r2, [r3, #0]
  return result;
 80024e2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80024e6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024e8:	fab3 f383 	clz	r3, r3
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	461a      	mov	r2, r3
 80024f0:	4b8c      	ldr	r3, [pc, #560]	; (8002724 <HAL_RCC_OscConfig+0x934>)
 80024f2:	4413      	add	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	461a      	mov	r2, r3
 80024f8:	2300      	movs	r3, #0
 80024fa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fc:	f7ff f9e0 	bl	80018c0 <HAL_GetTick>
 8002500:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002504:	e009      	b.n	800251a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002506:	f7ff f9db 	bl	80018c0 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e36b      	b.n	8002bf2 <HAL_RCC_OscConfig+0xe02>
 800251a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800251e:	2202      	movs	r2, #2
 8002520:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002522:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	fa93 f2a3 	rbit	r2, r3
 800252c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002536:	2202      	movs	r2, #2
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	fa93 f2a3 	rbit	r2, r3
 8002544:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800254e:	2202      	movs	r2, #2
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	fa93 f2a3 	rbit	r2, r3
 800255c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002560:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002562:	4b6f      	ldr	r3, [pc, #444]	; (8002720 <HAL_RCC_OscConfig+0x930>)
 8002564:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002566:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800256a:	2102      	movs	r1, #2
 800256c:	6019      	str	r1, [r3, #0]
 800256e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	fa93 f1a3 	rbit	r1, r3
 8002578:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800257c:	6019      	str	r1, [r3, #0]
  return result;
 800257e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	fab3 f383 	clz	r3, r3
 8002588:	b2db      	uxtb	r3, r3
 800258a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800258e:	b2db      	uxtb	r3, r3
 8002590:	f003 031f 	and.w	r3, r3, #31
 8002594:	2101      	movs	r1, #1
 8002596:	fa01 f303 	lsl.w	r3, r1, r3
 800259a:	4013      	ands	r3, r2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1b2      	bne.n	8002506 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025a0:	1d3b      	adds	r3, r7, #4
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0304 	and.w	r3, r3, #4
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 8158 	beq.w	8002860 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025b0:	2300      	movs	r3, #0
 80025b2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025b6:	4b5a      	ldr	r3, [pc, #360]	; (8002720 <HAL_RCC_OscConfig+0x930>)
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d112      	bne.n	80025e8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025c2:	4b57      	ldr	r3, [pc, #348]	; (8002720 <HAL_RCC_OscConfig+0x930>)
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	4a56      	ldr	r2, [pc, #344]	; (8002720 <HAL_RCC_OscConfig+0x930>)
 80025c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025cc:	61d3      	str	r3, [r2, #28]
 80025ce:	4b54      	ldr	r3, [pc, #336]	; (8002720 <HAL_RCC_OscConfig+0x930>)
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80025d6:	f107 0308 	add.w	r3, r7, #8
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	f107 0308 	add.w	r3, r7, #8
 80025e0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80025e2:	2301      	movs	r3, #1
 80025e4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e8:	4b4f      	ldr	r3, [pc, #316]	; (8002728 <HAL_RCC_OscConfig+0x938>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d11a      	bne.n	800262a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025f4:	4b4c      	ldr	r3, [pc, #304]	; (8002728 <HAL_RCC_OscConfig+0x938>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a4b      	ldr	r2, [pc, #300]	; (8002728 <HAL_RCC_OscConfig+0x938>)
 80025fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025fe:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002600:	f7ff f95e 	bl	80018c0 <HAL_GetTick>
 8002604:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002608:	e009      	b.n	800261e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800260a:	f7ff f959 	bl	80018c0 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b64      	cmp	r3, #100	; 0x64
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e2e9      	b.n	8002bf2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261e:	4b42      	ldr	r3, [pc, #264]	; (8002728 <HAL_RCC_OscConfig+0x938>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0ef      	beq.n	800260a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800262a:	1d3b      	adds	r3, r7, #4
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d106      	bne.n	8002642 <HAL_RCC_OscConfig+0x852>
 8002634:	4b3a      	ldr	r3, [pc, #232]	; (8002720 <HAL_RCC_OscConfig+0x930>)
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	4a39      	ldr	r2, [pc, #228]	; (8002720 <HAL_RCC_OscConfig+0x930>)
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	6213      	str	r3, [r2, #32]
 8002640:	e02f      	b.n	80026a2 <HAL_RCC_OscConfig+0x8b2>
 8002642:	1d3b      	adds	r3, r7, #4
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10c      	bne.n	8002666 <HAL_RCC_OscConfig+0x876>
 800264c:	4b34      	ldr	r3, [pc, #208]	; (8002720 <HAL_RCC_OscConfig+0x930>)
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	4a33      	ldr	r2, [pc, #204]	; (8002720 <HAL_RCC_OscConfig+0x930>)
 8002652:	f023 0301 	bic.w	r3, r3, #1
 8002656:	6213      	str	r3, [r2, #32]
 8002658:	4b31      	ldr	r3, [pc, #196]	; (8002720 <HAL_RCC_OscConfig+0x930>)
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	4a30      	ldr	r2, [pc, #192]	; (8002720 <HAL_RCC_OscConfig+0x930>)
 800265e:	f023 0304 	bic.w	r3, r3, #4
 8002662:	6213      	str	r3, [r2, #32]
 8002664:	e01d      	b.n	80026a2 <HAL_RCC_OscConfig+0x8b2>
 8002666:	1d3b      	adds	r3, r7, #4
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	2b05      	cmp	r3, #5
 800266e:	d10c      	bne.n	800268a <HAL_RCC_OscConfig+0x89a>
 8002670:	4b2b      	ldr	r3, [pc, #172]	; (8002720 <HAL_RCC_OscConfig+0x930>)
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	4a2a      	ldr	r2, [pc, #168]	; (8002720 <HAL_RCC_OscConfig+0x930>)
 8002676:	f043 0304 	orr.w	r3, r3, #4
 800267a:	6213      	str	r3, [r2, #32]
 800267c:	4b28      	ldr	r3, [pc, #160]	; (8002720 <HAL_RCC_OscConfig+0x930>)
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	4a27      	ldr	r2, [pc, #156]	; (8002720 <HAL_RCC_OscConfig+0x930>)
 8002682:	f043 0301 	orr.w	r3, r3, #1
 8002686:	6213      	str	r3, [r2, #32]
 8002688:	e00b      	b.n	80026a2 <HAL_RCC_OscConfig+0x8b2>
 800268a:	4b25      	ldr	r3, [pc, #148]	; (8002720 <HAL_RCC_OscConfig+0x930>)
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	4a24      	ldr	r2, [pc, #144]	; (8002720 <HAL_RCC_OscConfig+0x930>)
 8002690:	f023 0301 	bic.w	r3, r3, #1
 8002694:	6213      	str	r3, [r2, #32]
 8002696:	4b22      	ldr	r3, [pc, #136]	; (8002720 <HAL_RCC_OscConfig+0x930>)
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	4a21      	ldr	r2, [pc, #132]	; (8002720 <HAL_RCC_OscConfig+0x930>)
 800269c:	f023 0304 	bic.w	r3, r3, #4
 80026a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026a2:	1d3b      	adds	r3, r7, #4
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d06b      	beq.n	8002784 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ac:	f7ff f908 	bl	80018c0 <HAL_GetTick>
 80026b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b4:	e00b      	b.n	80026ce <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026b6:	f7ff f903 	bl	80018c0 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e291      	b.n	8002bf2 <HAL_RCC_OscConfig+0xe02>
 80026ce:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80026d2:	2202      	movs	r2, #2
 80026d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	fa93 f2a3 	rbit	r2, r3
 80026e0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80026ea:	2202      	movs	r2, #2
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	fa93 f2a3 	rbit	r2, r3
 80026f8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80026fc:	601a      	str	r2, [r3, #0]
  return result;
 80026fe:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002702:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002704:	fab3 f383 	clz	r3, r3
 8002708:	b2db      	uxtb	r3, r3
 800270a:	095b      	lsrs	r3, r3, #5
 800270c:	b2db      	uxtb	r3, r3
 800270e:	f043 0302 	orr.w	r3, r3, #2
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d109      	bne.n	800272c <HAL_RCC_OscConfig+0x93c>
 8002718:	4b01      	ldr	r3, [pc, #4]	; (8002720 <HAL_RCC_OscConfig+0x930>)
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	e014      	b.n	8002748 <HAL_RCC_OscConfig+0x958>
 800271e:	bf00      	nop
 8002720:	40021000 	.word	0x40021000
 8002724:	10908120 	.word	0x10908120
 8002728:	40007000 	.word	0x40007000
 800272c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002730:	2202      	movs	r2, #2
 8002732:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002734:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	fa93 f2a3 	rbit	r2, r3
 800273e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	4bbb      	ldr	r3, [pc, #748]	; (8002a34 <HAL_RCC_OscConfig+0xc44>)
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800274c:	2102      	movs	r1, #2
 800274e:	6011      	str	r1, [r2, #0]
 8002750:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002754:	6812      	ldr	r2, [r2, #0]
 8002756:	fa92 f1a2 	rbit	r1, r2
 800275a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800275e:	6011      	str	r1, [r2, #0]
  return result;
 8002760:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002764:	6812      	ldr	r2, [r2, #0]
 8002766:	fab2 f282 	clz	r2, r2
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	f002 021f 	and.w	r2, r2, #31
 8002776:	2101      	movs	r1, #1
 8002778:	fa01 f202 	lsl.w	r2, r1, r2
 800277c:	4013      	ands	r3, r2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d099      	beq.n	80026b6 <HAL_RCC_OscConfig+0x8c6>
 8002782:	e063      	b.n	800284c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002784:	f7ff f89c 	bl	80018c0 <HAL_GetTick>
 8002788:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800278c:	e00b      	b.n	80027a6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800278e:	f7ff f897 	bl	80018c0 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	f241 3288 	movw	r2, #5000	; 0x1388
 800279e:	4293      	cmp	r3, r2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e225      	b.n	8002bf2 <HAL_RCC_OscConfig+0xe02>
 80027a6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80027aa:	2202      	movs	r2, #2
 80027ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	fa93 f2a3 	rbit	r2, r3
 80027b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80027c2:	2202      	movs	r2, #2
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	fa93 f2a3 	rbit	r2, r3
 80027d0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80027d4:	601a      	str	r2, [r3, #0]
  return result;
 80027d6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80027da:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027dc:	fab3 f383 	clz	r3, r3
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	f043 0302 	orr.w	r3, r3, #2
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d102      	bne.n	80027f6 <HAL_RCC_OscConfig+0xa06>
 80027f0:	4b90      	ldr	r3, [pc, #576]	; (8002a34 <HAL_RCC_OscConfig+0xc44>)
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	e00d      	b.n	8002812 <HAL_RCC_OscConfig+0xa22>
 80027f6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80027fa:	2202      	movs	r2, #2
 80027fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fe:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	fa93 f2a3 	rbit	r2, r3
 8002808:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	4b89      	ldr	r3, [pc, #548]	; (8002a34 <HAL_RCC_OscConfig+0xc44>)
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002816:	2102      	movs	r1, #2
 8002818:	6011      	str	r1, [r2, #0]
 800281a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800281e:	6812      	ldr	r2, [r2, #0]
 8002820:	fa92 f1a2 	rbit	r1, r2
 8002824:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002828:	6011      	str	r1, [r2, #0]
  return result;
 800282a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800282e:	6812      	ldr	r2, [r2, #0]
 8002830:	fab2 f282 	clz	r2, r2
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	f002 021f 	and.w	r2, r2, #31
 8002840:	2101      	movs	r1, #1
 8002842:	fa01 f202 	lsl.w	r2, r1, r2
 8002846:	4013      	ands	r3, r2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1a0      	bne.n	800278e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800284c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002850:	2b01      	cmp	r3, #1
 8002852:	d105      	bne.n	8002860 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002854:	4b77      	ldr	r3, [pc, #476]	; (8002a34 <HAL_RCC_OscConfig+0xc44>)
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	4a76      	ldr	r2, [pc, #472]	; (8002a34 <HAL_RCC_OscConfig+0xc44>)
 800285a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800285e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002860:	1d3b      	adds	r3, r7, #4
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 81c2 	beq.w	8002bf0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800286c:	4b71      	ldr	r3, [pc, #452]	; (8002a34 <HAL_RCC_OscConfig+0xc44>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 030c 	and.w	r3, r3, #12
 8002874:	2b08      	cmp	r3, #8
 8002876:	f000 819c 	beq.w	8002bb2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800287a:	1d3b      	adds	r3, r7, #4
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	69db      	ldr	r3, [r3, #28]
 8002880:	2b02      	cmp	r3, #2
 8002882:	f040 8114 	bne.w	8002aae <HAL_RCC_OscConfig+0xcbe>
 8002886:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800288a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800288e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002890:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	fa93 f2a3 	rbit	r2, r3
 800289a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800289e:	601a      	str	r2, [r3, #0]
  return result;
 80028a0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80028a4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a6:	fab3 f383 	clz	r3, r3
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	461a      	mov	r2, r3
 80028b8:	2300      	movs	r3, #0
 80028ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028bc:	f7ff f800 	bl	80018c0 <HAL_GetTick>
 80028c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028c4:	e009      	b.n	80028da <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c6:	f7fe fffb 	bl	80018c0 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e18b      	b.n	8002bf2 <HAL_RCC_OscConfig+0xe02>
 80028da:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80028de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	fa93 f2a3 	rbit	r2, r3
 80028ee:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80028f2:	601a      	str	r2, [r3, #0]
  return result;
 80028f4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80028f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028fa:	fab3 f383 	clz	r3, r3
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	095b      	lsrs	r3, r3, #5
 8002902:	b2db      	uxtb	r3, r3
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b01      	cmp	r3, #1
 800290c:	d102      	bne.n	8002914 <HAL_RCC_OscConfig+0xb24>
 800290e:	4b49      	ldr	r3, [pc, #292]	; (8002a34 <HAL_RCC_OscConfig+0xc44>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	e01b      	b.n	800294c <HAL_RCC_OscConfig+0xb5c>
 8002914:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002918:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800291c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	fa93 f2a3 	rbit	r2, r3
 8002928:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002932:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	fa93 f2a3 	rbit	r2, r3
 8002942:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	4b3a      	ldr	r3, [pc, #232]	; (8002a34 <HAL_RCC_OscConfig+0xc44>)
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002950:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002954:	6011      	str	r1, [r2, #0]
 8002956:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800295a:	6812      	ldr	r2, [r2, #0]
 800295c:	fa92 f1a2 	rbit	r1, r2
 8002960:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002964:	6011      	str	r1, [r2, #0]
  return result;
 8002966:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800296a:	6812      	ldr	r2, [r2, #0]
 800296c:	fab2 f282 	clz	r2, r2
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	f042 0220 	orr.w	r2, r2, #32
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	f002 021f 	and.w	r2, r2, #31
 800297c:	2101      	movs	r1, #1
 800297e:	fa01 f202 	lsl.w	r2, r1, r2
 8002982:	4013      	ands	r3, r2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d19e      	bne.n	80028c6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002988:	4b2a      	ldr	r3, [pc, #168]	; (8002a34 <HAL_RCC_OscConfig+0xc44>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002990:	1d3b      	adds	r3, r7, #4
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002996:	1d3b      	adds	r3, r7, #4
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	430b      	orrs	r3, r1
 800299e:	4925      	ldr	r1, [pc, #148]	; (8002a34 <HAL_RCC_OscConfig+0xc44>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	604b      	str	r3, [r1, #4]
 80029a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80029a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	fa93 f2a3 	rbit	r2, r3
 80029b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80029bc:	601a      	str	r2, [r3, #0]
  return result;
 80029be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80029c2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029c4:	fab3 f383 	clz	r3, r3
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029ce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	461a      	mov	r2, r3
 80029d6:	2301      	movs	r3, #1
 80029d8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029da:	f7fe ff71 	bl	80018c0 <HAL_GetTick>
 80029de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029e2:	e009      	b.n	80029f8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e4:	f7fe ff6c 	bl	80018c0 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e0fc      	b.n	8002bf2 <HAL_RCC_OscConfig+0xe02>
 80029f8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80029fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a02:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	fa93 f2a3 	rbit	r2, r3
 8002a0c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a10:	601a      	str	r2, [r3, #0]
  return result;
 8002a12:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a16:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a18:	fab3 f383 	clz	r3, r3
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	095b      	lsrs	r3, r3, #5
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d105      	bne.n	8002a38 <HAL_RCC_OscConfig+0xc48>
 8002a2c:	4b01      	ldr	r3, [pc, #4]	; (8002a34 <HAL_RCC_OscConfig+0xc44>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	e01e      	b.n	8002a70 <HAL_RCC_OscConfig+0xc80>
 8002a32:	bf00      	nop
 8002a34:	40021000 	.word	0x40021000
 8002a38:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	fa93 f2a3 	rbit	r2, r3
 8002a4c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	fa93 f2a3 	rbit	r2, r3
 8002a66:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	4b63      	ldr	r3, [pc, #396]	; (8002bfc <HAL_RCC_OscConfig+0xe0c>)
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002a74:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a78:	6011      	str	r1, [r2, #0]
 8002a7a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002a7e:	6812      	ldr	r2, [r2, #0]
 8002a80:	fa92 f1a2 	rbit	r1, r2
 8002a84:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002a88:	6011      	str	r1, [r2, #0]
  return result;
 8002a8a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002a8e:	6812      	ldr	r2, [r2, #0]
 8002a90:	fab2 f282 	clz	r2, r2
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	f042 0220 	orr.w	r2, r2, #32
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	f002 021f 	and.w	r2, r2, #31
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d09b      	beq.n	80029e4 <HAL_RCC_OscConfig+0xbf4>
 8002aac:	e0a0      	b.n	8002bf0 <HAL_RCC_OscConfig+0xe00>
 8002aae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ab2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ab6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	fa93 f2a3 	rbit	r2, r3
 8002ac2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ac6:	601a      	str	r2, [r3, #0]
  return result;
 8002ac8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002acc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ace:	fab3 f383 	clz	r3, r3
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ad8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	461a      	mov	r2, r3
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae4:	f7fe feec 	bl	80018c0 <HAL_GetTick>
 8002ae8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aec:	e009      	b.n	8002b02 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aee:	f7fe fee7 	bl	80018c0 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e077      	b.n	8002bf2 <HAL_RCC_OscConfig+0xe02>
 8002b02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	fa93 f2a3 	rbit	r2, r3
 8002b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b1a:	601a      	str	r2, [r3, #0]
  return result;
 8002b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b20:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b22:	fab3 f383 	clz	r3, r3
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	095b      	lsrs	r3, r3, #5
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d102      	bne.n	8002b3c <HAL_RCC_OscConfig+0xd4c>
 8002b36:	4b31      	ldr	r3, [pc, #196]	; (8002bfc <HAL_RCC_OscConfig+0xe0c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	e01b      	b.n	8002b74 <HAL_RCC_OscConfig+0xd84>
 8002b3c:	f107 0320 	add.w	r3, r7, #32
 8002b40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b46:	f107 0320 	add.w	r3, r7, #32
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	fa93 f2a3 	rbit	r2, r3
 8002b50:	f107 031c 	add.w	r3, r7, #28
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	f107 0318 	add.w	r3, r7, #24
 8002b5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	f107 0318 	add.w	r3, r7, #24
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	fa93 f2a3 	rbit	r2, r3
 8002b6a:	f107 0314 	add.w	r3, r7, #20
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	4b22      	ldr	r3, [pc, #136]	; (8002bfc <HAL_RCC_OscConfig+0xe0c>)
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	f107 0210 	add.w	r2, r7, #16
 8002b78:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b7c:	6011      	str	r1, [r2, #0]
 8002b7e:	f107 0210 	add.w	r2, r7, #16
 8002b82:	6812      	ldr	r2, [r2, #0]
 8002b84:	fa92 f1a2 	rbit	r1, r2
 8002b88:	f107 020c 	add.w	r2, r7, #12
 8002b8c:	6011      	str	r1, [r2, #0]
  return result;
 8002b8e:	f107 020c 	add.w	r2, r7, #12
 8002b92:	6812      	ldr	r2, [r2, #0]
 8002b94:	fab2 f282 	clz	r2, r2
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	f042 0220 	orr.w	r2, r2, #32
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	f002 021f 	and.w	r2, r2, #31
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8002baa:	4013      	ands	r3, r2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d19e      	bne.n	8002aee <HAL_RCC_OscConfig+0xcfe>
 8002bb0:	e01e      	b.n	8002bf0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bb2:	1d3b      	adds	r3, r7, #4
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d101      	bne.n	8002bc0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e018      	b.n	8002bf2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bc0:	4b0e      	ldr	r3, [pc, #56]	; (8002bfc <HAL_RCC_OscConfig+0xe0c>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002bc8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002bcc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bd0:	1d3b      	adds	r3, r7, #4
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d108      	bne.n	8002bec <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002bda:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002bde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002be2:	1d3b      	adds	r3, r7, #4
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d001      	beq.n	8002bf0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e000      	b.n	8002bf2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40021000 	.word	0x40021000

08002c00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b09e      	sub	sp, #120	; 0x78
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e162      	b.n	8002ede <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c18:	4b90      	ldr	r3, [pc, #576]	; (8002e5c <HAL_RCC_ClockConfig+0x25c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d910      	bls.n	8002c48 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c26:	4b8d      	ldr	r3, [pc, #564]	; (8002e5c <HAL_RCC_ClockConfig+0x25c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f023 0207 	bic.w	r2, r3, #7
 8002c2e:	498b      	ldr	r1, [pc, #556]	; (8002e5c <HAL_RCC_ClockConfig+0x25c>)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c36:	4b89      	ldr	r3, [pc, #548]	; (8002e5c <HAL_RCC_ClockConfig+0x25c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0307 	and.w	r3, r3, #7
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e14a      	b.n	8002ede <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c54:	4b82      	ldr	r3, [pc, #520]	; (8002e60 <HAL_RCC_ClockConfig+0x260>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	497f      	ldr	r1, [pc, #508]	; (8002e60 <HAL_RCC_ClockConfig+0x260>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 80dc 	beq.w	8002e2c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d13c      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xf6>
 8002c7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c80:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c84:	fa93 f3a3 	rbit	r3, r3
 8002c88:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8c:	fab3 f383 	clz	r3, r3
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	095b      	lsrs	r3, r3, #5
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	f043 0301 	orr.w	r3, r3, #1
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d102      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0xa6>
 8002ca0:	4b6f      	ldr	r3, [pc, #444]	; (8002e60 <HAL_RCC_ClockConfig+0x260>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	e00f      	b.n	8002cc6 <HAL_RCC_ClockConfig+0xc6>
 8002ca6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002caa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cae:	fa93 f3a3 	rbit	r3, r3
 8002cb2:	667b      	str	r3, [r7, #100]	; 0x64
 8002cb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cb8:	663b      	str	r3, [r7, #96]	; 0x60
 8002cba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cbc:	fa93 f3a3 	rbit	r3, r3
 8002cc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cc2:	4b67      	ldr	r3, [pc, #412]	; (8002e60 <HAL_RCC_ClockConfig+0x260>)
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cca:	65ba      	str	r2, [r7, #88]	; 0x58
 8002ccc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cce:	fa92 f2a2 	rbit	r2, r2
 8002cd2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002cd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002cd6:	fab2 f282 	clz	r2, r2
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	f042 0220 	orr.w	r2, r2, #32
 8002ce0:	b2d2      	uxtb	r2, r2
 8002ce2:	f002 021f 	and.w	r2, r2, #31
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cec:	4013      	ands	r3, r2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d17b      	bne.n	8002dea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e0f3      	b.n	8002ede <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d13c      	bne.n	8002d78 <HAL_RCC_ClockConfig+0x178>
 8002cfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d02:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d06:	fa93 f3a3 	rbit	r3, r3
 8002d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d0e:	fab3 f383 	clz	r3, r3
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	095b      	lsrs	r3, r3, #5
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d102      	bne.n	8002d28 <HAL_RCC_ClockConfig+0x128>
 8002d22:	4b4f      	ldr	r3, [pc, #316]	; (8002e60 <HAL_RCC_ClockConfig+0x260>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	e00f      	b.n	8002d48 <HAL_RCC_ClockConfig+0x148>
 8002d28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d2c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d30:	fa93 f3a3 	rbit	r3, r3
 8002d34:	647b      	str	r3, [r7, #68]	; 0x44
 8002d36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d3a:	643b      	str	r3, [r7, #64]	; 0x40
 8002d3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d3e:	fa93 f3a3 	rbit	r3, r3
 8002d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d44:	4b46      	ldr	r3, [pc, #280]	; (8002e60 <HAL_RCC_ClockConfig+0x260>)
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d4c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002d4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d50:	fa92 f2a2 	rbit	r2, r2
 8002d54:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002d56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d58:	fab2 f282 	clz	r2, r2
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	f042 0220 	orr.w	r2, r2, #32
 8002d62:	b2d2      	uxtb	r2, r2
 8002d64:	f002 021f 	and.w	r2, r2, #31
 8002d68:	2101      	movs	r1, #1
 8002d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d6e:	4013      	ands	r3, r2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d13a      	bne.n	8002dea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e0b2      	b.n	8002ede <HAL_RCC_ClockConfig+0x2de>
 8002d78:	2302      	movs	r3, #2
 8002d7a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7e:	fa93 f3a3 	rbit	r3, r3
 8002d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d86:	fab3 f383 	clz	r3, r3
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	095b      	lsrs	r3, r3, #5
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	f043 0301 	orr.w	r3, r3, #1
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d102      	bne.n	8002da0 <HAL_RCC_ClockConfig+0x1a0>
 8002d9a:	4b31      	ldr	r3, [pc, #196]	; (8002e60 <HAL_RCC_ClockConfig+0x260>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	e00d      	b.n	8002dbc <HAL_RCC_ClockConfig+0x1bc>
 8002da0:	2302      	movs	r3, #2
 8002da2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da6:	fa93 f3a3 	rbit	r3, r3
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
 8002dac:	2302      	movs	r3, #2
 8002dae:	623b      	str	r3, [r7, #32]
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	fa93 f3a3 	rbit	r3, r3
 8002db6:	61fb      	str	r3, [r7, #28]
 8002db8:	4b29      	ldr	r3, [pc, #164]	; (8002e60 <HAL_RCC_ClockConfig+0x260>)
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	61ba      	str	r2, [r7, #24]
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	fa92 f2a2 	rbit	r2, r2
 8002dc6:	617a      	str	r2, [r7, #20]
  return result;
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	fab2 f282 	clz	r2, r2
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	f042 0220 	orr.w	r2, r2, #32
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	f002 021f 	and.w	r2, r2, #31
 8002dda:	2101      	movs	r1, #1
 8002ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8002de0:	4013      	ands	r3, r2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e079      	b.n	8002ede <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dea:	4b1d      	ldr	r3, [pc, #116]	; (8002e60 <HAL_RCC_ClockConfig+0x260>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f023 0203 	bic.w	r2, r3, #3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	491a      	ldr	r1, [pc, #104]	; (8002e60 <HAL_RCC_ClockConfig+0x260>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dfc:	f7fe fd60 	bl	80018c0 <HAL_GetTick>
 8002e00:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e02:	e00a      	b.n	8002e1a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e04:	f7fe fd5c 	bl	80018c0 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e061      	b.n	8002ede <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e1a:	4b11      	ldr	r3, [pc, #68]	; (8002e60 <HAL_RCC_ClockConfig+0x260>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 020c 	and.w	r2, r3, #12
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d1eb      	bne.n	8002e04 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e2c:	4b0b      	ldr	r3, [pc, #44]	; (8002e5c <HAL_RCC_ClockConfig+0x25c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d214      	bcs.n	8002e64 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3a:	4b08      	ldr	r3, [pc, #32]	; (8002e5c <HAL_RCC_ClockConfig+0x25c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 0207 	bic.w	r2, r3, #7
 8002e42:	4906      	ldr	r1, [pc, #24]	; (8002e5c <HAL_RCC_ClockConfig+0x25c>)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4a:	4b04      	ldr	r3, [pc, #16]	; (8002e5c <HAL_RCC_ClockConfig+0x25c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d005      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e040      	b.n	8002ede <HAL_RCC_ClockConfig+0x2de>
 8002e5c:	40022000 	.word	0x40022000
 8002e60:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d008      	beq.n	8002e82 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e70:	4b1d      	ldr	r3, [pc, #116]	; (8002ee8 <HAL_RCC_ClockConfig+0x2e8>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	491a      	ldr	r1, [pc, #104]	; (8002ee8 <HAL_RCC_ClockConfig+0x2e8>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d009      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e8e:	4b16      	ldr	r3, [pc, #88]	; (8002ee8 <HAL_RCC_ClockConfig+0x2e8>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4912      	ldr	r1, [pc, #72]	; (8002ee8 <HAL_RCC_ClockConfig+0x2e8>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002ea2:	f000 f829 	bl	8002ef8 <HAL_RCC_GetSysClockFreq>
 8002ea6:	4601      	mov	r1, r0
 8002ea8:	4b0f      	ldr	r3, [pc, #60]	; (8002ee8 <HAL_RCC_ClockConfig+0x2e8>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eb0:	22f0      	movs	r2, #240	; 0xf0
 8002eb2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	fa92 f2a2 	rbit	r2, r2
 8002eba:	60fa      	str	r2, [r7, #12]
  return result;
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	fab2 f282 	clz	r2, r2
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	40d3      	lsrs	r3, r2
 8002ec6:	4a09      	ldr	r2, [pc, #36]	; (8002eec <HAL_RCC_ClockConfig+0x2ec>)
 8002ec8:	5cd3      	ldrb	r3, [r2, r3]
 8002eca:	fa21 f303 	lsr.w	r3, r1, r3
 8002ece:	4a08      	ldr	r2, [pc, #32]	; (8002ef0 <HAL_RCC_ClockConfig+0x2f0>)
 8002ed0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002ed2:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <HAL_RCC_ClockConfig+0x2f4>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fe fba0 	bl	800161c <HAL_InitTick>
  
  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3778      	adds	r7, #120	; 0x78
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	0800ab00 	.word	0x0800ab00
 8002ef0:	20000000 	.word	0x20000000
 8002ef4:	20000004 	.word	0x20000004

08002ef8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b08b      	sub	sp, #44	; 0x2c
 8002efc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	61fb      	str	r3, [r7, #28]
 8002f02:	2300      	movs	r3, #0
 8002f04:	61bb      	str	r3, [r7, #24]
 8002f06:	2300      	movs	r3, #0
 8002f08:	627b      	str	r3, [r7, #36]	; 0x24
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002f12:	4b29      	ldr	r3, [pc, #164]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f003 030c 	and.w	r3, r3, #12
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d002      	beq.n	8002f28 <HAL_RCC_GetSysClockFreq+0x30>
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d003      	beq.n	8002f2e <HAL_RCC_GetSysClockFreq+0x36>
 8002f26:	e03c      	b.n	8002fa2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f28:	4b24      	ldr	r3, [pc, #144]	; (8002fbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f2a:	623b      	str	r3, [r7, #32]
      break;
 8002f2c:	e03c      	b.n	8002fa8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002f34:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002f38:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	fa92 f2a2 	rbit	r2, r2
 8002f40:	607a      	str	r2, [r7, #4]
  return result;
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	fab2 f282 	clz	r2, r2
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	40d3      	lsrs	r3, r2
 8002f4c:	4a1c      	ldr	r2, [pc, #112]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f4e:	5cd3      	ldrb	r3, [r2, r3]
 8002f50:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002f52:	4b19      	ldr	r3, [pc, #100]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	220f      	movs	r2, #15
 8002f5c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	fa92 f2a2 	rbit	r2, r2
 8002f64:	60fa      	str	r2, [r7, #12]
  return result;
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	fab2 f282 	clz	r2, r2
 8002f6c:	b2d2      	uxtb	r2, r2
 8002f6e:	40d3      	lsrs	r3, r2
 8002f70:	4a14      	ldr	r2, [pc, #80]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f72:	5cd3      	ldrb	r3, [r2, r3]
 8002f74:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d008      	beq.n	8002f92 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f80:	4a0e      	ldr	r2, [pc, #56]	; (8002fbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	fb02 f303 	mul.w	r3, r2, r3
 8002f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f90:	e004      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	4a0c      	ldr	r2, [pc, #48]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f96:	fb02 f303 	mul.w	r3, r2, r3
 8002f9a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	623b      	str	r3, [r7, #32]
      break;
 8002fa0:	e002      	b.n	8002fa8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fa2:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002fa4:	623b      	str	r3, [r7, #32]
      break;
 8002fa6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	372c      	adds	r7, #44	; 0x2c
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	007a1200 	.word	0x007a1200
 8002fc0:	0800ab18 	.word	0x0800ab18
 8002fc4:	0800ab28 	.word	0x0800ab28
 8002fc8:	003d0900 	.word	0x003d0900

08002fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fd0:	4b03      	ldr	r3, [pc, #12]	; (8002fe0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	20000000 	.word	0x20000000

08002fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002fea:	f7ff ffef 	bl	8002fcc <HAL_RCC_GetHCLKFreq>
 8002fee:	4601      	mov	r1, r0
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ff8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ffc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	fa92 f2a2 	rbit	r2, r2
 8003004:	603a      	str	r2, [r7, #0]
  return result;
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	fab2 f282 	clz	r2, r2
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	40d3      	lsrs	r3, r2
 8003010:	4a04      	ldr	r2, [pc, #16]	; (8003024 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003012:	5cd3      	ldrb	r3, [r2, r3]
 8003014:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003018:	4618      	mov	r0, r3
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40021000 	.word	0x40021000
 8003024:	0800ab10 	.word	0x0800ab10

08003028 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	220f      	movs	r2, #15
 8003036:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003038:	4b12      	ldr	r3, [pc, #72]	; (8003084 <HAL_RCC_GetClockConfig+0x5c>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f003 0203 	and.w	r2, r3, #3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003044:	4b0f      	ldr	r3, [pc, #60]	; (8003084 <HAL_RCC_GetClockConfig+0x5c>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003050:	4b0c      	ldr	r3, [pc, #48]	; (8003084 <HAL_RCC_GetClockConfig+0x5c>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800305c:	4b09      	ldr	r3, [pc, #36]	; (8003084 <HAL_RCC_GetClockConfig+0x5c>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	08db      	lsrs	r3, r3, #3
 8003062:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800306a:	4b07      	ldr	r3, [pc, #28]	; (8003088 <HAL_RCC_GetClockConfig+0x60>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0207 	and.w	r2, r3, #7
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	601a      	str	r2, [r3, #0]
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	40021000 	.word	0x40021000
 8003088:	40022000 	.word	0x40022000

0800308c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b092      	sub	sp, #72	; 0x48
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800309c:	2300      	movs	r3, #0
 800309e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 80d4 	beq.w	8003258 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030b0:	4b4e      	ldr	r3, [pc, #312]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10e      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030bc:	4b4b      	ldr	r3, [pc, #300]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030be:	69db      	ldr	r3, [r3, #28]
 80030c0:	4a4a      	ldr	r2, [pc, #296]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c6:	61d3      	str	r3, [r2, #28]
 80030c8:	4b48      	ldr	r3, [pc, #288]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d0:	60bb      	str	r3, [r7, #8]
 80030d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030d4:	2301      	movs	r3, #1
 80030d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030da:	4b45      	ldr	r3, [pc, #276]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d118      	bne.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030e6:	4b42      	ldr	r3, [pc, #264]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a41      	ldr	r2, [pc, #260]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030f2:	f7fe fbe5 	bl	80018c0 <HAL_GetTick>
 80030f6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f8:	e008      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030fa:	f7fe fbe1 	bl	80018c0 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b64      	cmp	r3, #100	; 0x64
 8003106:	d901      	bls.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e169      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310c:	4b38      	ldr	r3, [pc, #224]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0f0      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003118:	4b34      	ldr	r3, [pc, #208]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003120:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 8084 	beq.w	8003232 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003132:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003134:	429a      	cmp	r2, r3
 8003136:	d07c      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003138:	4b2c      	ldr	r3, [pc, #176]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003140:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003142:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003146:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314a:	fa93 f3a3 	rbit	r3, r3
 800314e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003152:	fab3 f383 	clz	r3, r3
 8003156:	b2db      	uxtb	r3, r3
 8003158:	461a      	mov	r2, r3
 800315a:	4b26      	ldr	r3, [pc, #152]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800315c:	4413      	add	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	461a      	mov	r2, r3
 8003162:	2301      	movs	r3, #1
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800316a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316e:	fa93 f3a3 	rbit	r3, r3
 8003172:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003176:	fab3 f383 	clz	r3, r3
 800317a:	b2db      	uxtb	r3, r3
 800317c:	461a      	mov	r2, r3
 800317e:	4b1d      	ldr	r3, [pc, #116]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003180:	4413      	add	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	461a      	mov	r2, r3
 8003186:	2300      	movs	r3, #0
 8003188:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800318a:	4a18      	ldr	r2, [pc, #96]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800318c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800318e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d04b      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319a:	f7fe fb91 	bl	80018c0 <HAL_GetTick>
 800319e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a0:	e00a      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a2:	f7fe fb8d 	bl	80018c0 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e113      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80031b8:	2302      	movs	r3, #2
 80031ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031be:	fa93 f3a3 	rbit	r3, r3
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24
 80031c4:	2302      	movs	r3, #2
 80031c6:	623b      	str	r3, [r7, #32]
 80031c8:	6a3b      	ldr	r3, [r7, #32]
 80031ca:	fa93 f3a3 	rbit	r3, r3
 80031ce:	61fb      	str	r3, [r7, #28]
  return result;
 80031d0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d2:	fab3 f383 	clz	r3, r3
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	095b      	lsrs	r3, r3, #5
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	f043 0302 	orr.w	r3, r3, #2
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d108      	bne.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80031e6:	4b01      	ldr	r3, [pc, #4]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	e00d      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80031ec:	40021000 	.word	0x40021000
 80031f0:	40007000 	.word	0x40007000
 80031f4:	10908100 	.word	0x10908100
 80031f8:	2302      	movs	r3, #2
 80031fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	fa93 f3a3 	rbit	r3, r3
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	4b78      	ldr	r3, [pc, #480]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	2202      	movs	r2, #2
 800320a:	613a      	str	r2, [r7, #16]
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	fa92 f2a2 	rbit	r2, r2
 8003212:	60fa      	str	r2, [r7, #12]
  return result;
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	fab2 f282 	clz	r2, r2
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003220:	b2d2      	uxtb	r2, r2
 8003222:	f002 021f 	and.w	r2, r2, #31
 8003226:	2101      	movs	r1, #1
 8003228:	fa01 f202 	lsl.w	r2, r1, r2
 800322c:	4013      	ands	r3, r2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0b7      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003232:	4b6d      	ldr	r3, [pc, #436]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	496a      	ldr	r1, [pc, #424]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003240:	4313      	orrs	r3, r2
 8003242:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003244:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003248:	2b01      	cmp	r3, #1
 800324a:	d105      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800324c:	4b66      	ldr	r3, [pc, #408]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800324e:	69db      	ldr	r3, [r3, #28]
 8003250:	4a65      	ldr	r2, [pc, #404]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003252:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003256:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b00      	cmp	r3, #0
 8003262:	d008      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003264:	4b60      	ldr	r3, [pc, #384]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003268:	f023 0203 	bic.w	r2, r3, #3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	495d      	ldr	r1, [pc, #372]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003272:	4313      	orrs	r3, r2
 8003274:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d008      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003282:	4b59      	ldr	r3, [pc, #356]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	4956      	ldr	r1, [pc, #344]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003290:	4313      	orrs	r3, r2
 8003292:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	d008      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032a0:	4b51      	ldr	r3, [pc, #324]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	494e      	ldr	r1, [pc, #312]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0320 	and.w	r3, r3, #32
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d008      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032be:	4b4a      	ldr	r3, [pc, #296]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	f023 0210 	bic.w	r2, r3, #16
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	4947      	ldr	r1, [pc, #284]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80032dc:	4b42      	ldr	r3, [pc, #264]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e8:	493f      	ldr	r1, [pc, #252]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d008      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032fa:	4b3b      	ldr	r3, [pc, #236]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fe:	f023 0220 	bic.w	r2, r3, #32
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	4938      	ldr	r1, [pc, #224]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003308:	4313      	orrs	r3, r2
 800330a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0308 	and.w	r3, r3, #8
 8003314:	2b00      	cmp	r3, #0
 8003316:	d008      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003318:	4b33      	ldr	r3, [pc, #204]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800331a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	4930      	ldr	r1, [pc, #192]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003326:	4313      	orrs	r3, r2
 8003328:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0310 	and.w	r3, r3, #16
 8003332:	2b00      	cmp	r3, #0
 8003334:	d008      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003336:	4b2c      	ldr	r3, [pc, #176]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	4929      	ldr	r1, [pc, #164]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003344:	4313      	orrs	r3, r2
 8003346:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003350:	2b00      	cmp	r3, #0
 8003352:	d008      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003354:	4b24      	ldr	r3, [pc, #144]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003360:	4921      	ldr	r1, [pc, #132]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003362:	4313      	orrs	r3, r2
 8003364:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336e:	2b00      	cmp	r3, #0
 8003370:	d008      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003372:	4b1d      	ldr	r3, [pc, #116]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003376:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	491a      	ldr	r1, [pc, #104]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003380:	4313      	orrs	r3, r2
 8003382:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338c:	2b00      	cmp	r3, #0
 800338e:	d008      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003390:	4b15      	ldr	r3, [pc, #84]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003394:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339c:	4912      	ldr	r1, [pc, #72]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d008      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80033ae:	4b0e      	ldr	r3, [pc, #56]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	490b      	ldr	r1, [pc, #44]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d008      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80033cc:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d8:	4903      	ldr	r1, [pc, #12]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3748      	adds	r7, #72	; 0x48
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40021000 	.word	0x40021000

080033ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e049      	b.n	8003492 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d106      	bne.n	8003418 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7fe f850 	bl	80014b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2202      	movs	r2, #2
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3304      	adds	r3, #4
 8003428:	4619      	mov	r1, r3
 800342a:	4610      	mov	r0, r2
 800342c:	f000 fd16 	bl	8003e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d001      	beq.n	80034b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e04a      	b.n	800354a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2202      	movs	r2, #2
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68da      	ldr	r2, [r3, #12]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0201 	orr.w	r2, r2, #1
 80034ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a21      	ldr	r2, [pc, #132]	; (8003558 <HAL_TIM_Base_Start_IT+0xbc>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d018      	beq.n	8003508 <HAL_TIM_Base_Start_IT+0x6c>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034de:	d013      	beq.n	8003508 <HAL_TIM_Base_Start_IT+0x6c>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a1d      	ldr	r2, [pc, #116]	; (800355c <HAL_TIM_Base_Start_IT+0xc0>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d00e      	beq.n	8003508 <HAL_TIM_Base_Start_IT+0x6c>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a1c      	ldr	r2, [pc, #112]	; (8003560 <HAL_TIM_Base_Start_IT+0xc4>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d009      	beq.n	8003508 <HAL_TIM_Base_Start_IT+0x6c>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a1a      	ldr	r2, [pc, #104]	; (8003564 <HAL_TIM_Base_Start_IT+0xc8>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d004      	beq.n	8003508 <HAL_TIM_Base_Start_IT+0x6c>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a19      	ldr	r2, [pc, #100]	; (8003568 <HAL_TIM_Base_Start_IT+0xcc>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d115      	bne.n	8003534 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689a      	ldr	r2, [r3, #8]
 800350e:	4b17      	ldr	r3, [pc, #92]	; (800356c <HAL_TIM_Base_Start_IT+0xd0>)
 8003510:	4013      	ands	r3, r2
 8003512:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2b06      	cmp	r3, #6
 8003518:	d015      	beq.n	8003546 <HAL_TIM_Base_Start_IT+0xaa>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003520:	d011      	beq.n	8003546 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f042 0201 	orr.w	r2, r2, #1
 8003530:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003532:	e008      	b.n	8003546 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0201 	orr.w	r2, r2, #1
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	e000      	b.n	8003548 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003546:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40012c00 	.word	0x40012c00
 800355c:	40000400 	.word	0x40000400
 8003560:	40000800 	.word	0x40000800
 8003564:	40013400 	.word	0x40013400
 8003568:	40014000 	.word	0x40014000
 800356c:	00010007 	.word	0x00010007

08003570 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e049      	b.n	8003616 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d106      	bne.n	800359c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7fd ffae 	bl	80014f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2202      	movs	r2, #2
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	3304      	adds	r3, #4
 80035ac:	4619      	mov	r1, r3
 80035ae:	4610      	mov	r0, r2
 80035b0:	f000 fc54 	bl	8003e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
	...

08003620 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d109      	bne.n	8003644 <HAL_TIM_PWM_Start+0x24>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b01      	cmp	r3, #1
 800363a:	bf14      	ite	ne
 800363c:	2301      	movne	r3, #1
 800363e:	2300      	moveq	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	e03c      	b.n	80036be <HAL_TIM_PWM_Start+0x9e>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2b04      	cmp	r3, #4
 8003648:	d109      	bne.n	800365e <HAL_TIM_PWM_Start+0x3e>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b01      	cmp	r3, #1
 8003654:	bf14      	ite	ne
 8003656:	2301      	movne	r3, #1
 8003658:	2300      	moveq	r3, #0
 800365a:	b2db      	uxtb	r3, r3
 800365c:	e02f      	b.n	80036be <HAL_TIM_PWM_Start+0x9e>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b08      	cmp	r3, #8
 8003662:	d109      	bne.n	8003678 <HAL_TIM_PWM_Start+0x58>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b01      	cmp	r3, #1
 800366e:	bf14      	ite	ne
 8003670:	2301      	movne	r3, #1
 8003672:	2300      	moveq	r3, #0
 8003674:	b2db      	uxtb	r3, r3
 8003676:	e022      	b.n	80036be <HAL_TIM_PWM_Start+0x9e>
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	2b0c      	cmp	r3, #12
 800367c:	d109      	bne.n	8003692 <HAL_TIM_PWM_Start+0x72>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b01      	cmp	r3, #1
 8003688:	bf14      	ite	ne
 800368a:	2301      	movne	r3, #1
 800368c:	2300      	moveq	r3, #0
 800368e:	b2db      	uxtb	r3, r3
 8003690:	e015      	b.n	80036be <HAL_TIM_PWM_Start+0x9e>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2b10      	cmp	r3, #16
 8003696:	d109      	bne.n	80036ac <HAL_TIM_PWM_Start+0x8c>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	bf14      	ite	ne
 80036a4:	2301      	movne	r3, #1
 80036a6:	2300      	moveq	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	e008      	b.n	80036be <HAL_TIM_PWM_Start+0x9e>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	bf14      	ite	ne
 80036b8:	2301      	movne	r3, #1
 80036ba:	2300      	moveq	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e097      	b.n	80037f6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d104      	bne.n	80036d6 <HAL_TIM_PWM_Start+0xb6>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2202      	movs	r2, #2
 80036d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036d4:	e023      	b.n	800371e <HAL_TIM_PWM_Start+0xfe>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2b04      	cmp	r3, #4
 80036da:	d104      	bne.n	80036e6 <HAL_TIM_PWM_Start+0xc6>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2202      	movs	r2, #2
 80036e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036e4:	e01b      	b.n	800371e <HAL_TIM_PWM_Start+0xfe>
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d104      	bne.n	80036f6 <HAL_TIM_PWM_Start+0xd6>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036f4:	e013      	b.n	800371e <HAL_TIM_PWM_Start+0xfe>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b0c      	cmp	r3, #12
 80036fa:	d104      	bne.n	8003706 <HAL_TIM_PWM_Start+0xe6>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003704:	e00b      	b.n	800371e <HAL_TIM_PWM_Start+0xfe>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b10      	cmp	r3, #16
 800370a:	d104      	bne.n	8003716 <HAL_TIM_PWM_Start+0xf6>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003714:	e003      	b.n	800371e <HAL_TIM_PWM_Start+0xfe>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2202      	movs	r2, #2
 800371a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2201      	movs	r2, #1
 8003724:	6839      	ldr	r1, [r7, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f000 ff98 	bl	800465c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a33      	ldr	r2, [pc, #204]	; (8003800 <HAL_TIM_PWM_Start+0x1e0>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d013      	beq.n	800375e <HAL_TIM_PWM_Start+0x13e>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a32      	ldr	r2, [pc, #200]	; (8003804 <HAL_TIM_PWM_Start+0x1e4>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d00e      	beq.n	800375e <HAL_TIM_PWM_Start+0x13e>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a30      	ldr	r2, [pc, #192]	; (8003808 <HAL_TIM_PWM_Start+0x1e8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d009      	beq.n	800375e <HAL_TIM_PWM_Start+0x13e>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a2f      	ldr	r2, [pc, #188]	; (800380c <HAL_TIM_PWM_Start+0x1ec>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d004      	beq.n	800375e <HAL_TIM_PWM_Start+0x13e>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a2d      	ldr	r2, [pc, #180]	; (8003810 <HAL_TIM_PWM_Start+0x1f0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d101      	bne.n	8003762 <HAL_TIM_PWM_Start+0x142>
 800375e:	2301      	movs	r3, #1
 8003760:	e000      	b.n	8003764 <HAL_TIM_PWM_Start+0x144>
 8003762:	2300      	movs	r3, #0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d007      	beq.n	8003778 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003776:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a20      	ldr	r2, [pc, #128]	; (8003800 <HAL_TIM_PWM_Start+0x1e0>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d018      	beq.n	80037b4 <HAL_TIM_PWM_Start+0x194>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800378a:	d013      	beq.n	80037b4 <HAL_TIM_PWM_Start+0x194>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a20      	ldr	r2, [pc, #128]	; (8003814 <HAL_TIM_PWM_Start+0x1f4>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d00e      	beq.n	80037b4 <HAL_TIM_PWM_Start+0x194>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a1f      	ldr	r2, [pc, #124]	; (8003818 <HAL_TIM_PWM_Start+0x1f8>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d009      	beq.n	80037b4 <HAL_TIM_PWM_Start+0x194>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a17      	ldr	r2, [pc, #92]	; (8003804 <HAL_TIM_PWM_Start+0x1e4>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d004      	beq.n	80037b4 <HAL_TIM_PWM_Start+0x194>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a16      	ldr	r2, [pc, #88]	; (8003808 <HAL_TIM_PWM_Start+0x1e8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d115      	bne.n	80037e0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	4b18      	ldr	r3, [pc, #96]	; (800381c <HAL_TIM_PWM_Start+0x1fc>)
 80037bc:	4013      	ands	r3, r2
 80037be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2b06      	cmp	r3, #6
 80037c4:	d015      	beq.n	80037f2 <HAL_TIM_PWM_Start+0x1d2>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037cc:	d011      	beq.n	80037f2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f042 0201 	orr.w	r2, r2, #1
 80037dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037de:	e008      	b.n	80037f2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0201 	orr.w	r2, r2, #1
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	e000      	b.n	80037f4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40012c00 	.word	0x40012c00
 8003804:	40013400 	.word	0x40013400
 8003808:	40014000 	.word	0x40014000
 800380c:	40014400 	.word	0x40014400
 8003810:	40014800 	.word	0x40014800
 8003814:	40000400 	.word	0x40000400
 8003818:	40000800 	.word	0x40000800
 800381c:	00010007 	.word	0x00010007

08003820 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b02      	cmp	r3, #2
 8003834:	d122      	bne.n	800387c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b02      	cmp	r3, #2
 8003842:	d11b      	bne.n	800387c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f06f 0202 	mvn.w	r2, #2
 800384c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	f003 0303 	and.w	r3, r3, #3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 fadc 	bl	8003e20 <HAL_TIM_IC_CaptureCallback>
 8003868:	e005      	b.n	8003876 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 face 	bl	8003e0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 fadf 	bl	8003e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	f003 0304 	and.w	r3, r3, #4
 8003886:	2b04      	cmp	r3, #4
 8003888:	d122      	bne.n	80038d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b04      	cmp	r3, #4
 8003896:	d11b      	bne.n	80038d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f06f 0204 	mvn.w	r2, #4
 80038a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2202      	movs	r2, #2
 80038a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 fab2 	bl	8003e20 <HAL_TIM_IC_CaptureCallback>
 80038bc:	e005      	b.n	80038ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 faa4 	bl	8003e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 fab5 	bl	8003e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d122      	bne.n	8003924 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f003 0308 	and.w	r3, r3, #8
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	d11b      	bne.n	8003924 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f06f 0208 	mvn.w	r2, #8
 80038f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2204      	movs	r2, #4
 80038fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 fa88 	bl	8003e20 <HAL_TIM_IC_CaptureCallback>
 8003910:	e005      	b.n	800391e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 fa7a 	bl	8003e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 fa8b 	bl	8003e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	f003 0310 	and.w	r3, r3, #16
 800392e:	2b10      	cmp	r3, #16
 8003930:	d122      	bne.n	8003978 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f003 0310 	and.w	r3, r3, #16
 800393c:	2b10      	cmp	r3, #16
 800393e:	d11b      	bne.n	8003978 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f06f 0210 	mvn.w	r2, #16
 8003948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2208      	movs	r2, #8
 800394e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 fa5e 	bl	8003e20 <HAL_TIM_IC_CaptureCallback>
 8003964:	e005      	b.n	8003972 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 fa50 	bl	8003e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 fa61 	bl	8003e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b01      	cmp	r3, #1
 8003984:	d10e      	bne.n	80039a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b01      	cmp	r3, #1
 8003992:	d107      	bne.n	80039a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f06f 0201 	mvn.w	r2, #1
 800399c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7fd fd4e 	bl	8001440 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ae:	2b80      	cmp	r3, #128	; 0x80
 80039b0:	d10e      	bne.n	80039d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039bc:	2b80      	cmp	r3, #128	; 0x80
 80039be:	d107      	bne.n	80039d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 fef6 	bl	80047bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039de:	d10e      	bne.n	80039fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ea:	2b80      	cmp	r3, #128	; 0x80
 80039ec:	d107      	bne.n	80039fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80039f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 fee9 	bl	80047d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a08:	2b40      	cmp	r3, #64	; 0x40
 8003a0a:	d10e      	bne.n	8003a2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a16:	2b40      	cmp	r3, #64	; 0x40
 8003a18:	d107      	bne.n	8003a2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 fa0f 	bl	8003e48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	f003 0320 	and.w	r3, r3, #32
 8003a34:	2b20      	cmp	r3, #32
 8003a36:	d10e      	bne.n	8003a56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f003 0320 	and.w	r3, r3, #32
 8003a42:	2b20      	cmp	r3, #32
 8003a44:	d107      	bne.n	8003a56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f06f 0220 	mvn.w	r2, #32
 8003a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 fea9 	bl	80047a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a56:	bf00      	nop
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
	...

08003a60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d101      	bne.n	8003a7a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003a76:	2302      	movs	r3, #2
 8003a78:	e0fd      	b.n	8003c76 <HAL_TIM_PWM_ConfigChannel+0x216>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b14      	cmp	r3, #20
 8003a86:	f200 80f0 	bhi.w	8003c6a <HAL_TIM_PWM_ConfigChannel+0x20a>
 8003a8a:	a201      	add	r2, pc, #4	; (adr r2, 8003a90 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a90:	08003ae5 	.word	0x08003ae5
 8003a94:	08003c6b 	.word	0x08003c6b
 8003a98:	08003c6b 	.word	0x08003c6b
 8003a9c:	08003c6b 	.word	0x08003c6b
 8003aa0:	08003b25 	.word	0x08003b25
 8003aa4:	08003c6b 	.word	0x08003c6b
 8003aa8:	08003c6b 	.word	0x08003c6b
 8003aac:	08003c6b 	.word	0x08003c6b
 8003ab0:	08003b67 	.word	0x08003b67
 8003ab4:	08003c6b 	.word	0x08003c6b
 8003ab8:	08003c6b 	.word	0x08003c6b
 8003abc:	08003c6b 	.word	0x08003c6b
 8003ac0:	08003ba7 	.word	0x08003ba7
 8003ac4:	08003c6b 	.word	0x08003c6b
 8003ac8:	08003c6b 	.word	0x08003c6b
 8003acc:	08003c6b 	.word	0x08003c6b
 8003ad0:	08003be9 	.word	0x08003be9
 8003ad4:	08003c6b 	.word	0x08003c6b
 8003ad8:	08003c6b 	.word	0x08003c6b
 8003adc:	08003c6b 	.word	0x08003c6b
 8003ae0:	08003c29 	.word	0x08003c29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68b9      	ldr	r1, [r7, #8]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 fa46 	bl	8003f7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	699a      	ldr	r2, [r3, #24]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0208 	orr.w	r2, r2, #8
 8003afe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	699a      	ldr	r2, [r3, #24]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0204 	bic.w	r2, r2, #4
 8003b0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6999      	ldr	r1, [r3, #24]
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	691a      	ldr	r2, [r3, #16]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	619a      	str	r2, [r3, #24]
      break;
 8003b22:	e0a3      	b.n	8003c6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68b9      	ldr	r1, [r7, #8]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 fab6 	bl	800409c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699a      	ldr	r2, [r3, #24]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699a      	ldr	r2, [r3, #24]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6999      	ldr	r1, [r3, #24]
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	021a      	lsls	r2, r3, #8
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	619a      	str	r2, [r3, #24]
      break;
 8003b64:	e082      	b.n	8003c6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68b9      	ldr	r1, [r7, #8]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 fb1f 	bl	80041b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	69da      	ldr	r2, [r3, #28]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f042 0208 	orr.w	r2, r2, #8
 8003b80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	69da      	ldr	r2, [r3, #28]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0204 	bic.w	r2, r2, #4
 8003b90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	69d9      	ldr	r1, [r3, #28]
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	61da      	str	r2, [r3, #28]
      break;
 8003ba4:	e062      	b.n	8003c6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68b9      	ldr	r1, [r7, #8]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f000 fb87 	bl	80042c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69da      	ldr	r2, [r3, #28]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69da      	ldr	r2, [r3, #28]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	69d9      	ldr	r1, [r3, #28]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	021a      	lsls	r2, r3, #8
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	61da      	str	r2, [r3, #28]
      break;
 8003be6:	e041      	b.n	8003c6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68b9      	ldr	r1, [r7, #8]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 fbd0 	bl	8004394 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0208 	orr.w	r2, r2, #8
 8003c02:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0204 	bic.w	r2, r2, #4
 8003c12:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	691a      	ldr	r2, [r3, #16]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003c26:	e021      	b.n	8003c6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68b9      	ldr	r1, [r7, #8]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 fc14 	bl	800445c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	021a      	lsls	r2, r3, #8
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003c68:	e000      	b.n	8003c6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8003c6a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop

08003c80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d101      	bne.n	8003c98 <HAL_TIM_ConfigClockSource+0x18>
 8003c94:	2302      	movs	r3, #2
 8003c96:	e0b5      	b.n	8003e04 <HAL_TIM_ConfigClockSource+0x184>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003cba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cc2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cd4:	d03e      	beq.n	8003d54 <HAL_TIM_ConfigClockSource+0xd4>
 8003cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cda:	f200 8087 	bhi.w	8003dec <HAL_TIM_ConfigClockSource+0x16c>
 8003cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ce2:	f000 8085 	beq.w	8003df0 <HAL_TIM_ConfigClockSource+0x170>
 8003ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cea:	d87f      	bhi.n	8003dec <HAL_TIM_ConfigClockSource+0x16c>
 8003cec:	2b70      	cmp	r3, #112	; 0x70
 8003cee:	d01a      	beq.n	8003d26 <HAL_TIM_ConfigClockSource+0xa6>
 8003cf0:	2b70      	cmp	r3, #112	; 0x70
 8003cf2:	d87b      	bhi.n	8003dec <HAL_TIM_ConfigClockSource+0x16c>
 8003cf4:	2b60      	cmp	r3, #96	; 0x60
 8003cf6:	d050      	beq.n	8003d9a <HAL_TIM_ConfigClockSource+0x11a>
 8003cf8:	2b60      	cmp	r3, #96	; 0x60
 8003cfa:	d877      	bhi.n	8003dec <HAL_TIM_ConfigClockSource+0x16c>
 8003cfc:	2b50      	cmp	r3, #80	; 0x50
 8003cfe:	d03c      	beq.n	8003d7a <HAL_TIM_ConfigClockSource+0xfa>
 8003d00:	2b50      	cmp	r3, #80	; 0x50
 8003d02:	d873      	bhi.n	8003dec <HAL_TIM_ConfigClockSource+0x16c>
 8003d04:	2b40      	cmp	r3, #64	; 0x40
 8003d06:	d058      	beq.n	8003dba <HAL_TIM_ConfigClockSource+0x13a>
 8003d08:	2b40      	cmp	r3, #64	; 0x40
 8003d0a:	d86f      	bhi.n	8003dec <HAL_TIM_ConfigClockSource+0x16c>
 8003d0c:	2b30      	cmp	r3, #48	; 0x30
 8003d0e:	d064      	beq.n	8003dda <HAL_TIM_ConfigClockSource+0x15a>
 8003d10:	2b30      	cmp	r3, #48	; 0x30
 8003d12:	d86b      	bhi.n	8003dec <HAL_TIM_ConfigClockSource+0x16c>
 8003d14:	2b20      	cmp	r3, #32
 8003d16:	d060      	beq.n	8003dda <HAL_TIM_ConfigClockSource+0x15a>
 8003d18:	2b20      	cmp	r3, #32
 8003d1a:	d867      	bhi.n	8003dec <HAL_TIM_ConfigClockSource+0x16c>
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d05c      	beq.n	8003dda <HAL_TIM_ConfigClockSource+0x15a>
 8003d20:	2b10      	cmp	r3, #16
 8003d22:	d05a      	beq.n	8003dda <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003d24:	e062      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6818      	ldr	r0, [r3, #0]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	6899      	ldr	r1, [r3, #8]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f000 fc71 	bl	800461c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d48:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	609a      	str	r2, [r3, #8]
      break;
 8003d52:	e04e      	b.n	8003df2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6818      	ldr	r0, [r3, #0]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	6899      	ldr	r1, [r3, #8]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f000 fc5a 	bl	800461c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689a      	ldr	r2, [r3, #8]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d76:	609a      	str	r2, [r3, #8]
      break;
 8003d78:	e03b      	b.n	8003df2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6818      	ldr	r0, [r3, #0]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	6859      	ldr	r1, [r3, #4]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	461a      	mov	r2, r3
 8003d88:	f000 fbce 	bl	8004528 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2150      	movs	r1, #80	; 0x50
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 fc27 	bl	80045e6 <TIM_ITRx_SetConfig>
      break;
 8003d98:	e02b      	b.n	8003df2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6818      	ldr	r0, [r3, #0]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	6859      	ldr	r1, [r3, #4]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	461a      	mov	r2, r3
 8003da8:	f000 fbed 	bl	8004586 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2160      	movs	r1, #96	; 0x60
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 fc17 	bl	80045e6 <TIM_ITRx_SetConfig>
      break;
 8003db8:	e01b      	b.n	8003df2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6818      	ldr	r0, [r3, #0]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	6859      	ldr	r1, [r3, #4]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	f000 fbae 	bl	8004528 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2140      	movs	r1, #64	; 0x40
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fc07 	bl	80045e6 <TIM_ITRx_SetConfig>
      break;
 8003dd8:	e00b      	b.n	8003df2 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4619      	mov	r1, r3
 8003de4:	4610      	mov	r0, r2
 8003de6:	f000 fbfe 	bl	80045e6 <TIM_ITRx_SetConfig>
        break;
 8003dea:	e002      	b.n	8003df2 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8003dec:	bf00      	nop
 8003dee:	e000      	b.n	8003df2 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8003df0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a3c      	ldr	r2, [pc, #240]	; (8003f60 <TIM_Base_SetConfig+0x104>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d00f      	beq.n	8003e94 <TIM_Base_SetConfig+0x38>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e7a:	d00b      	beq.n	8003e94 <TIM_Base_SetConfig+0x38>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a39      	ldr	r2, [pc, #228]	; (8003f64 <TIM_Base_SetConfig+0x108>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d007      	beq.n	8003e94 <TIM_Base_SetConfig+0x38>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a38      	ldr	r2, [pc, #224]	; (8003f68 <TIM_Base_SetConfig+0x10c>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d003      	beq.n	8003e94 <TIM_Base_SetConfig+0x38>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a37      	ldr	r2, [pc, #220]	; (8003f6c <TIM_Base_SetConfig+0x110>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d108      	bne.n	8003ea6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a2d      	ldr	r2, [pc, #180]	; (8003f60 <TIM_Base_SetConfig+0x104>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d01b      	beq.n	8003ee6 <TIM_Base_SetConfig+0x8a>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb4:	d017      	beq.n	8003ee6 <TIM_Base_SetConfig+0x8a>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a2a      	ldr	r2, [pc, #168]	; (8003f64 <TIM_Base_SetConfig+0x108>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d013      	beq.n	8003ee6 <TIM_Base_SetConfig+0x8a>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a29      	ldr	r2, [pc, #164]	; (8003f68 <TIM_Base_SetConfig+0x10c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d00f      	beq.n	8003ee6 <TIM_Base_SetConfig+0x8a>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a28      	ldr	r2, [pc, #160]	; (8003f6c <TIM_Base_SetConfig+0x110>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d00b      	beq.n	8003ee6 <TIM_Base_SetConfig+0x8a>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a27      	ldr	r2, [pc, #156]	; (8003f70 <TIM_Base_SetConfig+0x114>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d007      	beq.n	8003ee6 <TIM_Base_SetConfig+0x8a>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a26      	ldr	r2, [pc, #152]	; (8003f74 <TIM_Base_SetConfig+0x118>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d003      	beq.n	8003ee6 <TIM_Base_SetConfig+0x8a>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a25      	ldr	r2, [pc, #148]	; (8003f78 <TIM_Base_SetConfig+0x11c>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d108      	bne.n	8003ef8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a10      	ldr	r2, [pc, #64]	; (8003f60 <TIM_Base_SetConfig+0x104>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d00f      	beq.n	8003f44 <TIM_Base_SetConfig+0xe8>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a11      	ldr	r2, [pc, #68]	; (8003f6c <TIM_Base_SetConfig+0x110>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d00b      	beq.n	8003f44 <TIM_Base_SetConfig+0xe8>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a10      	ldr	r2, [pc, #64]	; (8003f70 <TIM_Base_SetConfig+0x114>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d007      	beq.n	8003f44 <TIM_Base_SetConfig+0xe8>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a0f      	ldr	r2, [pc, #60]	; (8003f74 <TIM_Base_SetConfig+0x118>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d003      	beq.n	8003f44 <TIM_Base_SetConfig+0xe8>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a0e      	ldr	r2, [pc, #56]	; (8003f78 <TIM_Base_SetConfig+0x11c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d103      	bne.n	8003f4c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	691a      	ldr	r2, [r3, #16]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	615a      	str	r2, [r3, #20]
}
 8003f52:	bf00      	nop
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	40012c00 	.word	0x40012c00
 8003f64:	40000400 	.word	0x40000400
 8003f68:	40000800 	.word	0x40000800
 8003f6c:	40013400 	.word	0x40013400
 8003f70:	40014000 	.word	0x40014000
 8003f74:	40014400 	.word	0x40014400
 8003f78:	40014800 	.word	0x40014800

08003f7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b087      	sub	sp, #28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	f023 0201 	bic.w	r2, r3, #1
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f023 0303 	bic.w	r3, r3, #3
 8003fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f023 0302 	bic.w	r3, r3, #2
 8003fc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a2c      	ldr	r2, [pc, #176]	; (8004088 <TIM_OC1_SetConfig+0x10c>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d00f      	beq.n	8003ffc <TIM_OC1_SetConfig+0x80>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a2b      	ldr	r2, [pc, #172]	; (800408c <TIM_OC1_SetConfig+0x110>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d00b      	beq.n	8003ffc <TIM_OC1_SetConfig+0x80>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a2a      	ldr	r2, [pc, #168]	; (8004090 <TIM_OC1_SetConfig+0x114>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d007      	beq.n	8003ffc <TIM_OC1_SetConfig+0x80>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a29      	ldr	r2, [pc, #164]	; (8004094 <TIM_OC1_SetConfig+0x118>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d003      	beq.n	8003ffc <TIM_OC1_SetConfig+0x80>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a28      	ldr	r2, [pc, #160]	; (8004098 <TIM_OC1_SetConfig+0x11c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d10c      	bne.n	8004016 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f023 0308 	bic.w	r3, r3, #8
 8004002:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	4313      	orrs	r3, r2
 800400c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f023 0304 	bic.w	r3, r3, #4
 8004014:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a1b      	ldr	r2, [pc, #108]	; (8004088 <TIM_OC1_SetConfig+0x10c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d00f      	beq.n	800403e <TIM_OC1_SetConfig+0xc2>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a1a      	ldr	r2, [pc, #104]	; (800408c <TIM_OC1_SetConfig+0x110>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d00b      	beq.n	800403e <TIM_OC1_SetConfig+0xc2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a19      	ldr	r2, [pc, #100]	; (8004090 <TIM_OC1_SetConfig+0x114>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d007      	beq.n	800403e <TIM_OC1_SetConfig+0xc2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a18      	ldr	r2, [pc, #96]	; (8004094 <TIM_OC1_SetConfig+0x118>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d003      	beq.n	800403e <TIM_OC1_SetConfig+0xc2>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a17      	ldr	r2, [pc, #92]	; (8004098 <TIM_OC1_SetConfig+0x11c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d111      	bne.n	8004062 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004044:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800404c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	4313      	orrs	r3, r2
 8004056:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	4313      	orrs	r3, r2
 8004060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	621a      	str	r2, [r3, #32]
}
 800407c:	bf00      	nop
 800407e:	371c      	adds	r7, #28
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	40012c00 	.word	0x40012c00
 800408c:	40013400 	.word	0x40013400
 8004090:	40014000 	.word	0x40014000
 8004094:	40014400 	.word	0x40014400
 8004098:	40014800 	.word	0x40014800

0800409c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800409c:	b480      	push	{r7}
 800409e:	b087      	sub	sp, #28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	f023 0210 	bic.w	r2, r3, #16
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	021b      	lsls	r3, r3, #8
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f023 0320 	bic.w	r3, r3, #32
 80040ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	011b      	lsls	r3, r3, #4
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a28      	ldr	r2, [pc, #160]	; (800419c <TIM_OC2_SetConfig+0x100>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d003      	beq.n	8004108 <TIM_OC2_SetConfig+0x6c>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a27      	ldr	r2, [pc, #156]	; (80041a0 <TIM_OC2_SetConfig+0x104>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d10d      	bne.n	8004124 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800410e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	011b      	lsls	r3, r3, #4
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	4313      	orrs	r3, r2
 800411a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004122:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a1d      	ldr	r2, [pc, #116]	; (800419c <TIM_OC2_SetConfig+0x100>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d00f      	beq.n	800414c <TIM_OC2_SetConfig+0xb0>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a1c      	ldr	r2, [pc, #112]	; (80041a0 <TIM_OC2_SetConfig+0x104>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d00b      	beq.n	800414c <TIM_OC2_SetConfig+0xb0>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a1b      	ldr	r2, [pc, #108]	; (80041a4 <TIM_OC2_SetConfig+0x108>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d007      	beq.n	800414c <TIM_OC2_SetConfig+0xb0>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a1a      	ldr	r2, [pc, #104]	; (80041a8 <TIM_OC2_SetConfig+0x10c>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d003      	beq.n	800414c <TIM_OC2_SetConfig+0xb0>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a19      	ldr	r2, [pc, #100]	; (80041ac <TIM_OC2_SetConfig+0x110>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d113      	bne.n	8004174 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004152:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800415a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	4313      	orrs	r3, r2
 8004166:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	4313      	orrs	r3, r2
 8004172:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	621a      	str	r2, [r3, #32]
}
 800418e:	bf00      	nop
 8004190:	371c      	adds	r7, #28
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	40012c00 	.word	0x40012c00
 80041a0:	40013400 	.word	0x40013400
 80041a4:	40014000 	.word	0x40014000
 80041a8:	40014400 	.word	0x40014400
 80041ac:	40014800 	.word	0x40014800

080041b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b087      	sub	sp, #28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f023 0303 	bic.w	r3, r3, #3
 80041ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	021b      	lsls	r3, r3, #8
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	4313      	orrs	r3, r2
 8004208:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a27      	ldr	r2, [pc, #156]	; (80042ac <TIM_OC3_SetConfig+0xfc>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d003      	beq.n	800421a <TIM_OC3_SetConfig+0x6a>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a26      	ldr	r2, [pc, #152]	; (80042b0 <TIM_OC3_SetConfig+0x100>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d10d      	bne.n	8004236 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004220:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	021b      	lsls	r3, r3, #8
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	4313      	orrs	r3, r2
 800422c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004234:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a1c      	ldr	r2, [pc, #112]	; (80042ac <TIM_OC3_SetConfig+0xfc>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d00f      	beq.n	800425e <TIM_OC3_SetConfig+0xae>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a1b      	ldr	r2, [pc, #108]	; (80042b0 <TIM_OC3_SetConfig+0x100>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d00b      	beq.n	800425e <TIM_OC3_SetConfig+0xae>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a1a      	ldr	r2, [pc, #104]	; (80042b4 <TIM_OC3_SetConfig+0x104>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d007      	beq.n	800425e <TIM_OC3_SetConfig+0xae>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a19      	ldr	r2, [pc, #100]	; (80042b8 <TIM_OC3_SetConfig+0x108>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d003      	beq.n	800425e <TIM_OC3_SetConfig+0xae>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a18      	ldr	r2, [pc, #96]	; (80042bc <TIM_OC3_SetConfig+0x10c>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d113      	bne.n	8004286 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004264:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800426c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	4313      	orrs	r3, r2
 8004278:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	011b      	lsls	r3, r3, #4
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	4313      	orrs	r3, r2
 8004284:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	621a      	str	r2, [r3, #32]
}
 80042a0:	bf00      	nop
 80042a2:	371c      	adds	r7, #28
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	40012c00 	.word	0x40012c00
 80042b0:	40013400 	.word	0x40013400
 80042b4:	40014000 	.word	0x40014000
 80042b8:	40014400 	.word	0x40014400
 80042bc:	40014800 	.word	0x40014800

080042c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b087      	sub	sp, #28
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	021b      	lsls	r3, r3, #8
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	4313      	orrs	r3, r2
 8004306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800430e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	031b      	lsls	r3, r3, #12
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	4313      	orrs	r3, r2
 800431a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a18      	ldr	r2, [pc, #96]	; (8004380 <TIM_OC4_SetConfig+0xc0>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d00f      	beq.n	8004344 <TIM_OC4_SetConfig+0x84>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a17      	ldr	r2, [pc, #92]	; (8004384 <TIM_OC4_SetConfig+0xc4>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d00b      	beq.n	8004344 <TIM_OC4_SetConfig+0x84>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a16      	ldr	r2, [pc, #88]	; (8004388 <TIM_OC4_SetConfig+0xc8>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d007      	beq.n	8004344 <TIM_OC4_SetConfig+0x84>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a15      	ldr	r2, [pc, #84]	; (800438c <TIM_OC4_SetConfig+0xcc>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d003      	beq.n	8004344 <TIM_OC4_SetConfig+0x84>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a14      	ldr	r2, [pc, #80]	; (8004390 <TIM_OC4_SetConfig+0xd0>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d109      	bne.n	8004358 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800434a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	019b      	lsls	r3, r3, #6
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	4313      	orrs	r3, r2
 8004356:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	621a      	str	r2, [r3, #32]
}
 8004372:	bf00      	nop
 8004374:	371c      	adds	r7, #28
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	40012c00 	.word	0x40012c00
 8004384:	40013400 	.word	0x40013400
 8004388:	40014000 	.word	0x40014000
 800438c:	40014400 	.word	0x40014400
 8004390:	40014800 	.word	0x40014800

08004394 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004394:	b480      	push	{r7}
 8004396:	b087      	sub	sp, #28
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80043d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	041b      	lsls	r3, r3, #16
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a17      	ldr	r2, [pc, #92]	; (8004448 <TIM_OC5_SetConfig+0xb4>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d00f      	beq.n	800440e <TIM_OC5_SetConfig+0x7a>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a16      	ldr	r2, [pc, #88]	; (800444c <TIM_OC5_SetConfig+0xb8>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d00b      	beq.n	800440e <TIM_OC5_SetConfig+0x7a>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a15      	ldr	r2, [pc, #84]	; (8004450 <TIM_OC5_SetConfig+0xbc>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d007      	beq.n	800440e <TIM_OC5_SetConfig+0x7a>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a14      	ldr	r2, [pc, #80]	; (8004454 <TIM_OC5_SetConfig+0xc0>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d003      	beq.n	800440e <TIM_OC5_SetConfig+0x7a>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a13      	ldr	r2, [pc, #76]	; (8004458 <TIM_OC5_SetConfig+0xc4>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d109      	bne.n	8004422 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004414:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	021b      	lsls	r3, r3, #8
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	4313      	orrs	r3, r2
 8004420:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685a      	ldr	r2, [r3, #4]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	621a      	str	r2, [r3, #32]
}
 800443c:	bf00      	nop
 800443e:	371c      	adds	r7, #28
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr
 8004448:	40012c00 	.word	0x40012c00
 800444c:	40013400 	.word	0x40013400
 8004450:	40014000 	.word	0x40014000
 8004454:	40014400 	.word	0x40014400
 8004458:	40014800 	.word	0x40014800

0800445c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800445c:	b480      	push	{r7}
 800445e:	b087      	sub	sp, #28
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800448a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800448e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	021b      	lsls	r3, r3, #8
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	4313      	orrs	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80044a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	051b      	lsls	r3, r3, #20
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a18      	ldr	r2, [pc, #96]	; (8004514 <TIM_OC6_SetConfig+0xb8>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d00f      	beq.n	80044d8 <TIM_OC6_SetConfig+0x7c>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a17      	ldr	r2, [pc, #92]	; (8004518 <TIM_OC6_SetConfig+0xbc>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d00b      	beq.n	80044d8 <TIM_OC6_SetConfig+0x7c>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a16      	ldr	r2, [pc, #88]	; (800451c <TIM_OC6_SetConfig+0xc0>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d007      	beq.n	80044d8 <TIM_OC6_SetConfig+0x7c>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a15      	ldr	r2, [pc, #84]	; (8004520 <TIM_OC6_SetConfig+0xc4>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d003      	beq.n	80044d8 <TIM_OC6_SetConfig+0x7c>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a14      	ldr	r2, [pc, #80]	; (8004524 <TIM_OC6_SetConfig+0xc8>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d109      	bne.n	80044ec <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	029b      	lsls	r3, r3, #10
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	621a      	str	r2, [r3, #32]
}
 8004506:	bf00      	nop
 8004508:	371c      	adds	r7, #28
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	40012c00 	.word	0x40012c00
 8004518:	40013400 	.word	0x40013400
 800451c:	40014000 	.word	0x40014000
 8004520:	40014400 	.word	0x40014400
 8004524:	40014800 	.word	0x40014800

08004528 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	f023 0201 	bic.w	r2, r3, #1
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004552:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	011b      	lsls	r3, r3, #4
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	4313      	orrs	r3, r2
 800455c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f023 030a 	bic.w	r3, r3, #10
 8004564:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	4313      	orrs	r3, r2
 800456c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	621a      	str	r2, [r3, #32]
}
 800457a:	bf00      	nop
 800457c:	371c      	adds	r7, #28
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004586:	b480      	push	{r7}
 8004588:	b087      	sub	sp, #28
 800458a:	af00      	add	r7, sp, #0
 800458c:	60f8      	str	r0, [r7, #12]
 800458e:	60b9      	str	r1, [r7, #8]
 8004590:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	f023 0210 	bic.w	r2, r3, #16
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	031b      	lsls	r3, r3, #12
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	011b      	lsls	r3, r3, #4
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	621a      	str	r2, [r3, #32]
}
 80045da:	bf00      	nop
 80045dc:	371c      	adds	r7, #28
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b085      	sub	sp, #20
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
 80045ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4313      	orrs	r3, r2
 8004604:	f043 0307 	orr.w	r3, r3, #7
 8004608:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	609a      	str	r2, [r3, #8]
}
 8004610:	bf00      	nop
 8004612:	3714      	adds	r7, #20
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
 8004628:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004636:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	021a      	lsls	r2, r3, #8
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	431a      	orrs	r2, r3
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	4313      	orrs	r3, r2
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	4313      	orrs	r3, r2
 8004648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	609a      	str	r2, [r3, #8]
}
 8004650:	bf00      	nop
 8004652:	371c      	adds	r7, #28
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800465c:	b480      	push	{r7}
 800465e:	b087      	sub	sp, #28
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f003 031f 	and.w	r3, r3, #31
 800466e:	2201      	movs	r2, #1
 8004670:	fa02 f303 	lsl.w	r3, r2, r3
 8004674:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6a1a      	ldr	r2, [r3, #32]
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	43db      	mvns	r3, r3
 800467e:	401a      	ands	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a1a      	ldr	r2, [r3, #32]
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	f003 031f 	and.w	r3, r3, #31
 800468e:	6879      	ldr	r1, [r7, #4]
 8004690:	fa01 f303 	lsl.w	r3, r1, r3
 8004694:	431a      	orrs	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	621a      	str	r2, [r3, #32]
}
 800469a:	bf00      	nop
 800469c:	371c      	adds	r7, #28
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
	...

080046a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046bc:	2302      	movs	r3, #2
 80046be:	e063      	b.n	8004788 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a2b      	ldr	r2, [pc, #172]	; (8004794 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d004      	beq.n	80046f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a2a      	ldr	r2, [pc, #168]	; (8004798 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d108      	bne.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80046fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	4313      	orrs	r3, r2
 8004704:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800470c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	4313      	orrs	r3, r2
 8004716:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a1b      	ldr	r2, [pc, #108]	; (8004794 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d018      	beq.n	800475c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004732:	d013      	beq.n	800475c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a18      	ldr	r2, [pc, #96]	; (800479c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d00e      	beq.n	800475c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a17      	ldr	r2, [pc, #92]	; (80047a0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d009      	beq.n	800475c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a12      	ldr	r2, [pc, #72]	; (8004798 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d004      	beq.n	800475c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a13      	ldr	r2, [pc, #76]	; (80047a4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d10c      	bne.n	8004776 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004762:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	4313      	orrs	r3, r2
 800476c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr
 8004794:	40012c00 	.word	0x40012c00
 8004798:	40013400 	.word	0x40013400
 800479c:	40000400 	.word	0x40000400
 80047a0:	40000800 	.word	0x40000800
 80047a4:	40014000 	.word	0x40014000

080047a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f103 0208 	add.w	r2, r3, #8
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047fc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f103 0208 	add.w	r2, r3, #8
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f103 0208 	add.w	r2, r3, #8
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004832:	bf00      	nop
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800483e:	b480      	push	{r7}
 8004840:	b085      	sub	sp, #20
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
 8004846:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	1c5a      	adds	r2, r3, #1
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	601a      	str	r2, [r3, #0]
}
 800487a:	bf00      	nop
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004886:	b480      	push	{r7}
 8004888:	b085      	sub	sp, #20
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
 800488e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800489c:	d103      	bne.n	80048a6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	e00c      	b.n	80048c0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	3308      	adds	r3, #8
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	e002      	b.n	80048b4 <vListInsert+0x2e>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d2f6      	bcs.n	80048ae <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	1c5a      	adds	r2, r3, #1
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	601a      	str	r2, [r3, #0]
}
 80048ec:	bf00      	nop
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6892      	ldr	r2, [r2, #8]
 800490e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6852      	ldr	r2, [r2, #4]
 8004918:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	429a      	cmp	r2, r3
 8004922:	d103      	bne.n	800492c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	1e5a      	subs	r2, r3, #1
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
}
 8004940:	4618      	mov	r0, r3
 8004942:	3714      	adds	r7, #20
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10a      	bne.n	8004976 <xQueueGenericReset+0x2a>
        __asm volatile
 8004960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	60bb      	str	r3, [r7, #8]
    }
 8004972:	bf00      	nop
 8004974:	e7fe      	b.n	8004974 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8004976:	f002 f8ed 	bl	8006b54 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004982:	68f9      	ldr	r1, [r7, #12]
 8004984:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004986:	fb01 f303 	mul.w	r3, r1, r3
 800498a:	441a      	add	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a6:	3b01      	subs	r3, #1
 80049a8:	68f9      	ldr	r1, [r7, #12]
 80049aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049ac:	fb01 f303 	mul.w	r3, r1, r3
 80049b0:	441a      	add	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	22ff      	movs	r2, #255	; 0xff
 80049ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	22ff      	movs	r2, #255	; 0xff
 80049c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d114      	bne.n	80049f6 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d01a      	beq.n	8004a0a <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	3310      	adds	r3, #16
 80049d8:	4618      	mov	r0, r3
 80049da:	f001 f945 	bl	8005c68 <xTaskRemoveFromEventList>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d012      	beq.n	8004a0a <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80049e4:	4b0c      	ldr	r3, [pc, #48]	; (8004a18 <xQueueGenericReset+0xcc>)
 80049e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	f3bf 8f6f 	isb	sy
 80049f4:	e009      	b.n	8004a0a <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	3310      	adds	r3, #16
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7ff fef2 	bl	80047e4 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	3324      	adds	r3, #36	; 0x24
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7ff feed 	bl	80047e4 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8004a0a:	f002 f8d3 	bl	8006bb4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8004a0e:	2301      	movs	r3, #1
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	e000ed04 	.word	0xe000ed04

08004a1c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b08c      	sub	sp, #48	; 0x30
 8004a20:	af02      	add	r7, sp, #8
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	4613      	mov	r3, r2
 8004a28:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10a      	bne.n	8004a46 <xQueueGenericCreate+0x2a>
        __asm volatile
 8004a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	61bb      	str	r3, [r7, #24]
    }
 8004a42:	bf00      	nop
 8004a44:	e7fe      	b.n	8004a44 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	fb02 f303 	mul.w	r3, r2, r3
 8004a4e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d006      	beq.n	8004a64 <xQueueGenericCreate+0x48>
 8004a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d101      	bne.n	8004a68 <xQueueGenericCreate+0x4c>
 8004a64:	2301      	movs	r3, #1
 8004a66:	e000      	b.n	8004a6a <xQueueGenericCreate+0x4e>
 8004a68:	2300      	movs	r3, #0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10a      	bne.n	8004a84 <xQueueGenericCreate+0x68>
        __asm volatile
 8004a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a72:	f383 8811 	msr	BASEPRI, r3
 8004a76:	f3bf 8f6f 	isb	sy
 8004a7a:	f3bf 8f4f 	dsb	sy
 8004a7e:	617b      	str	r3, [r7, #20]
    }
 8004a80:	bf00      	nop
 8004a82:	e7fe      	b.n	8004a82 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8004a8a:	d90a      	bls.n	8004aa2 <xQueueGenericCreate+0x86>
        __asm volatile
 8004a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a90:	f383 8811 	msr	BASEPRI, r3
 8004a94:	f3bf 8f6f 	isb	sy
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	613b      	str	r3, [r7, #16]
    }
 8004a9e:	bf00      	nop
 8004aa0:	e7fe      	b.n	8004aa0 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	3350      	adds	r3, #80	; 0x50
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f002 f980 	bl	8006dac <pvPortMalloc>
 8004aac:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8004aae:	6a3b      	ldr	r3, [r7, #32]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00d      	beq.n	8004ad0 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004ab4:	6a3b      	ldr	r3, [r7, #32]
 8004ab6:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	3350      	adds	r3, #80	; 0x50
 8004abc:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004abe:	79fa      	ldrb	r2, [r7, #7]
 8004ac0:	6a3b      	ldr	r3, [r7, #32]
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	69fa      	ldr	r2, [r7, #28]
 8004ac8:	68b9      	ldr	r1, [r7, #8]
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 f805 	bl	8004ada <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
    }
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3728      	adds	r7, #40	; 0x28
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b084      	sub	sp, #16
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	60f8      	str	r0, [r7, #12]
 8004ae2:	60b9      	str	r1, [r7, #8]
 8004ae4:	607a      	str	r2, [r7, #4]
 8004ae6:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d103      	bne.n	8004af6 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	601a      	str	r2, [r3, #0]
 8004af4:	e002      	b.n	8004afc <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	68ba      	ldr	r2, [r7, #8]
 8004b06:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b08:	2101      	movs	r1, #1
 8004b0a:	69b8      	ldr	r0, [r7, #24]
 8004b0c:	f7ff ff1e 	bl	800494c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	78fa      	ldrb	r2, [r7, #3]
 8004b14:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8004b18:	78fb      	ldrb	r3, [r7, #3]
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	68f9      	ldr	r1, [r7, #12]
 8004b1e:	2073      	movs	r0, #115	; 0x73
 8004b20:	f003 f8c2 	bl	8007ca8 <SEGGER_SYSVIEW_RecordU32x3>
}
 8004b24:	bf00      	nop
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b090      	sub	sp, #64	; 0x40
 8004b30:	af02      	add	r7, sp, #8
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
 8004b38:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8004b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10a      	bne.n	8004b5e <xQueueGenericSend+0x32>
        __asm volatile
 8004b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4c:	f383 8811 	msr	BASEPRI, r3
 8004b50:	f3bf 8f6f 	isb	sy
 8004b54:	f3bf 8f4f 	dsb	sy
 8004b58:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004b5a:	bf00      	nop
 8004b5c:	e7fe      	b.n	8004b5c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d103      	bne.n	8004b6c <xQueueGenericSend+0x40>
 8004b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <xQueueGenericSend+0x44>
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e000      	b.n	8004b72 <xQueueGenericSend+0x46>
 8004b70:	2300      	movs	r3, #0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10a      	bne.n	8004b8c <xQueueGenericSend+0x60>
        __asm volatile
 8004b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7a:	f383 8811 	msr	BASEPRI, r3
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004b88:	bf00      	nop
 8004b8a:	e7fe      	b.n	8004b8a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d103      	bne.n	8004b9a <xQueueGenericSend+0x6e>
 8004b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d101      	bne.n	8004b9e <xQueueGenericSend+0x72>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e000      	b.n	8004ba0 <xQueueGenericSend+0x74>
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10a      	bne.n	8004bba <xQueueGenericSend+0x8e>
        __asm volatile
 8004ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba8:	f383 8811 	msr	BASEPRI, r3
 8004bac:	f3bf 8f6f 	isb	sy
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	623b      	str	r3, [r7, #32]
    }
 8004bb6:	bf00      	nop
 8004bb8:	e7fe      	b.n	8004bb8 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bba:	f001 f9f5 	bl	8005fa8 <xTaskGetSchedulerState>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d102      	bne.n	8004bca <xQueueGenericSend+0x9e>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <xQueueGenericSend+0xa2>
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e000      	b.n	8004bd0 <xQueueGenericSend+0xa4>
 8004bce:	2300      	movs	r3, #0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10a      	bne.n	8004bea <xQueueGenericSend+0xbe>
        __asm volatile
 8004bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd8:	f383 8811 	msr	BASEPRI, r3
 8004bdc:	f3bf 8f6f 	isb	sy
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	61fb      	str	r3, [r7, #28]
    }
 8004be6:	bf00      	nop
 8004be8:	e7fe      	b.n	8004be8 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004bea:	f001 ffb3 	bl	8006b54 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d302      	bcc.n	8004c00 <xQueueGenericSend+0xd4>
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d136      	bne.n	8004c6e <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8004c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c02:	4618      	mov	r0, r3
 8004c04:	f003 fdb8 	bl	8008778 <SEGGER_SYSVIEW_ShrinkId>
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	6879      	ldr	r1, [r7, #4]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	460b      	mov	r3, r1
 8004c12:	4601      	mov	r1, r0
 8004c14:	205a      	movs	r0, #90	; 0x5a
 8004c16:	f003 f8bd 	bl	8007d94 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	68b9      	ldr	r1, [r7, #8]
 8004c1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c20:	f000 fa78 	bl	8005114 <prvCopyDataToQueue>
 8004c24:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d010      	beq.n	8004c50 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c30:	3324      	adds	r3, #36	; 0x24
 8004c32:	4618      	mov	r0, r3
 8004c34:	f001 f818 	bl	8005c68 <xTaskRemoveFromEventList>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d013      	beq.n	8004c66 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8004c3e:	4b4d      	ldr	r3, [pc, #308]	; (8004d74 <xQueueGenericSend+0x248>)
 8004c40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c44:	601a      	str	r2, [r3, #0]
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	f3bf 8f6f 	isb	sy
 8004c4e:	e00a      	b.n	8004c66 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8004c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d007      	beq.n	8004c66 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004c56:	4b47      	ldr	r3, [pc, #284]	; (8004d74 <xQueueGenericSend+0x248>)
 8004c58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c5c:	601a      	str	r2, [r3, #0]
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004c66:	f001 ffa5 	bl	8006bb4 <vPortExitCritical>
                return pdPASS;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e07d      	b.n	8004d6a <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d110      	bne.n	8004c96 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004c74:	f001 ff9e 	bl	8006bb4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8004c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f003 fd7c 	bl	8008778 <SEGGER_SYSVIEW_ShrinkId>
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	460b      	mov	r3, r1
 8004c8a:	4601      	mov	r1, r0
 8004c8c:	205a      	movs	r0, #90	; 0x5a
 8004c8e:	f003 f881 	bl	8007d94 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8004c92:	2300      	movs	r3, #0
 8004c94:	e069      	b.n	8004d6a <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d106      	bne.n	8004caa <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004c9c:	f107 0314 	add.w	r3, r7, #20
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f001 f847 	bl	8005d34 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004caa:	f001 ff83 	bl	8006bb4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004cae:	f000 fda5 	bl	80057fc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004cb2:	f001 ff4f 	bl	8006b54 <vPortEnterCritical>
 8004cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cbc:	b25b      	sxtb	r3, r3
 8004cbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cc2:	d103      	bne.n	8004ccc <xQueueGenericSend+0x1a0>
 8004cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cd2:	b25b      	sxtb	r3, r3
 8004cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cd8:	d103      	bne.n	8004ce2 <xQueueGenericSend+0x1b6>
 8004cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ce2:	f001 ff67 	bl	8006bb4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ce6:	1d3a      	adds	r2, r7, #4
 8004ce8:	f107 0314 	add.w	r3, r7, #20
 8004cec:	4611      	mov	r1, r2
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f001 f836 	bl	8005d60 <xTaskCheckForTimeOut>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d124      	bne.n	8004d44 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004cfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cfc:	f000 fb02 	bl	8005304 <prvIsQueueFull>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d018      	beq.n	8004d38 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d08:	3310      	adds	r3, #16
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	4611      	mov	r1, r2
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 ff58 	bl	8005bc4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004d14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d16:	f000 fa8d 	bl	8005234 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004d1a:	f000 fd7d 	bl	8005818 <xTaskResumeAll>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f47f af62 	bne.w	8004bea <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8004d26:	4b13      	ldr	r3, [pc, #76]	; (8004d74 <xQueueGenericSend+0x248>)
 8004d28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	f3bf 8f4f 	dsb	sy
 8004d32:	f3bf 8f6f 	isb	sy
 8004d36:	e758      	b.n	8004bea <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004d38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d3a:	f000 fa7b 	bl	8005234 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004d3e:	f000 fd6b 	bl	8005818 <xTaskResumeAll>
 8004d42:	e752      	b.n	8004bea <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004d44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d46:	f000 fa75 	bl	8005234 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004d4a:	f000 fd65 	bl	8005818 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d50:	4618      	mov	r0, r3
 8004d52:	f003 fd11 	bl	8008778 <SEGGER_SYSVIEW_ShrinkId>
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	6879      	ldr	r1, [r7, #4]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	460b      	mov	r3, r1
 8004d60:	4601      	mov	r1, r0
 8004d62:	205a      	movs	r0, #90	; 0x5a
 8004d64:	f003 f816 	bl	8007d94 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8004d68:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3738      	adds	r7, #56	; 0x38
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	e000ed04 	.word	0xe000ed04

08004d78 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b090      	sub	sp, #64	; 0x40
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
 8004d84:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8004d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10a      	bne.n	8004da6 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8004d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d94:	f383 8811 	msr	BASEPRI, r3
 8004d98:	f3bf 8f6f 	isb	sy
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004da2:	bf00      	nop
 8004da4:	e7fe      	b.n	8004da4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d103      	bne.n	8004db4 <xQueueGenericSendFromISR+0x3c>
 8004dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <xQueueGenericSendFromISR+0x40>
 8004db4:	2301      	movs	r3, #1
 8004db6:	e000      	b.n	8004dba <xQueueGenericSendFromISR+0x42>
 8004db8:	2300      	movs	r3, #0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10a      	bne.n	8004dd4 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8004dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc2:	f383 8811 	msr	BASEPRI, r3
 8004dc6:	f3bf 8f6f 	isb	sy
 8004dca:	f3bf 8f4f 	dsb	sy
 8004dce:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004dd0:	bf00      	nop
 8004dd2:	e7fe      	b.n	8004dd2 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d103      	bne.n	8004de2 <xQueueGenericSendFromISR+0x6a>
 8004dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d101      	bne.n	8004de6 <xQueueGenericSendFromISR+0x6e>
 8004de2:	2301      	movs	r3, #1
 8004de4:	e000      	b.n	8004de8 <xQueueGenericSendFromISR+0x70>
 8004de6:	2300      	movs	r3, #0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10a      	bne.n	8004e02 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8004dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df0:	f383 8811 	msr	BASEPRI, r3
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	f3bf 8f4f 	dsb	sy
 8004dfc:	623b      	str	r3, [r7, #32]
    }
 8004dfe:	bf00      	nop
 8004e00:	e7fe      	b.n	8004e00 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e02:	f001 ff93 	bl	8006d2c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8004e06:	f3ef 8211 	mrs	r2, BASEPRI
 8004e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0e:	f383 8811 	msr	BASEPRI, r3
 8004e12:	f3bf 8f6f 	isb	sy
 8004e16:	f3bf 8f4f 	dsb	sy
 8004e1a:	61fa      	str	r2, [r7, #28]
 8004e1c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8004e1e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e20:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d302      	bcc.n	8004e34 <xQueueGenericSendFromISR+0xbc>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d148      	bne.n	8004ec6 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e42:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8004e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e46:	4618      	mov	r0, r3
 8004e48:	f003 fc96 	bl	8008778 <SEGGER_SYSVIEW_ShrinkId>
 8004e4c:	4601      	mov	r1, r0
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	461a      	mov	r2, r3
 8004e52:	2060      	movs	r0, #96	; 0x60
 8004e54:	f002 fece 	bl	8007bf4 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e58:	683a      	ldr	r2, [r7, #0]
 8004e5a:	68b9      	ldr	r1, [r7, #8]
 8004e5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004e5e:	f000 f959 	bl	8005114 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004e62:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004e66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e6a:	d112      	bne.n	8004e92 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d025      	beq.n	8004ec0 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e76:	3324      	adds	r3, #36	; 0x24
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f000 fef5 	bl	8005c68 <xTaskRemoveFromEventList>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d01d      	beq.n	8004ec0 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d01a      	beq.n	8004ec0 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	e016      	b.n	8004ec0 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8004e92:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004e96:	2b7f      	cmp	r3, #127	; 0x7f
 8004e98:	d10a      	bne.n	8004eb0 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8004e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9e:	f383 8811 	msr	BASEPRI, r3
 8004ea2:	f3bf 8f6f 	isb	sy
 8004ea6:	f3bf 8f4f 	dsb	sy
 8004eaa:	617b      	str	r3, [r7, #20]
    }
 8004eac:	bf00      	nop
 8004eae:	e7fe      	b.n	8004eae <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004eb0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	b25a      	sxtb	r2, r3
 8004eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8004ec4:	e00b      	b.n	8004ede <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8004ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f003 fc55 	bl	8008778 <SEGGER_SYSVIEW_ShrinkId>
 8004ece:	4601      	mov	r1, r0
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	2060      	movs	r0, #96	; 0x60
 8004ed6:	f002 fe8d 	bl	8007bf4 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8004eda:	2300      	movs	r3, #0
 8004edc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee0:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004ee8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3740      	adds	r7, #64	; 0x40
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004ef4:	b590      	push	{r4, r7, lr}
 8004ef6:	b08f      	sub	sp, #60	; 0x3c
 8004ef8:	af02      	add	r7, sp, #8
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004f00:	2300      	movs	r3, #0
 8004f02:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10a      	bne.n	8004f24 <xQueueReceive+0x30>
        __asm volatile
 8004f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f12:	f383 8811 	msr	BASEPRI, r3
 8004f16:	f3bf 8f6f 	isb	sy
 8004f1a:	f3bf 8f4f 	dsb	sy
 8004f1e:	623b      	str	r3, [r7, #32]
    }
 8004f20:	bf00      	nop
 8004f22:	e7fe      	b.n	8004f22 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d103      	bne.n	8004f32 <xQueueReceive+0x3e>
 8004f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <xQueueReceive+0x42>
 8004f32:	2301      	movs	r3, #1
 8004f34:	e000      	b.n	8004f38 <xQueueReceive+0x44>
 8004f36:	2300      	movs	r3, #0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d10a      	bne.n	8004f52 <xQueueReceive+0x5e>
        __asm volatile
 8004f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f40:	f383 8811 	msr	BASEPRI, r3
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	61fb      	str	r3, [r7, #28]
    }
 8004f4e:	bf00      	nop
 8004f50:	e7fe      	b.n	8004f50 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f52:	f001 f829 	bl	8005fa8 <xTaskGetSchedulerState>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d102      	bne.n	8004f62 <xQueueReceive+0x6e>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <xQueueReceive+0x72>
 8004f62:	2301      	movs	r3, #1
 8004f64:	e000      	b.n	8004f68 <xQueueReceive+0x74>
 8004f66:	2300      	movs	r3, #0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10a      	bne.n	8004f82 <xQueueReceive+0x8e>
        __asm volatile
 8004f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f70:	f383 8811 	msr	BASEPRI, r3
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	61bb      	str	r3, [r7, #24]
    }
 8004f7e:	bf00      	nop
 8004f80:	e7fe      	b.n	8004f80 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004f82:	f001 fde7 	bl	8006b54 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d02f      	beq.n	8004ff2 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f92:	68b9      	ldr	r1, [r7, #8]
 8004f94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f96:	f000 f927 	bl	80051e8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8004f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f003 fbeb 	bl	8008778 <SEGGER_SYSVIEW_ShrinkId>
 8004fa2:	4604      	mov	r4, r0
 8004fa4:	2000      	movs	r0, #0
 8004fa6:	f003 fbe7 	bl	8008778 <SEGGER_SYSVIEW_ShrinkId>
 8004faa:	4602      	mov	r2, r0
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2101      	movs	r1, #1
 8004fb0:	9100      	str	r1, [sp, #0]
 8004fb2:	4621      	mov	r1, r4
 8004fb4:	205c      	movs	r0, #92	; 0x5c
 8004fb6:	f002 feed 	bl	8007d94 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	1e5a      	subs	r2, r3, #1
 8004fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00f      	beq.n	8004fea <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fcc:	3310      	adds	r3, #16
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 fe4a 	bl	8005c68 <xTaskRemoveFromEventList>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d007      	beq.n	8004fea <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004fda:	4b4d      	ldr	r3, [pc, #308]	; (8005110 <xQueueReceive+0x21c>)
 8004fdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fe0:	601a      	str	r2, [r3, #0]
 8004fe2:	f3bf 8f4f 	dsb	sy
 8004fe6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004fea:	f001 fde3 	bl	8006bb4 <vPortExitCritical>
                return pdPASS;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e08a      	b.n	8005108 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d113      	bne.n	8005020 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004ff8:	f001 fddc 	bl	8006bb4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffe:	4618      	mov	r0, r3
 8005000:	f003 fbba 	bl	8008778 <SEGGER_SYSVIEW_ShrinkId>
 8005004:	4604      	mov	r4, r0
 8005006:	2000      	movs	r0, #0
 8005008:	f003 fbb6 	bl	8008778 <SEGGER_SYSVIEW_ShrinkId>
 800500c:	4602      	mov	r2, r0
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2101      	movs	r1, #1
 8005012:	9100      	str	r1, [sp, #0]
 8005014:	4621      	mov	r1, r4
 8005016:	205c      	movs	r0, #92	; 0x5c
 8005018:	f002 febc 	bl	8007d94 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800501c:	2300      	movs	r3, #0
 800501e:	e073      	b.n	8005108 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005022:	2b00      	cmp	r3, #0
 8005024:	d106      	bne.n	8005034 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005026:	f107 0310 	add.w	r3, r7, #16
 800502a:	4618      	mov	r0, r3
 800502c:	f000 fe82 	bl	8005d34 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005030:	2301      	movs	r3, #1
 8005032:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005034:	f001 fdbe 	bl	8006bb4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005038:	f000 fbe0 	bl	80057fc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800503c:	f001 fd8a 	bl	8006b54 <vPortEnterCritical>
 8005040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005042:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005046:	b25b      	sxtb	r3, r3
 8005048:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800504c:	d103      	bne.n	8005056 <xQueueReceive+0x162>
 800504e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005058:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800505c:	b25b      	sxtb	r3, r3
 800505e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005062:	d103      	bne.n	800506c <xQueueReceive+0x178>
 8005064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005066:	2200      	movs	r2, #0
 8005068:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800506c:	f001 fda2 	bl	8006bb4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005070:	1d3a      	adds	r2, r7, #4
 8005072:	f107 0310 	add.w	r3, r7, #16
 8005076:	4611      	mov	r1, r2
 8005078:	4618      	mov	r0, r3
 800507a:	f000 fe71 	bl	8005d60 <xTaskCheckForTimeOut>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d124      	bne.n	80050ce <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005084:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005086:	f000 f927 	bl	80052d8 <prvIsQueueEmpty>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d018      	beq.n	80050c2 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005092:	3324      	adds	r3, #36	; 0x24
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	4611      	mov	r1, r2
 8005098:	4618      	mov	r0, r3
 800509a:	f000 fd93 	bl	8005bc4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800509e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050a0:	f000 f8c8 	bl	8005234 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80050a4:	f000 fbb8 	bl	8005818 <xTaskResumeAll>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f47f af69 	bne.w	8004f82 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80050b0:	4b17      	ldr	r3, [pc, #92]	; (8005110 <xQueueReceive+0x21c>)
 80050b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050b6:	601a      	str	r2, [r3, #0]
 80050b8:	f3bf 8f4f 	dsb	sy
 80050bc:	f3bf 8f6f 	isb	sy
 80050c0:	e75f      	b.n	8004f82 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80050c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050c4:	f000 f8b6 	bl	8005234 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80050c8:	f000 fba6 	bl	8005818 <xTaskResumeAll>
 80050cc:	e759      	b.n	8004f82 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80050ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050d0:	f000 f8b0 	bl	8005234 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80050d4:	f000 fba0 	bl	8005818 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050da:	f000 f8fd 	bl	80052d8 <prvIsQueueEmpty>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f43f af4e 	beq.w	8004f82 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80050e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e8:	4618      	mov	r0, r3
 80050ea:	f003 fb45 	bl	8008778 <SEGGER_SYSVIEW_ShrinkId>
 80050ee:	4604      	mov	r4, r0
 80050f0:	2000      	movs	r0, #0
 80050f2:	f003 fb41 	bl	8008778 <SEGGER_SYSVIEW_ShrinkId>
 80050f6:	4602      	mov	r2, r0
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2101      	movs	r1, #1
 80050fc:	9100      	str	r1, [sp, #0]
 80050fe:	4621      	mov	r1, r4
 8005100:	205c      	movs	r0, #92	; 0x5c
 8005102:	f002 fe47 	bl	8007d94 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8005106:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005108:	4618      	mov	r0, r3
 800510a:	3734      	adds	r7, #52	; 0x34
 800510c:	46bd      	mov	sp, r7
 800510e:	bd90      	pop	{r4, r7, pc}
 8005110:	e000ed04 	.word	0xe000ed04

08005114 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8005120:	2300      	movs	r3, #0
 8005122:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005128:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10d      	bne.n	800514e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d14d      	bne.n	80051d6 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	4618      	mov	r0, r3
 8005140:	f000 ff50 	bl	8005fe4 <xTaskPriorityDisinherit>
 8005144:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	609a      	str	r2, [r3, #8]
 800514c:	e043      	b.n	80051d6 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d119      	bne.n	8005188 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6858      	ldr	r0, [r3, #4]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515c:	461a      	mov	r2, r3
 800515e:	68b9      	ldr	r1, [r7, #8]
 8005160:	f003 fccc 	bl	8008afc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516c:	441a      	add	r2, r3
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	429a      	cmp	r2, r3
 800517c:	d32b      	bcc.n	80051d6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	605a      	str	r2, [r3, #4]
 8005186:	e026      	b.n	80051d6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	68d8      	ldr	r0, [r3, #12]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005190:	461a      	mov	r2, r3
 8005192:	68b9      	ldr	r1, [r7, #8]
 8005194:	f003 fcb2 	bl	8008afc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	68da      	ldr	r2, [r3, #12]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a0:	425b      	negs	r3, r3
 80051a2:	441a      	add	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	68da      	ldr	r2, [r3, #12]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d207      	bcs.n	80051c4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	689a      	ldr	r2, [r3, #8]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051bc:	425b      	negs	r3, r3
 80051be:	441a      	add	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d105      	bne.n	80051d6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d002      	beq.n	80051d6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	3b01      	subs	r3, #1
 80051d4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80051de:	697b      	ldr	r3, [r7, #20]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3718      	adds	r7, #24
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d018      	beq.n	800522c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68da      	ldr	r2, [r3, #12]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005202:	441a      	add	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	68da      	ldr	r2, [r3, #12]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	429a      	cmp	r2, r3
 8005212:	d303      	bcc.n	800521c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	68d9      	ldr	r1, [r3, #12]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005224:	461a      	mov	r2, r3
 8005226:	6838      	ldr	r0, [r7, #0]
 8005228:	f003 fc68 	bl	8008afc <memcpy>
    }
}
 800522c:	bf00      	nop
 800522e:	3708      	adds	r7, #8
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800523c:	f001 fc8a 	bl	8006b54 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005246:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005248:	e011      	b.n	800526e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524e:	2b00      	cmp	r3, #0
 8005250:	d012      	beq.n	8005278 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	3324      	adds	r3, #36	; 0x24
 8005256:	4618      	mov	r0, r3
 8005258:	f000 fd06 	bl	8005c68 <xTaskRemoveFromEventList>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8005262:	f000 fde3 	bl	8005e2c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8005266:	7bfb      	ldrb	r3, [r7, #15]
 8005268:	3b01      	subs	r3, #1
 800526a:	b2db      	uxtb	r3, r3
 800526c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800526e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005272:	2b00      	cmp	r3, #0
 8005274:	dce9      	bgt.n	800524a <prvUnlockQueue+0x16>
 8005276:	e000      	b.n	800527a <prvUnlockQueue+0x46>
                        break;
 8005278:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	22ff      	movs	r2, #255	; 0xff
 800527e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8005282:	f001 fc97 	bl	8006bb4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8005286:	f001 fc65 	bl	8006b54 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005290:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005292:	e011      	b.n	80052b8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d012      	beq.n	80052c2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	3310      	adds	r3, #16
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 fce1 	bl	8005c68 <xTaskRemoveFromEventList>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80052ac:	f000 fdbe 	bl	8005e2c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80052b0:	7bbb      	ldrb	r3, [r7, #14]
 80052b2:	3b01      	subs	r3, #1
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80052b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	dce9      	bgt.n	8005294 <prvUnlockQueue+0x60>
 80052c0:	e000      	b.n	80052c4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80052c2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	22ff      	movs	r2, #255	; 0xff
 80052c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80052cc:	f001 fc72 	bl	8006bb4 <vPortExitCritical>
}
 80052d0:	bf00      	nop
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80052e0:	f001 fc38 	bl	8006b54 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d102      	bne.n	80052f2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80052ec:	2301      	movs	r3, #1
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	e001      	b.n	80052f6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80052f2:	2300      	movs	r3, #0
 80052f4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80052f6:	f001 fc5d 	bl	8006bb4 <vPortExitCritical>

    return xReturn;
 80052fa:	68fb      	ldr	r3, [r7, #12]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800530c:	f001 fc22 	bl	8006b54 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005318:	429a      	cmp	r2, r3
 800531a:	d102      	bne.n	8005322 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800531c:	2301      	movs	r3, #1
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	e001      	b.n	8005326 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8005322:	2300      	movs	r3, #0
 8005324:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005326:	f001 fc45 	bl	8006bb4 <vPortExitCritical>

    return xReturn;
 800532a:	68fb      	ldr	r3, [r7, #12]
}
 800532c:	4618      	mov	r0, r3
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800533e:	2300      	movs	r3, #0
 8005340:	60fb      	str	r3, [r7, #12]
 8005342:	e01e      	b.n	8005382 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005344:	4a13      	ldr	r2, [pc, #76]	; (8005394 <vQueueAddToRegistry+0x60>)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d115      	bne.n	800537c <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005350:	4910      	ldr	r1, [pc, #64]	; (8005394 <vQueueAddToRegistry+0x60>)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800535a:	4a0e      	ldr	r2, [pc, #56]	; (8005394 <vQueueAddToRegistry+0x60>)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	4413      	add	r3, r2
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4618      	mov	r0, r3
 800536a:	f003 fa05 	bl	8008778 <SEGGER_SYSVIEW_ShrinkId>
 800536e:	4601      	mov	r1, r0
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	461a      	mov	r2, r3
 8005374:	2071      	movs	r0, #113	; 0x71
 8005376:	f002 fc3d 	bl	8007bf4 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800537a:	e006      	b.n	800538a <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	3301      	adds	r3, #1
 8005380:	60fb      	str	r3, [r7, #12]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2b07      	cmp	r3, #7
 8005386:	d9dd      	bls.n	8005344 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8005388:	bf00      	nop
 800538a:	bf00      	nop
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	20003108 	.word	0x20003108

08005398 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80053a8:	f001 fbd4 	bl	8006b54 <vPortEnterCritical>
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053b2:	b25b      	sxtb	r3, r3
 80053b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053b8:	d103      	bne.n	80053c2 <vQueueWaitForMessageRestricted+0x2a>
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053c8:	b25b      	sxtb	r3, r3
 80053ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053ce:	d103      	bne.n	80053d8 <vQueueWaitForMessageRestricted+0x40>
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053d8:	f001 fbec 	bl	8006bb4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d106      	bne.n	80053f2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	3324      	adds	r3, #36	; 0x24
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	68b9      	ldr	r1, [r7, #8]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 fc0d 	bl	8005c0c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80053f2:	6978      	ldr	r0, [r7, #20]
 80053f4:	f7ff ff1e 	bl	8005234 <prvUnlockQueue>
    }
 80053f8:	bf00      	nop
 80053fa:	3718      	adds	r7, #24
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005400:	b580      	push	{r7, lr}
 8005402:	b08c      	sub	sp, #48	; 0x30
 8005404:	af04      	add	r7, sp, #16
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	603b      	str	r3, [r7, #0]
 800540c:	4613      	mov	r3, r2
 800540e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005410:	88fb      	ldrh	r3, [r7, #6]
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	4618      	mov	r0, r3
 8005416:	f001 fcc9 	bl	8006dac <pvPortMalloc>
 800541a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00e      	beq.n	8005440 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005422:	2058      	movs	r0, #88	; 0x58
 8005424:	f001 fcc2 	bl	8006dac <pvPortMalloc>
 8005428:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d003      	beq.n	8005438 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	631a      	str	r2, [r3, #48]	; 0x30
 8005436:	e005      	b.n	8005444 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8005438:	6978      	ldr	r0, [r7, #20]
 800543a:	f001 fd97 	bl	8006f6c <vPortFree>
 800543e:	e001      	b.n	8005444 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8005440:	2300      	movs	r3, #0
 8005442:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d013      	beq.n	8005472 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800544a:	88fa      	ldrh	r2, [r7, #6]
 800544c:	2300      	movs	r3, #0
 800544e:	9303      	str	r3, [sp, #12]
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	9302      	str	r3, [sp, #8]
 8005454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005456:	9301      	str	r3, [sp, #4]
 8005458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	68b9      	ldr	r1, [r7, #8]
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f000 f80e 	bl	8005482 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005466:	69f8      	ldr	r0, [r7, #28]
 8005468:	f000 f8a2 	bl	80055b0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800546c:	2301      	movs	r3, #1
 800546e:	61bb      	str	r3, [r7, #24]
 8005470:	e002      	b.n	8005478 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005472:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005476:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005478:	69bb      	ldr	r3, [r7, #24]
    }
 800547a:	4618      	mov	r0, r3
 800547c:	3720      	adds	r7, #32
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b088      	sub	sp, #32
 8005486:	af00      	add	r7, sp, #0
 8005488:	60f8      	str	r0, [r7, #12]
 800548a:	60b9      	str	r1, [r7, #8]
 800548c:	607a      	str	r2, [r7, #4]
 800548e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005492:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	461a      	mov	r2, r3
 800549a:	21a5      	movs	r1, #165	; 0xa5
 800549c:	f003 fb3c 	bl	8008b18 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80054a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80054aa:	3b01      	subs	r3, #1
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	4413      	add	r3, r2
 80054b0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	f023 0307 	bic.w	r3, r3, #7
 80054b8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	f003 0307 	and.w	r3, r3, #7
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00a      	beq.n	80054da <prvInitialiseNewTask+0x58>
        __asm volatile
 80054c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c8:	f383 8811 	msr	BASEPRI, r3
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	617b      	str	r3, [r7, #20]
    }
 80054d6:	bf00      	nop
 80054d8:	e7fe      	b.n	80054d8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d01f      	beq.n	8005520 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054e0:	2300      	movs	r3, #0
 80054e2:	61fb      	str	r3, [r7, #28]
 80054e4:	e012      	b.n	800550c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	4413      	add	r3, r2
 80054ec:	7819      	ldrb	r1, [r3, #0]
 80054ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	4413      	add	r3, r2
 80054f4:	3334      	adds	r3, #52	; 0x34
 80054f6:	460a      	mov	r2, r1
 80054f8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	4413      	add	r3, r2
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d006      	beq.n	8005514 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	3301      	adds	r3, #1
 800550a:	61fb      	str	r3, [r7, #28]
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	2b09      	cmp	r3, #9
 8005510:	d9e9      	bls.n	80054e6 <prvInitialiseNewTask+0x64>
 8005512:	e000      	b.n	8005516 <prvInitialiseNewTask+0x94>
            {
                break;
 8005514:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005518:	2200      	movs	r2, #0
 800551a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800551e:	e003      	b.n	8005528 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005522:	2200      	movs	r2, #0
 8005524:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552a:	2b04      	cmp	r3, #4
 800552c:	d901      	bls.n	8005532 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800552e:	2304      	movs	r3, #4
 8005530:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005534:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005536:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8005538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800553c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800553e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005540:	2200      	movs	r2, #0
 8005542:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005546:	3304      	adds	r3, #4
 8005548:	4618      	mov	r0, r3
 800554a:	f7ff f96b 	bl	8004824 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800554e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005550:	3318      	adds	r3, #24
 8005552:	4618      	mov	r0, r3
 8005554:	f7ff f966 	bl	8004824 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800555c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800555e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005560:	f1c3 0205 	rsb	r2, r3, #5
 8005564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005566:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800556c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800556e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005570:	3350      	adds	r3, #80	; 0x50
 8005572:	2204      	movs	r2, #4
 8005574:	2100      	movs	r1, #0
 8005576:	4618      	mov	r0, r3
 8005578:	f003 face 	bl	8008b18 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800557c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557e:	3354      	adds	r3, #84	; 0x54
 8005580:	2201      	movs	r2, #1
 8005582:	2100      	movs	r1, #0
 8005584:	4618      	mov	r0, r3
 8005586:	f003 fac7 	bl	8008b18 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	68f9      	ldr	r1, [r7, #12]
 800558e:	69b8      	ldr	r0, [r7, #24]
 8005590:	f001 f932 	bl	80067f8 <pxPortInitialiseStack>
 8005594:	4602      	mov	r2, r0
 8005596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005598:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800559a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559c:	2b00      	cmp	r3, #0
 800559e:	d002      	beq.n	80055a6 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055a4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80055a6:	bf00      	nop
 80055a8:	3720      	adds	r7, #32
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
	...

080055b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80055b0:	b5b0      	push	{r4, r5, r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af02      	add	r7, sp, #8
 80055b6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80055b8:	f001 facc 	bl	8006b54 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80055bc:	4b3b      	ldr	r3, [pc, #236]	; (80056ac <prvAddNewTaskToReadyList+0xfc>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	3301      	adds	r3, #1
 80055c2:	4a3a      	ldr	r2, [pc, #232]	; (80056ac <prvAddNewTaskToReadyList+0xfc>)
 80055c4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80055c6:	4b3a      	ldr	r3, [pc, #232]	; (80056b0 <prvAddNewTaskToReadyList+0x100>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d109      	bne.n	80055e2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80055ce:	4a38      	ldr	r2, [pc, #224]	; (80056b0 <prvAddNewTaskToReadyList+0x100>)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80055d4:	4b35      	ldr	r3, [pc, #212]	; (80056ac <prvAddNewTaskToReadyList+0xfc>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d110      	bne.n	80055fe <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80055dc:	f000 fc4a 	bl	8005e74 <prvInitialiseTaskLists>
 80055e0:	e00d      	b.n	80055fe <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80055e2:	4b34      	ldr	r3, [pc, #208]	; (80056b4 <prvAddNewTaskToReadyList+0x104>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d109      	bne.n	80055fe <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80055ea:	4b31      	ldr	r3, [pc, #196]	; (80056b0 <prvAddNewTaskToReadyList+0x100>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d802      	bhi.n	80055fe <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80055f8:	4a2d      	ldr	r2, [pc, #180]	; (80056b0 <prvAddNewTaskToReadyList+0x100>)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80055fe:	4b2e      	ldr	r3, [pc, #184]	; (80056b8 <prvAddNewTaskToReadyList+0x108>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	3301      	adds	r3, #1
 8005604:	4a2c      	ldr	r2, [pc, #176]	; (80056b8 <prvAddNewTaskToReadyList+0x108>)
 8005606:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005608:	4b2b      	ldr	r3, [pc, #172]	; (80056b8 <prvAddNewTaskToReadyList+0x108>)
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d016      	beq.n	8005644 <prvAddNewTaskToReadyList+0x94>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4618      	mov	r0, r3
 800561a:	f002 ff87 	bl	800852c <SEGGER_SYSVIEW_OnTaskCreate>
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562e:	461d      	mov	r5, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	461c      	mov	r4, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563a:	1ae3      	subs	r3, r4, r3
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	462b      	mov	r3, r5
 8005640:	f001 fdb2 	bl	80071a8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4618      	mov	r0, r3
 8005648:	f002 fff4 	bl	8008634 <SEGGER_SYSVIEW_OnTaskStartReady>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005650:	2201      	movs	r2, #1
 8005652:	409a      	lsls	r2, r3
 8005654:	4b19      	ldr	r3, [pc, #100]	; (80056bc <prvAddNewTaskToReadyList+0x10c>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4313      	orrs	r3, r2
 800565a:	4a18      	ldr	r2, [pc, #96]	; (80056bc <prvAddNewTaskToReadyList+0x10c>)
 800565c:	6013      	str	r3, [r2, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005662:	4613      	mov	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4413      	add	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4a15      	ldr	r2, [pc, #84]	; (80056c0 <prvAddNewTaskToReadyList+0x110>)
 800566c:	441a      	add	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	3304      	adds	r3, #4
 8005672:	4619      	mov	r1, r3
 8005674:	4610      	mov	r0, r2
 8005676:	f7ff f8e2 	bl	800483e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800567a:	f001 fa9b 	bl	8006bb4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800567e:	4b0d      	ldr	r3, [pc, #52]	; (80056b4 <prvAddNewTaskToReadyList+0x104>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00e      	beq.n	80056a4 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005686:	4b0a      	ldr	r3, [pc, #40]	; (80056b0 <prvAddNewTaskToReadyList+0x100>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005690:	429a      	cmp	r2, r3
 8005692:	d207      	bcs.n	80056a4 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005694:	4b0b      	ldr	r3, [pc, #44]	; (80056c4 <prvAddNewTaskToReadyList+0x114>)
 8005696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800569a:	601a      	str	r2, [r3, #0]
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80056a4:	bf00      	nop
 80056a6:	3708      	adds	r7, #8
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bdb0      	pop	{r4, r5, r7, pc}
 80056ac:	20000170 	.word	0x20000170
 80056b0:	20000098 	.word	0x20000098
 80056b4:	2000017c 	.word	0x2000017c
 80056b8:	2000018c 	.word	0x2000018c
 80056bc:	20000178 	.word	0x20000178
 80056c0:	2000009c 	.word	0x2000009c
 80056c4:	e000ed04 	.word	0xe000ed04

080056c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80056d0:	2300      	movs	r3, #0
 80056d2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d01b      	beq.n	8005712 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80056da:	4b15      	ldr	r3, [pc, #84]	; (8005730 <vTaskDelay+0x68>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00a      	beq.n	80056f8 <vTaskDelay+0x30>
        __asm volatile
 80056e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e6:	f383 8811 	msr	BASEPRI, r3
 80056ea:	f3bf 8f6f 	isb	sy
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	60bb      	str	r3, [r7, #8]
    }
 80056f4:	bf00      	nop
 80056f6:	e7fe      	b.n	80056f6 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80056f8:	f000 f880 	bl	80057fc <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80056fc:	6879      	ldr	r1, [r7, #4]
 80056fe:	2023      	movs	r0, #35	; 0x23
 8005700:	f002 fa3c 	bl	8007b7c <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005704:	2100      	movs	r1, #0
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 fcec 	bl	80060e4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800570c:	f000 f884 	bl	8005818 <xTaskResumeAll>
 8005710:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d107      	bne.n	8005728 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8005718:	4b06      	ldr	r3, [pc, #24]	; (8005734 <vTaskDelay+0x6c>)
 800571a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800571e:	601a      	str	r2, [r3, #0]
 8005720:	f3bf 8f4f 	dsb	sy
 8005724:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8005728:	bf00      	nop
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	20000198 	.word	0x20000198
 8005734:	e000ed04 	.word	0xe000ed04

08005738 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800573e:	4b27      	ldr	r3, [pc, #156]	; (80057dc <vTaskStartScheduler+0xa4>)
 8005740:	9301      	str	r3, [sp, #4]
 8005742:	2300      	movs	r3, #0
 8005744:	9300      	str	r3, [sp, #0]
 8005746:	2300      	movs	r3, #0
 8005748:	2282      	movs	r2, #130	; 0x82
 800574a:	4925      	ldr	r1, [pc, #148]	; (80057e0 <vTaskStartScheduler+0xa8>)
 800574c:	4825      	ldr	r0, [pc, #148]	; (80057e4 <vTaskStartScheduler+0xac>)
 800574e:	f7ff fe57 	bl	8005400 <xTaskCreate>
 8005752:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d102      	bne.n	8005760 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800575a:	f000 fd3b 	bl	80061d4 <xTimerCreateTimerTask>
 800575e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2b01      	cmp	r3, #1
 8005764:	d124      	bne.n	80057b0 <vTaskStartScheduler+0x78>
        __asm volatile
 8005766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576a:	f383 8811 	msr	BASEPRI, r3
 800576e:	f3bf 8f6f 	isb	sy
 8005772:	f3bf 8f4f 	dsb	sy
 8005776:	60bb      	str	r3, [r7, #8]
    }
 8005778:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800577a:	4b1b      	ldr	r3, [pc, #108]	; (80057e8 <vTaskStartScheduler+0xb0>)
 800577c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005780:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005782:	4b1a      	ldr	r3, [pc, #104]	; (80057ec <vTaskStartScheduler+0xb4>)
 8005784:	2201      	movs	r2, #1
 8005786:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005788:	4b19      	ldr	r3, [pc, #100]	; (80057f0 <vTaskStartScheduler+0xb8>)
 800578a:	2200      	movs	r2, #0
 800578c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800578e:	4b19      	ldr	r3, [pc, #100]	; (80057f4 <vTaskStartScheduler+0xbc>)
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	4b12      	ldr	r3, [pc, #72]	; (80057dc <vTaskStartScheduler+0xa4>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	429a      	cmp	r2, r3
 8005798:	d102      	bne.n	80057a0 <vTaskStartScheduler+0x68>
 800579a:	f002 feab 	bl	80084f4 <SEGGER_SYSVIEW_OnIdle>
 800579e:	e004      	b.n	80057aa <vTaskStartScheduler+0x72>
 80057a0:	4b14      	ldr	r3, [pc, #80]	; (80057f4 <vTaskStartScheduler+0xbc>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f002 ff03 	bl	80085b0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80057aa:	f001 f8b3 	bl	8006914 <xPortStartScheduler>
 80057ae:	e00e      	b.n	80057ce <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057b6:	d10a      	bne.n	80057ce <vTaskStartScheduler+0x96>
        __asm volatile
 80057b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057bc:	f383 8811 	msr	BASEPRI, r3
 80057c0:	f3bf 8f6f 	isb	sy
 80057c4:	f3bf 8f4f 	dsb	sy
 80057c8:	607b      	str	r3, [r7, #4]
    }
 80057ca:	bf00      	nop
 80057cc:	e7fe      	b.n	80057cc <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80057ce:	4b0a      	ldr	r3, [pc, #40]	; (80057f8 <vTaskStartScheduler+0xc0>)
 80057d0:	681b      	ldr	r3, [r3, #0]
}
 80057d2:	bf00      	nop
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	20000194 	.word	0x20000194
 80057e0:	0800aa6c 	.word	0x0800aa6c
 80057e4:	08005e45 	.word	0x08005e45
 80057e8:	20000190 	.word	0x20000190
 80057ec:	2000017c 	.word	0x2000017c
 80057f0:	20000174 	.word	0x20000174
 80057f4:	20000098 	.word	0x20000098
 80057f8:	2000000c 	.word	0x2000000c

080057fc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005800:	4b04      	ldr	r3, [pc, #16]	; (8005814 <vTaskSuspendAll+0x18>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	3301      	adds	r3, #1
 8005806:	4a03      	ldr	r2, [pc, #12]	; (8005814 <vTaskSuspendAll+0x18>)
 8005808:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800580a:	bf00      	nop
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	20000198 	.word	0x20000198

08005818 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800581e:	2300      	movs	r3, #0
 8005820:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005822:	2300      	movs	r3, #0
 8005824:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8005826:	4b43      	ldr	r3, [pc, #268]	; (8005934 <xTaskResumeAll+0x11c>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10a      	bne.n	8005844 <xTaskResumeAll+0x2c>
        __asm volatile
 800582e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005832:	f383 8811 	msr	BASEPRI, r3
 8005836:	f3bf 8f6f 	isb	sy
 800583a:	f3bf 8f4f 	dsb	sy
 800583e:	603b      	str	r3, [r7, #0]
    }
 8005840:	bf00      	nop
 8005842:	e7fe      	b.n	8005842 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005844:	f001 f986 	bl	8006b54 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005848:	4b3a      	ldr	r3, [pc, #232]	; (8005934 <xTaskResumeAll+0x11c>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	3b01      	subs	r3, #1
 800584e:	4a39      	ldr	r2, [pc, #228]	; (8005934 <xTaskResumeAll+0x11c>)
 8005850:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005852:	4b38      	ldr	r3, [pc, #224]	; (8005934 <xTaskResumeAll+0x11c>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d165      	bne.n	8005926 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800585a:	4b37      	ldr	r3, [pc, #220]	; (8005938 <xTaskResumeAll+0x120>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d061      	beq.n	8005926 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005862:	e032      	b.n	80058ca <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005864:	4b35      	ldr	r3, [pc, #212]	; (800593c <xTaskResumeAll+0x124>)
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	3318      	adds	r3, #24
 8005870:	4618      	mov	r0, r3
 8005872:	f7ff f841 	bl	80048f8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	3304      	adds	r3, #4
 800587a:	4618      	mov	r0, r3
 800587c:	f7ff f83c 	bl	80048f8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	4618      	mov	r0, r3
 8005884:	f002 fed6 	bl	8008634 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588c:	2201      	movs	r2, #1
 800588e:	409a      	lsls	r2, r3
 8005890:	4b2b      	ldr	r3, [pc, #172]	; (8005940 <xTaskResumeAll+0x128>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4313      	orrs	r3, r2
 8005896:	4a2a      	ldr	r2, [pc, #168]	; (8005940 <xTaskResumeAll+0x128>)
 8005898:	6013      	str	r3, [r2, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800589e:	4613      	mov	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4413      	add	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4a27      	ldr	r2, [pc, #156]	; (8005944 <xTaskResumeAll+0x12c>)
 80058a8:	441a      	add	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	3304      	adds	r3, #4
 80058ae:	4619      	mov	r1, r3
 80058b0:	4610      	mov	r0, r2
 80058b2:	f7fe ffc4 	bl	800483e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ba:	4b23      	ldr	r3, [pc, #140]	; (8005948 <xTaskResumeAll+0x130>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d302      	bcc.n	80058ca <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80058c4:	4b21      	ldr	r3, [pc, #132]	; (800594c <xTaskResumeAll+0x134>)
 80058c6:	2201      	movs	r2, #1
 80058c8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058ca:	4b1c      	ldr	r3, [pc, #112]	; (800593c <xTaskResumeAll+0x124>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1c8      	bne.n	8005864 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d001      	beq.n	80058dc <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80058d8:	f000 fb4a 	bl	8005f70 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80058dc:	4b1c      	ldr	r3, [pc, #112]	; (8005950 <xTaskResumeAll+0x138>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d010      	beq.n	800590a <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80058e8:	f000 f846 	bl	8005978 <xTaskIncrementTick>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d002      	beq.n	80058f8 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80058f2:	4b16      	ldr	r3, [pc, #88]	; (800594c <xTaskResumeAll+0x134>)
 80058f4:	2201      	movs	r2, #1
 80058f6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	3b01      	subs	r3, #1
 80058fc:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1f1      	bne.n	80058e8 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8005904:	4b12      	ldr	r3, [pc, #72]	; (8005950 <xTaskResumeAll+0x138>)
 8005906:	2200      	movs	r2, #0
 8005908:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800590a:	4b10      	ldr	r3, [pc, #64]	; (800594c <xTaskResumeAll+0x134>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d009      	beq.n	8005926 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8005912:	2301      	movs	r3, #1
 8005914:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005916:	4b0f      	ldr	r3, [pc, #60]	; (8005954 <xTaskResumeAll+0x13c>)
 8005918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800591c:	601a      	str	r2, [r3, #0]
 800591e:	f3bf 8f4f 	dsb	sy
 8005922:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005926:	f001 f945 	bl	8006bb4 <vPortExitCritical>

    return xAlreadyYielded;
 800592a:	68bb      	ldr	r3, [r7, #8]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	20000198 	.word	0x20000198
 8005938:	20000170 	.word	0x20000170
 800593c:	20000130 	.word	0x20000130
 8005940:	20000178 	.word	0x20000178
 8005944:	2000009c 	.word	0x2000009c
 8005948:	20000098 	.word	0x20000098
 800594c:	20000184 	.word	0x20000184
 8005950:	20000180 	.word	0x20000180
 8005954:	e000ed04 	.word	0xe000ed04

08005958 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800595e:	4b05      	ldr	r3, [pc, #20]	; (8005974 <xTaskGetTickCount+0x1c>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005964:	687b      	ldr	r3, [r7, #4]
}
 8005966:	4618      	mov	r0, r3
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	20000174 	.word	0x20000174

08005978 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800597e:	2300      	movs	r3, #0
 8005980:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005982:	4b50      	ldr	r3, [pc, #320]	; (8005ac4 <xTaskIncrementTick+0x14c>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	f040 8092 	bne.w	8005ab0 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800598c:	4b4e      	ldr	r3, [pc, #312]	; (8005ac8 <xTaskIncrementTick+0x150>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	3301      	adds	r3, #1
 8005992:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005994:	4a4c      	ldr	r2, [pc, #304]	; (8005ac8 <xTaskIncrementTick+0x150>)
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d120      	bne.n	80059e2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80059a0:	4b4a      	ldr	r3, [pc, #296]	; (8005acc <xTaskIncrementTick+0x154>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00a      	beq.n	80059c0 <xTaskIncrementTick+0x48>
        __asm volatile
 80059aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ae:	f383 8811 	msr	BASEPRI, r3
 80059b2:	f3bf 8f6f 	isb	sy
 80059b6:	f3bf 8f4f 	dsb	sy
 80059ba:	603b      	str	r3, [r7, #0]
    }
 80059bc:	bf00      	nop
 80059be:	e7fe      	b.n	80059be <xTaskIncrementTick+0x46>
 80059c0:	4b42      	ldr	r3, [pc, #264]	; (8005acc <xTaskIncrementTick+0x154>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	60fb      	str	r3, [r7, #12]
 80059c6:	4b42      	ldr	r3, [pc, #264]	; (8005ad0 <xTaskIncrementTick+0x158>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a40      	ldr	r2, [pc, #256]	; (8005acc <xTaskIncrementTick+0x154>)
 80059cc:	6013      	str	r3, [r2, #0]
 80059ce:	4a40      	ldr	r2, [pc, #256]	; (8005ad0 <xTaskIncrementTick+0x158>)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6013      	str	r3, [r2, #0]
 80059d4:	4b3f      	ldr	r3, [pc, #252]	; (8005ad4 <xTaskIncrementTick+0x15c>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	3301      	adds	r3, #1
 80059da:	4a3e      	ldr	r2, [pc, #248]	; (8005ad4 <xTaskIncrementTick+0x15c>)
 80059dc:	6013      	str	r3, [r2, #0]
 80059de:	f000 fac7 	bl	8005f70 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80059e2:	4b3d      	ldr	r3, [pc, #244]	; (8005ad8 <xTaskIncrementTick+0x160>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d34c      	bcc.n	8005a86 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059ec:	4b37      	ldr	r3, [pc, #220]	; (8005acc <xTaskIncrementTick+0x154>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d104      	bne.n	8005a00 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059f6:	4b38      	ldr	r3, [pc, #224]	; (8005ad8 <xTaskIncrementTick+0x160>)
 80059f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059fc:	601a      	str	r2, [r3, #0]
                    break;
 80059fe:	e042      	b.n	8005a86 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a00:	4b32      	ldr	r3, [pc, #200]	; (8005acc <xTaskIncrementTick+0x154>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d203      	bcs.n	8005a20 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005a18:	4a2f      	ldr	r2, [pc, #188]	; (8005ad8 <xTaskIncrementTick+0x160>)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a1e:	e032      	b.n	8005a86 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	3304      	adds	r3, #4
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7fe ff67 	bl	80048f8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d004      	beq.n	8005a3c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	3318      	adds	r3, #24
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7fe ff5e 	bl	80048f8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f002 fdf8 	bl	8008634 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a48:	2201      	movs	r2, #1
 8005a4a:	409a      	lsls	r2, r3
 8005a4c:	4b23      	ldr	r3, [pc, #140]	; (8005adc <xTaskIncrementTick+0x164>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	4a22      	ldr	r2, [pc, #136]	; (8005adc <xTaskIncrementTick+0x164>)
 8005a54:	6013      	str	r3, [r2, #0]
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4413      	add	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4a1f      	ldr	r2, [pc, #124]	; (8005ae0 <xTaskIncrementTick+0x168>)
 8005a64:	441a      	add	r2, r3
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	3304      	adds	r3, #4
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	4610      	mov	r0, r2
 8005a6e:	f7fe fee6 	bl	800483e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a76:	4b1b      	ldr	r3, [pc, #108]	; (8005ae4 <xTaskIncrementTick+0x16c>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d3b5      	bcc.n	80059ec <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8005a80:	2301      	movs	r3, #1
 8005a82:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a84:	e7b2      	b.n	80059ec <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a86:	4b17      	ldr	r3, [pc, #92]	; (8005ae4 <xTaskIncrementTick+0x16c>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a8c:	4914      	ldr	r1, [pc, #80]	; (8005ae0 <xTaskIncrementTick+0x168>)
 8005a8e:	4613      	mov	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	440b      	add	r3, r1
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d901      	bls.n	8005aa2 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8005aa2:	4b11      	ldr	r3, [pc, #68]	; (8005ae8 <xTaskIncrementTick+0x170>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d007      	beq.n	8005aba <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	617b      	str	r3, [r7, #20]
 8005aae:	e004      	b.n	8005aba <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005ab0:	4b0e      	ldr	r3, [pc, #56]	; (8005aec <xTaskIncrementTick+0x174>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	4a0d      	ldr	r2, [pc, #52]	; (8005aec <xTaskIncrementTick+0x174>)
 8005ab8:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8005aba:	697b      	ldr	r3, [r7, #20]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3718      	adds	r7, #24
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	20000198 	.word	0x20000198
 8005ac8:	20000174 	.word	0x20000174
 8005acc:	20000128 	.word	0x20000128
 8005ad0:	2000012c 	.word	0x2000012c
 8005ad4:	20000188 	.word	0x20000188
 8005ad8:	20000190 	.word	0x20000190
 8005adc:	20000178 	.word	0x20000178
 8005ae0:	2000009c 	.word	0x2000009c
 8005ae4:	20000098 	.word	0x20000098
 8005ae8:	20000184 	.word	0x20000184
 8005aec:	20000180 	.word	0x20000180

08005af0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005af6:	4b2d      	ldr	r3, [pc, #180]	; (8005bac <vTaskSwitchContext+0xbc>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005afe:	4b2c      	ldr	r3, [pc, #176]	; (8005bb0 <vTaskSwitchContext+0xc0>)
 8005b00:	2201      	movs	r2, #1
 8005b02:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8005b04:	e04d      	b.n	8005ba2 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8005b06:	4b2a      	ldr	r3, [pc, #168]	; (8005bb0 <vTaskSwitchContext+0xc0>)
 8005b08:	2200      	movs	r2, #0
 8005b0a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b0c:	4b29      	ldr	r3, [pc, #164]	; (8005bb4 <vTaskSwitchContext+0xc4>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	fab3 f383 	clz	r3, r3
 8005b18:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005b1a:	7afb      	ldrb	r3, [r7, #11]
 8005b1c:	f1c3 031f 	rsb	r3, r3, #31
 8005b20:	617b      	str	r3, [r7, #20]
 8005b22:	4925      	ldr	r1, [pc, #148]	; (8005bb8 <vTaskSwitchContext+0xc8>)
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	4613      	mov	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4413      	add	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	440b      	add	r3, r1
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10a      	bne.n	8005b4c <vTaskSwitchContext+0x5c>
        __asm volatile
 8005b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3a:	f383 8811 	msr	BASEPRI, r3
 8005b3e:	f3bf 8f6f 	isb	sy
 8005b42:	f3bf 8f4f 	dsb	sy
 8005b46:	607b      	str	r3, [r7, #4]
    }
 8005b48:	bf00      	nop
 8005b4a:	e7fe      	b.n	8005b4a <vTaskSwitchContext+0x5a>
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4a18      	ldr	r2, [pc, #96]	; (8005bb8 <vTaskSwitchContext+0xc8>)
 8005b58:	4413      	add	r3, r2
 8005b5a:	613b      	str	r3, [r7, #16]
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	605a      	str	r2, [r3, #4]
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	3308      	adds	r3, #8
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d104      	bne.n	8005b7c <vTaskSwitchContext+0x8c>
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	605a      	str	r2, [r3, #4]
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	4a0e      	ldr	r2, [pc, #56]	; (8005bbc <vTaskSwitchContext+0xcc>)
 8005b84:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8005b86:	4b0d      	ldr	r3, [pc, #52]	; (8005bbc <vTaskSwitchContext+0xcc>)
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	4b0d      	ldr	r3, [pc, #52]	; (8005bc0 <vTaskSwitchContext+0xd0>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d102      	bne.n	8005b98 <vTaskSwitchContext+0xa8>
 8005b92:	f002 fcaf 	bl	80084f4 <SEGGER_SYSVIEW_OnIdle>
}
 8005b96:	e004      	b.n	8005ba2 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8005b98:	4b08      	ldr	r3, [pc, #32]	; (8005bbc <vTaskSwitchContext+0xcc>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f002 fd07 	bl	80085b0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8005ba2:	bf00      	nop
 8005ba4:	3718      	adds	r7, #24
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	20000198 	.word	0x20000198
 8005bb0:	20000184 	.word	0x20000184
 8005bb4:	20000178 	.word	0x20000178
 8005bb8:	2000009c 	.word	0x2000009c
 8005bbc:	20000098 	.word	0x20000098
 8005bc0:	20000194 	.word	0x20000194

08005bc4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10a      	bne.n	8005bea <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8005bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd8:	f383 8811 	msr	BASEPRI, r3
 8005bdc:	f3bf 8f6f 	isb	sy
 8005be0:	f3bf 8f4f 	dsb	sy
 8005be4:	60fb      	str	r3, [r7, #12]
    }
 8005be6:	bf00      	nop
 8005be8:	e7fe      	b.n	8005be8 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005bea:	4b07      	ldr	r3, [pc, #28]	; (8005c08 <vTaskPlaceOnEventList+0x44>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	3318      	adds	r3, #24
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7fe fe47 	bl	8004886 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005bf8:	2101      	movs	r1, #1
 8005bfa:	6838      	ldr	r0, [r7, #0]
 8005bfc:	f000 fa72 	bl	80060e4 <prvAddCurrentTaskToDelayedList>
}
 8005c00:	bf00      	nop
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	20000098 	.word	0x20000098

08005c0c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10a      	bne.n	8005c34 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8005c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c22:	f383 8811 	msr	BASEPRI, r3
 8005c26:	f3bf 8f6f 	isb	sy
 8005c2a:	f3bf 8f4f 	dsb	sy
 8005c2e:	617b      	str	r3, [r7, #20]
    }
 8005c30:	bf00      	nop
 8005c32:	e7fe      	b.n	8005c32 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c34:	4b0b      	ldr	r3, [pc, #44]	; (8005c64 <vTaskPlaceOnEventListRestricted+0x58>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	3318      	adds	r3, #24
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f7fe fdfe 	bl	800483e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d002      	beq.n	8005c4e <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8005c48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c4c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8005c4e:	2024      	movs	r0, #36	; 0x24
 8005c50:	f001 ff76 	bl	8007b40 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c54:	6879      	ldr	r1, [r7, #4]
 8005c56:	68b8      	ldr	r0, [r7, #8]
 8005c58:	f000 fa44 	bl	80060e4 <prvAddCurrentTaskToDelayedList>
    }
 8005c5c:	bf00      	nop
 8005c5e:	3718      	adds	r7, #24
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	20000098 	.word	0x20000098

08005c68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10a      	bne.n	8005c94 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8005c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	60fb      	str	r3, [r7, #12]
    }
 8005c90:	bf00      	nop
 8005c92:	e7fe      	b.n	8005c92 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	3318      	adds	r3, #24
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7fe fe2d 	bl	80048f8 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c9e:	4b1f      	ldr	r3, [pc, #124]	; (8005d1c <xTaskRemoveFromEventList+0xb4>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d120      	bne.n	8005ce8 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	3304      	adds	r3, #4
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fe fe24 	bl	80048f8 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f002 fcbe 	bl	8008634 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	409a      	lsls	r2, r3
 8005cc0:	4b17      	ldr	r3, [pc, #92]	; (8005d20 <xTaskRemoveFromEventList+0xb8>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	4a16      	ldr	r2, [pc, #88]	; (8005d20 <xTaskRemoveFromEventList+0xb8>)
 8005cc8:	6013      	str	r3, [r2, #0]
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cce:	4613      	mov	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4413      	add	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4a13      	ldr	r2, [pc, #76]	; (8005d24 <xTaskRemoveFromEventList+0xbc>)
 8005cd8:	441a      	add	r2, r3
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	3304      	adds	r3, #4
 8005cde:	4619      	mov	r1, r3
 8005ce0:	4610      	mov	r0, r2
 8005ce2:	f7fe fdac 	bl	800483e <vListInsertEnd>
 8005ce6:	e005      	b.n	8005cf4 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	3318      	adds	r3, #24
 8005cec:	4619      	mov	r1, r3
 8005cee:	480e      	ldr	r0, [pc, #56]	; (8005d28 <xTaskRemoveFromEventList+0xc0>)
 8005cf0:	f7fe fda5 	bl	800483e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf8:	4b0c      	ldr	r3, [pc, #48]	; (8005d2c <xTaskRemoveFromEventList+0xc4>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d905      	bls.n	8005d0e <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005d02:	2301      	movs	r3, #1
 8005d04:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005d06:	4b0a      	ldr	r3, [pc, #40]	; (8005d30 <xTaskRemoveFromEventList+0xc8>)
 8005d08:	2201      	movs	r2, #1
 8005d0a:	601a      	str	r2, [r3, #0]
 8005d0c:	e001      	b.n	8005d12 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005d12:	697b      	ldr	r3, [r7, #20]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3718      	adds	r7, #24
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	20000198 	.word	0x20000198
 8005d20:	20000178 	.word	0x20000178
 8005d24:	2000009c 	.word	0x2000009c
 8005d28:	20000130 	.word	0x20000130
 8005d2c:	20000098 	.word	0x20000098
 8005d30:	20000184 	.word	0x20000184

08005d34 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d3c:	4b06      	ldr	r3, [pc, #24]	; (8005d58 <vTaskInternalSetTimeOutState+0x24>)
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005d44:	4b05      	ldr	r3, [pc, #20]	; (8005d5c <vTaskInternalSetTimeOutState+0x28>)
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	605a      	str	r2, [r3, #4]
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr
 8005d58:	20000188 	.word	0x20000188
 8005d5c:	20000174 	.word	0x20000174

08005d60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b088      	sub	sp, #32
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10a      	bne.n	8005d86 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8005d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d74:	f383 8811 	msr	BASEPRI, r3
 8005d78:	f3bf 8f6f 	isb	sy
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	613b      	str	r3, [r7, #16]
    }
 8005d82:	bf00      	nop
 8005d84:	e7fe      	b.n	8005d84 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10a      	bne.n	8005da2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8005d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d90:	f383 8811 	msr	BASEPRI, r3
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	f3bf 8f4f 	dsb	sy
 8005d9c:	60fb      	str	r3, [r7, #12]
    }
 8005d9e:	bf00      	nop
 8005da0:	e7fe      	b.n	8005da0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8005da2:	f000 fed7 	bl	8006b54 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005da6:	4b1f      	ldr	r3, [pc, #124]	; (8005e24 <xTaskCheckForTimeOut+0xc4>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	69ba      	ldr	r2, [r7, #24]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dbe:	d102      	bne.n	8005dc6 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	61fb      	str	r3, [r7, #28]
 8005dc4:	e026      	b.n	8005e14 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	4b17      	ldr	r3, [pc, #92]	; (8005e28 <xTaskCheckForTimeOut+0xc8>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d00a      	beq.n	8005de8 <xTaskCheckForTimeOut+0x88>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	69ba      	ldr	r2, [r7, #24]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d305      	bcc.n	8005de8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	2200      	movs	r2, #0
 8005de4:	601a      	str	r2, [r3, #0]
 8005de6:	e015      	b.n	8005e14 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d20b      	bcs.n	8005e0a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	1ad2      	subs	r2, r2, r3
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7ff ff98 	bl	8005d34 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005e04:	2300      	movs	r3, #0
 8005e06:	61fb      	str	r3, [r7, #28]
 8005e08:	e004      	b.n	8005e14 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005e10:	2301      	movs	r3, #1
 8005e12:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005e14:	f000 fece 	bl	8006bb4 <vPortExitCritical>

    return xReturn;
 8005e18:	69fb      	ldr	r3, [r7, #28]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3720      	adds	r7, #32
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	20000174 	.word	0x20000174
 8005e28:	20000188 	.word	0x20000188

08005e2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005e30:	4b03      	ldr	r3, [pc, #12]	; (8005e40 <vTaskMissedYield+0x14>)
 8005e32:	2201      	movs	r2, #1
 8005e34:	601a      	str	r2, [r3, #0]
}
 8005e36:	bf00      	nop
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	20000184 	.word	0x20000184

08005e44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005e4c:	f000 f852 	bl	8005ef4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e50:	4b06      	ldr	r3, [pc, #24]	; (8005e6c <prvIdleTask+0x28>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d9f9      	bls.n	8005e4c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8005e58:	4b05      	ldr	r3, [pc, #20]	; (8005e70 <prvIdleTask+0x2c>)
 8005e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e5e:	601a      	str	r2, [r3, #0]
 8005e60:	f3bf 8f4f 	dsb	sy
 8005e64:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005e68:	e7f0      	b.n	8005e4c <prvIdleTask+0x8>
 8005e6a:	bf00      	nop
 8005e6c:	2000009c 	.word	0x2000009c
 8005e70:	e000ed04 	.word	0xe000ed04

08005e74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	607b      	str	r3, [r7, #4]
 8005e7e:	e00c      	b.n	8005e9a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	4613      	mov	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4413      	add	r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4a12      	ldr	r2, [pc, #72]	; (8005ed4 <prvInitialiseTaskLists+0x60>)
 8005e8c:	4413      	add	r3, r2
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7fe fca8 	bl	80047e4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	3301      	adds	r3, #1
 8005e98:	607b      	str	r3, [r7, #4]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2b04      	cmp	r3, #4
 8005e9e:	d9ef      	bls.n	8005e80 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005ea0:	480d      	ldr	r0, [pc, #52]	; (8005ed8 <prvInitialiseTaskLists+0x64>)
 8005ea2:	f7fe fc9f 	bl	80047e4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005ea6:	480d      	ldr	r0, [pc, #52]	; (8005edc <prvInitialiseTaskLists+0x68>)
 8005ea8:	f7fe fc9c 	bl	80047e4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005eac:	480c      	ldr	r0, [pc, #48]	; (8005ee0 <prvInitialiseTaskLists+0x6c>)
 8005eae:	f7fe fc99 	bl	80047e4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8005eb2:	480c      	ldr	r0, [pc, #48]	; (8005ee4 <prvInitialiseTaskLists+0x70>)
 8005eb4:	f7fe fc96 	bl	80047e4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8005eb8:	480b      	ldr	r0, [pc, #44]	; (8005ee8 <prvInitialiseTaskLists+0x74>)
 8005eba:	f7fe fc93 	bl	80047e4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005ebe:	4b0b      	ldr	r3, [pc, #44]	; (8005eec <prvInitialiseTaskLists+0x78>)
 8005ec0:	4a05      	ldr	r2, [pc, #20]	; (8005ed8 <prvInitialiseTaskLists+0x64>)
 8005ec2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ec4:	4b0a      	ldr	r3, [pc, #40]	; (8005ef0 <prvInitialiseTaskLists+0x7c>)
 8005ec6:	4a05      	ldr	r2, [pc, #20]	; (8005edc <prvInitialiseTaskLists+0x68>)
 8005ec8:	601a      	str	r2, [r3, #0]
}
 8005eca:	bf00      	nop
 8005ecc:	3708      	adds	r7, #8
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	2000009c 	.word	0x2000009c
 8005ed8:	20000100 	.word	0x20000100
 8005edc:	20000114 	.word	0x20000114
 8005ee0:	20000130 	.word	0x20000130
 8005ee4:	20000144 	.word	0x20000144
 8005ee8:	2000015c 	.word	0x2000015c
 8005eec:	20000128 	.word	0x20000128
 8005ef0:	2000012c 	.word	0x2000012c

08005ef4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005efa:	e019      	b.n	8005f30 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8005efc:	f000 fe2a 	bl	8006b54 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f00:	4b10      	ldr	r3, [pc, #64]	; (8005f44 <prvCheckTasksWaitingTermination+0x50>)
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	3304      	adds	r3, #4
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7fe fcf3 	bl	80048f8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8005f12:	4b0d      	ldr	r3, [pc, #52]	; (8005f48 <prvCheckTasksWaitingTermination+0x54>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	3b01      	subs	r3, #1
 8005f18:	4a0b      	ldr	r2, [pc, #44]	; (8005f48 <prvCheckTasksWaitingTermination+0x54>)
 8005f1a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8005f1c:	4b0b      	ldr	r3, [pc, #44]	; (8005f4c <prvCheckTasksWaitingTermination+0x58>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	3b01      	subs	r3, #1
 8005f22:	4a0a      	ldr	r2, [pc, #40]	; (8005f4c <prvCheckTasksWaitingTermination+0x58>)
 8005f24:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8005f26:	f000 fe45 	bl	8006bb4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f810 	bl	8005f50 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f30:	4b06      	ldr	r3, [pc, #24]	; (8005f4c <prvCheckTasksWaitingTermination+0x58>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1e1      	bne.n	8005efc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8005f38:	bf00      	nop
 8005f3a:	bf00      	nop
 8005f3c:	3708      	adds	r7, #8
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	20000144 	.word	0x20000144
 8005f48:	20000170 	.word	0x20000170
 8005f4c:	20000158 	.word	0x20000158

08005f50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f001 f805 	bl	8006f6c <vPortFree>
                vPortFree( pxTCB );
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f001 f802 	bl	8006f6c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005f68:	bf00      	nop
 8005f6a:	3708      	adds	r7, #8
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f70:	b480      	push	{r7}
 8005f72:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f74:	4b0a      	ldr	r3, [pc, #40]	; (8005fa0 <prvResetNextTaskUnblockTime+0x30>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d104      	bne.n	8005f88 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005f7e:	4b09      	ldr	r3, [pc, #36]	; (8005fa4 <prvResetNextTaskUnblockTime+0x34>)
 8005f80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f84:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005f86:	e005      	b.n	8005f94 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005f88:	4b05      	ldr	r3, [pc, #20]	; (8005fa0 <prvResetNextTaskUnblockTime+0x30>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a04      	ldr	r2, [pc, #16]	; (8005fa4 <prvResetNextTaskUnblockTime+0x34>)
 8005f92:	6013      	str	r3, [r2, #0]
}
 8005f94:	bf00      	nop
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	20000128 	.word	0x20000128
 8005fa4:	20000190 	.word	0x20000190

08005fa8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005fae:	4b0b      	ldr	r3, [pc, #44]	; (8005fdc <xTaskGetSchedulerState+0x34>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d102      	bne.n	8005fbc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	607b      	str	r3, [r7, #4]
 8005fba:	e008      	b.n	8005fce <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fbc:	4b08      	ldr	r3, [pc, #32]	; (8005fe0 <xTaskGetSchedulerState+0x38>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d102      	bne.n	8005fca <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	607b      	str	r3, [r7, #4]
 8005fc8:	e001      	b.n	8005fce <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005fce:	687b      	ldr	r3, [r7, #4]
    }
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr
 8005fdc:	2000017c 	.word	0x2000017c
 8005fe0:	20000198 	.word	0x20000198

08005fe4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d068      	beq.n	80060cc <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005ffa:	4b37      	ldr	r3, [pc, #220]	; (80060d8 <xTaskPriorityDisinherit+0xf4>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	429a      	cmp	r2, r3
 8006002:	d00a      	beq.n	800601a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8006004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006008:	f383 8811 	msr	BASEPRI, r3
 800600c:	f3bf 8f6f 	isb	sy
 8006010:	f3bf 8f4f 	dsb	sy
 8006014:	60fb      	str	r3, [r7, #12]
    }
 8006016:	bf00      	nop
 8006018:	e7fe      	b.n	8006018 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10a      	bne.n	8006038 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8006022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006026:	f383 8811 	msr	BASEPRI, r3
 800602a:	f3bf 8f6f 	isb	sy
 800602e:	f3bf 8f4f 	dsb	sy
 8006032:	60bb      	str	r3, [r7, #8]
    }
 8006034:	bf00      	nop
 8006036:	e7fe      	b.n	8006036 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800603c:	1e5a      	subs	r2, r3, #1
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800604a:	429a      	cmp	r2, r3
 800604c:	d03e      	beq.n	80060cc <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006052:	2b00      	cmp	r3, #0
 8006054:	d13a      	bne.n	80060cc <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	3304      	adds	r3, #4
 800605a:	4618      	mov	r0, r3
 800605c:	f7fe fc4c 	bl	80048f8 <uxListRemove>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10a      	bne.n	800607c <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606a:	2201      	movs	r2, #1
 800606c:	fa02 f303 	lsl.w	r3, r2, r3
 8006070:	43da      	mvns	r2, r3
 8006072:	4b1a      	ldr	r3, [pc, #104]	; (80060dc <xTaskPriorityDisinherit+0xf8>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4013      	ands	r3, r2
 8006078:	4a18      	ldr	r2, [pc, #96]	; (80060dc <xTaskPriorityDisinherit+0xf8>)
 800607a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4619      	mov	r1, r3
 8006080:	204a      	movs	r0, #74	; 0x4a
 8006082:	f001 fd7b 	bl	8007b7c <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006092:	f1c3 0205 	rsb	r2, r3, #5
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609e:	2201      	movs	r2, #1
 80060a0:	409a      	lsls	r2, r3
 80060a2:	4b0e      	ldr	r3, [pc, #56]	; (80060dc <xTaskPriorityDisinherit+0xf8>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	4a0c      	ldr	r2, [pc, #48]	; (80060dc <xTaskPriorityDisinherit+0xf8>)
 80060aa:	6013      	str	r3, [r2, #0]
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b0:	4613      	mov	r3, r2
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	4413      	add	r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4a09      	ldr	r2, [pc, #36]	; (80060e0 <xTaskPriorityDisinherit+0xfc>)
 80060ba:	441a      	add	r2, r3
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	3304      	adds	r3, #4
 80060c0:	4619      	mov	r1, r3
 80060c2:	4610      	mov	r0, r2
 80060c4:	f7fe fbbb 	bl	800483e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80060c8:	2301      	movs	r3, #1
 80060ca:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80060cc:	697b      	ldr	r3, [r7, #20]
    }
 80060ce:	4618      	mov	r0, r3
 80060d0:	3718      	adds	r7, #24
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	20000098 	.word	0x20000098
 80060dc:	20000178 	.word	0x20000178
 80060e0:	2000009c 	.word	0x2000009c

080060e4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80060ee:	4b32      	ldr	r3, [pc, #200]	; (80061b8 <prvAddCurrentTaskToDelayedList+0xd4>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060f4:	4b31      	ldr	r3, [pc, #196]	; (80061bc <prvAddCurrentTaskToDelayedList+0xd8>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	3304      	adds	r3, #4
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7fe fbfc 	bl	80048f8 <uxListRemove>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10b      	bne.n	800611e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006106:	4b2d      	ldr	r3, [pc, #180]	; (80061bc <prvAddCurrentTaskToDelayedList+0xd8>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610c:	2201      	movs	r2, #1
 800610e:	fa02 f303 	lsl.w	r3, r2, r3
 8006112:	43da      	mvns	r2, r3
 8006114:	4b2a      	ldr	r3, [pc, #168]	; (80061c0 <prvAddCurrentTaskToDelayedList+0xdc>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4013      	ands	r3, r2
 800611a:	4a29      	ldr	r2, [pc, #164]	; (80061c0 <prvAddCurrentTaskToDelayedList+0xdc>)
 800611c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006124:	d110      	bne.n	8006148 <prvAddCurrentTaskToDelayedList+0x64>
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00d      	beq.n	8006148 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800612c:	4b23      	ldr	r3, [pc, #140]	; (80061bc <prvAddCurrentTaskToDelayedList+0xd8>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	211b      	movs	r1, #27
 8006132:	4618      	mov	r0, r3
 8006134:	f002 fac0 	bl	80086b8 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006138:	4b20      	ldr	r3, [pc, #128]	; (80061bc <prvAddCurrentTaskToDelayedList+0xd8>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	3304      	adds	r3, #4
 800613e:	4619      	mov	r1, r3
 8006140:	4820      	ldr	r0, [pc, #128]	; (80061c4 <prvAddCurrentTaskToDelayedList+0xe0>)
 8006142:	f7fe fb7c 	bl	800483e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006146:	e032      	b.n	80061ae <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4413      	add	r3, r2
 800614e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006150:	4b1a      	ldr	r3, [pc, #104]	; (80061bc <prvAddCurrentTaskToDelayedList+0xd8>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68ba      	ldr	r2, [r7, #8]
 8006156:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	429a      	cmp	r2, r3
 800615e:	d20f      	bcs.n	8006180 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8006160:	4b16      	ldr	r3, [pc, #88]	; (80061bc <prvAddCurrentTaskToDelayedList+0xd8>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2104      	movs	r1, #4
 8006166:	4618      	mov	r0, r3
 8006168:	f002 faa6 	bl	80086b8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800616c:	4b16      	ldr	r3, [pc, #88]	; (80061c8 <prvAddCurrentTaskToDelayedList+0xe4>)
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	4b12      	ldr	r3, [pc, #72]	; (80061bc <prvAddCurrentTaskToDelayedList+0xd8>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	3304      	adds	r3, #4
 8006176:	4619      	mov	r1, r3
 8006178:	4610      	mov	r0, r2
 800617a:	f7fe fb84 	bl	8004886 <vListInsert>
}
 800617e:	e016      	b.n	80061ae <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8006180:	4b0e      	ldr	r3, [pc, #56]	; (80061bc <prvAddCurrentTaskToDelayedList+0xd8>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2104      	movs	r1, #4
 8006186:	4618      	mov	r0, r3
 8006188:	f002 fa96 	bl	80086b8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800618c:	4b0f      	ldr	r3, [pc, #60]	; (80061cc <prvAddCurrentTaskToDelayedList+0xe8>)
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	4b0a      	ldr	r3, [pc, #40]	; (80061bc <prvAddCurrentTaskToDelayedList+0xd8>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	3304      	adds	r3, #4
 8006196:	4619      	mov	r1, r3
 8006198:	4610      	mov	r0, r2
 800619a:	f7fe fb74 	bl	8004886 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800619e:	4b0c      	ldr	r3, [pc, #48]	; (80061d0 <prvAddCurrentTaskToDelayedList+0xec>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68ba      	ldr	r2, [r7, #8]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d202      	bcs.n	80061ae <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80061a8:	4a09      	ldr	r2, [pc, #36]	; (80061d0 <prvAddCurrentTaskToDelayedList+0xec>)
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	6013      	str	r3, [r2, #0]
}
 80061ae:	bf00      	nop
 80061b0:	3710      	adds	r7, #16
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	20000174 	.word	0x20000174
 80061bc:	20000098 	.word	0x20000098
 80061c0:	20000178 	.word	0x20000178
 80061c4:	2000015c 	.word	0x2000015c
 80061c8:	2000012c 	.word	0x2000012c
 80061cc:	20000128 	.word	0x20000128
 80061d0:	20000190 	.word	0x20000190

080061d4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80061da:	2300      	movs	r3, #0
 80061dc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80061de:	f000 fad5 	bl	800678c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80061e2:	4b11      	ldr	r3, [pc, #68]	; (8006228 <xTimerCreateTimerTask+0x54>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00b      	beq.n	8006202 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80061ea:	4b10      	ldr	r3, [pc, #64]	; (800622c <xTimerCreateTimerTask+0x58>)
 80061ec:	9301      	str	r3, [sp, #4]
 80061ee:	2302      	movs	r3, #2
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	2300      	movs	r3, #0
 80061f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80061f8:	490d      	ldr	r1, [pc, #52]	; (8006230 <xTimerCreateTimerTask+0x5c>)
 80061fa:	480e      	ldr	r0, [pc, #56]	; (8006234 <xTimerCreateTimerTask+0x60>)
 80061fc:	f7ff f900 	bl	8005400 <xTaskCreate>
 8006200:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10a      	bne.n	800621e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8006208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620c:	f383 8811 	msr	BASEPRI, r3
 8006210:	f3bf 8f6f 	isb	sy
 8006214:	f3bf 8f4f 	dsb	sy
 8006218:	603b      	str	r3, [r7, #0]
    }
 800621a:	bf00      	nop
 800621c:	e7fe      	b.n	800621c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800621e:	687b      	ldr	r3, [r7, #4]
    }
 8006220:	4618      	mov	r0, r3
 8006222:	3708      	adds	r7, #8
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	200001cc 	.word	0x200001cc
 800622c:	200001d0 	.word	0x200001d0
 8006230:	0800aa74 	.word	0x0800aa74
 8006234:	0800636d 	.word	0x0800636d

08006238 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8006238:	b580      	push	{r7, lr}
 800623a:	b08a      	sub	sp, #40	; 0x28
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
 8006244:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8006246:	2300      	movs	r3, #0
 8006248:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10a      	bne.n	8006266 <xTimerGenericCommand+0x2e>
        __asm volatile
 8006250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006254:	f383 8811 	msr	BASEPRI, r3
 8006258:	f3bf 8f6f 	isb	sy
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	623b      	str	r3, [r7, #32]
    }
 8006262:	bf00      	nop
 8006264:	e7fe      	b.n	8006264 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8006266:	4b1a      	ldr	r3, [pc, #104]	; (80062d0 <xTimerGenericCommand+0x98>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d02a      	beq.n	80062c4 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	2b05      	cmp	r3, #5
 800627e:	dc18      	bgt.n	80062b2 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006280:	f7ff fe92 	bl	8005fa8 <xTaskGetSchedulerState>
 8006284:	4603      	mov	r3, r0
 8006286:	2b02      	cmp	r3, #2
 8006288:	d109      	bne.n	800629e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800628a:	4b11      	ldr	r3, [pc, #68]	; (80062d0 <xTimerGenericCommand+0x98>)
 800628c:	6818      	ldr	r0, [r3, #0]
 800628e:	f107 0114 	add.w	r1, r7, #20
 8006292:	2300      	movs	r3, #0
 8006294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006296:	f7fe fc49 	bl	8004b2c <xQueueGenericSend>
 800629a:	6278      	str	r0, [r7, #36]	; 0x24
 800629c:	e012      	b.n	80062c4 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800629e:	4b0c      	ldr	r3, [pc, #48]	; (80062d0 <xTimerGenericCommand+0x98>)
 80062a0:	6818      	ldr	r0, [r3, #0]
 80062a2:	f107 0114 	add.w	r1, r7, #20
 80062a6:	2300      	movs	r3, #0
 80062a8:	2200      	movs	r2, #0
 80062aa:	f7fe fc3f 	bl	8004b2c <xQueueGenericSend>
 80062ae:	6278      	str	r0, [r7, #36]	; 0x24
 80062b0:	e008      	b.n	80062c4 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80062b2:	4b07      	ldr	r3, [pc, #28]	; (80062d0 <xTimerGenericCommand+0x98>)
 80062b4:	6818      	ldr	r0, [r3, #0]
 80062b6:	f107 0114 	add.w	r1, r7, #20
 80062ba:	2300      	movs	r3, #0
 80062bc:	683a      	ldr	r2, [r7, #0]
 80062be:	f7fe fd5b 	bl	8004d78 <xQueueGenericSendFromISR>
 80062c2:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80062c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80062c6:	4618      	mov	r0, r3
 80062c8:	3728      	adds	r7, #40	; 0x28
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	200001cc 	.word	0x200001cc

080062d4 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b088      	sub	sp, #32
 80062d8:	af02      	add	r7, sp, #8
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062de:	4b22      	ldr	r3, [pc, #136]	; (8006368 <prvProcessExpiredTimer+0x94>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	3304      	adds	r3, #4
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7fe fb03 	bl	80048f8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062f8:	f003 0304 	and.w	r3, r3, #4
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d022      	beq.n	8006346 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	699a      	ldr	r2, [r3, #24]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	18d1      	adds	r1, r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	683a      	ldr	r2, [r7, #0]
 800630c:	6978      	ldr	r0, [r7, #20]
 800630e:	f000 f8d1 	bl	80064b4 <prvInsertTimerInActiveList>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d01f      	beq.n	8006358 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006318:	2300      	movs	r3, #0
 800631a:	9300      	str	r3, [sp, #0]
 800631c:	2300      	movs	r3, #0
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	2100      	movs	r1, #0
 8006322:	6978      	ldr	r0, [r7, #20]
 8006324:	f7ff ff88 	bl	8006238 <xTimerGenericCommand>
 8006328:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d113      	bne.n	8006358 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8006330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	60fb      	str	r3, [r7, #12]
    }
 8006342:	bf00      	nop
 8006344:	e7fe      	b.n	8006344 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800634c:	f023 0301 	bic.w	r3, r3, #1
 8006350:	b2da      	uxtb	r2, r3
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	6a1b      	ldr	r3, [r3, #32]
 800635c:	6978      	ldr	r0, [r7, #20]
 800635e:	4798      	blx	r3
    }
 8006360:	bf00      	nop
 8006362:	3718      	adds	r7, #24
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	200001c4 	.word	0x200001c4

0800636c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006374:	f107 0308 	add.w	r3, r7, #8
 8006378:	4618      	mov	r0, r3
 800637a:	f000 f857 	bl	800642c <prvGetNextExpireTime>
 800637e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	4619      	mov	r1, r3
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f000 f803 	bl	8006390 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800638a:	f000 f8d5 	bl	8006538 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800638e:	e7f1      	b.n	8006374 <prvTimerTask+0x8>

08006390 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800639a:	f7ff fa2f 	bl	80057fc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800639e:	f107 0308 	add.w	r3, r7, #8
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 f866 	bl	8006474 <prvSampleTimeNow>
 80063a8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d130      	bne.n	8006412 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10a      	bne.n	80063cc <prvProcessTimerOrBlockTask+0x3c>
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d806      	bhi.n	80063cc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80063be:	f7ff fa2b 	bl	8005818 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80063c2:	68f9      	ldr	r1, [r7, #12]
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f7ff ff85 	bl	80062d4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80063ca:	e024      	b.n	8006416 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d008      	beq.n	80063e4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80063d2:	4b13      	ldr	r3, [pc, #76]	; (8006420 <prvProcessTimerOrBlockTask+0x90>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <prvProcessTimerOrBlockTask+0x50>
 80063dc:	2301      	movs	r3, #1
 80063de:	e000      	b.n	80063e2 <prvProcessTimerOrBlockTask+0x52>
 80063e0:	2300      	movs	r3, #0
 80063e2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80063e4:	4b0f      	ldr	r3, [pc, #60]	; (8006424 <prvProcessTimerOrBlockTask+0x94>)
 80063e6:	6818      	ldr	r0, [r3, #0]
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	4619      	mov	r1, r3
 80063f2:	f7fe ffd1 	bl	8005398 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80063f6:	f7ff fa0f 	bl	8005818 <xTaskResumeAll>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d10a      	bne.n	8006416 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006400:	4b09      	ldr	r3, [pc, #36]	; (8006428 <prvProcessTimerOrBlockTask+0x98>)
 8006402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006406:	601a      	str	r2, [r3, #0]
 8006408:	f3bf 8f4f 	dsb	sy
 800640c:	f3bf 8f6f 	isb	sy
    }
 8006410:	e001      	b.n	8006416 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006412:	f7ff fa01 	bl	8005818 <xTaskResumeAll>
    }
 8006416:	bf00      	nop
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	200001c8 	.word	0x200001c8
 8006424:	200001cc 	.word	0x200001cc
 8006428:	e000ed04 	.word	0xe000ed04

0800642c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006434:	4b0e      	ldr	r3, [pc, #56]	; (8006470 <prvGetNextExpireTime+0x44>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d101      	bne.n	8006442 <prvGetNextExpireTime+0x16>
 800643e:	2201      	movs	r2, #1
 8006440:	e000      	b.n	8006444 <prvGetNextExpireTime+0x18>
 8006442:	2200      	movs	r2, #0
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d105      	bne.n	800645c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006450:	4b07      	ldr	r3, [pc, #28]	; (8006470 <prvGetNextExpireTime+0x44>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	60fb      	str	r3, [r7, #12]
 800645a:	e001      	b.n	8006460 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800645c:	2300      	movs	r3, #0
 800645e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006460:	68fb      	ldr	r3, [r7, #12]
    }
 8006462:	4618      	mov	r0, r3
 8006464:	3714      	adds	r7, #20
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	200001c4 	.word	0x200001c4

08006474 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800647c:	f7ff fa6c 	bl	8005958 <xTaskGetTickCount>
 8006480:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8006482:	4b0b      	ldr	r3, [pc, #44]	; (80064b0 <prvSampleTimeNow+0x3c>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	429a      	cmp	r2, r3
 800648a:	d205      	bcs.n	8006498 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800648c:	f000 f91a 	bl	80066c4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	601a      	str	r2, [r3, #0]
 8006496:	e002      	b.n	800649e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800649e:	4a04      	ldr	r2, [pc, #16]	; (80064b0 <prvSampleTimeNow+0x3c>)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80064a4:	68fb      	ldr	r3, [r7, #12]
    }
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	200001d4 	.word	0x200001d4

080064b4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
 80064c0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80064c2:	2300      	movs	r3, #0
 80064c4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d812      	bhi.n	8006500 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	1ad2      	subs	r2, r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d302      	bcc.n	80064ee <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80064e8:	2301      	movs	r3, #1
 80064ea:	617b      	str	r3, [r7, #20]
 80064ec:	e01b      	b.n	8006526 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80064ee:	4b10      	ldr	r3, [pc, #64]	; (8006530 <prvInsertTimerInActiveList+0x7c>)
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	3304      	adds	r3, #4
 80064f6:	4619      	mov	r1, r3
 80064f8:	4610      	mov	r0, r2
 80064fa:	f7fe f9c4 	bl	8004886 <vListInsert>
 80064fe:	e012      	b.n	8006526 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	429a      	cmp	r2, r3
 8006506:	d206      	bcs.n	8006516 <prvInsertTimerInActiveList+0x62>
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	429a      	cmp	r2, r3
 800650e:	d302      	bcc.n	8006516 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006510:	2301      	movs	r3, #1
 8006512:	617b      	str	r3, [r7, #20]
 8006514:	e007      	b.n	8006526 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006516:	4b07      	ldr	r3, [pc, #28]	; (8006534 <prvInsertTimerInActiveList+0x80>)
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	3304      	adds	r3, #4
 800651e:	4619      	mov	r1, r3
 8006520:	4610      	mov	r0, r2
 8006522:	f7fe f9b0 	bl	8004886 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006526:	697b      	ldr	r3, [r7, #20]
    }
 8006528:	4618      	mov	r0, r3
 800652a:	3718      	adds	r7, #24
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	200001c8 	.word	0x200001c8
 8006534:	200001c4 	.word	0x200001c4

08006538 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006538:	b580      	push	{r7, lr}
 800653a:	b08c      	sub	sp, #48	; 0x30
 800653c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800653e:	e0ae      	b.n	800669e <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	2b00      	cmp	r3, #0
 8006544:	f2c0 80aa 	blt.w	800669c <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654e:	695b      	ldr	r3, [r3, #20]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d004      	beq.n	800655e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006556:	3304      	adds	r3, #4
 8006558:	4618      	mov	r0, r3
 800655a:	f7fe f9cd 	bl	80048f8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800655e:	1d3b      	adds	r3, r7, #4
 8006560:	4618      	mov	r0, r3
 8006562:	f7ff ff87 	bl	8006474 <prvSampleTimeNow>
 8006566:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	2b09      	cmp	r3, #9
 800656c:	f200 8097 	bhi.w	800669e <prvProcessReceivedCommands+0x166>
 8006570:	a201      	add	r2, pc, #4	; (adr r2, 8006578 <prvProcessReceivedCommands+0x40>)
 8006572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006576:	bf00      	nop
 8006578:	080065a1 	.word	0x080065a1
 800657c:	080065a1 	.word	0x080065a1
 8006580:	080065a1 	.word	0x080065a1
 8006584:	08006615 	.word	0x08006615
 8006588:	08006629 	.word	0x08006629
 800658c:	08006673 	.word	0x08006673
 8006590:	080065a1 	.word	0x080065a1
 8006594:	080065a1 	.word	0x080065a1
 8006598:	08006615 	.word	0x08006615
 800659c:	08006629 	.word	0x08006629
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80065a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065a6:	f043 0301 	orr.w	r3, r3, #1
 80065aa:	b2da      	uxtb	r2, r3
 80065ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	18d1      	adds	r1, r2, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6a3a      	ldr	r2, [r7, #32]
 80065be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065c0:	f7ff ff78 	bl	80064b4 <prvInsertTimerInActiveList>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d069      	beq.n	800669e <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065cc:	6a1b      	ldr	r3, [r3, #32]
 80065ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065d0:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065d8:	f003 0304 	and.w	r3, r3, #4
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d05e      	beq.n	800669e <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	441a      	add	r2, r3
 80065e8:	2300      	movs	r3, #0
 80065ea:	9300      	str	r3, [sp, #0]
 80065ec:	2300      	movs	r3, #0
 80065ee:	2100      	movs	r1, #0
 80065f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065f2:	f7ff fe21 	bl	8006238 <xTimerGenericCommand>
 80065f6:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d14f      	bne.n	800669e <prvProcessReceivedCommands+0x166>
        __asm volatile
 80065fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006602:	f383 8811 	msr	BASEPRI, r3
 8006606:	f3bf 8f6f 	isb	sy
 800660a:	f3bf 8f4f 	dsb	sy
 800660e:	61bb      	str	r3, [r7, #24]
    }
 8006610:	bf00      	nop
 8006612:	e7fe      	b.n	8006612 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800661a:	f023 0301 	bic.w	r3, r3, #1
 800661e:	b2da      	uxtb	r2, r3
 8006620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006622:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8006626:	e03a      	b.n	800669e <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800662e:	f043 0301 	orr.w	r3, r3, #1
 8006632:	b2da      	uxtb	r2, r3
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10a      	bne.n	800665e <prvProcessReceivedCommands+0x126>
        __asm volatile
 8006648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664c:	f383 8811 	msr	BASEPRI, r3
 8006650:	f3bf 8f6f 	isb	sy
 8006654:	f3bf 8f4f 	dsb	sy
 8006658:	617b      	str	r3, [r7, #20]
    }
 800665a:	bf00      	nop
 800665c:	e7fe      	b.n	800665c <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800665e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006660:	699a      	ldr	r2, [r3, #24]
 8006662:	6a3b      	ldr	r3, [r7, #32]
 8006664:	18d1      	adds	r1, r2, r3
 8006666:	6a3b      	ldr	r3, [r7, #32]
 8006668:	6a3a      	ldr	r2, [r7, #32]
 800666a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800666c:	f7ff ff22 	bl	80064b4 <prvInsertTimerInActiveList>
                        break;
 8006670:	e015      	b.n	800669e <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006674:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006678:	f003 0302 	and.w	r3, r3, #2
 800667c:	2b00      	cmp	r3, #0
 800667e:	d103      	bne.n	8006688 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8006680:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006682:	f000 fc73 	bl	8006f6c <vPortFree>
 8006686:	e00a      	b.n	800669e <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800668e:	f023 0301 	bic.w	r3, r3, #1
 8006692:	b2da      	uxtb	r2, r3
 8006694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006696:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800669a:	e000      	b.n	800669e <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800669c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800669e:	4b08      	ldr	r3, [pc, #32]	; (80066c0 <prvProcessReceivedCommands+0x188>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f107 0108 	add.w	r1, r7, #8
 80066a6:	2200      	movs	r2, #0
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7fe fc23 	bl	8004ef4 <xQueueReceive>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f47f af45 	bne.w	8006540 <prvProcessReceivedCommands+0x8>
        }
    }
 80066b6:	bf00      	nop
 80066b8:	bf00      	nop
 80066ba:	3728      	adds	r7, #40	; 0x28
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	200001cc 	.word	0x200001cc

080066c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b088      	sub	sp, #32
 80066c8:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066ca:	e048      	b.n	800675e <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066cc:	4b2d      	ldr	r3, [pc, #180]	; (8006784 <prvSwitchTimerLists+0xc0>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066d6:	4b2b      	ldr	r3, [pc, #172]	; (8006784 <prvSwitchTimerLists+0xc0>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	3304      	adds	r3, #4
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7fe f907 	bl	80048f8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066f8:	f003 0304 	and.w	r3, r3, #4
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d02e      	beq.n	800675e <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	699b      	ldr	r3, [r3, #24]
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	4413      	add	r3, r2
 8006708:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	429a      	cmp	r2, r3
 8006710:	d90e      	bls.n	8006730 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	68ba      	ldr	r2, [r7, #8]
 8006716:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800671e:	4b19      	ldr	r3, [pc, #100]	; (8006784 <prvSwitchTimerLists+0xc0>)
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	3304      	adds	r3, #4
 8006726:	4619      	mov	r1, r3
 8006728:	4610      	mov	r0, r2
 800672a:	f7fe f8ac 	bl	8004886 <vListInsert>
 800672e:	e016      	b.n	800675e <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006730:	2300      	movs	r3, #0
 8006732:	9300      	str	r3, [sp, #0]
 8006734:	2300      	movs	r3, #0
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	2100      	movs	r1, #0
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f7ff fd7c 	bl	8006238 <xTimerGenericCommand>
 8006740:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10a      	bne.n	800675e <prvSwitchTimerLists+0x9a>
        __asm volatile
 8006748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674c:	f383 8811 	msr	BASEPRI, r3
 8006750:	f3bf 8f6f 	isb	sy
 8006754:	f3bf 8f4f 	dsb	sy
 8006758:	603b      	str	r3, [r7, #0]
    }
 800675a:	bf00      	nop
 800675c:	e7fe      	b.n	800675c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800675e:	4b09      	ldr	r3, [pc, #36]	; (8006784 <prvSwitchTimerLists+0xc0>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1b1      	bne.n	80066cc <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8006768:	4b06      	ldr	r3, [pc, #24]	; (8006784 <prvSwitchTimerLists+0xc0>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800676e:	4b06      	ldr	r3, [pc, #24]	; (8006788 <prvSwitchTimerLists+0xc4>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a04      	ldr	r2, [pc, #16]	; (8006784 <prvSwitchTimerLists+0xc0>)
 8006774:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006776:	4a04      	ldr	r2, [pc, #16]	; (8006788 <prvSwitchTimerLists+0xc4>)
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	6013      	str	r3, [r2, #0]
    }
 800677c:	bf00      	nop
 800677e:	3718      	adds	r7, #24
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	200001c4 	.word	0x200001c4
 8006788:	200001c8 	.word	0x200001c8

0800678c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800678c:	b580      	push	{r7, lr}
 800678e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006790:	f000 f9e0 	bl	8006b54 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006794:	4b12      	ldr	r3, [pc, #72]	; (80067e0 <prvCheckForValidListAndQueue+0x54>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d11d      	bne.n	80067d8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800679c:	4811      	ldr	r0, [pc, #68]	; (80067e4 <prvCheckForValidListAndQueue+0x58>)
 800679e:	f7fe f821 	bl	80047e4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80067a2:	4811      	ldr	r0, [pc, #68]	; (80067e8 <prvCheckForValidListAndQueue+0x5c>)
 80067a4:	f7fe f81e 	bl	80047e4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80067a8:	4b10      	ldr	r3, [pc, #64]	; (80067ec <prvCheckForValidListAndQueue+0x60>)
 80067aa:	4a0e      	ldr	r2, [pc, #56]	; (80067e4 <prvCheckForValidListAndQueue+0x58>)
 80067ac:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80067ae:	4b10      	ldr	r3, [pc, #64]	; (80067f0 <prvCheckForValidListAndQueue+0x64>)
 80067b0:	4a0d      	ldr	r2, [pc, #52]	; (80067e8 <prvCheckForValidListAndQueue+0x5c>)
 80067b2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80067b4:	2200      	movs	r2, #0
 80067b6:	210c      	movs	r1, #12
 80067b8:	200a      	movs	r0, #10
 80067ba:	f7fe f92f 	bl	8004a1c <xQueueGenericCreate>
 80067be:	4603      	mov	r3, r0
 80067c0:	4a07      	ldr	r2, [pc, #28]	; (80067e0 <prvCheckForValidListAndQueue+0x54>)
 80067c2:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80067c4:	4b06      	ldr	r3, [pc, #24]	; (80067e0 <prvCheckForValidListAndQueue+0x54>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d005      	beq.n	80067d8 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80067cc:	4b04      	ldr	r3, [pc, #16]	; (80067e0 <prvCheckForValidListAndQueue+0x54>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4908      	ldr	r1, [pc, #32]	; (80067f4 <prvCheckForValidListAndQueue+0x68>)
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7fe fdae 	bl	8005334 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80067d8:	f000 f9ec 	bl	8006bb4 <vPortExitCritical>
    }
 80067dc:	bf00      	nop
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	200001cc 	.word	0x200001cc
 80067e4:	2000019c 	.word	0x2000019c
 80067e8:	200001b0 	.word	0x200001b0
 80067ec:	200001c4 	.word	0x200001c4
 80067f0:	200001c8 	.word	0x200001c8
 80067f4:	0800aa7c 	.word	0x0800aa7c

080067f8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	3b04      	subs	r3, #4
 8006808:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006810:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	3b04      	subs	r3, #4
 8006816:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	f023 0201 	bic.w	r2, r3, #1
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	3b04      	subs	r3, #4
 8006826:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006828:	4a0c      	ldr	r2, [pc, #48]	; (800685c <pxPortInitialiseStack+0x64>)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	3b14      	subs	r3, #20
 8006832:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	3b04      	subs	r3, #4
 800683e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f06f 0202 	mvn.w	r2, #2
 8006846:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	3b20      	subs	r3, #32
 800684c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800684e:	68fb      	ldr	r3, [r7, #12]
}
 8006850:	4618      	mov	r0, r3
 8006852:	3714      	adds	r7, #20
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr
 800685c:	08006861 	.word	0x08006861

08006860 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8006866:	2300      	movs	r3, #0
 8006868:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800686a:	4b12      	ldr	r3, [pc, #72]	; (80068b4 <prvTaskExitError+0x54>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006872:	d00a      	beq.n	800688a <prvTaskExitError+0x2a>
        __asm volatile
 8006874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006878:	f383 8811 	msr	BASEPRI, r3
 800687c:	f3bf 8f6f 	isb	sy
 8006880:	f3bf 8f4f 	dsb	sy
 8006884:	60fb      	str	r3, [r7, #12]
    }
 8006886:	bf00      	nop
 8006888:	e7fe      	b.n	8006888 <prvTaskExitError+0x28>
        __asm volatile
 800688a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688e:	f383 8811 	msr	BASEPRI, r3
 8006892:	f3bf 8f6f 	isb	sy
 8006896:	f3bf 8f4f 	dsb	sy
 800689a:	60bb      	str	r3, [r7, #8]
    }
 800689c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800689e:	bf00      	nop
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d0fc      	beq.n	80068a0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80068a6:	bf00      	nop
 80068a8:	bf00      	nop
 80068aa:	3714      	adds	r7, #20
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr
 80068b4:	20000010 	.word	0x20000010
	...

080068c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80068c0:	4b07      	ldr	r3, [pc, #28]	; (80068e0 <pxCurrentTCBConst2>)
 80068c2:	6819      	ldr	r1, [r3, #0]
 80068c4:	6808      	ldr	r0, [r1, #0]
 80068c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ca:	f380 8809 	msr	PSP, r0
 80068ce:	f3bf 8f6f 	isb	sy
 80068d2:	f04f 0000 	mov.w	r0, #0
 80068d6:	f380 8811 	msr	BASEPRI, r0
 80068da:	4770      	bx	lr
 80068dc:	f3af 8000 	nop.w

080068e0 <pxCurrentTCBConst2>:
 80068e0:	20000098 	.word	0x20000098
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80068e4:	bf00      	nop
 80068e6:	bf00      	nop

080068e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80068e8:	4808      	ldr	r0, [pc, #32]	; (800690c <prvPortStartFirstTask+0x24>)
 80068ea:	6800      	ldr	r0, [r0, #0]
 80068ec:	6800      	ldr	r0, [r0, #0]
 80068ee:	f380 8808 	msr	MSP, r0
 80068f2:	f04f 0000 	mov.w	r0, #0
 80068f6:	f380 8814 	msr	CONTROL, r0
 80068fa:	b662      	cpsie	i
 80068fc:	b661      	cpsie	f
 80068fe:	f3bf 8f4f 	dsb	sy
 8006902:	f3bf 8f6f 	isb	sy
 8006906:	df00      	svc	0
 8006908:	bf00      	nop
 800690a:	0000      	.short	0x0000
 800690c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006910:	bf00      	nop
 8006912:	bf00      	nop

08006914 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b086      	sub	sp, #24
 8006918:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800691a:	4b46      	ldr	r3, [pc, #280]	; (8006a34 <xPortStartScheduler+0x120>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a46      	ldr	r2, [pc, #280]	; (8006a38 <xPortStartScheduler+0x124>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d10a      	bne.n	800693a <xPortStartScheduler+0x26>
        __asm volatile
 8006924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006928:	f383 8811 	msr	BASEPRI, r3
 800692c:	f3bf 8f6f 	isb	sy
 8006930:	f3bf 8f4f 	dsb	sy
 8006934:	613b      	str	r3, [r7, #16]
    }
 8006936:	bf00      	nop
 8006938:	e7fe      	b.n	8006938 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800693a:	4b3e      	ldr	r3, [pc, #248]	; (8006a34 <xPortStartScheduler+0x120>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a3f      	ldr	r2, [pc, #252]	; (8006a3c <xPortStartScheduler+0x128>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d10a      	bne.n	800695a <xPortStartScheduler+0x46>
        __asm volatile
 8006944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006948:	f383 8811 	msr	BASEPRI, r3
 800694c:	f3bf 8f6f 	isb	sy
 8006950:	f3bf 8f4f 	dsb	sy
 8006954:	60fb      	str	r3, [r7, #12]
    }
 8006956:	bf00      	nop
 8006958:	e7fe      	b.n	8006958 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800695a:	4b39      	ldr	r3, [pc, #228]	; (8006a40 <xPortStartScheduler+0x12c>)
 800695c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	b2db      	uxtb	r3, r3
 8006964:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	22ff      	movs	r2, #255	; 0xff
 800696a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	b2db      	uxtb	r3, r3
 8006972:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006974:	78fb      	ldrb	r3, [r7, #3]
 8006976:	b2db      	uxtb	r3, r3
 8006978:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800697c:	b2da      	uxtb	r2, r3
 800697e:	4b31      	ldr	r3, [pc, #196]	; (8006a44 <xPortStartScheduler+0x130>)
 8006980:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006982:	4b31      	ldr	r3, [pc, #196]	; (8006a48 <xPortStartScheduler+0x134>)
 8006984:	2207      	movs	r2, #7
 8006986:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006988:	e009      	b.n	800699e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800698a:	4b2f      	ldr	r3, [pc, #188]	; (8006a48 <xPortStartScheduler+0x134>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	3b01      	subs	r3, #1
 8006990:	4a2d      	ldr	r2, [pc, #180]	; (8006a48 <xPortStartScheduler+0x134>)
 8006992:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006994:	78fb      	ldrb	r3, [r7, #3]
 8006996:	b2db      	uxtb	r3, r3
 8006998:	005b      	lsls	r3, r3, #1
 800699a:	b2db      	uxtb	r3, r3
 800699c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800699e:	78fb      	ldrb	r3, [r7, #3]
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069a6:	2b80      	cmp	r3, #128	; 0x80
 80069a8:	d0ef      	beq.n	800698a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80069aa:	4b27      	ldr	r3, [pc, #156]	; (8006a48 <xPortStartScheduler+0x134>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f1c3 0307 	rsb	r3, r3, #7
 80069b2:	2b04      	cmp	r3, #4
 80069b4:	d00a      	beq.n	80069cc <xPortStartScheduler+0xb8>
        __asm volatile
 80069b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ba:	f383 8811 	msr	BASEPRI, r3
 80069be:	f3bf 8f6f 	isb	sy
 80069c2:	f3bf 8f4f 	dsb	sy
 80069c6:	60bb      	str	r3, [r7, #8]
    }
 80069c8:	bf00      	nop
 80069ca:	e7fe      	b.n	80069ca <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80069cc:	4b1e      	ldr	r3, [pc, #120]	; (8006a48 <xPortStartScheduler+0x134>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	021b      	lsls	r3, r3, #8
 80069d2:	4a1d      	ldr	r2, [pc, #116]	; (8006a48 <xPortStartScheduler+0x134>)
 80069d4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80069d6:	4b1c      	ldr	r3, [pc, #112]	; (8006a48 <xPortStartScheduler+0x134>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80069de:	4a1a      	ldr	r2, [pc, #104]	; (8006a48 <xPortStartScheduler+0x134>)
 80069e0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	b2da      	uxtb	r2, r3
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80069ea:	4b18      	ldr	r3, [pc, #96]	; (8006a4c <xPortStartScheduler+0x138>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a17      	ldr	r2, [pc, #92]	; (8006a4c <xPortStartScheduler+0x138>)
 80069f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80069f4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80069f6:	4b15      	ldr	r3, [pc, #84]	; (8006a4c <xPortStartScheduler+0x138>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a14      	ldr	r2, [pc, #80]	; (8006a4c <xPortStartScheduler+0x138>)
 80069fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006a00:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006a02:	f000 f963 	bl	8006ccc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006a06:	4b12      	ldr	r3, [pc, #72]	; (8006a50 <xPortStartScheduler+0x13c>)
 8006a08:	2200      	movs	r2, #0
 8006a0a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8006a0c:	f000 f982 	bl	8006d14 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006a10:	4b10      	ldr	r3, [pc, #64]	; (8006a54 <xPortStartScheduler+0x140>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a0f      	ldr	r2, [pc, #60]	; (8006a54 <xPortStartScheduler+0x140>)
 8006a16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006a1a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8006a1c:	f7ff ff64 	bl	80068e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006a20:	f7ff f866 	bl	8005af0 <vTaskSwitchContext>
    prvTaskExitError();
 8006a24:	f7ff ff1c 	bl	8006860 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3718      	adds	r7, #24
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	e000ed00 	.word	0xe000ed00
 8006a38:	410fc271 	.word	0x410fc271
 8006a3c:	410fc270 	.word	0x410fc270
 8006a40:	e000e400 	.word	0xe000e400
 8006a44:	200001d8 	.word	0x200001d8
 8006a48:	200001dc 	.word	0x200001dc
 8006a4c:	e000ed20 	.word	0xe000ed20
 8006a50:	20000010 	.word	0x20000010
 8006a54:	e000ef34 	.word	0xe000ef34

08006a58 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b087      	sub	sp, #28
 8006a5c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006a5e:	4b37      	ldr	r3, [pc, #220]	; (8006b3c <vInitPrioGroupValue+0xe4>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a37      	ldr	r2, [pc, #220]	; (8006b40 <vInitPrioGroupValue+0xe8>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d10a      	bne.n	8006a7e <vInitPrioGroupValue+0x26>
        __asm volatile
 8006a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6c:	f383 8811 	msr	BASEPRI, r3
 8006a70:	f3bf 8f6f 	isb	sy
 8006a74:	f3bf 8f4f 	dsb	sy
 8006a78:	613b      	str	r3, [r7, #16]
    }
 8006a7a:	bf00      	nop
 8006a7c:	e7fe      	b.n	8006a7c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006a7e:	4b2f      	ldr	r3, [pc, #188]	; (8006b3c <vInitPrioGroupValue+0xe4>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a30      	ldr	r2, [pc, #192]	; (8006b44 <vInitPrioGroupValue+0xec>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d10a      	bne.n	8006a9e <vInitPrioGroupValue+0x46>
        __asm volatile
 8006a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8c:	f383 8811 	msr	BASEPRI, r3
 8006a90:	f3bf 8f6f 	isb	sy
 8006a94:	f3bf 8f4f 	dsb	sy
 8006a98:	60fb      	str	r3, [r7, #12]
    }
 8006a9a:	bf00      	nop
 8006a9c:	e7fe      	b.n	8006a9c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a9e:	4b2a      	ldr	r3, [pc, #168]	; (8006b48 <vInitPrioGroupValue+0xf0>)
 8006aa0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	22ff      	movs	r2, #255	; 0xff
 8006aae:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ab8:	78fb      	ldrb	r3, [r7, #3]
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ac0:	b2da      	uxtb	r2, r3
 8006ac2:	4b22      	ldr	r3, [pc, #136]	; (8006b4c <vInitPrioGroupValue+0xf4>)
 8006ac4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ac6:	4b22      	ldr	r3, [pc, #136]	; (8006b50 <vInitPrioGroupValue+0xf8>)
 8006ac8:	2207      	movs	r2, #7
 8006aca:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006acc:	e009      	b.n	8006ae2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8006ace:	4b20      	ldr	r3, [pc, #128]	; (8006b50 <vInitPrioGroupValue+0xf8>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	4a1e      	ldr	r2, [pc, #120]	; (8006b50 <vInitPrioGroupValue+0xf8>)
 8006ad6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ad8:	78fb      	ldrb	r3, [r7, #3]
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	005b      	lsls	r3, r3, #1
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ae2:	78fb      	ldrb	r3, [r7, #3]
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aea:	2b80      	cmp	r3, #128	; 0x80
 8006aec:	d0ef      	beq.n	8006ace <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006aee:	4b18      	ldr	r3, [pc, #96]	; (8006b50 <vInitPrioGroupValue+0xf8>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f1c3 0307 	rsb	r3, r3, #7
 8006af6:	2b04      	cmp	r3, #4
 8006af8:	d00a      	beq.n	8006b10 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8006afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afe:	f383 8811 	msr	BASEPRI, r3
 8006b02:	f3bf 8f6f 	isb	sy
 8006b06:	f3bf 8f4f 	dsb	sy
 8006b0a:	60bb      	str	r3, [r7, #8]
    }
 8006b0c:	bf00      	nop
 8006b0e:	e7fe      	b.n	8006b0e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b10:	4b0f      	ldr	r3, [pc, #60]	; (8006b50 <vInitPrioGroupValue+0xf8>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	021b      	lsls	r3, r3, #8
 8006b16:	4a0e      	ldr	r2, [pc, #56]	; (8006b50 <vInitPrioGroupValue+0xf8>)
 8006b18:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b1a:	4b0d      	ldr	r3, [pc, #52]	; (8006b50 <vInitPrioGroupValue+0xf8>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b22:	4a0b      	ldr	r2, [pc, #44]	; (8006b50 <vInitPrioGroupValue+0xf8>)
 8006b24:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	b2da      	uxtb	r2, r3
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8006b2e:	bf00      	nop
 8006b30:	371c      	adds	r7, #28
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	e000ed00 	.word	0xe000ed00
 8006b40:	410fc271 	.word	0x410fc271
 8006b44:	410fc270 	.word	0x410fc270
 8006b48:	e000e400 	.word	0xe000e400
 8006b4c:	200001d8 	.word	0x200001d8
 8006b50:	200001dc 	.word	0x200001dc

08006b54 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
        __asm volatile
 8006b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5e:	f383 8811 	msr	BASEPRI, r3
 8006b62:	f3bf 8f6f 	isb	sy
 8006b66:	f3bf 8f4f 	dsb	sy
 8006b6a:	607b      	str	r3, [r7, #4]
    }
 8006b6c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006b6e:	4b0f      	ldr	r3, [pc, #60]	; (8006bac <vPortEnterCritical+0x58>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	3301      	adds	r3, #1
 8006b74:	4a0d      	ldr	r2, [pc, #52]	; (8006bac <vPortEnterCritical+0x58>)
 8006b76:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006b78:	4b0c      	ldr	r3, [pc, #48]	; (8006bac <vPortEnterCritical+0x58>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d10f      	bne.n	8006ba0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006b80:	4b0b      	ldr	r3, [pc, #44]	; (8006bb0 <vPortEnterCritical+0x5c>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00a      	beq.n	8006ba0 <vPortEnterCritical+0x4c>
        __asm volatile
 8006b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8e:	f383 8811 	msr	BASEPRI, r3
 8006b92:	f3bf 8f6f 	isb	sy
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	603b      	str	r3, [r7, #0]
    }
 8006b9c:	bf00      	nop
 8006b9e:	e7fe      	b.n	8006b9e <vPortEnterCritical+0x4a>
    }
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr
 8006bac:	20000010 	.word	0x20000010
 8006bb0:	e000ed04 	.word	0xe000ed04

08006bb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8006bba:	4b12      	ldr	r3, [pc, #72]	; (8006c04 <vPortExitCritical+0x50>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10a      	bne.n	8006bd8 <vPortExitCritical+0x24>
        __asm volatile
 8006bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc6:	f383 8811 	msr	BASEPRI, r3
 8006bca:	f3bf 8f6f 	isb	sy
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	607b      	str	r3, [r7, #4]
    }
 8006bd4:	bf00      	nop
 8006bd6:	e7fe      	b.n	8006bd6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8006bd8:	4b0a      	ldr	r3, [pc, #40]	; (8006c04 <vPortExitCritical+0x50>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	4a09      	ldr	r2, [pc, #36]	; (8006c04 <vPortExitCritical+0x50>)
 8006be0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006be2:	4b08      	ldr	r3, [pc, #32]	; (8006c04 <vPortExitCritical+0x50>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d105      	bne.n	8006bf6 <vPortExitCritical+0x42>
 8006bea:	2300      	movs	r3, #0
 8006bec:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	f383 8811 	msr	BASEPRI, r3
    }
 8006bf4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8006bf6:	bf00      	nop
 8006bf8:	370c      	adds	r7, #12
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	20000010 	.word	0x20000010
	...

08006c10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006c10:	f3ef 8009 	mrs	r0, PSP
 8006c14:	f3bf 8f6f 	isb	sy
 8006c18:	4b15      	ldr	r3, [pc, #84]	; (8006c70 <pxCurrentTCBConst>)
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	f01e 0f10 	tst.w	lr, #16
 8006c20:	bf08      	it	eq
 8006c22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006c26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c2a:	6010      	str	r0, [r2, #0]
 8006c2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006c30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006c34:	f380 8811 	msr	BASEPRI, r0
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	f3bf 8f6f 	isb	sy
 8006c40:	f7fe ff56 	bl	8005af0 <vTaskSwitchContext>
 8006c44:	f04f 0000 	mov.w	r0, #0
 8006c48:	f380 8811 	msr	BASEPRI, r0
 8006c4c:	bc09      	pop	{r0, r3}
 8006c4e:	6819      	ldr	r1, [r3, #0]
 8006c50:	6808      	ldr	r0, [r1, #0]
 8006c52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c56:	f01e 0f10 	tst.w	lr, #16
 8006c5a:	bf08      	it	eq
 8006c5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006c60:	f380 8809 	msr	PSP, r0
 8006c64:	f3bf 8f6f 	isb	sy
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	f3af 8000 	nop.w

08006c70 <pxCurrentTCBConst>:
 8006c70:	20000098 	.word	0x20000098
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006c74:	bf00      	nop
 8006c76:	bf00      	nop

08006c78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
        __asm volatile
 8006c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c82:	f383 8811 	msr	BASEPRI, r3
 8006c86:	f3bf 8f6f 	isb	sy
 8006c8a:	f3bf 8f4f 	dsb	sy
 8006c8e:	607b      	str	r3, [r7, #4]
    }
 8006c90:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8006c92:	f001 fbb5 	bl	8008400 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006c96:	f7fe fe6f 	bl	8005978 <xTaskIncrementTick>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d006      	beq.n	8006cae <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8006ca0:	f001 fc0c 	bl	80084bc <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006ca4:	4b08      	ldr	r3, [pc, #32]	; (8006cc8 <SysTick_Handler+0x50>)
 8006ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006caa:	601a      	str	r2, [r3, #0]
 8006cac:	e001      	b.n	8006cb2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8006cae:	f001 fbe9 	bl	8008484 <SEGGER_SYSVIEW_RecordExitISR>
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	f383 8811 	msr	BASEPRI, r3
    }
 8006cbc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8006cbe:	bf00      	nop
 8006cc0:	3708      	adds	r7, #8
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	e000ed04 	.word	0xe000ed04

08006ccc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8006ccc:	b480      	push	{r7}
 8006cce:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006cd0:	4b0b      	ldr	r3, [pc, #44]	; (8006d00 <vPortSetupTimerInterrupt+0x34>)
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006cd6:	4b0b      	ldr	r3, [pc, #44]	; (8006d04 <vPortSetupTimerInterrupt+0x38>)
 8006cd8:	2200      	movs	r2, #0
 8006cda:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006cdc:	4b0a      	ldr	r3, [pc, #40]	; (8006d08 <vPortSetupTimerInterrupt+0x3c>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a0a      	ldr	r2, [pc, #40]	; (8006d0c <vPortSetupTimerInterrupt+0x40>)
 8006ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce6:	099b      	lsrs	r3, r3, #6
 8006ce8:	4a09      	ldr	r2, [pc, #36]	; (8006d10 <vPortSetupTimerInterrupt+0x44>)
 8006cea:	3b01      	subs	r3, #1
 8006cec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006cee:	4b04      	ldr	r3, [pc, #16]	; (8006d00 <vPortSetupTimerInterrupt+0x34>)
 8006cf0:	2207      	movs	r2, #7
 8006cf2:	601a      	str	r2, [r3, #0]
}
 8006cf4:	bf00      	nop
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	e000e010 	.word	0xe000e010
 8006d04:	e000e018 	.word	0xe000e018
 8006d08:	20000000 	.word	0x20000000
 8006d0c:	10624dd3 	.word	0x10624dd3
 8006d10:	e000e014 	.word	0xe000e014

08006d14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006d14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006d24 <vPortEnableVFP+0x10>
 8006d18:	6801      	ldr	r1, [r0, #0]
 8006d1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006d1e:	6001      	str	r1, [r0, #0]
 8006d20:	4770      	bx	lr
 8006d22:	0000      	.short	0x0000
 8006d24:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006d28:	bf00      	nop
 8006d2a:	bf00      	nop

08006d2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8006d2c:	b480      	push	{r7}
 8006d2e:	b085      	sub	sp, #20
 8006d30:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006d32:	f3ef 8305 	mrs	r3, IPSR
 8006d36:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2b0f      	cmp	r3, #15
 8006d3c:	d914      	bls.n	8006d68 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006d3e:	4a17      	ldr	r2, [pc, #92]	; (8006d9c <vPortValidateInterruptPriority+0x70>)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	4413      	add	r3, r2
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006d48:	4b15      	ldr	r3, [pc, #84]	; (8006da0 <vPortValidateInterruptPriority+0x74>)
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	7afa      	ldrb	r2, [r7, #11]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d20a      	bcs.n	8006d68 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8006d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d56:	f383 8811 	msr	BASEPRI, r3
 8006d5a:	f3bf 8f6f 	isb	sy
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	607b      	str	r3, [r7, #4]
    }
 8006d64:	bf00      	nop
 8006d66:	e7fe      	b.n	8006d66 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006d68:	4b0e      	ldr	r3, [pc, #56]	; (8006da4 <vPortValidateInterruptPriority+0x78>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006d70:	4b0d      	ldr	r3, [pc, #52]	; (8006da8 <vPortValidateInterruptPriority+0x7c>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d90a      	bls.n	8006d8e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8006d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7c:	f383 8811 	msr	BASEPRI, r3
 8006d80:	f3bf 8f6f 	isb	sy
 8006d84:	f3bf 8f4f 	dsb	sy
 8006d88:	603b      	str	r3, [r7, #0]
    }
 8006d8a:	bf00      	nop
 8006d8c:	e7fe      	b.n	8006d8c <vPortValidateInterruptPriority+0x60>
    }
 8006d8e:	bf00      	nop
 8006d90:	3714      	adds	r7, #20
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	e000e3f0 	.word	0xe000e3f0
 8006da0:	200001d8 	.word	0x200001d8
 8006da4:	e000ed0c 	.word	0xe000ed0c
 8006da8:	200001dc 	.word	0x200001dc

08006dac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b08a      	sub	sp, #40	; 0x28
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8006db4:	2300      	movs	r3, #0
 8006db6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8006db8:	f7fe fd20 	bl	80057fc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8006dbc:	4b65      	ldr	r3, [pc, #404]	; (8006f54 <pvPortMalloc+0x1a8>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006dc4:	f000 f934 	bl	8007030 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006dc8:	4b63      	ldr	r3, [pc, #396]	; (8006f58 <pvPortMalloc+0x1ac>)
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4013      	ands	r3, r2
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f040 80a7 	bne.w	8006f24 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d02d      	beq.n	8006e38 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8006ddc:	2208      	movs	r2, #8
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d227      	bcs.n	8006e38 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8006de8:	2208      	movs	r2, #8
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4413      	add	r3, r2
 8006dee:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f003 0307 	and.w	r3, r3, #7
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d021      	beq.n	8006e3e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f023 0307 	bic.w	r3, r3, #7
 8006e00:	3308      	adds	r3, #8
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d214      	bcs.n	8006e32 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f023 0307 	bic.w	r3, r3, #7
 8006e0e:	3308      	adds	r3, #8
 8006e10:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f003 0307 	and.w	r3, r3, #7
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d010      	beq.n	8006e3e <pvPortMalloc+0x92>
        __asm volatile
 8006e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e20:	f383 8811 	msr	BASEPRI, r3
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	617b      	str	r3, [r7, #20]
    }
 8006e2e:	bf00      	nop
 8006e30:	e7fe      	b.n	8006e30 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8006e32:	2300      	movs	r3, #0
 8006e34:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e36:	e002      	b.n	8006e3e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	607b      	str	r3, [r7, #4]
 8006e3c:	e000      	b.n	8006e40 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e3e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d06e      	beq.n	8006f24 <pvPortMalloc+0x178>
 8006e46:	4b45      	ldr	r3, [pc, #276]	; (8006f5c <pvPortMalloc+0x1b0>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d869      	bhi.n	8006f24 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006e50:	4b43      	ldr	r3, [pc, #268]	; (8006f60 <pvPortMalloc+0x1b4>)
 8006e52:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8006e54:	4b42      	ldr	r3, [pc, #264]	; (8006f60 <pvPortMalloc+0x1b4>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e5a:	e004      	b.n	8006e66 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8006e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8006e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d903      	bls.n	8006e78 <pvPortMalloc+0xcc>
 8006e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1f1      	bne.n	8006e5c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006e78:	4b36      	ldr	r3, [pc, #216]	; (8006f54 <pvPortMalloc+0x1a8>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d050      	beq.n	8006f24 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e82:	6a3b      	ldr	r3, [r7, #32]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2208      	movs	r2, #8
 8006e88:	4413      	add	r3, r2
 8006e8a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	6a3b      	ldr	r3, [r7, #32]
 8006e92:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e96:	685a      	ldr	r2, [r3, #4]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	1ad2      	subs	r2, r2, r3
 8006e9c:	2308      	movs	r3, #8
 8006e9e:	005b      	lsls	r3, r3, #1
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d91f      	bls.n	8006ee4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	f003 0307 	and.w	r3, r3, #7
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00a      	beq.n	8006ecc <pvPortMalloc+0x120>
        __asm volatile
 8006eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eba:	f383 8811 	msr	BASEPRI, r3
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	f3bf 8f4f 	dsb	sy
 8006ec6:	613b      	str	r3, [r7, #16]
    }
 8006ec8:	bf00      	nop
 8006eca:	e7fe      	b.n	8006eca <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ece:	685a      	ldr	r2, [r3, #4]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	1ad2      	subs	r2, r2, r3
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ede:	69b8      	ldr	r0, [r7, #24]
 8006ee0:	f000 f908 	bl	80070f4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ee4:	4b1d      	ldr	r3, [pc, #116]	; (8006f5c <pvPortMalloc+0x1b0>)
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	4a1b      	ldr	r2, [pc, #108]	; (8006f5c <pvPortMalloc+0x1b0>)
 8006ef0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006ef2:	4b1a      	ldr	r3, [pc, #104]	; (8006f5c <pvPortMalloc+0x1b0>)
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	4b1b      	ldr	r3, [pc, #108]	; (8006f64 <pvPortMalloc+0x1b8>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d203      	bcs.n	8006f06 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006efe:	4b17      	ldr	r3, [pc, #92]	; (8006f5c <pvPortMalloc+0x1b0>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a18      	ldr	r2, [pc, #96]	; (8006f64 <pvPortMalloc+0x1b8>)
 8006f04:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f08:	685a      	ldr	r2, [r3, #4]
 8006f0a:	4b13      	ldr	r3, [pc, #76]	; (8006f58 <pvPortMalloc+0x1ac>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	431a      	orrs	r2, r3
 8006f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f12:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f16:	2200      	movs	r2, #0
 8006f18:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006f1a:	4b13      	ldr	r3, [pc, #76]	; (8006f68 <pvPortMalloc+0x1bc>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	3301      	adds	r3, #1
 8006f20:	4a11      	ldr	r2, [pc, #68]	; (8006f68 <pvPortMalloc+0x1bc>)
 8006f22:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006f24:	f7fe fc78 	bl	8005818 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	f003 0307 	and.w	r3, r3, #7
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00a      	beq.n	8006f48 <pvPortMalloc+0x19c>
        __asm volatile
 8006f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f36:	f383 8811 	msr	BASEPRI, r3
 8006f3a:	f3bf 8f6f 	isb	sy
 8006f3e:	f3bf 8f4f 	dsb	sy
 8006f42:	60fb      	str	r3, [r7, #12]
    }
 8006f44:	bf00      	nop
 8006f46:	e7fe      	b.n	8006f46 <pvPortMalloc+0x19a>
    return pvReturn;
 8006f48:	69fb      	ldr	r3, [r7, #28]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3728      	adds	r7, #40	; 0x28
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	200029e8 	.word	0x200029e8
 8006f58:	200029fc 	.word	0x200029fc
 8006f5c:	200029ec 	.word	0x200029ec
 8006f60:	200029e0 	.word	0x200029e0
 8006f64:	200029f0 	.word	0x200029f0
 8006f68:	200029f4 	.word	0x200029f4

08006f6c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d04d      	beq.n	800701a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8006f7e:	2308      	movs	r3, #8
 8006f80:	425b      	negs	r3, r3
 8006f82:	697a      	ldr	r2, [r7, #20]
 8006f84:	4413      	add	r3, r2
 8006f86:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	685a      	ldr	r2, [r3, #4]
 8006f90:	4b24      	ldr	r3, [pc, #144]	; (8007024 <vPortFree+0xb8>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4013      	ands	r3, r2
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10a      	bne.n	8006fb0 <vPortFree+0x44>
        __asm volatile
 8006f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9e:	f383 8811 	msr	BASEPRI, r3
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	f3bf 8f4f 	dsb	sy
 8006faa:	60fb      	str	r3, [r7, #12]
    }
 8006fac:	bf00      	nop
 8006fae:	e7fe      	b.n	8006fae <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00a      	beq.n	8006fce <vPortFree+0x62>
        __asm volatile
 8006fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fbc:	f383 8811 	msr	BASEPRI, r3
 8006fc0:	f3bf 8f6f 	isb	sy
 8006fc4:	f3bf 8f4f 	dsb	sy
 8006fc8:	60bb      	str	r3, [r7, #8]
    }
 8006fca:	bf00      	nop
 8006fcc:	e7fe      	b.n	8006fcc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	685a      	ldr	r2, [r3, #4]
 8006fd2:	4b14      	ldr	r3, [pc, #80]	; (8007024 <vPortFree+0xb8>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d01e      	beq.n	800701a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d11a      	bne.n	800701a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	685a      	ldr	r2, [r3, #4]
 8006fe8:	4b0e      	ldr	r3, [pc, #56]	; (8007024 <vPortFree+0xb8>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	43db      	mvns	r3, r3
 8006fee:	401a      	ands	r2, r3
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8006ff4:	f7fe fc02 	bl	80057fc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	685a      	ldr	r2, [r3, #4]
 8006ffc:	4b0a      	ldr	r3, [pc, #40]	; (8007028 <vPortFree+0xbc>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4413      	add	r3, r2
 8007002:	4a09      	ldr	r2, [pc, #36]	; (8007028 <vPortFree+0xbc>)
 8007004:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007006:	6938      	ldr	r0, [r7, #16]
 8007008:	f000 f874 	bl	80070f4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800700c:	4b07      	ldr	r3, [pc, #28]	; (800702c <vPortFree+0xc0>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	3301      	adds	r3, #1
 8007012:	4a06      	ldr	r2, [pc, #24]	; (800702c <vPortFree+0xc0>)
 8007014:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007016:	f7fe fbff 	bl	8005818 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800701a:	bf00      	nop
 800701c:	3718      	adds	r7, #24
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	200029fc 	.word	0x200029fc
 8007028:	200029ec 	.word	0x200029ec
 800702c:	200029f8 	.word	0x200029f8

08007030 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007036:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800703a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800703c:	4b27      	ldr	r3, [pc, #156]	; (80070dc <prvHeapInit+0xac>)
 800703e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f003 0307 	and.w	r3, r3, #7
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00c      	beq.n	8007064 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	3307      	adds	r3, #7
 800704e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f023 0307 	bic.w	r3, r3, #7
 8007056:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007058:	68ba      	ldr	r2, [r7, #8]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	4a1f      	ldr	r2, [pc, #124]	; (80070dc <prvHeapInit+0xac>)
 8007060:	4413      	add	r3, r2
 8007062:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007068:	4a1d      	ldr	r2, [pc, #116]	; (80070e0 <prvHeapInit+0xb0>)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800706e:	4b1c      	ldr	r3, [pc, #112]	; (80070e0 <prvHeapInit+0xb0>)
 8007070:	2200      	movs	r2, #0
 8007072:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	68ba      	ldr	r2, [r7, #8]
 8007078:	4413      	add	r3, r2
 800707a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800707c:	2208      	movs	r2, #8
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	1a9b      	subs	r3, r3, r2
 8007082:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f023 0307 	bic.w	r3, r3, #7
 800708a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	4a15      	ldr	r2, [pc, #84]	; (80070e4 <prvHeapInit+0xb4>)
 8007090:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007092:	4b14      	ldr	r3, [pc, #80]	; (80070e4 <prvHeapInit+0xb4>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2200      	movs	r2, #0
 8007098:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800709a:	4b12      	ldr	r3, [pc, #72]	; (80070e4 <prvHeapInit+0xb4>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2200      	movs	r2, #0
 80070a0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	1ad2      	subs	r2, r2, r3
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80070b0:	4b0c      	ldr	r3, [pc, #48]	; (80070e4 <prvHeapInit+0xb4>)
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	4a0a      	ldr	r2, [pc, #40]	; (80070e8 <prvHeapInit+0xb8>)
 80070be:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	4a09      	ldr	r2, [pc, #36]	; (80070ec <prvHeapInit+0xbc>)
 80070c6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80070c8:	4b09      	ldr	r3, [pc, #36]	; (80070f0 <prvHeapInit+0xc0>)
 80070ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80070ce:	601a      	str	r2, [r3, #0]
}
 80070d0:	bf00      	nop
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr
 80070dc:	200001e0 	.word	0x200001e0
 80070e0:	200029e0 	.word	0x200029e0
 80070e4:	200029e8 	.word	0x200029e8
 80070e8:	200029f0 	.word	0x200029f0
 80070ec:	200029ec 	.word	0x200029ec
 80070f0:	200029fc 	.word	0x200029fc

080070f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80070fc:	4b28      	ldr	r3, [pc, #160]	; (80071a0 <prvInsertBlockIntoFreeList+0xac>)
 80070fe:	60fb      	str	r3, [r7, #12]
 8007100:	e002      	b.n	8007108 <prvInsertBlockIntoFreeList+0x14>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	60fb      	str	r3, [r7, #12]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	429a      	cmp	r2, r3
 8007110:	d8f7      	bhi.n	8007102 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	4413      	add	r3, r2
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	429a      	cmp	r2, r3
 8007122:	d108      	bne.n	8007136 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	441a      	add	r2, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	441a      	add	r2, r3
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	429a      	cmp	r2, r3
 8007148:	d118      	bne.n	800717c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	4b15      	ldr	r3, [pc, #84]	; (80071a4 <prvInsertBlockIntoFreeList+0xb0>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	429a      	cmp	r2, r3
 8007154:	d00d      	beq.n	8007172 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	685a      	ldr	r2, [r3, #4]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	441a      	add	r2, r3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	601a      	str	r2, [r3, #0]
 8007170:	e008      	b.n	8007184 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007172:	4b0c      	ldr	r3, [pc, #48]	; (80071a4 <prvInsertBlockIntoFreeList+0xb0>)
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	601a      	str	r2, [r3, #0]
 800717a:	e003      	b.n	8007184 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	429a      	cmp	r2, r3
 800718a:	d002      	beq.n	8007192 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007192:	bf00      	nop
 8007194:	3714      	adds	r7, #20
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	200029e0 	.word	0x200029e0
 80071a4:	200029e8 	.word	0x200029e8

080071a8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b086      	sub	sp, #24
 80071ac:	af02      	add	r7, sp, #8
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
 80071b4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80071b6:	2205      	movs	r2, #5
 80071b8:	492b      	ldr	r1, [pc, #172]	; (8007268 <SYSVIEW_AddTask+0xc0>)
 80071ba:	68b8      	ldr	r0, [r7, #8]
 80071bc:	f001 fc90 	bl	8008ae0 <memcmp>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d04b      	beq.n	800725e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80071c6:	4b29      	ldr	r3, [pc, #164]	; (800726c <SYSVIEW_AddTask+0xc4>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2b07      	cmp	r3, #7
 80071cc:	d903      	bls.n	80071d6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80071ce:	4828      	ldr	r0, [pc, #160]	; (8007270 <SYSVIEW_AddTask+0xc8>)
 80071d0:	f001 fbbe 	bl	8008950 <SEGGER_SYSVIEW_Warn>
    return;
 80071d4:	e044      	b.n	8007260 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80071d6:	4b25      	ldr	r3, [pc, #148]	; (800726c <SYSVIEW_AddTask+0xc4>)
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	4926      	ldr	r1, [pc, #152]	; (8007274 <SYSVIEW_AddTask+0xcc>)
 80071dc:	4613      	mov	r3, r2
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	4413      	add	r3, r2
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	440b      	add	r3, r1
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80071ea:	4b20      	ldr	r3, [pc, #128]	; (800726c <SYSVIEW_AddTask+0xc4>)
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	4921      	ldr	r1, [pc, #132]	; (8007274 <SYSVIEW_AddTask+0xcc>)
 80071f0:	4613      	mov	r3, r2
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	4413      	add	r3, r2
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	440b      	add	r3, r1
 80071fa:	3304      	adds	r3, #4
 80071fc:	68ba      	ldr	r2, [r7, #8]
 80071fe:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8007200:	4b1a      	ldr	r3, [pc, #104]	; (800726c <SYSVIEW_AddTask+0xc4>)
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	491b      	ldr	r1, [pc, #108]	; (8007274 <SYSVIEW_AddTask+0xcc>)
 8007206:	4613      	mov	r3, r2
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	4413      	add	r3, r2
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	440b      	add	r3, r1
 8007210:	3308      	adds	r3, #8
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8007216:	4b15      	ldr	r3, [pc, #84]	; (800726c <SYSVIEW_AddTask+0xc4>)
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	4916      	ldr	r1, [pc, #88]	; (8007274 <SYSVIEW_AddTask+0xcc>)
 800721c:	4613      	mov	r3, r2
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	4413      	add	r3, r2
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	440b      	add	r3, r1
 8007226:	330c      	adds	r3, #12
 8007228:	683a      	ldr	r2, [r7, #0]
 800722a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800722c:	4b0f      	ldr	r3, [pc, #60]	; (800726c <SYSVIEW_AddTask+0xc4>)
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	4910      	ldr	r1, [pc, #64]	; (8007274 <SYSVIEW_AddTask+0xcc>)
 8007232:	4613      	mov	r3, r2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4413      	add	r3, r2
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	440b      	add	r3, r1
 800723c:	3310      	adds	r3, #16
 800723e:	69ba      	ldr	r2, [r7, #24]
 8007240:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8007242:	4b0a      	ldr	r3, [pc, #40]	; (800726c <SYSVIEW_AddTask+0xc4>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	3301      	adds	r3, #1
 8007248:	4a08      	ldr	r2, [pc, #32]	; (800726c <SYSVIEW_AddTask+0xc4>)
 800724a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	9300      	str	r3, [sp, #0]
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	68b9      	ldr	r1, [r7, #8]
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f000 f80e 	bl	8007278 <SYSVIEW_SendTaskInfo>
 800725c:	e000      	b.n	8007260 <SYSVIEW_AddTask+0xb8>
    return;
 800725e:	bf00      	nop

}
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	0800aa84 	.word	0x0800aa84
 800726c:	20002aa0 	.word	0x20002aa0
 8007270:	0800aa8c 	.word	0x0800aa8c
 8007274:	20002a00 	.word	0x20002a00

08007278 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8007278:	b580      	push	{r7, lr}
 800727a:	b08a      	sub	sp, #40	; 0x28
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	607a      	str	r2, [r7, #4]
 8007284:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8007286:	f107 0314 	add.w	r3, r7, #20
 800728a:	2214      	movs	r2, #20
 800728c:	2100      	movs	r1, #0
 800728e:	4618      	mov	r0, r3
 8007290:	f001 fc42 	bl	8008b18 <memset>
  TaskInfo.TaskID     = TaskID;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80072a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80072a8:	f107 0314 	add.w	r3, r7, #20
 80072ac:	4618      	mov	r0, r3
 80072ae:	f000 ff7d 	bl	80081ac <SEGGER_SYSVIEW_SendTaskInfo>
}
 80072b2:	bf00      	nop
 80072b4:	3728      	adds	r7, #40	; 0x28
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
	...

080072bc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80072c2:	4b24      	ldr	r3, [pc, #144]	; (8007354 <_DoInit+0x98>)
 80072c4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2203      	movs	r2, #3
 80072ca:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2203      	movs	r2, #3
 80072d0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a20      	ldr	r2, [pc, #128]	; (8007358 <_DoInit+0x9c>)
 80072d6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a20      	ldr	r2, [pc, #128]	; (800735c <_DoInit+0xa0>)
 80072dc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80072e4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a17      	ldr	r2, [pc, #92]	; (8007358 <_DoInit+0x9c>)
 80072fc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a17      	ldr	r2, [pc, #92]	; (8007360 <_DoInit+0xa4>)
 8007302:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2210      	movs	r2, #16
 8007308:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	3307      	adds	r3, #7
 8007320:	4a10      	ldr	r2, [pc, #64]	; (8007364 <_DoInit+0xa8>)
 8007322:	6810      	ldr	r0, [r2, #0]
 8007324:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8007326:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a0e      	ldr	r2, [pc, #56]	; (8007368 <_DoInit+0xac>)
 800732e:	6810      	ldr	r0, [r2, #0]
 8007330:	6018      	str	r0, [r3, #0]
 8007332:	8891      	ldrh	r1, [r2, #4]
 8007334:	7992      	ldrb	r2, [r2, #6]
 8007336:	8099      	strh	r1, [r3, #4]
 8007338:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800733a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2220      	movs	r2, #32
 8007342:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8007344:	f3bf 8f5f 	dmb	sy
}
 8007348:	bf00      	nop
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr
 8007354:	20003148 	.word	0x20003148
 8007358:	0800aadc 	.word	0x0800aadc
 800735c:	20002aa4 	.word	0x20002aa4
 8007360:	20002ea4 	.word	0x20002ea4
 8007364:	0800aae8 	.word	0x0800aae8
 8007368:	0800aaec 	.word	0x0800aaec

0800736c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800736c:	b580      	push	{r7, lr}
 800736e:	b08a      	sub	sp, #40	; 0x28
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8007378:	2300      	movs	r3, #0
 800737a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8007388:	69ba      	ldr	r2, [r7, #24]
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	429a      	cmp	r2, r3
 800738e:	d905      	bls.n	800739c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8007390:	69ba      	ldr	r2, [r7, #24]
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	3b01      	subs	r3, #1
 8007398:	627b      	str	r3, [r7, #36]	; 0x24
 800739a:	e007      	b.n	80073ac <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	689a      	ldr	r2, [r3, #8]
 80073a0:	69b9      	ldr	r1, [r7, #24]
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	1acb      	subs	r3, r1, r3
 80073a6:	4413      	add	r3, r2
 80073a8:	3b01      	subs	r3, #1
 80073aa:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	689a      	ldr	r2, [r3, #8]
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073b6:	4293      	cmp	r3, r2
 80073b8:	bf28      	it	cs
 80073ba:	4613      	movcs	r3, r2
 80073bc:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80073be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4293      	cmp	r3, r2
 80073c4:	bf28      	it	cs
 80073c6:	4613      	movcs	r3, r2
 80073c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	685a      	ldr	r2, [r3, #4]
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	4413      	add	r3, r2
 80073d2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80073d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073d6:	68b9      	ldr	r1, [r7, #8]
 80073d8:	6978      	ldr	r0, [r7, #20]
 80073da:	f001 fb8f 	bl	8008afc <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80073de:	6a3a      	ldr	r2, [r7, #32]
 80073e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e2:	4413      	add	r3, r2
 80073e4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80073e6:	68ba      	ldr	r2, [r7, #8]
 80073e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ea:	4413      	add	r3, r2
 80073ec:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80073f6:	69fa      	ldr	r2, [r7, #28]
 80073f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fa:	4413      	add	r3, r2
 80073fc:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	69fa      	ldr	r2, [r7, #28]
 8007404:	429a      	cmp	r2, r3
 8007406:	d101      	bne.n	800740c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8007408:	2300      	movs	r3, #0
 800740a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800740c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	69fa      	ldr	r2, [r7, #28]
 8007414:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1b2      	bne.n	8007382 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800741c:	6a3b      	ldr	r3, [r7, #32]
}
 800741e:	4618      	mov	r0, r3
 8007420:	3728      	adds	r7, #40	; 0x28
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8007426:	b580      	push	{r7, lr}
 8007428:	b088      	sub	sp, #32
 800742a:	af00      	add	r7, sp, #0
 800742c:	60f8      	str	r0, [r7, #12]
 800742e:	60b9      	str	r1, [r7, #8]
 8007430:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	689a      	ldr	r2, [r3, #8]
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8007442:	69ba      	ldr	r2, [r7, #24]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	429a      	cmp	r2, r3
 8007448:	d911      	bls.n	800746e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	685a      	ldr	r2, [r3, #4]
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	4413      	add	r3, r2
 8007452:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	68b9      	ldr	r1, [r7, #8]
 8007458:	6938      	ldr	r0, [r7, #16]
 800745a:	f001 fb4f 	bl	8008afc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800745e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8007462:	69fa      	ldr	r2, [r7, #28]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	441a      	add	r2, r3
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800746c:	e01f      	b.n	80074ae <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	685a      	ldr	r2, [r3, #4]
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	4413      	add	r3, r2
 800747a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800747c:	697a      	ldr	r2, [r7, #20]
 800747e:	68b9      	ldr	r1, [r7, #8]
 8007480:	6938      	ldr	r0, [r7, #16]
 8007482:	f001 fb3b 	bl	8008afc <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	1ad3      	subs	r3, r2, r3
 800748c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	4413      	add	r3, r2
 800749a:	697a      	ldr	r2, [r7, #20]
 800749c:	4619      	mov	r1, r3
 800749e:	6938      	ldr	r0, [r7, #16]
 80074a0:	f001 fb2c 	bl	8008afc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80074a4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	697a      	ldr	r2, [r7, #20]
 80074ac:	60da      	str	r2, [r3, #12]
}
 80074ae:	bf00      	nop
 80074b0:	3720      	adds	r7, #32
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80074b6:	b480      	push	{r7}
 80074b8:	b087      	sub	sp, #28
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80074ca:	693a      	ldr	r2, [r7, #16]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d808      	bhi.n	80074e4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	689a      	ldr	r2, [r3, #8]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	1ad2      	subs	r2, r2, r3
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	4413      	add	r3, r2
 80074de:	3b01      	subs	r3, #1
 80074e0:	617b      	str	r3, [r7, #20]
 80074e2:	e004      	b.n	80074ee <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80074e4:	693a      	ldr	r2, [r7, #16]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	3b01      	subs	r3, #1
 80074ec:	617b      	str	r3, [r7, #20]
  }
  return r;
 80074ee:	697b      	ldr	r3, [r7, #20]
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	371c      	adds	r7, #28
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b08c      	sub	sp, #48	; 0x30
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8007508:	4b3e      	ldr	r3, [pc, #248]	; (8007604 <SEGGER_RTT_ReadNoLock+0x108>)
 800750a:	623b      	str	r3, [r7, #32]
 800750c:	6a3b      	ldr	r3, [r7, #32]
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	b2db      	uxtb	r3, r3
 8007512:	2b00      	cmp	r3, #0
 8007514:	d101      	bne.n	800751a <SEGGER_RTT_ReadNoLock+0x1e>
 8007516:	f7ff fed1 	bl	80072bc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	4613      	mov	r3, r2
 800751e:	005b      	lsls	r3, r3, #1
 8007520:	4413      	add	r3, r2
 8007522:	00db      	lsls	r3, r3, #3
 8007524:	3360      	adds	r3, #96	; 0x60
 8007526:	4a37      	ldr	r2, [pc, #220]	; (8007604 <SEGGER_RTT_ReadNoLock+0x108>)
 8007528:	4413      	add	r3, r2
 800752a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800753c:	2300      	movs	r3, #0
 800753e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8007540:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	429a      	cmp	r2, r3
 8007546:	d92b      	bls.n	80075a0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	689a      	ldr	r2, [r3, #8]
 800754c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754e:	1ad3      	subs	r3, r2, r3
 8007550:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007552:	697a      	ldr	r2, [r7, #20]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4293      	cmp	r3, r2
 8007558:	bf28      	it	cs
 800755a:	4613      	movcs	r3, r2
 800755c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	685a      	ldr	r2, [r3, #4]
 8007562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007564:	4413      	add	r3, r2
 8007566:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8007568:	697a      	ldr	r2, [r7, #20]
 800756a:	6939      	ldr	r1, [r7, #16]
 800756c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800756e:	f001 fac5 	bl	8008afc <memcpy>
    NumBytesRead += NumBytesRem;
 8007572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	4413      	add	r3, r2
 8007578:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800757a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	4413      	add	r3, r2
 8007580:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800758a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	4413      	add	r3, r2
 8007590:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007598:	429a      	cmp	r2, r3
 800759a:	d101      	bne.n	80075a0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800759c:	2300      	movs	r3, #0
 800759e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80075a0:	69ba      	ldr	r2, [r7, #24]
 80075a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80075a8:	697a      	ldr	r2, [r7, #20]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4293      	cmp	r3, r2
 80075ae:	bf28      	it	cs
 80075b0:	4613      	movcs	r3, r2
 80075b2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d019      	beq.n	80075ee <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	685a      	ldr	r2, [r3, #4]
 80075be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c0:	4413      	add	r3, r2
 80075c2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80075c4:	697a      	ldr	r2, [r7, #20]
 80075c6:	6939      	ldr	r1, [r7, #16]
 80075c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80075ca:	f001 fa97 	bl	8008afc <memcpy>
    NumBytesRead += NumBytesRem;
 80075ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	4413      	add	r3, r2
 80075d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80075d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	4413      	add	r3, r2
 80075dc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	1ad3      	subs	r3, r2, r3
 80075e4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80075e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	4413      	add	r3, r2
 80075ec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80075ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d002      	beq.n	80075fa <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075f8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80075fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3730      	adds	r7, #48	; 0x30
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	20003148 	.word	0x20003148

08007608 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8007608:	b580      	push	{r7, lr}
 800760a:	b088      	sub	sp, #32
 800760c:	af00      	add	r7, sp, #0
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	1c5a      	adds	r2, r3, #1
 800761c:	4613      	mov	r3, r2
 800761e:	005b      	lsls	r3, r3, #1
 8007620:	4413      	add	r3, r2
 8007622:	00db      	lsls	r3, r3, #3
 8007624:	4a1f      	ldr	r2, [pc, #124]	; (80076a4 <SEGGER_RTT_WriteNoLock+0x9c>)
 8007626:	4413      	add	r3, r2
 8007628:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	2b02      	cmp	r3, #2
 8007630:	d029      	beq.n	8007686 <SEGGER_RTT_WriteNoLock+0x7e>
 8007632:	2b02      	cmp	r3, #2
 8007634:	d82e      	bhi.n	8007694 <SEGGER_RTT_WriteNoLock+0x8c>
 8007636:	2b00      	cmp	r3, #0
 8007638:	d002      	beq.n	8007640 <SEGGER_RTT_WriteNoLock+0x38>
 800763a:	2b01      	cmp	r3, #1
 800763c:	d013      	beq.n	8007666 <SEGGER_RTT_WriteNoLock+0x5e>
 800763e:	e029      	b.n	8007694 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8007640:	6978      	ldr	r0, [r7, #20]
 8007642:	f7ff ff38 	bl	80074b6 <_GetAvailWriteSpace>
 8007646:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8007648:	693a      	ldr	r2, [r7, #16]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	429a      	cmp	r2, r3
 800764e:	d202      	bcs.n	8007656 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8007650:	2300      	movs	r3, #0
 8007652:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8007654:	e021      	b.n	800769a <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	69b9      	ldr	r1, [r7, #24]
 800765e:	6978      	ldr	r0, [r7, #20]
 8007660:	f7ff fee1 	bl	8007426 <_WriteNoCheck>
    break;
 8007664:	e019      	b.n	800769a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8007666:	6978      	ldr	r0, [r7, #20]
 8007668:	f7ff ff25 	bl	80074b6 <_GetAvailWriteSpace>
 800766c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	4293      	cmp	r3, r2
 8007674:	bf28      	it	cs
 8007676:	4613      	movcs	r3, r2
 8007678:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800767a:	69fa      	ldr	r2, [r7, #28]
 800767c:	69b9      	ldr	r1, [r7, #24]
 800767e:	6978      	ldr	r0, [r7, #20]
 8007680:	f7ff fed1 	bl	8007426 <_WriteNoCheck>
    break;
 8007684:	e009      	b.n	800769a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	69b9      	ldr	r1, [r7, #24]
 800768a:	6978      	ldr	r0, [r7, #20]
 800768c:	f7ff fe6e 	bl	800736c <_WriteBlocking>
 8007690:	61f8      	str	r0, [r7, #28]
    break;
 8007692:	e002      	b.n	800769a <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8007694:	2300      	movs	r3, #0
 8007696:	61fb      	str	r3, [r7, #28]
    break;
 8007698:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800769a:	69fb      	ldr	r3, [r7, #28]
}
 800769c:	4618      	mov	r0, r3
 800769e:	3720      	adds	r7, #32
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	20003148 	.word	0x20003148

080076a8 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b088      	sub	sp, #32
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80076b4:	4b0e      	ldr	r3, [pc, #56]	; (80076f0 <SEGGER_RTT_Write+0x48>)
 80076b6:	61fb      	str	r3, [r7, #28]
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d101      	bne.n	80076c6 <SEGGER_RTT_Write+0x1e>
 80076c2:	f7ff fdfb 	bl	80072bc <_DoInit>
  SEGGER_RTT_LOCK();
 80076c6:	f3ef 8311 	mrs	r3, BASEPRI
 80076ca:	f04f 0120 	mov.w	r1, #32
 80076ce:	f381 8811 	msr	BASEPRI, r1
 80076d2:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	68b9      	ldr	r1, [r7, #8]
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f7ff ff95 	bl	8007608 <SEGGER_RTT_WriteNoLock>
 80076de:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80076e6:	697b      	ldr	r3, [r7, #20]
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3720      	adds	r7, #32
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	20003148 	.word	0x20003148

080076f4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80076f4:	b480      	push	{r7}
 80076f6:	b087      	sub	sp, #28
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8007700:	2300      	movs	r3, #0
 8007702:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00f      	beq.n	800772a <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800770a:	e002      	b.n	8007712 <_EncodeStr+0x1e>
      Len++;
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	3301      	adds	r3, #1
 8007710:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8007712:	68ba      	ldr	r2, [r7, #8]
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	4413      	add	r3, r2
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1f6      	bne.n	800770c <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800771e:	693a      	ldr	r2, [r7, #16]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	429a      	cmp	r2, r3
 8007724:	d901      	bls.n	800772a <_EncodeStr+0x36>
      Len = Limit;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	2bfe      	cmp	r3, #254	; 0xfe
 800772e:	d806      	bhi.n	800773e <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	1c5a      	adds	r2, r3, #1
 8007734:	60fa      	str	r2, [r7, #12]
 8007736:	693a      	ldr	r2, [r7, #16]
 8007738:	b2d2      	uxtb	r2, r2
 800773a:	701a      	strb	r2, [r3, #0]
 800773c:	e011      	b.n	8007762 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	1c5a      	adds	r2, r3, #1
 8007742:	60fa      	str	r2, [r7, #12]
 8007744:	22ff      	movs	r2, #255	; 0xff
 8007746:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	1c5a      	adds	r2, r3, #1
 800774c:	60fa      	str	r2, [r7, #12]
 800774e:	693a      	ldr	r2, [r7, #16]
 8007750:	b2d2      	uxtb	r2, r2
 8007752:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	0a19      	lsrs	r1, r3, #8
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	1c5a      	adds	r2, r3, #1
 800775c:	60fa      	str	r2, [r7, #12]
 800775e:	b2ca      	uxtb	r2, r1
 8007760:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8007762:	2300      	movs	r3, #0
 8007764:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8007766:	e00a      	b.n	800777e <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	1c53      	adds	r3, r2, #1
 800776c:	60bb      	str	r3, [r7, #8]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	1c59      	adds	r1, r3, #1
 8007772:	60f9      	str	r1, [r7, #12]
 8007774:	7812      	ldrb	r2, [r2, #0]
 8007776:	701a      	strb	r2, [r3, #0]
    n++;
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	3301      	adds	r3, #1
 800777c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800777e:	697a      	ldr	r2, [r7, #20]
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	429a      	cmp	r2, r3
 8007784:	d3f0      	bcc.n	8007768 <_EncodeStr+0x74>
  }
  return pPayload;
 8007786:	68fb      	ldr	r3, [r7, #12]
}
 8007788:	4618      	mov	r0, r3
 800778a:	371c      	adds	r7, #28
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	3304      	adds	r3, #4
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80077b2:	4b36      	ldr	r3, [pc, #216]	; (800788c <_HandleIncomingPacket+0xe0>)
 80077b4:	7e1b      	ldrb	r3, [r3, #24]
 80077b6:	4618      	mov	r0, r3
 80077b8:	1cfb      	adds	r3, r7, #3
 80077ba:	2201      	movs	r2, #1
 80077bc:	4619      	mov	r1, r3
 80077be:	f7ff fe9d 	bl	80074fc <SEGGER_RTT_ReadNoLock>
 80077c2:	4603      	mov	r3, r0
 80077c4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	dd54      	ble.n	8007876 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80077cc:	78fb      	ldrb	r3, [r7, #3]
 80077ce:	2b80      	cmp	r3, #128	; 0x80
 80077d0:	d032      	beq.n	8007838 <_HandleIncomingPacket+0x8c>
 80077d2:	2b80      	cmp	r3, #128	; 0x80
 80077d4:	dc42      	bgt.n	800785c <_HandleIncomingPacket+0xb0>
 80077d6:	2b07      	cmp	r3, #7
 80077d8:	dc16      	bgt.n	8007808 <_HandleIncomingPacket+0x5c>
 80077da:	2b00      	cmp	r3, #0
 80077dc:	dd3e      	ble.n	800785c <_HandleIncomingPacket+0xb0>
 80077de:	3b01      	subs	r3, #1
 80077e0:	2b06      	cmp	r3, #6
 80077e2:	d83b      	bhi.n	800785c <_HandleIncomingPacket+0xb0>
 80077e4:	a201      	add	r2, pc, #4	; (adr r2, 80077ec <_HandleIncomingPacket+0x40>)
 80077e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ea:	bf00      	nop
 80077ec:	0800780f 	.word	0x0800780f
 80077f0:	08007815 	.word	0x08007815
 80077f4:	0800781b 	.word	0x0800781b
 80077f8:	08007821 	.word	0x08007821
 80077fc:	08007827 	.word	0x08007827
 8007800:	0800782d 	.word	0x0800782d
 8007804:	08007833 	.word	0x08007833
 8007808:	2b7f      	cmp	r3, #127	; 0x7f
 800780a:	d036      	beq.n	800787a <_HandleIncomingPacket+0xce>
 800780c:	e026      	b.n	800785c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800780e:	f000 fb53 	bl	8007eb8 <SEGGER_SYSVIEW_Start>
      break;
 8007812:	e037      	b.n	8007884 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8007814:	f000 fc0a 	bl	800802c <SEGGER_SYSVIEW_Stop>
      break;
 8007818:	e034      	b.n	8007884 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800781a:	f000 fdbf 	bl	800839c <SEGGER_SYSVIEW_RecordSystime>
      break;
 800781e:	e031      	b.n	8007884 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8007820:	f000 fda8 	bl	8008374 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8007824:	e02e      	b.n	8007884 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8007826:	f000 fc27 	bl	8008078 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800782a:	e02b      	b.n	8007884 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800782c:	f001 f852 	bl	80088d4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8007830:	e028      	b.n	8007884 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8007832:	f001 f831 	bl	8008898 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8007836:	e025      	b.n	8007884 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007838:	4b14      	ldr	r3, [pc, #80]	; (800788c <_HandleIncomingPacket+0xe0>)
 800783a:	7e1b      	ldrb	r3, [r3, #24]
 800783c:	4618      	mov	r0, r3
 800783e:	1cfb      	adds	r3, r7, #3
 8007840:	2201      	movs	r2, #1
 8007842:	4619      	mov	r1, r3
 8007844:	f7ff fe5a 	bl	80074fc <SEGGER_RTT_ReadNoLock>
 8007848:	4603      	mov	r3, r0
 800784a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2b00      	cmp	r3, #0
 8007850:	dd15      	ble.n	800787e <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8007852:	78fb      	ldrb	r3, [r7, #3]
 8007854:	4618      	mov	r0, r3
 8007856:	f000 ff9f 	bl	8008798 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800785a:	e010      	b.n	800787e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800785c:	78fb      	ldrb	r3, [r7, #3]
 800785e:	b25b      	sxtb	r3, r3
 8007860:	2b00      	cmp	r3, #0
 8007862:	da0e      	bge.n	8007882 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007864:	4b09      	ldr	r3, [pc, #36]	; (800788c <_HandleIncomingPacket+0xe0>)
 8007866:	7e1b      	ldrb	r3, [r3, #24]
 8007868:	4618      	mov	r0, r3
 800786a:	1cfb      	adds	r3, r7, #3
 800786c:	2201      	movs	r2, #1
 800786e:	4619      	mov	r1, r3
 8007870:	f7ff fe44 	bl	80074fc <SEGGER_RTT_ReadNoLock>
      }
      break;
 8007874:	e005      	b.n	8007882 <_HandleIncomingPacket+0xd6>
    }
  }
 8007876:	bf00      	nop
 8007878:	e004      	b.n	8007884 <_HandleIncomingPacket+0xd8>
      break;
 800787a:	bf00      	nop
 800787c:	e002      	b.n	8007884 <_HandleIncomingPacket+0xd8>
      break;
 800787e:	bf00      	nop
 8007880:	e000      	b.n	8007884 <_HandleIncomingPacket+0xd8>
      break;
 8007882:	bf00      	nop
}
 8007884:	bf00      	nop
 8007886:	3708      	adds	r7, #8
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	20002eb4 	.word	0x20002eb4

08007890 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8007890:	b580      	push	{r7, lr}
 8007892:	b08c      	sub	sp, #48	; 0x30
 8007894:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8007896:	2301      	movs	r3, #1
 8007898:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800789a:	1d3b      	adds	r3, r7, #4
 800789c:	3301      	adds	r3, #1
 800789e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078a4:	4b31      	ldr	r3, [pc, #196]	; (800796c <_TrySendOverflowPacket+0xdc>)
 80078a6:	695b      	ldr	r3, [r3, #20]
 80078a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80078aa:	e00b      	b.n	80078c4 <_TrySendOverflowPacket+0x34>
 80078ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ae:	b2da      	uxtb	r2, r3
 80078b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b2:	1c59      	adds	r1, r3, #1
 80078b4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80078b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80078ba:	b2d2      	uxtb	r2, r2
 80078bc:	701a      	strb	r2, [r3, #0]
 80078be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c0:	09db      	lsrs	r3, r3, #7
 80078c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80078c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c6:	2b7f      	cmp	r3, #127	; 0x7f
 80078c8:	d8f0      	bhi.n	80078ac <_TrySendOverflowPacket+0x1c>
 80078ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078cc:	1c5a      	adds	r2, r3, #1
 80078ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078d2:	b2d2      	uxtb	r2, r2
 80078d4:	701a      	strb	r2, [r3, #0]
 80078d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80078da:	4b25      	ldr	r3, [pc, #148]	; (8007970 <_TrySendOverflowPacket+0xe0>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80078e0:	4b22      	ldr	r3, [pc, #136]	; (800796c <_TrySendOverflowPacket+0xdc>)
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	69ba      	ldr	r2, [r7, #24]
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	627b      	str	r3, [r7, #36]	; 0x24
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	623b      	str	r3, [r7, #32]
 80078f2:	e00b      	b.n	800790c <_TrySendOverflowPacket+0x7c>
 80078f4:	6a3b      	ldr	r3, [r7, #32]
 80078f6:	b2da      	uxtb	r2, r3
 80078f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fa:	1c59      	adds	r1, r3, #1
 80078fc:	6279      	str	r1, [r7, #36]	; 0x24
 80078fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007902:	b2d2      	uxtb	r2, r2
 8007904:	701a      	strb	r2, [r3, #0]
 8007906:	6a3b      	ldr	r3, [r7, #32]
 8007908:	09db      	lsrs	r3, r3, #7
 800790a:	623b      	str	r3, [r7, #32]
 800790c:	6a3b      	ldr	r3, [r7, #32]
 800790e:	2b7f      	cmp	r3, #127	; 0x7f
 8007910:	d8f0      	bhi.n	80078f4 <_TrySendOverflowPacket+0x64>
 8007912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007914:	1c5a      	adds	r2, r3, #1
 8007916:	627a      	str	r2, [r7, #36]	; 0x24
 8007918:	6a3a      	ldr	r2, [r7, #32]
 800791a:	b2d2      	uxtb	r2, r2
 800791c:	701a      	strb	r2, [r3, #0]
 800791e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007920:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8007922:	4b12      	ldr	r3, [pc, #72]	; (800796c <_TrySendOverflowPacket+0xdc>)
 8007924:	785b      	ldrb	r3, [r3, #1]
 8007926:	4618      	mov	r0, r3
 8007928:	1d3b      	adds	r3, r7, #4
 800792a:	69fa      	ldr	r2, [r7, #28]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	461a      	mov	r2, r3
 8007930:	1d3b      	adds	r3, r7, #4
 8007932:	4619      	mov	r1, r3
 8007934:	f7f8 fc4c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007938:	4603      	mov	r3, r0
 800793a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d009      	beq.n	8007956 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8007942:	4a0a      	ldr	r2, [pc, #40]	; (800796c <_TrySendOverflowPacket+0xdc>)
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8007948:	4b08      	ldr	r3, [pc, #32]	; (800796c <_TrySendOverflowPacket+0xdc>)
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	3b01      	subs	r3, #1
 800794e:	b2da      	uxtb	r2, r3
 8007950:	4b06      	ldr	r3, [pc, #24]	; (800796c <_TrySendOverflowPacket+0xdc>)
 8007952:	701a      	strb	r2, [r3, #0]
 8007954:	e004      	b.n	8007960 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8007956:	4b05      	ldr	r3, [pc, #20]	; (800796c <_TrySendOverflowPacket+0xdc>)
 8007958:	695b      	ldr	r3, [r3, #20]
 800795a:	3301      	adds	r3, #1
 800795c:	4a03      	ldr	r2, [pc, #12]	; (800796c <_TrySendOverflowPacket+0xdc>)
 800795e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8007960:	693b      	ldr	r3, [r7, #16]
}
 8007962:	4618      	mov	r0, r3
 8007964:	3730      	adds	r7, #48	; 0x30
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	20002eb4 	.word	0x20002eb4
 8007970:	e0001004 	.word	0xe0001004

08007974 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8007974:	b580      	push	{r7, lr}
 8007976:	b08a      	sub	sp, #40	; 0x28
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8007980:	4b6c      	ldr	r3, [pc, #432]	; (8007b34 <_SendPacket+0x1c0>)
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d010      	beq.n	80079aa <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8007988:	4b6a      	ldr	r3, [pc, #424]	; (8007b34 <_SendPacket+0x1c0>)
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	2b00      	cmp	r3, #0
 800798e:	f000 80a3 	beq.w	8007ad8 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8007992:	4b68      	ldr	r3, [pc, #416]	; (8007b34 <_SendPacket+0x1c0>)
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	2b02      	cmp	r3, #2
 8007998:	d109      	bne.n	80079ae <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800799a:	f7ff ff79 	bl	8007890 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800799e:	4b65      	ldr	r3, [pc, #404]	; (8007b34 <_SendPacket+0x1c0>)
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	f040 809a 	bne.w	8007adc <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80079a8:	e001      	b.n	80079ae <_SendPacket+0x3a>
    goto Send;
 80079aa:	bf00      	nop
 80079ac:	e000      	b.n	80079b0 <_SendPacket+0x3c>
Send:
 80079ae:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2b1f      	cmp	r3, #31
 80079b4:	d809      	bhi.n	80079ca <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80079b6:	4b5f      	ldr	r3, [pc, #380]	; (8007b34 <_SendPacket+0x1c0>)
 80079b8:	69da      	ldr	r2, [r3, #28]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	fa22 f303 	lsr.w	r3, r2, r3
 80079c0:	f003 0301 	and.w	r3, r3, #1
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f040 808b 	bne.w	8007ae0 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2b17      	cmp	r3, #23
 80079ce:	d807      	bhi.n	80079e0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	3b01      	subs	r3, #1
 80079d4:	60fb      	str	r3, [r7, #12]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	b2da      	uxtb	r2, r3
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	701a      	strb	r2, [r3, #0]
 80079de:	e03d      	b.n	8007a5c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80079e0:	68ba      	ldr	r2, [r7, #8]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	1ad3      	subs	r3, r2, r3
 80079e6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	2b7f      	cmp	r3, #127	; 0x7f
 80079ec:	d912      	bls.n	8007a14 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	09da      	lsrs	r2, r3, #7
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	3b01      	subs	r3, #1
 80079f6:	60fb      	str	r3, [r7, #12]
 80079f8:	b2d2      	uxtb	r2, r2
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	3a01      	subs	r2, #1
 8007a06:	60fa      	str	r2, [r7, #12]
 8007a08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a0c:	b2da      	uxtb	r2, r3
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	701a      	strb	r2, [r3, #0]
 8007a12:	e006      	b.n	8007a22 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	3b01      	subs	r3, #1
 8007a18:	60fb      	str	r3, [r7, #12]
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	b2da      	uxtb	r2, r3
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2b7f      	cmp	r3, #127	; 0x7f
 8007a26:	d912      	bls.n	8007a4e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	09da      	lsrs	r2, r3, #7
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	3b01      	subs	r3, #1
 8007a30:	60fb      	str	r3, [r7, #12]
 8007a32:	b2d2      	uxtb	r2, r2
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	3a01      	subs	r2, #1
 8007a40:	60fa      	str	r2, [r7, #12]
 8007a42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a46:	b2da      	uxtb	r2, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	701a      	strb	r2, [r3, #0]
 8007a4c:	e006      	b.n	8007a5c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	3b01      	subs	r3, #1
 8007a52:	60fb      	str	r3, [r7, #12]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	b2da      	uxtb	r2, r3
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007a5c:	4b36      	ldr	r3, [pc, #216]	; (8007b38 <_SendPacket+0x1c4>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8007a62:	4b34      	ldr	r3, [pc, #208]	; (8007b34 <_SendPacket+0x1c0>)
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	69ba      	ldr	r2, [r7, #24]
 8007a68:	1ad3      	subs	r3, r2, r3
 8007a6a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	623b      	str	r3, [r7, #32]
 8007a74:	e00b      	b.n	8007a8e <_SendPacket+0x11a>
 8007a76:	6a3b      	ldr	r3, [r7, #32]
 8007a78:	b2da      	uxtb	r2, r3
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7c:	1c59      	adds	r1, r3, #1
 8007a7e:	6279      	str	r1, [r7, #36]	; 0x24
 8007a80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a84:	b2d2      	uxtb	r2, r2
 8007a86:	701a      	strb	r2, [r3, #0]
 8007a88:	6a3b      	ldr	r3, [r7, #32]
 8007a8a:	09db      	lsrs	r3, r3, #7
 8007a8c:	623b      	str	r3, [r7, #32]
 8007a8e:	6a3b      	ldr	r3, [r7, #32]
 8007a90:	2b7f      	cmp	r3, #127	; 0x7f
 8007a92:	d8f0      	bhi.n	8007a76 <_SendPacket+0x102>
 8007a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a96:	1c5a      	adds	r2, r3, #1
 8007a98:	627a      	str	r2, [r7, #36]	; 0x24
 8007a9a:	6a3a      	ldr	r2, [r7, #32]
 8007a9c:	b2d2      	uxtb	r2, r2
 8007a9e:	701a      	strb	r2, [r3, #0]
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8007aa4:	4b23      	ldr	r3, [pc, #140]	; (8007b34 <_SendPacket+0x1c0>)
 8007aa6:	785b      	ldrb	r3, [r3, #1]
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	1ad3      	subs	r3, r2, r3
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	68f9      	ldr	r1, [r7, #12]
 8007ab4:	f7f8 fb8c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d003      	beq.n	8007aca <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8007ac2:	4a1c      	ldr	r2, [pc, #112]	; (8007b34 <_SendPacket+0x1c0>)
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	60d3      	str	r3, [r2, #12]
 8007ac8:	e00b      	b.n	8007ae2 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8007aca:	4b1a      	ldr	r3, [pc, #104]	; (8007b34 <_SendPacket+0x1c0>)
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	3301      	adds	r3, #1
 8007ad0:	b2da      	uxtb	r2, r3
 8007ad2:	4b18      	ldr	r3, [pc, #96]	; (8007b34 <_SendPacket+0x1c0>)
 8007ad4:	701a      	strb	r2, [r3, #0]
 8007ad6:	e004      	b.n	8007ae2 <_SendPacket+0x16e>
    goto SendDone;
 8007ad8:	bf00      	nop
 8007ada:	e002      	b.n	8007ae2 <_SendPacket+0x16e>
      goto SendDone;
 8007adc:	bf00      	nop
 8007ade:	e000      	b.n	8007ae2 <_SendPacket+0x16e>
      goto SendDone;
 8007ae0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007ae2:	4b14      	ldr	r3, [pc, #80]	; (8007b34 <_SendPacket+0x1c0>)
 8007ae4:	7e1b      	ldrb	r3, [r3, #24]
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	4a14      	ldr	r2, [pc, #80]	; (8007b3c <_SendPacket+0x1c8>)
 8007aea:	460b      	mov	r3, r1
 8007aec:	005b      	lsls	r3, r3, #1
 8007aee:	440b      	add	r3, r1
 8007af0:	00db      	lsls	r3, r3, #3
 8007af2:	4413      	add	r3, r2
 8007af4:	336c      	adds	r3, #108	; 0x6c
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	4b0e      	ldr	r3, [pc, #56]	; (8007b34 <_SendPacket+0x1c0>)
 8007afa:	7e1b      	ldrb	r3, [r3, #24]
 8007afc:	4618      	mov	r0, r3
 8007afe:	490f      	ldr	r1, [pc, #60]	; (8007b3c <_SendPacket+0x1c8>)
 8007b00:	4603      	mov	r3, r0
 8007b02:	005b      	lsls	r3, r3, #1
 8007b04:	4403      	add	r3, r0
 8007b06:	00db      	lsls	r3, r3, #3
 8007b08:	440b      	add	r3, r1
 8007b0a:	3370      	adds	r3, #112	; 0x70
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d00b      	beq.n	8007b2a <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007b12:	4b08      	ldr	r3, [pc, #32]	; (8007b34 <_SendPacket+0x1c0>)
 8007b14:	789b      	ldrb	r3, [r3, #2]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d107      	bne.n	8007b2a <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007b1a:	4b06      	ldr	r3, [pc, #24]	; (8007b34 <_SendPacket+0x1c0>)
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007b20:	f7ff fe44 	bl	80077ac <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007b24:	4b03      	ldr	r3, [pc, #12]	; (8007b34 <_SendPacket+0x1c0>)
 8007b26:	2200      	movs	r2, #0
 8007b28:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8007b2a:	bf00      	nop
 8007b2c:	3728      	adds	r7, #40	; 0x28
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	20002eb4 	.word	0x20002eb4
 8007b38:	e0001004 	.word	0xe0001004
 8007b3c:	20003148 	.word	0x20003148

08007b40 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007b48:	f3ef 8311 	mrs	r3, BASEPRI
 8007b4c:	f04f 0120 	mov.w	r1, #32
 8007b50:	f381 8811 	msr	BASEPRI, r1
 8007b54:	60fb      	str	r3, [r7, #12]
 8007b56:	4808      	ldr	r0, [pc, #32]	; (8007b78 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8007b58:	f7ff fe1c 	bl	8007794 <_PreparePacket>
 8007b5c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	68b9      	ldr	r1, [r7, #8]
 8007b62:	68b8      	ldr	r0, [r7, #8]
 8007b64:	f7ff ff06 	bl	8007974 <_SendPacket>
  RECORD_END();
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f383 8811 	msr	BASEPRI, r3
}
 8007b6e:	bf00      	nop
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	20002ee4 	.word	0x20002ee4

08007b7c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b088      	sub	sp, #32
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007b86:	f3ef 8311 	mrs	r3, BASEPRI
 8007b8a:	f04f 0120 	mov.w	r1, #32
 8007b8e:	f381 8811 	msr	BASEPRI, r1
 8007b92:	617b      	str	r3, [r7, #20]
 8007b94:	4816      	ldr	r0, [pc, #88]	; (8007bf0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8007b96:	f7ff fdfd 	bl	8007794 <_PreparePacket>
 8007b9a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	61fb      	str	r3, [r7, #28]
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	61bb      	str	r3, [r7, #24]
 8007ba8:	e00b      	b.n	8007bc2 <SEGGER_SYSVIEW_RecordU32+0x46>
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	b2da      	uxtb	r2, r3
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	1c59      	adds	r1, r3, #1
 8007bb2:	61f9      	str	r1, [r7, #28]
 8007bb4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007bb8:	b2d2      	uxtb	r2, r2
 8007bba:	701a      	strb	r2, [r3, #0]
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	09db      	lsrs	r3, r3, #7
 8007bc0:	61bb      	str	r3, [r7, #24]
 8007bc2:	69bb      	ldr	r3, [r7, #24]
 8007bc4:	2b7f      	cmp	r3, #127	; 0x7f
 8007bc6:	d8f0      	bhi.n	8007baa <SEGGER_SYSVIEW_RecordU32+0x2e>
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	1c5a      	adds	r2, r3, #1
 8007bcc:	61fa      	str	r2, [r7, #28]
 8007bce:	69ba      	ldr	r2, [r7, #24]
 8007bd0:	b2d2      	uxtb	r2, r2
 8007bd2:	701a      	strb	r2, [r3, #0]
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	68f9      	ldr	r1, [r7, #12]
 8007bdc:	6938      	ldr	r0, [r7, #16]
 8007bde:	f7ff fec9 	bl	8007974 <_SendPacket>
  RECORD_END();
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	f383 8811 	msr	BASEPRI, r3
}
 8007be8:	bf00      	nop
 8007bea:	3720      	adds	r7, #32
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	20002ee4 	.word	0x20002ee4

08007bf4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b08c      	sub	sp, #48	; 0x30
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007c00:	f3ef 8311 	mrs	r3, BASEPRI
 8007c04:	f04f 0120 	mov.w	r1, #32
 8007c08:	f381 8811 	msr	BASEPRI, r1
 8007c0c:	61fb      	str	r3, [r7, #28]
 8007c0e:	4825      	ldr	r0, [pc, #148]	; (8007ca4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8007c10:	f7ff fdc0 	bl	8007794 <_PreparePacket>
 8007c14:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c22:	e00b      	b.n	8007c3c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8007c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c26:	b2da      	uxtb	r2, r3
 8007c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2a:	1c59      	adds	r1, r3, #1
 8007c2c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007c2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c32:	b2d2      	uxtb	r2, r2
 8007c34:	701a      	strb	r2, [r3, #0]
 8007c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c38:	09db      	lsrs	r3, r3, #7
 8007c3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3e:	2b7f      	cmp	r3, #127	; 0x7f
 8007c40:	d8f0      	bhi.n	8007c24 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8007c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c44:	1c5a      	adds	r2, r3, #1
 8007c46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c4a:	b2d2      	uxtb	r2, r2
 8007c4c:	701a      	strb	r2, [r3, #0]
 8007c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c50:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	627b      	str	r3, [r7, #36]	; 0x24
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	623b      	str	r3, [r7, #32]
 8007c5a:	e00b      	b.n	8007c74 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8007c5c:	6a3b      	ldr	r3, [r7, #32]
 8007c5e:	b2da      	uxtb	r2, r3
 8007c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c62:	1c59      	adds	r1, r3, #1
 8007c64:	6279      	str	r1, [r7, #36]	; 0x24
 8007c66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c6a:	b2d2      	uxtb	r2, r2
 8007c6c:	701a      	strb	r2, [r3, #0]
 8007c6e:	6a3b      	ldr	r3, [r7, #32]
 8007c70:	09db      	lsrs	r3, r3, #7
 8007c72:	623b      	str	r3, [r7, #32]
 8007c74:	6a3b      	ldr	r3, [r7, #32]
 8007c76:	2b7f      	cmp	r3, #127	; 0x7f
 8007c78:	d8f0      	bhi.n	8007c5c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8007c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7c:	1c5a      	adds	r2, r3, #1
 8007c7e:	627a      	str	r2, [r7, #36]	; 0x24
 8007c80:	6a3a      	ldr	r2, [r7, #32]
 8007c82:	b2d2      	uxtb	r2, r2
 8007c84:	701a      	strb	r2, [r3, #0]
 8007c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c88:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	6979      	ldr	r1, [r7, #20]
 8007c8e:	69b8      	ldr	r0, [r7, #24]
 8007c90:	f7ff fe70 	bl	8007974 <_SendPacket>
  RECORD_END();
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	f383 8811 	msr	BASEPRI, r3
}
 8007c9a:	bf00      	nop
 8007c9c:	3730      	adds	r7, #48	; 0x30
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	20002ee4 	.word	0x20002ee4

08007ca8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b08e      	sub	sp, #56	; 0x38
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	607a      	str	r2, [r7, #4]
 8007cb4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8007cb6:	f3ef 8311 	mrs	r3, BASEPRI
 8007cba:	f04f 0120 	mov.w	r1, #32
 8007cbe:	f381 8811 	msr	BASEPRI, r1
 8007cc2:	61fb      	str	r3, [r7, #28]
 8007cc4:	4832      	ldr	r0, [pc, #200]	; (8007d90 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8007cc6:	f7ff fd65 	bl	8007794 <_PreparePacket>
 8007cca:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	637b      	str	r3, [r7, #52]	; 0x34
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	633b      	str	r3, [r7, #48]	; 0x30
 8007cd8:	e00b      	b.n	8007cf2 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8007cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cdc:	b2da      	uxtb	r2, r3
 8007cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ce0:	1c59      	adds	r1, r3, #1
 8007ce2:	6379      	str	r1, [r7, #52]	; 0x34
 8007ce4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ce8:	b2d2      	uxtb	r2, r2
 8007cea:	701a      	strb	r2, [r3, #0]
 8007cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cee:	09db      	lsrs	r3, r3, #7
 8007cf0:	633b      	str	r3, [r7, #48]	; 0x30
 8007cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf4:	2b7f      	cmp	r3, #127	; 0x7f
 8007cf6:	d8f0      	bhi.n	8007cda <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8007cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cfa:	1c5a      	adds	r2, r3, #1
 8007cfc:	637a      	str	r2, [r7, #52]	; 0x34
 8007cfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d00:	b2d2      	uxtb	r2, r2
 8007d02:	701a      	strb	r2, [r3, #0]
 8007d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d06:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d10:	e00b      	b.n	8007d2a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8007d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d14:	b2da      	uxtb	r2, r3
 8007d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d18:	1c59      	adds	r1, r3, #1
 8007d1a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007d1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d20:	b2d2      	uxtb	r2, r2
 8007d22:	701a      	strb	r2, [r3, #0]
 8007d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d26:	09db      	lsrs	r3, r3, #7
 8007d28:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2c:	2b7f      	cmp	r3, #127	; 0x7f
 8007d2e:	d8f0      	bhi.n	8007d12 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8007d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d32:	1c5a      	adds	r2, r3, #1
 8007d34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d38:	b2d2      	uxtb	r2, r2
 8007d3a:	701a      	strb	r2, [r3, #0]
 8007d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	627b      	str	r3, [r7, #36]	; 0x24
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	623b      	str	r3, [r7, #32]
 8007d48:	e00b      	b.n	8007d62 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8007d4a:	6a3b      	ldr	r3, [r7, #32]
 8007d4c:	b2da      	uxtb	r2, r3
 8007d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d50:	1c59      	adds	r1, r3, #1
 8007d52:	6279      	str	r1, [r7, #36]	; 0x24
 8007d54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d58:	b2d2      	uxtb	r2, r2
 8007d5a:	701a      	strb	r2, [r3, #0]
 8007d5c:	6a3b      	ldr	r3, [r7, #32]
 8007d5e:	09db      	lsrs	r3, r3, #7
 8007d60:	623b      	str	r3, [r7, #32]
 8007d62:	6a3b      	ldr	r3, [r7, #32]
 8007d64:	2b7f      	cmp	r3, #127	; 0x7f
 8007d66:	d8f0      	bhi.n	8007d4a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8007d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6a:	1c5a      	adds	r2, r3, #1
 8007d6c:	627a      	str	r2, [r7, #36]	; 0x24
 8007d6e:	6a3a      	ldr	r2, [r7, #32]
 8007d70:	b2d2      	uxtb	r2, r2
 8007d72:	701a      	strb	r2, [r3, #0]
 8007d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d76:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007d78:	68fa      	ldr	r2, [r7, #12]
 8007d7a:	6979      	ldr	r1, [r7, #20]
 8007d7c:	69b8      	ldr	r0, [r7, #24]
 8007d7e:	f7ff fdf9 	bl	8007974 <_SendPacket>
  RECORD_END();
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	f383 8811 	msr	BASEPRI, r3
}
 8007d88:	bf00      	nop
 8007d8a:	3738      	adds	r7, #56	; 0x38
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	20002ee4 	.word	0x20002ee4

08007d94 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b090      	sub	sp, #64	; 0x40
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	60b9      	str	r1, [r7, #8]
 8007d9e:	607a      	str	r2, [r7, #4]
 8007da0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007da2:	f3ef 8311 	mrs	r3, BASEPRI
 8007da6:	f04f 0120 	mov.w	r1, #32
 8007daa:	f381 8811 	msr	BASEPRI, r1
 8007dae:	61fb      	str	r3, [r7, #28]
 8007db0:	4840      	ldr	r0, [pc, #256]	; (8007eb4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8007db2:	f7ff fcef 	bl	8007794 <_PreparePacket>
 8007db6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007dc4:	e00b      	b.n	8007dde <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8007dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc8:	b2da      	uxtb	r2, r3
 8007dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dcc:	1c59      	adds	r1, r3, #1
 8007dce:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007dd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007dd4:	b2d2      	uxtb	r2, r2
 8007dd6:	701a      	strb	r2, [r3, #0]
 8007dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dda:	09db      	lsrs	r3, r3, #7
 8007ddc:	63bb      	str	r3, [r7, #56]	; 0x38
 8007dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de0:	2b7f      	cmp	r3, #127	; 0x7f
 8007de2:	d8f0      	bhi.n	8007dc6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8007de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007de6:	1c5a      	adds	r2, r3, #1
 8007de8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007dea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dec:	b2d2      	uxtb	r2, r2
 8007dee:	701a      	strb	r2, [r3, #0]
 8007df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007df2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	637b      	str	r3, [r7, #52]	; 0x34
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	633b      	str	r3, [r7, #48]	; 0x30
 8007dfc:	e00b      	b.n	8007e16 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8007dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e00:	b2da      	uxtb	r2, r3
 8007e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e04:	1c59      	adds	r1, r3, #1
 8007e06:	6379      	str	r1, [r7, #52]	; 0x34
 8007e08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e0c:	b2d2      	uxtb	r2, r2
 8007e0e:	701a      	strb	r2, [r3, #0]
 8007e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e12:	09db      	lsrs	r3, r3, #7
 8007e14:	633b      	str	r3, [r7, #48]	; 0x30
 8007e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e18:	2b7f      	cmp	r3, #127	; 0x7f
 8007e1a:	d8f0      	bhi.n	8007dfe <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8007e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e1e:	1c5a      	adds	r2, r3, #1
 8007e20:	637a      	str	r2, [r7, #52]	; 0x34
 8007e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e24:	b2d2      	uxtb	r2, r2
 8007e26:	701a      	strb	r2, [r3, #0]
 8007e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e2a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e34:	e00b      	b.n	8007e4e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8007e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e38:	b2da      	uxtb	r2, r3
 8007e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3c:	1c59      	adds	r1, r3, #1
 8007e3e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007e40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e44:	b2d2      	uxtb	r2, r2
 8007e46:	701a      	strb	r2, [r3, #0]
 8007e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4a:	09db      	lsrs	r3, r3, #7
 8007e4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e50:	2b7f      	cmp	r3, #127	; 0x7f
 8007e52:	d8f0      	bhi.n	8007e36 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8007e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e56:	1c5a      	adds	r2, r3, #1
 8007e58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e5c:	b2d2      	uxtb	r2, r2
 8007e5e:	701a      	strb	r2, [r3, #0]
 8007e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e62:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	627b      	str	r3, [r7, #36]	; 0x24
 8007e68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e6a:	623b      	str	r3, [r7, #32]
 8007e6c:	e00b      	b.n	8007e86 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8007e6e:	6a3b      	ldr	r3, [r7, #32]
 8007e70:	b2da      	uxtb	r2, r3
 8007e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e74:	1c59      	adds	r1, r3, #1
 8007e76:	6279      	str	r1, [r7, #36]	; 0x24
 8007e78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e7c:	b2d2      	uxtb	r2, r2
 8007e7e:	701a      	strb	r2, [r3, #0]
 8007e80:	6a3b      	ldr	r3, [r7, #32]
 8007e82:	09db      	lsrs	r3, r3, #7
 8007e84:	623b      	str	r3, [r7, #32]
 8007e86:	6a3b      	ldr	r3, [r7, #32]
 8007e88:	2b7f      	cmp	r3, #127	; 0x7f
 8007e8a:	d8f0      	bhi.n	8007e6e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8007e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8e:	1c5a      	adds	r2, r3, #1
 8007e90:	627a      	str	r2, [r7, #36]	; 0x24
 8007e92:	6a3a      	ldr	r2, [r7, #32]
 8007e94:	b2d2      	uxtb	r2, r2
 8007e96:	701a      	strb	r2, [r3, #0]
 8007e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	6979      	ldr	r1, [r7, #20]
 8007ea0:	69b8      	ldr	r0, [r7, #24]
 8007ea2:	f7ff fd67 	bl	8007974 <_SendPacket>
  RECORD_END();
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	f383 8811 	msr	BASEPRI, r3
}
 8007eac:	bf00      	nop
 8007eae:	3740      	adds	r7, #64	; 0x40
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	20002ee4 	.word	0x20002ee4

08007eb8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b08c      	sub	sp, #48	; 0x30
 8007ebc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8007ebe:	4b58      	ldr	r3, [pc, #352]	; (8008020 <SEGGER_SYSVIEW_Start+0x168>)
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8007ec4:	f3ef 8311 	mrs	r3, BASEPRI
 8007ec8:	f04f 0120 	mov.w	r1, #32
 8007ecc:	f381 8811 	msr	BASEPRI, r1
 8007ed0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8007ed2:	4b53      	ldr	r3, [pc, #332]	; (8008020 <SEGGER_SYSVIEW_Start+0x168>)
 8007ed4:	785b      	ldrb	r3, [r3, #1]
 8007ed6:	220a      	movs	r2, #10
 8007ed8:	4952      	ldr	r1, [pc, #328]	; (8008024 <SEGGER_SYSVIEW_Start+0x16c>)
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7f8 f978 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8007ee6:	200a      	movs	r0, #10
 8007ee8:	f7ff fe2a 	bl	8007b40 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007eec:	f3ef 8311 	mrs	r3, BASEPRI
 8007ef0:	f04f 0120 	mov.w	r1, #32
 8007ef4:	f381 8811 	msr	BASEPRI, r1
 8007ef8:	60bb      	str	r3, [r7, #8]
 8007efa:	484b      	ldr	r0, [pc, #300]	; (8008028 <SEGGER_SYSVIEW_Start+0x170>)
 8007efc:	f7ff fc4a 	bl	8007794 <_PreparePacket>
 8007f00:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f0a:	4b45      	ldr	r3, [pc, #276]	; (8008020 <SEGGER_SYSVIEW_Start+0x168>)
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f10:	e00b      	b.n	8007f2a <SEGGER_SYSVIEW_Start+0x72>
 8007f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f14:	b2da      	uxtb	r2, r3
 8007f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f18:	1c59      	adds	r1, r3, #1
 8007f1a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007f1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f20:	b2d2      	uxtb	r2, r2
 8007f22:	701a      	strb	r2, [r3, #0]
 8007f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f26:	09db      	lsrs	r3, r3, #7
 8007f28:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2c:	2b7f      	cmp	r3, #127	; 0x7f
 8007f2e:	d8f0      	bhi.n	8007f12 <SEGGER_SYSVIEW_Start+0x5a>
 8007f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f32:	1c5a      	adds	r2, r3, #1
 8007f34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f38:	b2d2      	uxtb	r2, r2
 8007f3a:	701a      	strb	r2, [r3, #0]
 8007f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f3e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	627b      	str	r3, [r7, #36]	; 0x24
 8007f44:	4b36      	ldr	r3, [pc, #216]	; (8008020 <SEGGER_SYSVIEW_Start+0x168>)
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	623b      	str	r3, [r7, #32]
 8007f4a:	e00b      	b.n	8007f64 <SEGGER_SYSVIEW_Start+0xac>
 8007f4c:	6a3b      	ldr	r3, [r7, #32]
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f52:	1c59      	adds	r1, r3, #1
 8007f54:	6279      	str	r1, [r7, #36]	; 0x24
 8007f56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f5a:	b2d2      	uxtb	r2, r2
 8007f5c:	701a      	strb	r2, [r3, #0]
 8007f5e:	6a3b      	ldr	r3, [r7, #32]
 8007f60:	09db      	lsrs	r3, r3, #7
 8007f62:	623b      	str	r3, [r7, #32]
 8007f64:	6a3b      	ldr	r3, [r7, #32]
 8007f66:	2b7f      	cmp	r3, #127	; 0x7f
 8007f68:	d8f0      	bhi.n	8007f4c <SEGGER_SYSVIEW_Start+0x94>
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6c:	1c5a      	adds	r2, r3, #1
 8007f6e:	627a      	str	r2, [r7, #36]	; 0x24
 8007f70:	6a3a      	ldr	r2, [r7, #32]
 8007f72:	b2d2      	uxtb	r2, r2
 8007f74:	701a      	strb	r2, [r3, #0]
 8007f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f78:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	61fb      	str	r3, [r7, #28]
 8007f7e:	4b28      	ldr	r3, [pc, #160]	; (8008020 <SEGGER_SYSVIEW_Start+0x168>)
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	61bb      	str	r3, [r7, #24]
 8007f84:	e00b      	b.n	8007f9e <SEGGER_SYSVIEW_Start+0xe6>
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	b2da      	uxtb	r2, r3
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	1c59      	adds	r1, r3, #1
 8007f8e:	61f9      	str	r1, [r7, #28]
 8007f90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f94:	b2d2      	uxtb	r2, r2
 8007f96:	701a      	strb	r2, [r3, #0]
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	09db      	lsrs	r3, r3, #7
 8007f9c:	61bb      	str	r3, [r7, #24]
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	2b7f      	cmp	r3, #127	; 0x7f
 8007fa2:	d8f0      	bhi.n	8007f86 <SEGGER_SYSVIEW_Start+0xce>
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	1c5a      	adds	r2, r3, #1
 8007fa8:	61fa      	str	r2, [r7, #28]
 8007faa:	69ba      	ldr	r2, [r7, #24]
 8007fac:	b2d2      	uxtb	r2, r2
 8007fae:	701a      	strb	r2, [r3, #0]
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	617b      	str	r3, [r7, #20]
 8007fb8:	2300      	movs	r3, #0
 8007fba:	613b      	str	r3, [r7, #16]
 8007fbc:	e00b      	b.n	8007fd6 <SEGGER_SYSVIEW_Start+0x11e>
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	b2da      	uxtb	r2, r3
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	1c59      	adds	r1, r3, #1
 8007fc6:	6179      	str	r1, [r7, #20]
 8007fc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007fcc:	b2d2      	uxtb	r2, r2
 8007fce:	701a      	strb	r2, [r3, #0]
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	09db      	lsrs	r3, r3, #7
 8007fd4:	613b      	str	r3, [r7, #16]
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	2b7f      	cmp	r3, #127	; 0x7f
 8007fda:	d8f0      	bhi.n	8007fbe <SEGGER_SYSVIEW_Start+0x106>
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	1c5a      	adds	r2, r3, #1
 8007fe0:	617a      	str	r2, [r7, #20]
 8007fe2:	693a      	ldr	r2, [r7, #16]
 8007fe4:	b2d2      	uxtb	r2, r2
 8007fe6:	701a      	strb	r2, [r3, #0]
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007fec:	2218      	movs	r2, #24
 8007fee:	6839      	ldr	r1, [r7, #0]
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f7ff fcbf 	bl	8007974 <_SendPacket>
      RECORD_END();
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007ffc:	4b08      	ldr	r3, [pc, #32]	; (8008020 <SEGGER_SYSVIEW_Start+0x168>)
 8007ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008000:	2b00      	cmp	r3, #0
 8008002:	d002      	beq.n	800800a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8008004:	4b06      	ldr	r3, [pc, #24]	; (8008020 <SEGGER_SYSVIEW_Start+0x168>)
 8008006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008008:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800800a:	f000 f9c7 	bl	800839c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800800e:	f000 f9b1 	bl	8008374 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8008012:	f000 fc5f 	bl	80088d4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8008016:	bf00      	nop
 8008018:	3730      	adds	r7, #48	; 0x30
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	20002eb4 	.word	0x20002eb4
 8008024:	0800ab38 	.word	0x0800ab38
 8008028:	20002ee4 	.word	0x20002ee4

0800802c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008032:	f3ef 8311 	mrs	r3, BASEPRI
 8008036:	f04f 0120 	mov.w	r1, #32
 800803a:	f381 8811 	msr	BASEPRI, r1
 800803e:	607b      	str	r3, [r7, #4]
 8008040:	480b      	ldr	r0, [pc, #44]	; (8008070 <SEGGER_SYSVIEW_Stop+0x44>)
 8008042:	f7ff fba7 	bl	8007794 <_PreparePacket>
 8008046:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8008048:	4b0a      	ldr	r3, [pc, #40]	; (8008074 <SEGGER_SYSVIEW_Stop+0x48>)
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d007      	beq.n	8008060 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8008050:	220b      	movs	r2, #11
 8008052:	6839      	ldr	r1, [r7, #0]
 8008054:	6838      	ldr	r0, [r7, #0]
 8008056:	f7ff fc8d 	bl	8007974 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800805a:	4b06      	ldr	r3, [pc, #24]	; (8008074 <SEGGER_SYSVIEW_Stop+0x48>)
 800805c:	2200      	movs	r2, #0
 800805e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f383 8811 	msr	BASEPRI, r3
}
 8008066:	bf00      	nop
 8008068:	3708      	adds	r7, #8
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	20002ee4 	.word	0x20002ee4
 8008074:	20002eb4 	.word	0x20002eb4

08008078 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8008078:	b580      	push	{r7, lr}
 800807a:	b08c      	sub	sp, #48	; 0x30
 800807c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800807e:	f3ef 8311 	mrs	r3, BASEPRI
 8008082:	f04f 0120 	mov.w	r1, #32
 8008086:	f381 8811 	msr	BASEPRI, r1
 800808a:	60fb      	str	r3, [r7, #12]
 800808c:	4845      	ldr	r0, [pc, #276]	; (80081a4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800808e:	f7ff fb81 	bl	8007794 <_PreparePacket>
 8008092:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800809c:	4b42      	ldr	r3, [pc, #264]	; (80081a8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80080a2:	e00b      	b.n	80080bc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80080a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a6:	b2da      	uxtb	r2, r3
 80080a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080aa:	1c59      	adds	r1, r3, #1
 80080ac:	62f9      	str	r1, [r7, #44]	; 0x2c
 80080ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80080b2:	b2d2      	uxtb	r2, r2
 80080b4:	701a      	strb	r2, [r3, #0]
 80080b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b8:	09db      	lsrs	r3, r3, #7
 80080ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80080bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080be:	2b7f      	cmp	r3, #127	; 0x7f
 80080c0:	d8f0      	bhi.n	80080a4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80080c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c4:	1c5a      	adds	r2, r3, #1
 80080c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80080c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080ca:	b2d2      	uxtb	r2, r2
 80080cc:	701a      	strb	r2, [r3, #0]
 80080ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	627b      	str	r3, [r7, #36]	; 0x24
 80080d6:	4b34      	ldr	r3, [pc, #208]	; (80081a8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	623b      	str	r3, [r7, #32]
 80080dc:	e00b      	b.n	80080f6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80080de:	6a3b      	ldr	r3, [r7, #32]
 80080e0:	b2da      	uxtb	r2, r3
 80080e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e4:	1c59      	adds	r1, r3, #1
 80080e6:	6279      	str	r1, [r7, #36]	; 0x24
 80080e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80080ec:	b2d2      	uxtb	r2, r2
 80080ee:	701a      	strb	r2, [r3, #0]
 80080f0:	6a3b      	ldr	r3, [r7, #32]
 80080f2:	09db      	lsrs	r3, r3, #7
 80080f4:	623b      	str	r3, [r7, #32]
 80080f6:	6a3b      	ldr	r3, [r7, #32]
 80080f8:	2b7f      	cmp	r3, #127	; 0x7f
 80080fa:	d8f0      	bhi.n	80080de <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80080fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fe:	1c5a      	adds	r2, r3, #1
 8008100:	627a      	str	r2, [r7, #36]	; 0x24
 8008102:	6a3a      	ldr	r2, [r7, #32]
 8008104:	b2d2      	uxtb	r2, r2
 8008106:	701a      	strb	r2, [r3, #0]
 8008108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	61fb      	str	r3, [r7, #28]
 8008110:	4b25      	ldr	r3, [pc, #148]	; (80081a8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008112:	691b      	ldr	r3, [r3, #16]
 8008114:	61bb      	str	r3, [r7, #24]
 8008116:	e00b      	b.n	8008130 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8008118:	69bb      	ldr	r3, [r7, #24]
 800811a:	b2da      	uxtb	r2, r3
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	1c59      	adds	r1, r3, #1
 8008120:	61f9      	str	r1, [r7, #28]
 8008122:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008126:	b2d2      	uxtb	r2, r2
 8008128:	701a      	strb	r2, [r3, #0]
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	09db      	lsrs	r3, r3, #7
 800812e:	61bb      	str	r3, [r7, #24]
 8008130:	69bb      	ldr	r3, [r7, #24]
 8008132:	2b7f      	cmp	r3, #127	; 0x7f
 8008134:	d8f0      	bhi.n	8008118 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	1c5a      	adds	r2, r3, #1
 800813a:	61fa      	str	r2, [r7, #28]
 800813c:	69ba      	ldr	r2, [r7, #24]
 800813e:	b2d2      	uxtb	r2, r2
 8008140:	701a      	strb	r2, [r3, #0]
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	617b      	str	r3, [r7, #20]
 800814a:	2300      	movs	r3, #0
 800814c:	613b      	str	r3, [r7, #16]
 800814e:	e00b      	b.n	8008168 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	b2da      	uxtb	r2, r3
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	1c59      	adds	r1, r3, #1
 8008158:	6179      	str	r1, [r7, #20]
 800815a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800815e:	b2d2      	uxtb	r2, r2
 8008160:	701a      	strb	r2, [r3, #0]
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	09db      	lsrs	r3, r3, #7
 8008166:	613b      	str	r3, [r7, #16]
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	2b7f      	cmp	r3, #127	; 0x7f
 800816c:	d8f0      	bhi.n	8008150 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	1c5a      	adds	r2, r3, #1
 8008172:	617a      	str	r2, [r7, #20]
 8008174:	693a      	ldr	r2, [r7, #16]
 8008176:	b2d2      	uxtb	r2, r2
 8008178:	701a      	strb	r2, [r3, #0]
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800817e:	2218      	movs	r2, #24
 8008180:	6879      	ldr	r1, [r7, #4]
 8008182:	68b8      	ldr	r0, [r7, #8]
 8008184:	f7ff fbf6 	bl	8007974 <_SendPacket>
  RECORD_END();
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800818e:	4b06      	ldr	r3, [pc, #24]	; (80081a8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008192:	2b00      	cmp	r3, #0
 8008194:	d002      	beq.n	800819c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8008196:	4b04      	ldr	r3, [pc, #16]	; (80081a8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819a:	4798      	blx	r3
  }
}
 800819c:	bf00      	nop
 800819e:	3730      	adds	r7, #48	; 0x30
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	20002ee4 	.word	0x20002ee4
 80081a8:	20002eb4 	.word	0x20002eb4

080081ac <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b092      	sub	sp, #72	; 0x48
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80081b4:	f3ef 8311 	mrs	r3, BASEPRI
 80081b8:	f04f 0120 	mov.w	r1, #32
 80081bc:	f381 8811 	msr	BASEPRI, r1
 80081c0:	617b      	str	r3, [r7, #20]
 80081c2:	486a      	ldr	r0, [pc, #424]	; (800836c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80081c4:	f7ff fae6 	bl	8007794 <_PreparePacket>
 80081c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	647b      	str	r3, [r7, #68]	; 0x44
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	4b66      	ldr	r3, [pc, #408]	; (8008370 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	643b      	str	r3, [r7, #64]	; 0x40
 80081de:	e00b      	b.n	80081f8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80081e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081e2:	b2da      	uxtb	r2, r3
 80081e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081e6:	1c59      	adds	r1, r3, #1
 80081e8:	6479      	str	r1, [r7, #68]	; 0x44
 80081ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80081ee:	b2d2      	uxtb	r2, r2
 80081f0:	701a      	strb	r2, [r3, #0]
 80081f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081f4:	09db      	lsrs	r3, r3, #7
 80081f6:	643b      	str	r3, [r7, #64]	; 0x40
 80081f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081fa:	2b7f      	cmp	r3, #127	; 0x7f
 80081fc:	d8f0      	bhi.n	80081e0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80081fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008200:	1c5a      	adds	r2, r3, #1
 8008202:	647a      	str	r2, [r7, #68]	; 0x44
 8008204:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008206:	b2d2      	uxtb	r2, r2
 8008208:	701a      	strb	r2, [r3, #0]
 800820a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800820c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	63bb      	str	r3, [r7, #56]	; 0x38
 8008218:	e00b      	b.n	8008232 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800821a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821c:	b2da      	uxtb	r2, r3
 800821e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008220:	1c59      	adds	r1, r3, #1
 8008222:	63f9      	str	r1, [r7, #60]	; 0x3c
 8008224:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008228:	b2d2      	uxtb	r2, r2
 800822a:	701a      	strb	r2, [r3, #0]
 800822c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822e:	09db      	lsrs	r3, r3, #7
 8008230:	63bb      	str	r3, [r7, #56]	; 0x38
 8008232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008234:	2b7f      	cmp	r3, #127	; 0x7f
 8008236:	d8f0      	bhi.n	800821a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8008238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800823a:	1c5a      	adds	r2, r3, #1
 800823c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800823e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008240:	b2d2      	uxtb	r2, r2
 8008242:	701a      	strb	r2, [r3, #0]
 8008244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008246:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	2220      	movs	r2, #32
 800824e:	4619      	mov	r1, r3
 8008250:	68f8      	ldr	r0, [r7, #12]
 8008252:	f7ff fa4f 	bl	80076f4 <_EncodeStr>
 8008256:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8008258:	2209      	movs	r2, #9
 800825a:	68f9      	ldr	r1, [r7, #12]
 800825c:	6938      	ldr	r0, [r7, #16]
 800825e:	f7ff fb89 	bl	8007974 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	637b      	str	r3, [r7, #52]	; 0x34
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	4b40      	ldr	r3, [pc, #256]	; (8008370 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8008270:	691b      	ldr	r3, [r3, #16]
 8008272:	1ad3      	subs	r3, r2, r3
 8008274:	633b      	str	r3, [r7, #48]	; 0x30
 8008276:	e00b      	b.n	8008290 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8008278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827a:	b2da      	uxtb	r2, r3
 800827c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800827e:	1c59      	adds	r1, r3, #1
 8008280:	6379      	str	r1, [r7, #52]	; 0x34
 8008282:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008286:	b2d2      	uxtb	r2, r2
 8008288:	701a      	strb	r2, [r3, #0]
 800828a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828c:	09db      	lsrs	r3, r3, #7
 800828e:	633b      	str	r3, [r7, #48]	; 0x30
 8008290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008292:	2b7f      	cmp	r3, #127	; 0x7f
 8008294:	d8f0      	bhi.n	8008278 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8008296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008298:	1c5a      	adds	r2, r3, #1
 800829a:	637a      	str	r2, [r7, #52]	; 0x34
 800829c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800829e:	b2d2      	uxtb	r2, r2
 80082a0:	701a      	strb	r2, [r3, #0]
 80082a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80082b0:	e00b      	b.n	80082ca <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80082b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b4:	b2da      	uxtb	r2, r3
 80082b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b8:	1c59      	adds	r1, r3, #1
 80082ba:	62f9      	str	r1, [r7, #44]	; 0x2c
 80082bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80082c0:	b2d2      	uxtb	r2, r2
 80082c2:	701a      	strb	r2, [r3, #0]
 80082c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c6:	09db      	lsrs	r3, r3, #7
 80082c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80082ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082cc:	2b7f      	cmp	r3, #127	; 0x7f
 80082ce:	d8f0      	bhi.n	80082b2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80082d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d2:	1c5a      	adds	r2, r3, #1
 80082d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80082d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082d8:	b2d2      	uxtb	r2, r2
 80082da:	701a      	strb	r2, [r3, #0]
 80082dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082de:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	627b      	str	r3, [r7, #36]	; 0x24
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	691b      	ldr	r3, [r3, #16]
 80082e8:	623b      	str	r3, [r7, #32]
 80082ea:	e00b      	b.n	8008304 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80082ec:	6a3b      	ldr	r3, [r7, #32]
 80082ee:	b2da      	uxtb	r2, r3
 80082f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f2:	1c59      	adds	r1, r3, #1
 80082f4:	6279      	str	r1, [r7, #36]	; 0x24
 80082f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80082fa:	b2d2      	uxtb	r2, r2
 80082fc:	701a      	strb	r2, [r3, #0]
 80082fe:	6a3b      	ldr	r3, [r7, #32]
 8008300:	09db      	lsrs	r3, r3, #7
 8008302:	623b      	str	r3, [r7, #32]
 8008304:	6a3b      	ldr	r3, [r7, #32]
 8008306:	2b7f      	cmp	r3, #127	; 0x7f
 8008308:	d8f0      	bhi.n	80082ec <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800830a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830c:	1c5a      	adds	r2, r3, #1
 800830e:	627a      	str	r2, [r7, #36]	; 0x24
 8008310:	6a3a      	ldr	r2, [r7, #32]
 8008312:	b2d2      	uxtb	r2, r2
 8008314:	701a      	strb	r2, [r3, #0]
 8008316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008318:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	61fb      	str	r3, [r7, #28]
 800831e:	2300      	movs	r3, #0
 8008320:	61bb      	str	r3, [r7, #24]
 8008322:	e00b      	b.n	800833c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	b2da      	uxtb	r2, r3
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	1c59      	adds	r1, r3, #1
 800832c:	61f9      	str	r1, [r7, #28]
 800832e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008332:	b2d2      	uxtb	r2, r2
 8008334:	701a      	strb	r2, [r3, #0]
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	09db      	lsrs	r3, r3, #7
 800833a:	61bb      	str	r3, [r7, #24]
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	2b7f      	cmp	r3, #127	; 0x7f
 8008340:	d8f0      	bhi.n	8008324 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	1c5a      	adds	r2, r3, #1
 8008346:	61fa      	str	r2, [r7, #28]
 8008348:	69ba      	ldr	r2, [r7, #24]
 800834a:	b2d2      	uxtb	r2, r2
 800834c:	701a      	strb	r2, [r3, #0]
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8008352:	2215      	movs	r2, #21
 8008354:	68f9      	ldr	r1, [r7, #12]
 8008356:	6938      	ldr	r0, [r7, #16]
 8008358:	f7ff fb0c 	bl	8007974 <_SendPacket>
  RECORD_END();
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	f383 8811 	msr	BASEPRI, r3
}
 8008362:	bf00      	nop
 8008364:	3748      	adds	r7, #72	; 0x48
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	20002ee4 	.word	0x20002ee4
 8008370:	20002eb4 	.word	0x20002eb4

08008374 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8008374:	b580      	push	{r7, lr}
 8008376:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8008378:	4b07      	ldr	r3, [pc, #28]	; (8008398 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800837a:	6a1b      	ldr	r3, [r3, #32]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d008      	beq.n	8008392 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8008380:	4b05      	ldr	r3, [pc, #20]	; (8008398 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008382:	6a1b      	ldr	r3, [r3, #32]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d003      	beq.n	8008392 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800838a:	4b03      	ldr	r3, [pc, #12]	; (8008398 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800838c:	6a1b      	ldr	r3, [r3, #32]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	4798      	blx	r3
  }
}
 8008392:	bf00      	nop
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	20002eb4 	.word	0x20002eb4

0800839c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800839c:	b590      	push	{r4, r7, lr}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80083a2:	4b15      	ldr	r3, [pc, #84]	; (80083f8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80083a4:	6a1b      	ldr	r3, [r3, #32]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d01a      	beq.n	80083e0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80083aa:	4b13      	ldr	r3, [pc, #76]	; (80083f8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80083ac:	6a1b      	ldr	r3, [r3, #32]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d015      	beq.n	80083e0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80083b4:	4b10      	ldr	r3, [pc, #64]	; (80083f8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80083b6:	6a1b      	ldr	r3, [r3, #32]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4798      	blx	r3
 80083bc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80083c0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80083c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083c6:	f04f 0200 	mov.w	r2, #0
 80083ca:	f04f 0300 	mov.w	r3, #0
 80083ce:	000a      	movs	r2, r1
 80083d0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80083d2:	4613      	mov	r3, r2
 80083d4:	461a      	mov	r2, r3
 80083d6:	4621      	mov	r1, r4
 80083d8:	200d      	movs	r0, #13
 80083da:	f7ff fc0b 	bl	8007bf4 <SEGGER_SYSVIEW_RecordU32x2>
 80083de:	e006      	b.n	80083ee <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80083e0:	4b06      	ldr	r3, [pc, #24]	; (80083fc <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4619      	mov	r1, r3
 80083e6:	200c      	movs	r0, #12
 80083e8:	f7ff fbc8 	bl	8007b7c <SEGGER_SYSVIEW_RecordU32>
  }
}
 80083ec:	bf00      	nop
 80083ee:	bf00      	nop
 80083f0:	370c      	adds	r7, #12
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd90      	pop	{r4, r7, pc}
 80083f6:	bf00      	nop
 80083f8:	20002eb4 	.word	0x20002eb4
 80083fc:	e0001004 	.word	0xe0001004

08008400 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8008400:	b580      	push	{r7, lr}
 8008402:	b086      	sub	sp, #24
 8008404:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008406:	f3ef 8311 	mrs	r3, BASEPRI
 800840a:	f04f 0120 	mov.w	r1, #32
 800840e:	f381 8811 	msr	BASEPRI, r1
 8008412:	60fb      	str	r3, [r7, #12]
 8008414:	4819      	ldr	r0, [pc, #100]	; (800847c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8008416:	f7ff f9bd 	bl	8007794 <_PreparePacket>
 800841a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8008420:	4b17      	ldr	r3, [pc, #92]	; (8008480 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008428:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	617b      	str	r3, [r7, #20]
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	613b      	str	r3, [r7, #16]
 8008432:	e00b      	b.n	800844c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	b2da      	uxtb	r2, r3
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	1c59      	adds	r1, r3, #1
 800843c:	6179      	str	r1, [r7, #20]
 800843e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008442:	b2d2      	uxtb	r2, r2
 8008444:	701a      	strb	r2, [r3, #0]
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	09db      	lsrs	r3, r3, #7
 800844a:	613b      	str	r3, [r7, #16]
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	2b7f      	cmp	r3, #127	; 0x7f
 8008450:	d8f0      	bhi.n	8008434 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	1c5a      	adds	r2, r3, #1
 8008456:	617a      	str	r2, [r7, #20]
 8008458:	693a      	ldr	r2, [r7, #16]
 800845a:	b2d2      	uxtb	r2, r2
 800845c:	701a      	strb	r2, [r3, #0]
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8008462:	2202      	movs	r2, #2
 8008464:	6879      	ldr	r1, [r7, #4]
 8008466:	68b8      	ldr	r0, [r7, #8]
 8008468:	f7ff fa84 	bl	8007974 <_SendPacket>
  RECORD_END();
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f383 8811 	msr	BASEPRI, r3
}
 8008472:	bf00      	nop
 8008474:	3718      	adds	r7, #24
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	20002ee4 	.word	0x20002ee4
 8008480:	e000ed04 	.word	0xe000ed04

08008484 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800848a:	f3ef 8311 	mrs	r3, BASEPRI
 800848e:	f04f 0120 	mov.w	r1, #32
 8008492:	f381 8811 	msr	BASEPRI, r1
 8008496:	607b      	str	r3, [r7, #4]
 8008498:	4807      	ldr	r0, [pc, #28]	; (80084b8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800849a:	f7ff f97b 	bl	8007794 <_PreparePacket>
 800849e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80084a0:	2203      	movs	r2, #3
 80084a2:	6839      	ldr	r1, [r7, #0]
 80084a4:	6838      	ldr	r0, [r7, #0]
 80084a6:	f7ff fa65 	bl	8007974 <_SendPacket>
  RECORD_END();
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f383 8811 	msr	BASEPRI, r3
}
 80084b0:	bf00      	nop
 80084b2:	3708      	adds	r7, #8
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	20002ee4 	.word	0x20002ee4

080084bc <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80084c2:	f3ef 8311 	mrs	r3, BASEPRI
 80084c6:	f04f 0120 	mov.w	r1, #32
 80084ca:	f381 8811 	msr	BASEPRI, r1
 80084ce:	607b      	str	r3, [r7, #4]
 80084d0:	4807      	ldr	r0, [pc, #28]	; (80084f0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80084d2:	f7ff f95f 	bl	8007794 <_PreparePacket>
 80084d6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80084d8:	2212      	movs	r2, #18
 80084da:	6839      	ldr	r1, [r7, #0]
 80084dc:	6838      	ldr	r0, [r7, #0]
 80084de:	f7ff fa49 	bl	8007974 <_SendPacket>
  RECORD_END();
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f383 8811 	msr	BASEPRI, r3
}
 80084e8:	bf00      	nop
 80084ea:	3708      	adds	r7, #8
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	20002ee4 	.word	0x20002ee4

080084f4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80084fa:	f3ef 8311 	mrs	r3, BASEPRI
 80084fe:	f04f 0120 	mov.w	r1, #32
 8008502:	f381 8811 	msr	BASEPRI, r1
 8008506:	607b      	str	r3, [r7, #4]
 8008508:	4807      	ldr	r0, [pc, #28]	; (8008528 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800850a:	f7ff f943 	bl	8007794 <_PreparePacket>
 800850e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8008510:	2211      	movs	r2, #17
 8008512:	6839      	ldr	r1, [r7, #0]
 8008514:	6838      	ldr	r0, [r7, #0]
 8008516:	f7ff fa2d 	bl	8007974 <_SendPacket>
  RECORD_END();
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f383 8811 	msr	BASEPRI, r3
}
 8008520:	bf00      	nop
 8008522:	3708      	adds	r7, #8
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	20002ee4 	.word	0x20002ee4

0800852c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800852c:	b580      	push	{r7, lr}
 800852e:	b088      	sub	sp, #32
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008534:	f3ef 8311 	mrs	r3, BASEPRI
 8008538:	f04f 0120 	mov.w	r1, #32
 800853c:	f381 8811 	msr	BASEPRI, r1
 8008540:	617b      	str	r3, [r7, #20]
 8008542:	4819      	ldr	r0, [pc, #100]	; (80085a8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8008544:	f7ff f926 	bl	8007794 <_PreparePacket>
 8008548:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800854e:	4b17      	ldr	r3, [pc, #92]	; (80085ac <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	1ad3      	subs	r3, r2, r3
 8008556:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	61fb      	str	r3, [r7, #28]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	61bb      	str	r3, [r7, #24]
 8008560:	e00b      	b.n	800857a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	b2da      	uxtb	r2, r3
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	1c59      	adds	r1, r3, #1
 800856a:	61f9      	str	r1, [r7, #28]
 800856c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008570:	b2d2      	uxtb	r2, r2
 8008572:	701a      	strb	r2, [r3, #0]
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	09db      	lsrs	r3, r3, #7
 8008578:	61bb      	str	r3, [r7, #24]
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	2b7f      	cmp	r3, #127	; 0x7f
 800857e:	d8f0      	bhi.n	8008562 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	1c5a      	adds	r2, r3, #1
 8008584:	61fa      	str	r2, [r7, #28]
 8008586:	69ba      	ldr	r2, [r7, #24]
 8008588:	b2d2      	uxtb	r2, r2
 800858a:	701a      	strb	r2, [r3, #0]
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8008590:	2208      	movs	r2, #8
 8008592:	68f9      	ldr	r1, [r7, #12]
 8008594:	6938      	ldr	r0, [r7, #16]
 8008596:	f7ff f9ed 	bl	8007974 <_SendPacket>
  RECORD_END();
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	f383 8811 	msr	BASEPRI, r3
}
 80085a0:	bf00      	nop
 80085a2:	3720      	adds	r7, #32
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	20002ee4 	.word	0x20002ee4
 80085ac:	20002eb4 	.word	0x20002eb4

080085b0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b088      	sub	sp, #32
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80085b8:	f3ef 8311 	mrs	r3, BASEPRI
 80085bc:	f04f 0120 	mov.w	r1, #32
 80085c0:	f381 8811 	msr	BASEPRI, r1
 80085c4:	617b      	str	r3, [r7, #20]
 80085c6:	4819      	ldr	r0, [pc, #100]	; (800862c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80085c8:	f7ff f8e4 	bl	8007794 <_PreparePacket>
 80085cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80085d2:	4b17      	ldr	r3, [pc, #92]	; (8008630 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80085d4:	691b      	ldr	r3, [r3, #16]
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	1ad3      	subs	r3, r2, r3
 80085da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	61fb      	str	r3, [r7, #28]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	61bb      	str	r3, [r7, #24]
 80085e4:	e00b      	b.n	80085fe <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	b2da      	uxtb	r2, r3
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	1c59      	adds	r1, r3, #1
 80085ee:	61f9      	str	r1, [r7, #28]
 80085f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80085f4:	b2d2      	uxtb	r2, r2
 80085f6:	701a      	strb	r2, [r3, #0]
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	09db      	lsrs	r3, r3, #7
 80085fc:	61bb      	str	r3, [r7, #24]
 80085fe:	69bb      	ldr	r3, [r7, #24]
 8008600:	2b7f      	cmp	r3, #127	; 0x7f
 8008602:	d8f0      	bhi.n	80085e6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	1c5a      	adds	r2, r3, #1
 8008608:	61fa      	str	r2, [r7, #28]
 800860a:	69ba      	ldr	r2, [r7, #24]
 800860c:	b2d2      	uxtb	r2, r2
 800860e:	701a      	strb	r2, [r3, #0]
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8008614:	2204      	movs	r2, #4
 8008616:	68f9      	ldr	r1, [r7, #12]
 8008618:	6938      	ldr	r0, [r7, #16]
 800861a:	f7ff f9ab 	bl	8007974 <_SendPacket>
  RECORD_END();
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	f383 8811 	msr	BASEPRI, r3
}
 8008624:	bf00      	nop
 8008626:	3720      	adds	r7, #32
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	20002ee4 	.word	0x20002ee4
 8008630:	20002eb4 	.word	0x20002eb4

08008634 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8008634:	b580      	push	{r7, lr}
 8008636:	b088      	sub	sp, #32
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800863c:	f3ef 8311 	mrs	r3, BASEPRI
 8008640:	f04f 0120 	mov.w	r1, #32
 8008644:	f381 8811 	msr	BASEPRI, r1
 8008648:	617b      	str	r3, [r7, #20]
 800864a:	4819      	ldr	r0, [pc, #100]	; (80086b0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800864c:	f7ff f8a2 	bl	8007794 <_PreparePacket>
 8008650:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008656:	4b17      	ldr	r3, [pc, #92]	; (80086b4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8008658:	691b      	ldr	r3, [r3, #16]
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	1ad3      	subs	r3, r2, r3
 800865e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	61fb      	str	r3, [r7, #28]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	61bb      	str	r3, [r7, #24]
 8008668:	e00b      	b.n	8008682 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	b2da      	uxtb	r2, r3
 800866e:	69fb      	ldr	r3, [r7, #28]
 8008670:	1c59      	adds	r1, r3, #1
 8008672:	61f9      	str	r1, [r7, #28]
 8008674:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008678:	b2d2      	uxtb	r2, r2
 800867a:	701a      	strb	r2, [r3, #0]
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	09db      	lsrs	r3, r3, #7
 8008680:	61bb      	str	r3, [r7, #24]
 8008682:	69bb      	ldr	r3, [r7, #24]
 8008684:	2b7f      	cmp	r3, #127	; 0x7f
 8008686:	d8f0      	bhi.n	800866a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8008688:	69fb      	ldr	r3, [r7, #28]
 800868a:	1c5a      	adds	r2, r3, #1
 800868c:	61fa      	str	r2, [r7, #28]
 800868e:	69ba      	ldr	r2, [r7, #24]
 8008690:	b2d2      	uxtb	r2, r2
 8008692:	701a      	strb	r2, [r3, #0]
 8008694:	69fb      	ldr	r3, [r7, #28]
 8008696:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8008698:	2206      	movs	r2, #6
 800869a:	68f9      	ldr	r1, [r7, #12]
 800869c:	6938      	ldr	r0, [r7, #16]
 800869e:	f7ff f969 	bl	8007974 <_SendPacket>
  RECORD_END();
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	f383 8811 	msr	BASEPRI, r3
}
 80086a8:	bf00      	nop
 80086aa:	3720      	adds	r7, #32
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}
 80086b0:	20002ee4 	.word	0x20002ee4
 80086b4:	20002eb4 	.word	0x20002eb4

080086b8 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b08a      	sub	sp, #40	; 0x28
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80086c2:	f3ef 8311 	mrs	r3, BASEPRI
 80086c6:	f04f 0120 	mov.w	r1, #32
 80086ca:	f381 8811 	msr	BASEPRI, r1
 80086ce:	617b      	str	r3, [r7, #20]
 80086d0:	4827      	ldr	r0, [pc, #156]	; (8008770 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80086d2:	f7ff f85f 	bl	8007794 <_PreparePacket>
 80086d6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80086dc:	4b25      	ldr	r3, [pc, #148]	; (8008774 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80086de:	691b      	ldr	r3, [r3, #16]
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	1ad3      	subs	r3, r2, r3
 80086e4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	627b      	str	r3, [r7, #36]	; 0x24
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	623b      	str	r3, [r7, #32]
 80086ee:	e00b      	b.n	8008708 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80086f0:	6a3b      	ldr	r3, [r7, #32]
 80086f2:	b2da      	uxtb	r2, r3
 80086f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f6:	1c59      	adds	r1, r3, #1
 80086f8:	6279      	str	r1, [r7, #36]	; 0x24
 80086fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80086fe:	b2d2      	uxtb	r2, r2
 8008700:	701a      	strb	r2, [r3, #0]
 8008702:	6a3b      	ldr	r3, [r7, #32]
 8008704:	09db      	lsrs	r3, r3, #7
 8008706:	623b      	str	r3, [r7, #32]
 8008708:	6a3b      	ldr	r3, [r7, #32]
 800870a:	2b7f      	cmp	r3, #127	; 0x7f
 800870c:	d8f0      	bhi.n	80086f0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800870e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008710:	1c5a      	adds	r2, r3, #1
 8008712:	627a      	str	r2, [r7, #36]	; 0x24
 8008714:	6a3a      	ldr	r2, [r7, #32]
 8008716:	b2d2      	uxtb	r2, r2
 8008718:	701a      	strb	r2, [r3, #0]
 800871a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	61fb      	str	r3, [r7, #28]
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	61bb      	str	r3, [r7, #24]
 8008726:	e00b      	b.n	8008740 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	b2da      	uxtb	r2, r3
 800872c:	69fb      	ldr	r3, [r7, #28]
 800872e:	1c59      	adds	r1, r3, #1
 8008730:	61f9      	str	r1, [r7, #28]
 8008732:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008736:	b2d2      	uxtb	r2, r2
 8008738:	701a      	strb	r2, [r3, #0]
 800873a:	69bb      	ldr	r3, [r7, #24]
 800873c:	09db      	lsrs	r3, r3, #7
 800873e:	61bb      	str	r3, [r7, #24]
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	2b7f      	cmp	r3, #127	; 0x7f
 8008744:	d8f0      	bhi.n	8008728 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	1c5a      	adds	r2, r3, #1
 800874a:	61fa      	str	r2, [r7, #28]
 800874c:	69ba      	ldr	r2, [r7, #24]
 800874e:	b2d2      	uxtb	r2, r2
 8008750:	701a      	strb	r2, [r3, #0]
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8008756:	2207      	movs	r2, #7
 8008758:	68f9      	ldr	r1, [r7, #12]
 800875a:	6938      	ldr	r0, [r7, #16]
 800875c:	f7ff f90a 	bl	8007974 <_SendPacket>
  RECORD_END();
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	f383 8811 	msr	BASEPRI, r3
}
 8008766:	bf00      	nop
 8008768:	3728      	adds	r7, #40	; 0x28
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	20002ee4 	.word	0x20002ee4
 8008774:	20002eb4 	.word	0x20002eb4

08008778 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8008780:	4b04      	ldr	r3, [pc, #16]	; (8008794 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8008782:	691b      	ldr	r3, [r3, #16]
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	1ad3      	subs	r3, r2, r3
}
 8008788:	4618      	mov	r0, r3
 800878a:	370c      	adds	r7, #12
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr
 8008794:	20002eb4 	.word	0x20002eb4

08008798 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8008798:	b580      	push	{r7, lr}
 800879a:	b08c      	sub	sp, #48	; 0x30
 800879c:	af00      	add	r7, sp, #0
 800879e:	4603      	mov	r3, r0
 80087a0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80087a2:	4b3b      	ldr	r3, [pc, #236]	; (8008890 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d06d      	beq.n	8008886 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80087aa:	4b39      	ldr	r3, [pc, #228]	; (8008890 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80087b0:	2300      	movs	r3, #0
 80087b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80087b4:	e008      	b.n	80087c8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80087b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b8:	691b      	ldr	r3, [r3, #16]
 80087ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80087bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d007      	beq.n	80087d2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80087c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c4:	3301      	adds	r3, #1
 80087c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80087c8:	79fb      	ldrb	r3, [r7, #7]
 80087ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d3f2      	bcc.n	80087b6 <SEGGER_SYSVIEW_SendModule+0x1e>
 80087d0:	e000      	b.n	80087d4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80087d2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80087d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d055      	beq.n	8008886 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80087da:	f3ef 8311 	mrs	r3, BASEPRI
 80087de:	f04f 0120 	mov.w	r1, #32
 80087e2:	f381 8811 	msr	BASEPRI, r1
 80087e6:	617b      	str	r3, [r7, #20]
 80087e8:	482a      	ldr	r0, [pc, #168]	; (8008894 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80087ea:	f7fe ffd3 	bl	8007794 <_PreparePacket>
 80087ee:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	627b      	str	r3, [r7, #36]	; 0x24
 80087f8:	79fb      	ldrb	r3, [r7, #7]
 80087fa:	623b      	str	r3, [r7, #32]
 80087fc:	e00b      	b.n	8008816 <SEGGER_SYSVIEW_SendModule+0x7e>
 80087fe:	6a3b      	ldr	r3, [r7, #32]
 8008800:	b2da      	uxtb	r2, r3
 8008802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008804:	1c59      	adds	r1, r3, #1
 8008806:	6279      	str	r1, [r7, #36]	; 0x24
 8008808:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800880c:	b2d2      	uxtb	r2, r2
 800880e:	701a      	strb	r2, [r3, #0]
 8008810:	6a3b      	ldr	r3, [r7, #32]
 8008812:	09db      	lsrs	r3, r3, #7
 8008814:	623b      	str	r3, [r7, #32]
 8008816:	6a3b      	ldr	r3, [r7, #32]
 8008818:	2b7f      	cmp	r3, #127	; 0x7f
 800881a:	d8f0      	bhi.n	80087fe <SEGGER_SYSVIEW_SendModule+0x66>
 800881c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881e:	1c5a      	adds	r2, r3, #1
 8008820:	627a      	str	r2, [r7, #36]	; 0x24
 8008822:	6a3a      	ldr	r2, [r7, #32]
 8008824:	b2d2      	uxtb	r2, r2
 8008826:	701a      	strb	r2, [r3, #0]
 8008828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	61fb      	str	r3, [r7, #28]
 8008830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	61bb      	str	r3, [r7, #24]
 8008836:	e00b      	b.n	8008850 <SEGGER_SYSVIEW_SendModule+0xb8>
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	b2da      	uxtb	r2, r3
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	1c59      	adds	r1, r3, #1
 8008840:	61f9      	str	r1, [r7, #28]
 8008842:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008846:	b2d2      	uxtb	r2, r2
 8008848:	701a      	strb	r2, [r3, #0]
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	09db      	lsrs	r3, r3, #7
 800884e:	61bb      	str	r3, [r7, #24]
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	2b7f      	cmp	r3, #127	; 0x7f
 8008854:	d8f0      	bhi.n	8008838 <SEGGER_SYSVIEW_SendModule+0xa0>
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	1c5a      	adds	r2, r3, #1
 800885a:	61fa      	str	r2, [r7, #28]
 800885c:	69ba      	ldr	r2, [r7, #24]
 800885e:	b2d2      	uxtb	r2, r2
 8008860:	701a      	strb	r2, [r3, #0]
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	2280      	movs	r2, #128	; 0x80
 800886c:	4619      	mov	r1, r3
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	f7fe ff40 	bl	80076f4 <_EncodeStr>
 8008874:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8008876:	2216      	movs	r2, #22
 8008878:	68f9      	ldr	r1, [r7, #12]
 800887a:	6938      	ldr	r0, [r7, #16]
 800887c:	f7ff f87a 	bl	8007974 <_SendPacket>
      RECORD_END();
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8008886:	bf00      	nop
 8008888:	3730      	adds	r7, #48	; 0x30
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	20002edc 	.word	0x20002edc
 8008894:	20002ee4 	.word	0x20002ee4

08008898 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800889e:	4b0c      	ldr	r3, [pc, #48]	; (80088d0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d00f      	beq.n	80088c6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80088a6:	4b0a      	ldr	r3, [pc, #40]	; (80088d0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d002      	beq.n	80088ba <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	691b      	ldr	r3, [r3, #16]
 80088be:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d1f2      	bne.n	80088ac <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80088c6:	bf00      	nop
 80088c8:	3708      	adds	r7, #8
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	20002edc 	.word	0x20002edc

080088d4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b086      	sub	sp, #24
 80088d8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80088da:	f3ef 8311 	mrs	r3, BASEPRI
 80088de:	f04f 0120 	mov.w	r1, #32
 80088e2:	f381 8811 	msr	BASEPRI, r1
 80088e6:	60fb      	str	r3, [r7, #12]
 80088e8:	4817      	ldr	r0, [pc, #92]	; (8008948 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80088ea:	f7fe ff53 	bl	8007794 <_PreparePacket>
 80088ee:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	617b      	str	r3, [r7, #20]
 80088f8:	4b14      	ldr	r3, [pc, #80]	; (800894c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	613b      	str	r3, [r7, #16]
 80088fe:	e00b      	b.n	8008918 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	b2da      	uxtb	r2, r3
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	1c59      	adds	r1, r3, #1
 8008908:	6179      	str	r1, [r7, #20]
 800890a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800890e:	b2d2      	uxtb	r2, r2
 8008910:	701a      	strb	r2, [r3, #0]
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	09db      	lsrs	r3, r3, #7
 8008916:	613b      	str	r3, [r7, #16]
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	2b7f      	cmp	r3, #127	; 0x7f
 800891c:	d8f0      	bhi.n	8008900 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	1c5a      	adds	r2, r3, #1
 8008922:	617a      	str	r2, [r7, #20]
 8008924:	693a      	ldr	r2, [r7, #16]
 8008926:	b2d2      	uxtb	r2, r2
 8008928:	701a      	strb	r2, [r3, #0]
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800892e:	221b      	movs	r2, #27
 8008930:	6879      	ldr	r1, [r7, #4]
 8008932:	68b8      	ldr	r0, [r7, #8]
 8008934:	f7ff f81e 	bl	8007974 <_SendPacket>
  RECORD_END();
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f383 8811 	msr	BASEPRI, r3
}
 800893e:	bf00      	nop
 8008940:	3718      	adds	r7, #24
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	20002ee4 	.word	0x20002ee4
 800894c:	20002ee0 	.word	0x20002ee0

08008950 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8008950:	b580      	push	{r7, lr}
 8008952:	b08a      	sub	sp, #40	; 0x28
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008958:	f3ef 8311 	mrs	r3, BASEPRI
 800895c:	f04f 0120 	mov.w	r1, #32
 8008960:	f381 8811 	msr	BASEPRI, r1
 8008964:	617b      	str	r3, [r7, #20]
 8008966:	4827      	ldr	r0, [pc, #156]	; (8008a04 <SEGGER_SYSVIEW_Warn+0xb4>)
 8008968:	f7fe ff14 	bl	8007794 <_PreparePacket>
 800896c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800896e:	2280      	movs	r2, #128	; 0x80
 8008970:	6879      	ldr	r1, [r7, #4]
 8008972:	6938      	ldr	r0, [r7, #16]
 8008974:	f7fe febe 	bl	80076f4 <_EncodeStr>
 8008978:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	627b      	str	r3, [r7, #36]	; 0x24
 800897e:	2301      	movs	r3, #1
 8008980:	623b      	str	r3, [r7, #32]
 8008982:	e00b      	b.n	800899c <SEGGER_SYSVIEW_Warn+0x4c>
 8008984:	6a3b      	ldr	r3, [r7, #32]
 8008986:	b2da      	uxtb	r2, r3
 8008988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898a:	1c59      	adds	r1, r3, #1
 800898c:	6279      	str	r1, [r7, #36]	; 0x24
 800898e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008992:	b2d2      	uxtb	r2, r2
 8008994:	701a      	strb	r2, [r3, #0]
 8008996:	6a3b      	ldr	r3, [r7, #32]
 8008998:	09db      	lsrs	r3, r3, #7
 800899a:	623b      	str	r3, [r7, #32]
 800899c:	6a3b      	ldr	r3, [r7, #32]
 800899e:	2b7f      	cmp	r3, #127	; 0x7f
 80089a0:	d8f0      	bhi.n	8008984 <SEGGER_SYSVIEW_Warn+0x34>
 80089a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a4:	1c5a      	adds	r2, r3, #1
 80089a6:	627a      	str	r2, [r7, #36]	; 0x24
 80089a8:	6a3a      	ldr	r2, [r7, #32]
 80089aa:	b2d2      	uxtb	r2, r2
 80089ac:	701a      	strb	r2, [r3, #0]
 80089ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	61fb      	str	r3, [r7, #28]
 80089b6:	2300      	movs	r3, #0
 80089b8:	61bb      	str	r3, [r7, #24]
 80089ba:	e00b      	b.n	80089d4 <SEGGER_SYSVIEW_Warn+0x84>
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	b2da      	uxtb	r2, r3
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	1c59      	adds	r1, r3, #1
 80089c4:	61f9      	str	r1, [r7, #28]
 80089c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80089ca:	b2d2      	uxtb	r2, r2
 80089cc:	701a      	strb	r2, [r3, #0]
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	09db      	lsrs	r3, r3, #7
 80089d2:	61bb      	str	r3, [r7, #24]
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	2b7f      	cmp	r3, #127	; 0x7f
 80089d8:	d8f0      	bhi.n	80089bc <SEGGER_SYSVIEW_Warn+0x6c>
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	1c5a      	adds	r2, r3, #1
 80089de:	61fa      	str	r2, [r7, #28]
 80089e0:	69ba      	ldr	r2, [r7, #24]
 80089e2:	b2d2      	uxtb	r2, r2
 80089e4:	701a      	strb	r2, [r3, #0]
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80089ea:	221a      	movs	r2, #26
 80089ec:	68f9      	ldr	r1, [r7, #12]
 80089ee:	6938      	ldr	r0, [r7, #16]
 80089f0:	f7fe ffc0 	bl	8007974 <_SendPacket>
  RECORD_END();
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	f383 8811 	msr	BASEPRI, r3
}
 80089fa:	bf00      	nop
 80089fc:	3728      	adds	r7, #40	; 0x28
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	20002ee4 	.word	0x20002ee4

08008a08 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	60b9      	str	r1, [r7, #8]
 8008a12:	607a      	str	r2, [r7, #4]
 8008a14:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8008a16:	683a      	ldr	r2, [r7, #0]
 8008a18:	6879      	ldr	r1, [r7, #4]
 8008a1a:	2000      	movs	r0, #0
 8008a1c:	f7fe fe44 	bl	80076a8 <SEGGER_RTT_Write>
  return len;
 8008a20:	683b      	ldr	r3, [r7, #0]
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
	...

08008a2c <__assert_func>:
 8008a2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a2e:	4614      	mov	r4, r2
 8008a30:	461a      	mov	r2, r3
 8008a32:	4b09      	ldr	r3, [pc, #36]	; (8008a58 <__assert_func+0x2c>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4605      	mov	r5, r0
 8008a38:	68d8      	ldr	r0, [r3, #12]
 8008a3a:	b14c      	cbz	r4, 8008a50 <__assert_func+0x24>
 8008a3c:	4b07      	ldr	r3, [pc, #28]	; (8008a5c <__assert_func+0x30>)
 8008a3e:	9100      	str	r1, [sp, #0]
 8008a40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a44:	4906      	ldr	r1, [pc, #24]	; (8008a60 <__assert_func+0x34>)
 8008a46:	462b      	mov	r3, r5
 8008a48:	f000 f814 	bl	8008a74 <fiprintf>
 8008a4c:	f000 fc1a 	bl	8009284 <abort>
 8008a50:	4b04      	ldr	r3, [pc, #16]	; (8008a64 <__assert_func+0x38>)
 8008a52:	461c      	mov	r4, r3
 8008a54:	e7f3      	b.n	8008a3e <__assert_func+0x12>
 8008a56:	bf00      	nop
 8008a58:	20000014 	.word	0x20000014
 8008a5c:	0800ab42 	.word	0x0800ab42
 8008a60:	0800ab4f 	.word	0x0800ab4f
 8008a64:	0800ab7d 	.word	0x0800ab7d

08008a68 <__errno>:
 8008a68:	4b01      	ldr	r3, [pc, #4]	; (8008a70 <__errno+0x8>)
 8008a6a:	6818      	ldr	r0, [r3, #0]
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	20000014 	.word	0x20000014

08008a74 <fiprintf>:
 8008a74:	b40e      	push	{r1, r2, r3}
 8008a76:	b503      	push	{r0, r1, lr}
 8008a78:	4601      	mov	r1, r0
 8008a7a:	ab03      	add	r3, sp, #12
 8008a7c:	4805      	ldr	r0, [pc, #20]	; (8008a94 <fiprintf+0x20>)
 8008a7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a82:	6800      	ldr	r0, [r0, #0]
 8008a84:	9301      	str	r3, [sp, #4]
 8008a86:	f000 f879 	bl	8008b7c <_vfiprintf_r>
 8008a8a:	b002      	add	sp, #8
 8008a8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a90:	b003      	add	sp, #12
 8008a92:	4770      	bx	lr
 8008a94:	20000014 	.word	0x20000014

08008a98 <__libc_init_array>:
 8008a98:	b570      	push	{r4, r5, r6, lr}
 8008a9a:	4d0d      	ldr	r5, [pc, #52]	; (8008ad0 <__libc_init_array+0x38>)
 8008a9c:	4c0d      	ldr	r4, [pc, #52]	; (8008ad4 <__libc_init_array+0x3c>)
 8008a9e:	1b64      	subs	r4, r4, r5
 8008aa0:	10a4      	asrs	r4, r4, #2
 8008aa2:	2600      	movs	r6, #0
 8008aa4:	42a6      	cmp	r6, r4
 8008aa6:	d109      	bne.n	8008abc <__libc_init_array+0x24>
 8008aa8:	4d0b      	ldr	r5, [pc, #44]	; (8008ad8 <__libc_init_array+0x40>)
 8008aaa:	4c0c      	ldr	r4, [pc, #48]	; (8008adc <__libc_init_array+0x44>)
 8008aac:	f001 ff78 	bl	800a9a0 <_init>
 8008ab0:	1b64      	subs	r4, r4, r5
 8008ab2:	10a4      	asrs	r4, r4, #2
 8008ab4:	2600      	movs	r6, #0
 8008ab6:	42a6      	cmp	r6, r4
 8008ab8:	d105      	bne.n	8008ac6 <__libc_init_array+0x2e>
 8008aba:	bd70      	pop	{r4, r5, r6, pc}
 8008abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ac0:	4798      	blx	r3
 8008ac2:	3601      	adds	r6, #1
 8008ac4:	e7ee      	b.n	8008aa4 <__libc_init_array+0xc>
 8008ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008aca:	4798      	blx	r3
 8008acc:	3601      	adds	r6, #1
 8008ace:	e7f2      	b.n	8008ab6 <__libc_init_array+0x1e>
 8008ad0:	0800ac58 	.word	0x0800ac58
 8008ad4:	0800ac58 	.word	0x0800ac58
 8008ad8:	0800ac58 	.word	0x0800ac58
 8008adc:	0800ac5c 	.word	0x0800ac5c

08008ae0 <memcmp>:
 8008ae0:	b530      	push	{r4, r5, lr}
 8008ae2:	3901      	subs	r1, #1
 8008ae4:	2400      	movs	r4, #0
 8008ae6:	42a2      	cmp	r2, r4
 8008ae8:	d101      	bne.n	8008aee <memcmp+0xe>
 8008aea:	2000      	movs	r0, #0
 8008aec:	e005      	b.n	8008afa <memcmp+0x1a>
 8008aee:	5d03      	ldrb	r3, [r0, r4]
 8008af0:	3401      	adds	r4, #1
 8008af2:	5d0d      	ldrb	r5, [r1, r4]
 8008af4:	42ab      	cmp	r3, r5
 8008af6:	d0f6      	beq.n	8008ae6 <memcmp+0x6>
 8008af8:	1b58      	subs	r0, r3, r5
 8008afa:	bd30      	pop	{r4, r5, pc}

08008afc <memcpy>:
 8008afc:	440a      	add	r2, r1
 8008afe:	4291      	cmp	r1, r2
 8008b00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008b04:	d100      	bne.n	8008b08 <memcpy+0xc>
 8008b06:	4770      	bx	lr
 8008b08:	b510      	push	{r4, lr}
 8008b0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b12:	4291      	cmp	r1, r2
 8008b14:	d1f9      	bne.n	8008b0a <memcpy+0xe>
 8008b16:	bd10      	pop	{r4, pc}

08008b18 <memset>:
 8008b18:	4402      	add	r2, r0
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d100      	bne.n	8008b22 <memset+0xa>
 8008b20:	4770      	bx	lr
 8008b22:	f803 1b01 	strb.w	r1, [r3], #1
 8008b26:	e7f9      	b.n	8008b1c <memset+0x4>

08008b28 <__sfputc_r>:
 8008b28:	6893      	ldr	r3, [r2, #8]
 8008b2a:	3b01      	subs	r3, #1
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	b410      	push	{r4}
 8008b30:	6093      	str	r3, [r2, #8]
 8008b32:	da08      	bge.n	8008b46 <__sfputc_r+0x1e>
 8008b34:	6994      	ldr	r4, [r2, #24]
 8008b36:	42a3      	cmp	r3, r4
 8008b38:	db01      	blt.n	8008b3e <__sfputc_r+0x16>
 8008b3a:	290a      	cmp	r1, #10
 8008b3c:	d103      	bne.n	8008b46 <__sfputc_r+0x1e>
 8008b3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b42:	f000 badf 	b.w	8009104 <__swbuf_r>
 8008b46:	6813      	ldr	r3, [r2, #0]
 8008b48:	1c58      	adds	r0, r3, #1
 8008b4a:	6010      	str	r0, [r2, #0]
 8008b4c:	7019      	strb	r1, [r3, #0]
 8008b4e:	4608      	mov	r0, r1
 8008b50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b54:	4770      	bx	lr

08008b56 <__sfputs_r>:
 8008b56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b58:	4606      	mov	r6, r0
 8008b5a:	460f      	mov	r7, r1
 8008b5c:	4614      	mov	r4, r2
 8008b5e:	18d5      	adds	r5, r2, r3
 8008b60:	42ac      	cmp	r4, r5
 8008b62:	d101      	bne.n	8008b68 <__sfputs_r+0x12>
 8008b64:	2000      	movs	r0, #0
 8008b66:	e007      	b.n	8008b78 <__sfputs_r+0x22>
 8008b68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b6c:	463a      	mov	r2, r7
 8008b6e:	4630      	mov	r0, r6
 8008b70:	f7ff ffda 	bl	8008b28 <__sfputc_r>
 8008b74:	1c43      	adds	r3, r0, #1
 8008b76:	d1f3      	bne.n	8008b60 <__sfputs_r+0xa>
 8008b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008b7c <_vfiprintf_r>:
 8008b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b80:	460d      	mov	r5, r1
 8008b82:	b09d      	sub	sp, #116	; 0x74
 8008b84:	4614      	mov	r4, r2
 8008b86:	4698      	mov	r8, r3
 8008b88:	4606      	mov	r6, r0
 8008b8a:	b118      	cbz	r0, 8008b94 <_vfiprintf_r+0x18>
 8008b8c:	6983      	ldr	r3, [r0, #24]
 8008b8e:	b90b      	cbnz	r3, 8008b94 <_vfiprintf_r+0x18>
 8008b90:	f000 fc9a 	bl	80094c8 <__sinit>
 8008b94:	4b89      	ldr	r3, [pc, #548]	; (8008dbc <_vfiprintf_r+0x240>)
 8008b96:	429d      	cmp	r5, r3
 8008b98:	d11b      	bne.n	8008bd2 <_vfiprintf_r+0x56>
 8008b9a:	6875      	ldr	r5, [r6, #4]
 8008b9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b9e:	07d9      	lsls	r1, r3, #31
 8008ba0:	d405      	bmi.n	8008bae <_vfiprintf_r+0x32>
 8008ba2:	89ab      	ldrh	r3, [r5, #12]
 8008ba4:	059a      	lsls	r2, r3, #22
 8008ba6:	d402      	bmi.n	8008bae <_vfiprintf_r+0x32>
 8008ba8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008baa:	f000 fd2b 	bl	8009604 <__retarget_lock_acquire_recursive>
 8008bae:	89ab      	ldrh	r3, [r5, #12]
 8008bb0:	071b      	lsls	r3, r3, #28
 8008bb2:	d501      	bpl.n	8008bb8 <_vfiprintf_r+0x3c>
 8008bb4:	692b      	ldr	r3, [r5, #16]
 8008bb6:	b9eb      	cbnz	r3, 8008bf4 <_vfiprintf_r+0x78>
 8008bb8:	4629      	mov	r1, r5
 8008bba:	4630      	mov	r0, r6
 8008bbc:	f000 faf4 	bl	80091a8 <__swsetup_r>
 8008bc0:	b1c0      	cbz	r0, 8008bf4 <_vfiprintf_r+0x78>
 8008bc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bc4:	07dc      	lsls	r4, r3, #31
 8008bc6:	d50e      	bpl.n	8008be6 <_vfiprintf_r+0x6a>
 8008bc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bcc:	b01d      	add	sp, #116	; 0x74
 8008bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bd2:	4b7b      	ldr	r3, [pc, #492]	; (8008dc0 <_vfiprintf_r+0x244>)
 8008bd4:	429d      	cmp	r5, r3
 8008bd6:	d101      	bne.n	8008bdc <_vfiprintf_r+0x60>
 8008bd8:	68b5      	ldr	r5, [r6, #8]
 8008bda:	e7df      	b.n	8008b9c <_vfiprintf_r+0x20>
 8008bdc:	4b79      	ldr	r3, [pc, #484]	; (8008dc4 <_vfiprintf_r+0x248>)
 8008bde:	429d      	cmp	r5, r3
 8008be0:	bf08      	it	eq
 8008be2:	68f5      	ldreq	r5, [r6, #12]
 8008be4:	e7da      	b.n	8008b9c <_vfiprintf_r+0x20>
 8008be6:	89ab      	ldrh	r3, [r5, #12]
 8008be8:	0598      	lsls	r0, r3, #22
 8008bea:	d4ed      	bmi.n	8008bc8 <_vfiprintf_r+0x4c>
 8008bec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bee:	f000 fd0a 	bl	8009606 <__retarget_lock_release_recursive>
 8008bf2:	e7e9      	b.n	8008bc8 <_vfiprintf_r+0x4c>
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	9309      	str	r3, [sp, #36]	; 0x24
 8008bf8:	2320      	movs	r3, #32
 8008bfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c02:	2330      	movs	r3, #48	; 0x30
 8008c04:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008dc8 <_vfiprintf_r+0x24c>
 8008c08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c0c:	f04f 0901 	mov.w	r9, #1
 8008c10:	4623      	mov	r3, r4
 8008c12:	469a      	mov	sl, r3
 8008c14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c18:	b10a      	cbz	r2, 8008c1e <_vfiprintf_r+0xa2>
 8008c1a:	2a25      	cmp	r2, #37	; 0x25
 8008c1c:	d1f9      	bne.n	8008c12 <_vfiprintf_r+0x96>
 8008c1e:	ebba 0b04 	subs.w	fp, sl, r4
 8008c22:	d00b      	beq.n	8008c3c <_vfiprintf_r+0xc0>
 8008c24:	465b      	mov	r3, fp
 8008c26:	4622      	mov	r2, r4
 8008c28:	4629      	mov	r1, r5
 8008c2a:	4630      	mov	r0, r6
 8008c2c:	f7ff ff93 	bl	8008b56 <__sfputs_r>
 8008c30:	3001      	adds	r0, #1
 8008c32:	f000 80aa 	beq.w	8008d8a <_vfiprintf_r+0x20e>
 8008c36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c38:	445a      	add	r2, fp
 8008c3a:	9209      	str	r2, [sp, #36]	; 0x24
 8008c3c:	f89a 3000 	ldrb.w	r3, [sl]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	f000 80a2 	beq.w	8008d8a <_vfiprintf_r+0x20e>
 8008c46:	2300      	movs	r3, #0
 8008c48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c50:	f10a 0a01 	add.w	sl, sl, #1
 8008c54:	9304      	str	r3, [sp, #16]
 8008c56:	9307      	str	r3, [sp, #28]
 8008c58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c5c:	931a      	str	r3, [sp, #104]	; 0x68
 8008c5e:	4654      	mov	r4, sl
 8008c60:	2205      	movs	r2, #5
 8008c62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c66:	4858      	ldr	r0, [pc, #352]	; (8008dc8 <_vfiprintf_r+0x24c>)
 8008c68:	f7f7 fb02 	bl	8000270 <memchr>
 8008c6c:	9a04      	ldr	r2, [sp, #16]
 8008c6e:	b9d8      	cbnz	r0, 8008ca8 <_vfiprintf_r+0x12c>
 8008c70:	06d1      	lsls	r1, r2, #27
 8008c72:	bf44      	itt	mi
 8008c74:	2320      	movmi	r3, #32
 8008c76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c7a:	0713      	lsls	r3, r2, #28
 8008c7c:	bf44      	itt	mi
 8008c7e:	232b      	movmi	r3, #43	; 0x2b
 8008c80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c84:	f89a 3000 	ldrb.w	r3, [sl]
 8008c88:	2b2a      	cmp	r3, #42	; 0x2a
 8008c8a:	d015      	beq.n	8008cb8 <_vfiprintf_r+0x13c>
 8008c8c:	9a07      	ldr	r2, [sp, #28]
 8008c8e:	4654      	mov	r4, sl
 8008c90:	2000      	movs	r0, #0
 8008c92:	f04f 0c0a 	mov.w	ip, #10
 8008c96:	4621      	mov	r1, r4
 8008c98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c9c:	3b30      	subs	r3, #48	; 0x30
 8008c9e:	2b09      	cmp	r3, #9
 8008ca0:	d94e      	bls.n	8008d40 <_vfiprintf_r+0x1c4>
 8008ca2:	b1b0      	cbz	r0, 8008cd2 <_vfiprintf_r+0x156>
 8008ca4:	9207      	str	r2, [sp, #28]
 8008ca6:	e014      	b.n	8008cd2 <_vfiprintf_r+0x156>
 8008ca8:	eba0 0308 	sub.w	r3, r0, r8
 8008cac:	fa09 f303 	lsl.w	r3, r9, r3
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	9304      	str	r3, [sp, #16]
 8008cb4:	46a2      	mov	sl, r4
 8008cb6:	e7d2      	b.n	8008c5e <_vfiprintf_r+0xe2>
 8008cb8:	9b03      	ldr	r3, [sp, #12]
 8008cba:	1d19      	adds	r1, r3, #4
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	9103      	str	r1, [sp, #12]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	bfbb      	ittet	lt
 8008cc4:	425b      	neglt	r3, r3
 8008cc6:	f042 0202 	orrlt.w	r2, r2, #2
 8008cca:	9307      	strge	r3, [sp, #28]
 8008ccc:	9307      	strlt	r3, [sp, #28]
 8008cce:	bfb8      	it	lt
 8008cd0:	9204      	strlt	r2, [sp, #16]
 8008cd2:	7823      	ldrb	r3, [r4, #0]
 8008cd4:	2b2e      	cmp	r3, #46	; 0x2e
 8008cd6:	d10c      	bne.n	8008cf2 <_vfiprintf_r+0x176>
 8008cd8:	7863      	ldrb	r3, [r4, #1]
 8008cda:	2b2a      	cmp	r3, #42	; 0x2a
 8008cdc:	d135      	bne.n	8008d4a <_vfiprintf_r+0x1ce>
 8008cde:	9b03      	ldr	r3, [sp, #12]
 8008ce0:	1d1a      	adds	r2, r3, #4
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	9203      	str	r2, [sp, #12]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	bfb8      	it	lt
 8008cea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008cee:	3402      	adds	r4, #2
 8008cf0:	9305      	str	r3, [sp, #20]
 8008cf2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008dd8 <_vfiprintf_r+0x25c>
 8008cf6:	7821      	ldrb	r1, [r4, #0]
 8008cf8:	2203      	movs	r2, #3
 8008cfa:	4650      	mov	r0, sl
 8008cfc:	f7f7 fab8 	bl	8000270 <memchr>
 8008d00:	b140      	cbz	r0, 8008d14 <_vfiprintf_r+0x198>
 8008d02:	2340      	movs	r3, #64	; 0x40
 8008d04:	eba0 000a 	sub.w	r0, r0, sl
 8008d08:	fa03 f000 	lsl.w	r0, r3, r0
 8008d0c:	9b04      	ldr	r3, [sp, #16]
 8008d0e:	4303      	orrs	r3, r0
 8008d10:	3401      	adds	r4, #1
 8008d12:	9304      	str	r3, [sp, #16]
 8008d14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d18:	482c      	ldr	r0, [pc, #176]	; (8008dcc <_vfiprintf_r+0x250>)
 8008d1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d1e:	2206      	movs	r2, #6
 8008d20:	f7f7 faa6 	bl	8000270 <memchr>
 8008d24:	2800      	cmp	r0, #0
 8008d26:	d03f      	beq.n	8008da8 <_vfiprintf_r+0x22c>
 8008d28:	4b29      	ldr	r3, [pc, #164]	; (8008dd0 <_vfiprintf_r+0x254>)
 8008d2a:	bb1b      	cbnz	r3, 8008d74 <_vfiprintf_r+0x1f8>
 8008d2c:	9b03      	ldr	r3, [sp, #12]
 8008d2e:	3307      	adds	r3, #7
 8008d30:	f023 0307 	bic.w	r3, r3, #7
 8008d34:	3308      	adds	r3, #8
 8008d36:	9303      	str	r3, [sp, #12]
 8008d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d3a:	443b      	add	r3, r7
 8008d3c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d3e:	e767      	b.n	8008c10 <_vfiprintf_r+0x94>
 8008d40:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d44:	460c      	mov	r4, r1
 8008d46:	2001      	movs	r0, #1
 8008d48:	e7a5      	b.n	8008c96 <_vfiprintf_r+0x11a>
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	3401      	adds	r4, #1
 8008d4e:	9305      	str	r3, [sp, #20]
 8008d50:	4619      	mov	r1, r3
 8008d52:	f04f 0c0a 	mov.w	ip, #10
 8008d56:	4620      	mov	r0, r4
 8008d58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d5c:	3a30      	subs	r2, #48	; 0x30
 8008d5e:	2a09      	cmp	r2, #9
 8008d60:	d903      	bls.n	8008d6a <_vfiprintf_r+0x1ee>
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d0c5      	beq.n	8008cf2 <_vfiprintf_r+0x176>
 8008d66:	9105      	str	r1, [sp, #20]
 8008d68:	e7c3      	b.n	8008cf2 <_vfiprintf_r+0x176>
 8008d6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d6e:	4604      	mov	r4, r0
 8008d70:	2301      	movs	r3, #1
 8008d72:	e7f0      	b.n	8008d56 <_vfiprintf_r+0x1da>
 8008d74:	ab03      	add	r3, sp, #12
 8008d76:	9300      	str	r3, [sp, #0]
 8008d78:	462a      	mov	r2, r5
 8008d7a:	4b16      	ldr	r3, [pc, #88]	; (8008dd4 <_vfiprintf_r+0x258>)
 8008d7c:	a904      	add	r1, sp, #16
 8008d7e:	4630      	mov	r0, r6
 8008d80:	f3af 8000 	nop.w
 8008d84:	4607      	mov	r7, r0
 8008d86:	1c78      	adds	r0, r7, #1
 8008d88:	d1d6      	bne.n	8008d38 <_vfiprintf_r+0x1bc>
 8008d8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d8c:	07d9      	lsls	r1, r3, #31
 8008d8e:	d405      	bmi.n	8008d9c <_vfiprintf_r+0x220>
 8008d90:	89ab      	ldrh	r3, [r5, #12]
 8008d92:	059a      	lsls	r2, r3, #22
 8008d94:	d402      	bmi.n	8008d9c <_vfiprintf_r+0x220>
 8008d96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d98:	f000 fc35 	bl	8009606 <__retarget_lock_release_recursive>
 8008d9c:	89ab      	ldrh	r3, [r5, #12]
 8008d9e:	065b      	lsls	r3, r3, #25
 8008da0:	f53f af12 	bmi.w	8008bc8 <_vfiprintf_r+0x4c>
 8008da4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008da6:	e711      	b.n	8008bcc <_vfiprintf_r+0x50>
 8008da8:	ab03      	add	r3, sp, #12
 8008daa:	9300      	str	r3, [sp, #0]
 8008dac:	462a      	mov	r2, r5
 8008dae:	4b09      	ldr	r3, [pc, #36]	; (8008dd4 <_vfiprintf_r+0x258>)
 8008db0:	a904      	add	r1, sp, #16
 8008db2:	4630      	mov	r0, r6
 8008db4:	f000 f880 	bl	8008eb8 <_printf_i>
 8008db8:	e7e4      	b.n	8008d84 <_vfiprintf_r+0x208>
 8008dba:	bf00      	nop
 8008dbc:	0800abd8 	.word	0x0800abd8
 8008dc0:	0800abf8 	.word	0x0800abf8
 8008dc4:	0800abb8 	.word	0x0800abb8
 8008dc8:	0800ab84 	.word	0x0800ab84
 8008dcc:	0800ab8e 	.word	0x0800ab8e
 8008dd0:	00000000 	.word	0x00000000
 8008dd4:	08008b57 	.word	0x08008b57
 8008dd8:	0800ab8a 	.word	0x0800ab8a

08008ddc <_printf_common>:
 8008ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008de0:	4616      	mov	r6, r2
 8008de2:	4699      	mov	r9, r3
 8008de4:	688a      	ldr	r2, [r1, #8]
 8008de6:	690b      	ldr	r3, [r1, #16]
 8008de8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008dec:	4293      	cmp	r3, r2
 8008dee:	bfb8      	it	lt
 8008df0:	4613      	movlt	r3, r2
 8008df2:	6033      	str	r3, [r6, #0]
 8008df4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008df8:	4607      	mov	r7, r0
 8008dfa:	460c      	mov	r4, r1
 8008dfc:	b10a      	cbz	r2, 8008e02 <_printf_common+0x26>
 8008dfe:	3301      	adds	r3, #1
 8008e00:	6033      	str	r3, [r6, #0]
 8008e02:	6823      	ldr	r3, [r4, #0]
 8008e04:	0699      	lsls	r1, r3, #26
 8008e06:	bf42      	ittt	mi
 8008e08:	6833      	ldrmi	r3, [r6, #0]
 8008e0a:	3302      	addmi	r3, #2
 8008e0c:	6033      	strmi	r3, [r6, #0]
 8008e0e:	6825      	ldr	r5, [r4, #0]
 8008e10:	f015 0506 	ands.w	r5, r5, #6
 8008e14:	d106      	bne.n	8008e24 <_printf_common+0x48>
 8008e16:	f104 0a19 	add.w	sl, r4, #25
 8008e1a:	68e3      	ldr	r3, [r4, #12]
 8008e1c:	6832      	ldr	r2, [r6, #0]
 8008e1e:	1a9b      	subs	r3, r3, r2
 8008e20:	42ab      	cmp	r3, r5
 8008e22:	dc26      	bgt.n	8008e72 <_printf_common+0x96>
 8008e24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e28:	1e13      	subs	r3, r2, #0
 8008e2a:	6822      	ldr	r2, [r4, #0]
 8008e2c:	bf18      	it	ne
 8008e2e:	2301      	movne	r3, #1
 8008e30:	0692      	lsls	r2, r2, #26
 8008e32:	d42b      	bmi.n	8008e8c <_printf_common+0xb0>
 8008e34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e38:	4649      	mov	r1, r9
 8008e3a:	4638      	mov	r0, r7
 8008e3c:	47c0      	blx	r8
 8008e3e:	3001      	adds	r0, #1
 8008e40:	d01e      	beq.n	8008e80 <_printf_common+0xa4>
 8008e42:	6823      	ldr	r3, [r4, #0]
 8008e44:	68e5      	ldr	r5, [r4, #12]
 8008e46:	6832      	ldr	r2, [r6, #0]
 8008e48:	f003 0306 	and.w	r3, r3, #6
 8008e4c:	2b04      	cmp	r3, #4
 8008e4e:	bf08      	it	eq
 8008e50:	1aad      	subeq	r5, r5, r2
 8008e52:	68a3      	ldr	r3, [r4, #8]
 8008e54:	6922      	ldr	r2, [r4, #16]
 8008e56:	bf0c      	ite	eq
 8008e58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e5c:	2500      	movne	r5, #0
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	bfc4      	itt	gt
 8008e62:	1a9b      	subgt	r3, r3, r2
 8008e64:	18ed      	addgt	r5, r5, r3
 8008e66:	2600      	movs	r6, #0
 8008e68:	341a      	adds	r4, #26
 8008e6a:	42b5      	cmp	r5, r6
 8008e6c:	d11a      	bne.n	8008ea4 <_printf_common+0xc8>
 8008e6e:	2000      	movs	r0, #0
 8008e70:	e008      	b.n	8008e84 <_printf_common+0xa8>
 8008e72:	2301      	movs	r3, #1
 8008e74:	4652      	mov	r2, sl
 8008e76:	4649      	mov	r1, r9
 8008e78:	4638      	mov	r0, r7
 8008e7a:	47c0      	blx	r8
 8008e7c:	3001      	adds	r0, #1
 8008e7e:	d103      	bne.n	8008e88 <_printf_common+0xac>
 8008e80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e88:	3501      	adds	r5, #1
 8008e8a:	e7c6      	b.n	8008e1a <_printf_common+0x3e>
 8008e8c:	18e1      	adds	r1, r4, r3
 8008e8e:	1c5a      	adds	r2, r3, #1
 8008e90:	2030      	movs	r0, #48	; 0x30
 8008e92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e96:	4422      	add	r2, r4
 8008e98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ea0:	3302      	adds	r3, #2
 8008ea2:	e7c7      	b.n	8008e34 <_printf_common+0x58>
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	4622      	mov	r2, r4
 8008ea8:	4649      	mov	r1, r9
 8008eaa:	4638      	mov	r0, r7
 8008eac:	47c0      	blx	r8
 8008eae:	3001      	adds	r0, #1
 8008eb0:	d0e6      	beq.n	8008e80 <_printf_common+0xa4>
 8008eb2:	3601      	adds	r6, #1
 8008eb4:	e7d9      	b.n	8008e6a <_printf_common+0x8e>
	...

08008eb8 <_printf_i>:
 8008eb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ebc:	460c      	mov	r4, r1
 8008ebe:	4691      	mov	r9, r2
 8008ec0:	7e27      	ldrb	r7, [r4, #24]
 8008ec2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008ec4:	2f78      	cmp	r7, #120	; 0x78
 8008ec6:	4680      	mov	r8, r0
 8008ec8:	469a      	mov	sl, r3
 8008eca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ece:	d807      	bhi.n	8008ee0 <_printf_i+0x28>
 8008ed0:	2f62      	cmp	r7, #98	; 0x62
 8008ed2:	d80a      	bhi.n	8008eea <_printf_i+0x32>
 8008ed4:	2f00      	cmp	r7, #0
 8008ed6:	f000 80d8 	beq.w	800908a <_printf_i+0x1d2>
 8008eda:	2f58      	cmp	r7, #88	; 0x58
 8008edc:	f000 80a3 	beq.w	8009026 <_printf_i+0x16e>
 8008ee0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008ee4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ee8:	e03a      	b.n	8008f60 <_printf_i+0xa8>
 8008eea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008eee:	2b15      	cmp	r3, #21
 8008ef0:	d8f6      	bhi.n	8008ee0 <_printf_i+0x28>
 8008ef2:	a001      	add	r0, pc, #4	; (adr r0, 8008ef8 <_printf_i+0x40>)
 8008ef4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008ef8:	08008f51 	.word	0x08008f51
 8008efc:	08008f65 	.word	0x08008f65
 8008f00:	08008ee1 	.word	0x08008ee1
 8008f04:	08008ee1 	.word	0x08008ee1
 8008f08:	08008ee1 	.word	0x08008ee1
 8008f0c:	08008ee1 	.word	0x08008ee1
 8008f10:	08008f65 	.word	0x08008f65
 8008f14:	08008ee1 	.word	0x08008ee1
 8008f18:	08008ee1 	.word	0x08008ee1
 8008f1c:	08008ee1 	.word	0x08008ee1
 8008f20:	08008ee1 	.word	0x08008ee1
 8008f24:	08009071 	.word	0x08009071
 8008f28:	08008f95 	.word	0x08008f95
 8008f2c:	08009053 	.word	0x08009053
 8008f30:	08008ee1 	.word	0x08008ee1
 8008f34:	08008ee1 	.word	0x08008ee1
 8008f38:	08009093 	.word	0x08009093
 8008f3c:	08008ee1 	.word	0x08008ee1
 8008f40:	08008f95 	.word	0x08008f95
 8008f44:	08008ee1 	.word	0x08008ee1
 8008f48:	08008ee1 	.word	0x08008ee1
 8008f4c:	0800905b 	.word	0x0800905b
 8008f50:	680b      	ldr	r3, [r1, #0]
 8008f52:	1d1a      	adds	r2, r3, #4
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	600a      	str	r2, [r1, #0]
 8008f58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008f5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f60:	2301      	movs	r3, #1
 8008f62:	e0a3      	b.n	80090ac <_printf_i+0x1f4>
 8008f64:	6825      	ldr	r5, [r4, #0]
 8008f66:	6808      	ldr	r0, [r1, #0]
 8008f68:	062e      	lsls	r6, r5, #24
 8008f6a:	f100 0304 	add.w	r3, r0, #4
 8008f6e:	d50a      	bpl.n	8008f86 <_printf_i+0xce>
 8008f70:	6805      	ldr	r5, [r0, #0]
 8008f72:	600b      	str	r3, [r1, #0]
 8008f74:	2d00      	cmp	r5, #0
 8008f76:	da03      	bge.n	8008f80 <_printf_i+0xc8>
 8008f78:	232d      	movs	r3, #45	; 0x2d
 8008f7a:	426d      	negs	r5, r5
 8008f7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f80:	485e      	ldr	r0, [pc, #376]	; (80090fc <_printf_i+0x244>)
 8008f82:	230a      	movs	r3, #10
 8008f84:	e019      	b.n	8008fba <_printf_i+0x102>
 8008f86:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008f8a:	6805      	ldr	r5, [r0, #0]
 8008f8c:	600b      	str	r3, [r1, #0]
 8008f8e:	bf18      	it	ne
 8008f90:	b22d      	sxthne	r5, r5
 8008f92:	e7ef      	b.n	8008f74 <_printf_i+0xbc>
 8008f94:	680b      	ldr	r3, [r1, #0]
 8008f96:	6825      	ldr	r5, [r4, #0]
 8008f98:	1d18      	adds	r0, r3, #4
 8008f9a:	6008      	str	r0, [r1, #0]
 8008f9c:	0628      	lsls	r0, r5, #24
 8008f9e:	d501      	bpl.n	8008fa4 <_printf_i+0xec>
 8008fa0:	681d      	ldr	r5, [r3, #0]
 8008fa2:	e002      	b.n	8008faa <_printf_i+0xf2>
 8008fa4:	0669      	lsls	r1, r5, #25
 8008fa6:	d5fb      	bpl.n	8008fa0 <_printf_i+0xe8>
 8008fa8:	881d      	ldrh	r5, [r3, #0]
 8008faa:	4854      	ldr	r0, [pc, #336]	; (80090fc <_printf_i+0x244>)
 8008fac:	2f6f      	cmp	r7, #111	; 0x6f
 8008fae:	bf0c      	ite	eq
 8008fb0:	2308      	moveq	r3, #8
 8008fb2:	230a      	movne	r3, #10
 8008fb4:	2100      	movs	r1, #0
 8008fb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008fba:	6866      	ldr	r6, [r4, #4]
 8008fbc:	60a6      	str	r6, [r4, #8]
 8008fbe:	2e00      	cmp	r6, #0
 8008fc0:	bfa2      	ittt	ge
 8008fc2:	6821      	ldrge	r1, [r4, #0]
 8008fc4:	f021 0104 	bicge.w	r1, r1, #4
 8008fc8:	6021      	strge	r1, [r4, #0]
 8008fca:	b90d      	cbnz	r5, 8008fd0 <_printf_i+0x118>
 8008fcc:	2e00      	cmp	r6, #0
 8008fce:	d04d      	beq.n	800906c <_printf_i+0x1b4>
 8008fd0:	4616      	mov	r6, r2
 8008fd2:	fbb5 f1f3 	udiv	r1, r5, r3
 8008fd6:	fb03 5711 	mls	r7, r3, r1, r5
 8008fda:	5dc7      	ldrb	r7, [r0, r7]
 8008fdc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008fe0:	462f      	mov	r7, r5
 8008fe2:	42bb      	cmp	r3, r7
 8008fe4:	460d      	mov	r5, r1
 8008fe6:	d9f4      	bls.n	8008fd2 <_printf_i+0x11a>
 8008fe8:	2b08      	cmp	r3, #8
 8008fea:	d10b      	bne.n	8009004 <_printf_i+0x14c>
 8008fec:	6823      	ldr	r3, [r4, #0]
 8008fee:	07df      	lsls	r7, r3, #31
 8008ff0:	d508      	bpl.n	8009004 <_printf_i+0x14c>
 8008ff2:	6923      	ldr	r3, [r4, #16]
 8008ff4:	6861      	ldr	r1, [r4, #4]
 8008ff6:	4299      	cmp	r1, r3
 8008ff8:	bfde      	ittt	le
 8008ffa:	2330      	movle	r3, #48	; 0x30
 8008ffc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009000:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8009004:	1b92      	subs	r2, r2, r6
 8009006:	6122      	str	r2, [r4, #16]
 8009008:	f8cd a000 	str.w	sl, [sp]
 800900c:	464b      	mov	r3, r9
 800900e:	aa03      	add	r2, sp, #12
 8009010:	4621      	mov	r1, r4
 8009012:	4640      	mov	r0, r8
 8009014:	f7ff fee2 	bl	8008ddc <_printf_common>
 8009018:	3001      	adds	r0, #1
 800901a:	d14c      	bne.n	80090b6 <_printf_i+0x1fe>
 800901c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009020:	b004      	add	sp, #16
 8009022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009026:	4835      	ldr	r0, [pc, #212]	; (80090fc <_printf_i+0x244>)
 8009028:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800902c:	6823      	ldr	r3, [r4, #0]
 800902e:	680e      	ldr	r6, [r1, #0]
 8009030:	061f      	lsls	r7, r3, #24
 8009032:	f856 5b04 	ldr.w	r5, [r6], #4
 8009036:	600e      	str	r6, [r1, #0]
 8009038:	d514      	bpl.n	8009064 <_printf_i+0x1ac>
 800903a:	07d9      	lsls	r1, r3, #31
 800903c:	bf44      	itt	mi
 800903e:	f043 0320 	orrmi.w	r3, r3, #32
 8009042:	6023      	strmi	r3, [r4, #0]
 8009044:	b91d      	cbnz	r5, 800904e <_printf_i+0x196>
 8009046:	6823      	ldr	r3, [r4, #0]
 8009048:	f023 0320 	bic.w	r3, r3, #32
 800904c:	6023      	str	r3, [r4, #0]
 800904e:	2310      	movs	r3, #16
 8009050:	e7b0      	b.n	8008fb4 <_printf_i+0xfc>
 8009052:	6823      	ldr	r3, [r4, #0]
 8009054:	f043 0320 	orr.w	r3, r3, #32
 8009058:	6023      	str	r3, [r4, #0]
 800905a:	2378      	movs	r3, #120	; 0x78
 800905c:	4828      	ldr	r0, [pc, #160]	; (8009100 <_printf_i+0x248>)
 800905e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009062:	e7e3      	b.n	800902c <_printf_i+0x174>
 8009064:	065e      	lsls	r6, r3, #25
 8009066:	bf48      	it	mi
 8009068:	b2ad      	uxthmi	r5, r5
 800906a:	e7e6      	b.n	800903a <_printf_i+0x182>
 800906c:	4616      	mov	r6, r2
 800906e:	e7bb      	b.n	8008fe8 <_printf_i+0x130>
 8009070:	680b      	ldr	r3, [r1, #0]
 8009072:	6826      	ldr	r6, [r4, #0]
 8009074:	6960      	ldr	r0, [r4, #20]
 8009076:	1d1d      	adds	r5, r3, #4
 8009078:	600d      	str	r5, [r1, #0]
 800907a:	0635      	lsls	r5, r6, #24
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	d501      	bpl.n	8009084 <_printf_i+0x1cc>
 8009080:	6018      	str	r0, [r3, #0]
 8009082:	e002      	b.n	800908a <_printf_i+0x1d2>
 8009084:	0671      	lsls	r1, r6, #25
 8009086:	d5fb      	bpl.n	8009080 <_printf_i+0x1c8>
 8009088:	8018      	strh	r0, [r3, #0]
 800908a:	2300      	movs	r3, #0
 800908c:	6123      	str	r3, [r4, #16]
 800908e:	4616      	mov	r6, r2
 8009090:	e7ba      	b.n	8009008 <_printf_i+0x150>
 8009092:	680b      	ldr	r3, [r1, #0]
 8009094:	1d1a      	adds	r2, r3, #4
 8009096:	600a      	str	r2, [r1, #0]
 8009098:	681e      	ldr	r6, [r3, #0]
 800909a:	6862      	ldr	r2, [r4, #4]
 800909c:	2100      	movs	r1, #0
 800909e:	4630      	mov	r0, r6
 80090a0:	f7f7 f8e6 	bl	8000270 <memchr>
 80090a4:	b108      	cbz	r0, 80090aa <_printf_i+0x1f2>
 80090a6:	1b80      	subs	r0, r0, r6
 80090a8:	6060      	str	r0, [r4, #4]
 80090aa:	6863      	ldr	r3, [r4, #4]
 80090ac:	6123      	str	r3, [r4, #16]
 80090ae:	2300      	movs	r3, #0
 80090b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090b4:	e7a8      	b.n	8009008 <_printf_i+0x150>
 80090b6:	6923      	ldr	r3, [r4, #16]
 80090b8:	4632      	mov	r2, r6
 80090ba:	4649      	mov	r1, r9
 80090bc:	4640      	mov	r0, r8
 80090be:	47d0      	blx	sl
 80090c0:	3001      	adds	r0, #1
 80090c2:	d0ab      	beq.n	800901c <_printf_i+0x164>
 80090c4:	6823      	ldr	r3, [r4, #0]
 80090c6:	079b      	lsls	r3, r3, #30
 80090c8:	d413      	bmi.n	80090f2 <_printf_i+0x23a>
 80090ca:	68e0      	ldr	r0, [r4, #12]
 80090cc:	9b03      	ldr	r3, [sp, #12]
 80090ce:	4298      	cmp	r0, r3
 80090d0:	bfb8      	it	lt
 80090d2:	4618      	movlt	r0, r3
 80090d4:	e7a4      	b.n	8009020 <_printf_i+0x168>
 80090d6:	2301      	movs	r3, #1
 80090d8:	4632      	mov	r2, r6
 80090da:	4649      	mov	r1, r9
 80090dc:	4640      	mov	r0, r8
 80090de:	47d0      	blx	sl
 80090e0:	3001      	adds	r0, #1
 80090e2:	d09b      	beq.n	800901c <_printf_i+0x164>
 80090e4:	3501      	adds	r5, #1
 80090e6:	68e3      	ldr	r3, [r4, #12]
 80090e8:	9903      	ldr	r1, [sp, #12]
 80090ea:	1a5b      	subs	r3, r3, r1
 80090ec:	42ab      	cmp	r3, r5
 80090ee:	dcf2      	bgt.n	80090d6 <_printf_i+0x21e>
 80090f0:	e7eb      	b.n	80090ca <_printf_i+0x212>
 80090f2:	2500      	movs	r5, #0
 80090f4:	f104 0619 	add.w	r6, r4, #25
 80090f8:	e7f5      	b.n	80090e6 <_printf_i+0x22e>
 80090fa:	bf00      	nop
 80090fc:	0800ab95 	.word	0x0800ab95
 8009100:	0800aba6 	.word	0x0800aba6

08009104 <__swbuf_r>:
 8009104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009106:	460e      	mov	r6, r1
 8009108:	4614      	mov	r4, r2
 800910a:	4605      	mov	r5, r0
 800910c:	b118      	cbz	r0, 8009116 <__swbuf_r+0x12>
 800910e:	6983      	ldr	r3, [r0, #24]
 8009110:	b90b      	cbnz	r3, 8009116 <__swbuf_r+0x12>
 8009112:	f000 f9d9 	bl	80094c8 <__sinit>
 8009116:	4b21      	ldr	r3, [pc, #132]	; (800919c <__swbuf_r+0x98>)
 8009118:	429c      	cmp	r4, r3
 800911a:	d12b      	bne.n	8009174 <__swbuf_r+0x70>
 800911c:	686c      	ldr	r4, [r5, #4]
 800911e:	69a3      	ldr	r3, [r4, #24]
 8009120:	60a3      	str	r3, [r4, #8]
 8009122:	89a3      	ldrh	r3, [r4, #12]
 8009124:	071a      	lsls	r2, r3, #28
 8009126:	d52f      	bpl.n	8009188 <__swbuf_r+0x84>
 8009128:	6923      	ldr	r3, [r4, #16]
 800912a:	b36b      	cbz	r3, 8009188 <__swbuf_r+0x84>
 800912c:	6923      	ldr	r3, [r4, #16]
 800912e:	6820      	ldr	r0, [r4, #0]
 8009130:	1ac0      	subs	r0, r0, r3
 8009132:	6963      	ldr	r3, [r4, #20]
 8009134:	b2f6      	uxtb	r6, r6
 8009136:	4283      	cmp	r3, r0
 8009138:	4637      	mov	r7, r6
 800913a:	dc04      	bgt.n	8009146 <__swbuf_r+0x42>
 800913c:	4621      	mov	r1, r4
 800913e:	4628      	mov	r0, r5
 8009140:	f000 f92e 	bl	80093a0 <_fflush_r>
 8009144:	bb30      	cbnz	r0, 8009194 <__swbuf_r+0x90>
 8009146:	68a3      	ldr	r3, [r4, #8]
 8009148:	3b01      	subs	r3, #1
 800914a:	60a3      	str	r3, [r4, #8]
 800914c:	6823      	ldr	r3, [r4, #0]
 800914e:	1c5a      	adds	r2, r3, #1
 8009150:	6022      	str	r2, [r4, #0]
 8009152:	701e      	strb	r6, [r3, #0]
 8009154:	6963      	ldr	r3, [r4, #20]
 8009156:	3001      	adds	r0, #1
 8009158:	4283      	cmp	r3, r0
 800915a:	d004      	beq.n	8009166 <__swbuf_r+0x62>
 800915c:	89a3      	ldrh	r3, [r4, #12]
 800915e:	07db      	lsls	r3, r3, #31
 8009160:	d506      	bpl.n	8009170 <__swbuf_r+0x6c>
 8009162:	2e0a      	cmp	r6, #10
 8009164:	d104      	bne.n	8009170 <__swbuf_r+0x6c>
 8009166:	4621      	mov	r1, r4
 8009168:	4628      	mov	r0, r5
 800916a:	f000 f919 	bl	80093a0 <_fflush_r>
 800916e:	b988      	cbnz	r0, 8009194 <__swbuf_r+0x90>
 8009170:	4638      	mov	r0, r7
 8009172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009174:	4b0a      	ldr	r3, [pc, #40]	; (80091a0 <__swbuf_r+0x9c>)
 8009176:	429c      	cmp	r4, r3
 8009178:	d101      	bne.n	800917e <__swbuf_r+0x7a>
 800917a:	68ac      	ldr	r4, [r5, #8]
 800917c:	e7cf      	b.n	800911e <__swbuf_r+0x1a>
 800917e:	4b09      	ldr	r3, [pc, #36]	; (80091a4 <__swbuf_r+0xa0>)
 8009180:	429c      	cmp	r4, r3
 8009182:	bf08      	it	eq
 8009184:	68ec      	ldreq	r4, [r5, #12]
 8009186:	e7ca      	b.n	800911e <__swbuf_r+0x1a>
 8009188:	4621      	mov	r1, r4
 800918a:	4628      	mov	r0, r5
 800918c:	f000 f80c 	bl	80091a8 <__swsetup_r>
 8009190:	2800      	cmp	r0, #0
 8009192:	d0cb      	beq.n	800912c <__swbuf_r+0x28>
 8009194:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009198:	e7ea      	b.n	8009170 <__swbuf_r+0x6c>
 800919a:	bf00      	nop
 800919c:	0800abd8 	.word	0x0800abd8
 80091a0:	0800abf8 	.word	0x0800abf8
 80091a4:	0800abb8 	.word	0x0800abb8

080091a8 <__swsetup_r>:
 80091a8:	4b32      	ldr	r3, [pc, #200]	; (8009274 <__swsetup_r+0xcc>)
 80091aa:	b570      	push	{r4, r5, r6, lr}
 80091ac:	681d      	ldr	r5, [r3, #0]
 80091ae:	4606      	mov	r6, r0
 80091b0:	460c      	mov	r4, r1
 80091b2:	b125      	cbz	r5, 80091be <__swsetup_r+0x16>
 80091b4:	69ab      	ldr	r3, [r5, #24]
 80091b6:	b913      	cbnz	r3, 80091be <__swsetup_r+0x16>
 80091b8:	4628      	mov	r0, r5
 80091ba:	f000 f985 	bl	80094c8 <__sinit>
 80091be:	4b2e      	ldr	r3, [pc, #184]	; (8009278 <__swsetup_r+0xd0>)
 80091c0:	429c      	cmp	r4, r3
 80091c2:	d10f      	bne.n	80091e4 <__swsetup_r+0x3c>
 80091c4:	686c      	ldr	r4, [r5, #4]
 80091c6:	89a3      	ldrh	r3, [r4, #12]
 80091c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091cc:	0719      	lsls	r1, r3, #28
 80091ce:	d42c      	bmi.n	800922a <__swsetup_r+0x82>
 80091d0:	06dd      	lsls	r5, r3, #27
 80091d2:	d411      	bmi.n	80091f8 <__swsetup_r+0x50>
 80091d4:	2309      	movs	r3, #9
 80091d6:	6033      	str	r3, [r6, #0]
 80091d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80091dc:	81a3      	strh	r3, [r4, #12]
 80091de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091e2:	e03e      	b.n	8009262 <__swsetup_r+0xba>
 80091e4:	4b25      	ldr	r3, [pc, #148]	; (800927c <__swsetup_r+0xd4>)
 80091e6:	429c      	cmp	r4, r3
 80091e8:	d101      	bne.n	80091ee <__swsetup_r+0x46>
 80091ea:	68ac      	ldr	r4, [r5, #8]
 80091ec:	e7eb      	b.n	80091c6 <__swsetup_r+0x1e>
 80091ee:	4b24      	ldr	r3, [pc, #144]	; (8009280 <__swsetup_r+0xd8>)
 80091f0:	429c      	cmp	r4, r3
 80091f2:	bf08      	it	eq
 80091f4:	68ec      	ldreq	r4, [r5, #12]
 80091f6:	e7e6      	b.n	80091c6 <__swsetup_r+0x1e>
 80091f8:	0758      	lsls	r0, r3, #29
 80091fa:	d512      	bpl.n	8009222 <__swsetup_r+0x7a>
 80091fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091fe:	b141      	cbz	r1, 8009212 <__swsetup_r+0x6a>
 8009200:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009204:	4299      	cmp	r1, r3
 8009206:	d002      	beq.n	800920e <__swsetup_r+0x66>
 8009208:	4630      	mov	r0, r6
 800920a:	f000 fa61 	bl	80096d0 <_free_r>
 800920e:	2300      	movs	r3, #0
 8009210:	6363      	str	r3, [r4, #52]	; 0x34
 8009212:	89a3      	ldrh	r3, [r4, #12]
 8009214:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009218:	81a3      	strh	r3, [r4, #12]
 800921a:	2300      	movs	r3, #0
 800921c:	6063      	str	r3, [r4, #4]
 800921e:	6923      	ldr	r3, [r4, #16]
 8009220:	6023      	str	r3, [r4, #0]
 8009222:	89a3      	ldrh	r3, [r4, #12]
 8009224:	f043 0308 	orr.w	r3, r3, #8
 8009228:	81a3      	strh	r3, [r4, #12]
 800922a:	6923      	ldr	r3, [r4, #16]
 800922c:	b94b      	cbnz	r3, 8009242 <__swsetup_r+0x9a>
 800922e:	89a3      	ldrh	r3, [r4, #12]
 8009230:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009238:	d003      	beq.n	8009242 <__swsetup_r+0x9a>
 800923a:	4621      	mov	r1, r4
 800923c:	4630      	mov	r0, r6
 800923e:	f000 fa07 	bl	8009650 <__smakebuf_r>
 8009242:	89a0      	ldrh	r0, [r4, #12]
 8009244:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009248:	f010 0301 	ands.w	r3, r0, #1
 800924c:	d00a      	beq.n	8009264 <__swsetup_r+0xbc>
 800924e:	2300      	movs	r3, #0
 8009250:	60a3      	str	r3, [r4, #8]
 8009252:	6963      	ldr	r3, [r4, #20]
 8009254:	425b      	negs	r3, r3
 8009256:	61a3      	str	r3, [r4, #24]
 8009258:	6923      	ldr	r3, [r4, #16]
 800925a:	b943      	cbnz	r3, 800926e <__swsetup_r+0xc6>
 800925c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009260:	d1ba      	bne.n	80091d8 <__swsetup_r+0x30>
 8009262:	bd70      	pop	{r4, r5, r6, pc}
 8009264:	0781      	lsls	r1, r0, #30
 8009266:	bf58      	it	pl
 8009268:	6963      	ldrpl	r3, [r4, #20]
 800926a:	60a3      	str	r3, [r4, #8]
 800926c:	e7f4      	b.n	8009258 <__swsetup_r+0xb0>
 800926e:	2000      	movs	r0, #0
 8009270:	e7f7      	b.n	8009262 <__swsetup_r+0xba>
 8009272:	bf00      	nop
 8009274:	20000014 	.word	0x20000014
 8009278:	0800abd8 	.word	0x0800abd8
 800927c:	0800abf8 	.word	0x0800abf8
 8009280:	0800abb8 	.word	0x0800abb8

08009284 <abort>:
 8009284:	b508      	push	{r3, lr}
 8009286:	2006      	movs	r0, #6
 8009288:	f000 fb04 	bl	8009894 <raise>
 800928c:	2001      	movs	r0, #1
 800928e:	f7f8 fa55 	bl	800173c <_exit>
	...

08009294 <__sflush_r>:
 8009294:	898a      	ldrh	r2, [r1, #12]
 8009296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800929a:	4605      	mov	r5, r0
 800929c:	0710      	lsls	r0, r2, #28
 800929e:	460c      	mov	r4, r1
 80092a0:	d458      	bmi.n	8009354 <__sflush_r+0xc0>
 80092a2:	684b      	ldr	r3, [r1, #4]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	dc05      	bgt.n	80092b4 <__sflush_r+0x20>
 80092a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	dc02      	bgt.n	80092b4 <__sflush_r+0x20>
 80092ae:	2000      	movs	r0, #0
 80092b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092b6:	2e00      	cmp	r6, #0
 80092b8:	d0f9      	beq.n	80092ae <__sflush_r+0x1a>
 80092ba:	2300      	movs	r3, #0
 80092bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80092c0:	682f      	ldr	r7, [r5, #0]
 80092c2:	602b      	str	r3, [r5, #0]
 80092c4:	d032      	beq.n	800932c <__sflush_r+0x98>
 80092c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80092c8:	89a3      	ldrh	r3, [r4, #12]
 80092ca:	075a      	lsls	r2, r3, #29
 80092cc:	d505      	bpl.n	80092da <__sflush_r+0x46>
 80092ce:	6863      	ldr	r3, [r4, #4]
 80092d0:	1ac0      	subs	r0, r0, r3
 80092d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092d4:	b10b      	cbz	r3, 80092da <__sflush_r+0x46>
 80092d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80092d8:	1ac0      	subs	r0, r0, r3
 80092da:	2300      	movs	r3, #0
 80092dc:	4602      	mov	r2, r0
 80092de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092e0:	6a21      	ldr	r1, [r4, #32]
 80092e2:	4628      	mov	r0, r5
 80092e4:	47b0      	blx	r6
 80092e6:	1c43      	adds	r3, r0, #1
 80092e8:	89a3      	ldrh	r3, [r4, #12]
 80092ea:	d106      	bne.n	80092fa <__sflush_r+0x66>
 80092ec:	6829      	ldr	r1, [r5, #0]
 80092ee:	291d      	cmp	r1, #29
 80092f0:	d82c      	bhi.n	800934c <__sflush_r+0xb8>
 80092f2:	4a2a      	ldr	r2, [pc, #168]	; (800939c <__sflush_r+0x108>)
 80092f4:	40ca      	lsrs	r2, r1
 80092f6:	07d6      	lsls	r6, r2, #31
 80092f8:	d528      	bpl.n	800934c <__sflush_r+0xb8>
 80092fa:	2200      	movs	r2, #0
 80092fc:	6062      	str	r2, [r4, #4]
 80092fe:	04d9      	lsls	r1, r3, #19
 8009300:	6922      	ldr	r2, [r4, #16]
 8009302:	6022      	str	r2, [r4, #0]
 8009304:	d504      	bpl.n	8009310 <__sflush_r+0x7c>
 8009306:	1c42      	adds	r2, r0, #1
 8009308:	d101      	bne.n	800930e <__sflush_r+0x7a>
 800930a:	682b      	ldr	r3, [r5, #0]
 800930c:	b903      	cbnz	r3, 8009310 <__sflush_r+0x7c>
 800930e:	6560      	str	r0, [r4, #84]	; 0x54
 8009310:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009312:	602f      	str	r7, [r5, #0]
 8009314:	2900      	cmp	r1, #0
 8009316:	d0ca      	beq.n	80092ae <__sflush_r+0x1a>
 8009318:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800931c:	4299      	cmp	r1, r3
 800931e:	d002      	beq.n	8009326 <__sflush_r+0x92>
 8009320:	4628      	mov	r0, r5
 8009322:	f000 f9d5 	bl	80096d0 <_free_r>
 8009326:	2000      	movs	r0, #0
 8009328:	6360      	str	r0, [r4, #52]	; 0x34
 800932a:	e7c1      	b.n	80092b0 <__sflush_r+0x1c>
 800932c:	6a21      	ldr	r1, [r4, #32]
 800932e:	2301      	movs	r3, #1
 8009330:	4628      	mov	r0, r5
 8009332:	47b0      	blx	r6
 8009334:	1c41      	adds	r1, r0, #1
 8009336:	d1c7      	bne.n	80092c8 <__sflush_r+0x34>
 8009338:	682b      	ldr	r3, [r5, #0]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d0c4      	beq.n	80092c8 <__sflush_r+0x34>
 800933e:	2b1d      	cmp	r3, #29
 8009340:	d001      	beq.n	8009346 <__sflush_r+0xb2>
 8009342:	2b16      	cmp	r3, #22
 8009344:	d101      	bne.n	800934a <__sflush_r+0xb6>
 8009346:	602f      	str	r7, [r5, #0]
 8009348:	e7b1      	b.n	80092ae <__sflush_r+0x1a>
 800934a:	89a3      	ldrh	r3, [r4, #12]
 800934c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009350:	81a3      	strh	r3, [r4, #12]
 8009352:	e7ad      	b.n	80092b0 <__sflush_r+0x1c>
 8009354:	690f      	ldr	r7, [r1, #16]
 8009356:	2f00      	cmp	r7, #0
 8009358:	d0a9      	beq.n	80092ae <__sflush_r+0x1a>
 800935a:	0793      	lsls	r3, r2, #30
 800935c:	680e      	ldr	r6, [r1, #0]
 800935e:	bf08      	it	eq
 8009360:	694b      	ldreq	r3, [r1, #20]
 8009362:	600f      	str	r7, [r1, #0]
 8009364:	bf18      	it	ne
 8009366:	2300      	movne	r3, #0
 8009368:	eba6 0807 	sub.w	r8, r6, r7
 800936c:	608b      	str	r3, [r1, #8]
 800936e:	f1b8 0f00 	cmp.w	r8, #0
 8009372:	dd9c      	ble.n	80092ae <__sflush_r+0x1a>
 8009374:	6a21      	ldr	r1, [r4, #32]
 8009376:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009378:	4643      	mov	r3, r8
 800937a:	463a      	mov	r2, r7
 800937c:	4628      	mov	r0, r5
 800937e:	47b0      	blx	r6
 8009380:	2800      	cmp	r0, #0
 8009382:	dc06      	bgt.n	8009392 <__sflush_r+0xfe>
 8009384:	89a3      	ldrh	r3, [r4, #12]
 8009386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800938a:	81a3      	strh	r3, [r4, #12]
 800938c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009390:	e78e      	b.n	80092b0 <__sflush_r+0x1c>
 8009392:	4407      	add	r7, r0
 8009394:	eba8 0800 	sub.w	r8, r8, r0
 8009398:	e7e9      	b.n	800936e <__sflush_r+0xda>
 800939a:	bf00      	nop
 800939c:	20400001 	.word	0x20400001

080093a0 <_fflush_r>:
 80093a0:	b538      	push	{r3, r4, r5, lr}
 80093a2:	690b      	ldr	r3, [r1, #16]
 80093a4:	4605      	mov	r5, r0
 80093a6:	460c      	mov	r4, r1
 80093a8:	b913      	cbnz	r3, 80093b0 <_fflush_r+0x10>
 80093aa:	2500      	movs	r5, #0
 80093ac:	4628      	mov	r0, r5
 80093ae:	bd38      	pop	{r3, r4, r5, pc}
 80093b0:	b118      	cbz	r0, 80093ba <_fflush_r+0x1a>
 80093b2:	6983      	ldr	r3, [r0, #24]
 80093b4:	b90b      	cbnz	r3, 80093ba <_fflush_r+0x1a>
 80093b6:	f000 f887 	bl	80094c8 <__sinit>
 80093ba:	4b14      	ldr	r3, [pc, #80]	; (800940c <_fflush_r+0x6c>)
 80093bc:	429c      	cmp	r4, r3
 80093be:	d11b      	bne.n	80093f8 <_fflush_r+0x58>
 80093c0:	686c      	ldr	r4, [r5, #4]
 80093c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d0ef      	beq.n	80093aa <_fflush_r+0xa>
 80093ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80093cc:	07d0      	lsls	r0, r2, #31
 80093ce:	d404      	bmi.n	80093da <_fflush_r+0x3a>
 80093d0:	0599      	lsls	r1, r3, #22
 80093d2:	d402      	bmi.n	80093da <_fflush_r+0x3a>
 80093d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093d6:	f000 f915 	bl	8009604 <__retarget_lock_acquire_recursive>
 80093da:	4628      	mov	r0, r5
 80093dc:	4621      	mov	r1, r4
 80093de:	f7ff ff59 	bl	8009294 <__sflush_r>
 80093e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093e4:	07da      	lsls	r2, r3, #31
 80093e6:	4605      	mov	r5, r0
 80093e8:	d4e0      	bmi.n	80093ac <_fflush_r+0xc>
 80093ea:	89a3      	ldrh	r3, [r4, #12]
 80093ec:	059b      	lsls	r3, r3, #22
 80093ee:	d4dd      	bmi.n	80093ac <_fflush_r+0xc>
 80093f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093f2:	f000 f908 	bl	8009606 <__retarget_lock_release_recursive>
 80093f6:	e7d9      	b.n	80093ac <_fflush_r+0xc>
 80093f8:	4b05      	ldr	r3, [pc, #20]	; (8009410 <_fflush_r+0x70>)
 80093fa:	429c      	cmp	r4, r3
 80093fc:	d101      	bne.n	8009402 <_fflush_r+0x62>
 80093fe:	68ac      	ldr	r4, [r5, #8]
 8009400:	e7df      	b.n	80093c2 <_fflush_r+0x22>
 8009402:	4b04      	ldr	r3, [pc, #16]	; (8009414 <_fflush_r+0x74>)
 8009404:	429c      	cmp	r4, r3
 8009406:	bf08      	it	eq
 8009408:	68ec      	ldreq	r4, [r5, #12]
 800940a:	e7da      	b.n	80093c2 <_fflush_r+0x22>
 800940c:	0800abd8 	.word	0x0800abd8
 8009410:	0800abf8 	.word	0x0800abf8
 8009414:	0800abb8 	.word	0x0800abb8

08009418 <std>:
 8009418:	2300      	movs	r3, #0
 800941a:	b510      	push	{r4, lr}
 800941c:	4604      	mov	r4, r0
 800941e:	e9c0 3300 	strd	r3, r3, [r0]
 8009422:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009426:	6083      	str	r3, [r0, #8]
 8009428:	8181      	strh	r1, [r0, #12]
 800942a:	6643      	str	r3, [r0, #100]	; 0x64
 800942c:	81c2      	strh	r2, [r0, #14]
 800942e:	6183      	str	r3, [r0, #24]
 8009430:	4619      	mov	r1, r3
 8009432:	2208      	movs	r2, #8
 8009434:	305c      	adds	r0, #92	; 0x5c
 8009436:	f7ff fb6f 	bl	8008b18 <memset>
 800943a:	4b05      	ldr	r3, [pc, #20]	; (8009450 <std+0x38>)
 800943c:	6263      	str	r3, [r4, #36]	; 0x24
 800943e:	4b05      	ldr	r3, [pc, #20]	; (8009454 <std+0x3c>)
 8009440:	62a3      	str	r3, [r4, #40]	; 0x28
 8009442:	4b05      	ldr	r3, [pc, #20]	; (8009458 <std+0x40>)
 8009444:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009446:	4b05      	ldr	r3, [pc, #20]	; (800945c <std+0x44>)
 8009448:	6224      	str	r4, [r4, #32]
 800944a:	6323      	str	r3, [r4, #48]	; 0x30
 800944c:	bd10      	pop	{r4, pc}
 800944e:	bf00      	nop
 8009450:	080098cd 	.word	0x080098cd
 8009454:	080098ef 	.word	0x080098ef
 8009458:	08009927 	.word	0x08009927
 800945c:	0800994b 	.word	0x0800994b

08009460 <_cleanup_r>:
 8009460:	4901      	ldr	r1, [pc, #4]	; (8009468 <_cleanup_r+0x8>)
 8009462:	f000 b8af 	b.w	80095c4 <_fwalk_reent>
 8009466:	bf00      	nop
 8009468:	080093a1 	.word	0x080093a1

0800946c <__sfmoreglue>:
 800946c:	b570      	push	{r4, r5, r6, lr}
 800946e:	1e4a      	subs	r2, r1, #1
 8009470:	2568      	movs	r5, #104	; 0x68
 8009472:	4355      	muls	r5, r2
 8009474:	460e      	mov	r6, r1
 8009476:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800947a:	f000 f979 	bl	8009770 <_malloc_r>
 800947e:	4604      	mov	r4, r0
 8009480:	b140      	cbz	r0, 8009494 <__sfmoreglue+0x28>
 8009482:	2100      	movs	r1, #0
 8009484:	e9c0 1600 	strd	r1, r6, [r0]
 8009488:	300c      	adds	r0, #12
 800948a:	60a0      	str	r0, [r4, #8]
 800948c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009490:	f7ff fb42 	bl	8008b18 <memset>
 8009494:	4620      	mov	r0, r4
 8009496:	bd70      	pop	{r4, r5, r6, pc}

08009498 <__sfp_lock_acquire>:
 8009498:	4801      	ldr	r0, [pc, #4]	; (80094a0 <__sfp_lock_acquire+0x8>)
 800949a:	f000 b8b3 	b.w	8009604 <__retarget_lock_acquire_recursive>
 800949e:	bf00      	nop
 80094a0:	200031f8 	.word	0x200031f8

080094a4 <__sfp_lock_release>:
 80094a4:	4801      	ldr	r0, [pc, #4]	; (80094ac <__sfp_lock_release+0x8>)
 80094a6:	f000 b8ae 	b.w	8009606 <__retarget_lock_release_recursive>
 80094aa:	bf00      	nop
 80094ac:	200031f8 	.word	0x200031f8

080094b0 <__sinit_lock_acquire>:
 80094b0:	4801      	ldr	r0, [pc, #4]	; (80094b8 <__sinit_lock_acquire+0x8>)
 80094b2:	f000 b8a7 	b.w	8009604 <__retarget_lock_acquire_recursive>
 80094b6:	bf00      	nop
 80094b8:	200031f3 	.word	0x200031f3

080094bc <__sinit_lock_release>:
 80094bc:	4801      	ldr	r0, [pc, #4]	; (80094c4 <__sinit_lock_release+0x8>)
 80094be:	f000 b8a2 	b.w	8009606 <__retarget_lock_release_recursive>
 80094c2:	bf00      	nop
 80094c4:	200031f3 	.word	0x200031f3

080094c8 <__sinit>:
 80094c8:	b510      	push	{r4, lr}
 80094ca:	4604      	mov	r4, r0
 80094cc:	f7ff fff0 	bl	80094b0 <__sinit_lock_acquire>
 80094d0:	69a3      	ldr	r3, [r4, #24]
 80094d2:	b11b      	cbz	r3, 80094dc <__sinit+0x14>
 80094d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094d8:	f7ff bff0 	b.w	80094bc <__sinit_lock_release>
 80094dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80094e0:	6523      	str	r3, [r4, #80]	; 0x50
 80094e2:	4b13      	ldr	r3, [pc, #76]	; (8009530 <__sinit+0x68>)
 80094e4:	4a13      	ldr	r2, [pc, #76]	; (8009534 <__sinit+0x6c>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80094ea:	42a3      	cmp	r3, r4
 80094ec:	bf04      	itt	eq
 80094ee:	2301      	moveq	r3, #1
 80094f0:	61a3      	streq	r3, [r4, #24]
 80094f2:	4620      	mov	r0, r4
 80094f4:	f000 f820 	bl	8009538 <__sfp>
 80094f8:	6060      	str	r0, [r4, #4]
 80094fa:	4620      	mov	r0, r4
 80094fc:	f000 f81c 	bl	8009538 <__sfp>
 8009500:	60a0      	str	r0, [r4, #8]
 8009502:	4620      	mov	r0, r4
 8009504:	f000 f818 	bl	8009538 <__sfp>
 8009508:	2200      	movs	r2, #0
 800950a:	60e0      	str	r0, [r4, #12]
 800950c:	2104      	movs	r1, #4
 800950e:	6860      	ldr	r0, [r4, #4]
 8009510:	f7ff ff82 	bl	8009418 <std>
 8009514:	68a0      	ldr	r0, [r4, #8]
 8009516:	2201      	movs	r2, #1
 8009518:	2109      	movs	r1, #9
 800951a:	f7ff ff7d 	bl	8009418 <std>
 800951e:	68e0      	ldr	r0, [r4, #12]
 8009520:	2202      	movs	r2, #2
 8009522:	2112      	movs	r1, #18
 8009524:	f7ff ff78 	bl	8009418 <std>
 8009528:	2301      	movs	r3, #1
 800952a:	61a3      	str	r3, [r4, #24]
 800952c:	e7d2      	b.n	80094d4 <__sinit+0xc>
 800952e:	bf00      	nop
 8009530:	0800ab80 	.word	0x0800ab80
 8009534:	08009461 	.word	0x08009461

08009538 <__sfp>:
 8009538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800953a:	4607      	mov	r7, r0
 800953c:	f7ff ffac 	bl	8009498 <__sfp_lock_acquire>
 8009540:	4b1e      	ldr	r3, [pc, #120]	; (80095bc <__sfp+0x84>)
 8009542:	681e      	ldr	r6, [r3, #0]
 8009544:	69b3      	ldr	r3, [r6, #24]
 8009546:	b913      	cbnz	r3, 800954e <__sfp+0x16>
 8009548:	4630      	mov	r0, r6
 800954a:	f7ff ffbd 	bl	80094c8 <__sinit>
 800954e:	3648      	adds	r6, #72	; 0x48
 8009550:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009554:	3b01      	subs	r3, #1
 8009556:	d503      	bpl.n	8009560 <__sfp+0x28>
 8009558:	6833      	ldr	r3, [r6, #0]
 800955a:	b30b      	cbz	r3, 80095a0 <__sfp+0x68>
 800955c:	6836      	ldr	r6, [r6, #0]
 800955e:	e7f7      	b.n	8009550 <__sfp+0x18>
 8009560:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009564:	b9d5      	cbnz	r5, 800959c <__sfp+0x64>
 8009566:	4b16      	ldr	r3, [pc, #88]	; (80095c0 <__sfp+0x88>)
 8009568:	60e3      	str	r3, [r4, #12]
 800956a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800956e:	6665      	str	r5, [r4, #100]	; 0x64
 8009570:	f000 f847 	bl	8009602 <__retarget_lock_init_recursive>
 8009574:	f7ff ff96 	bl	80094a4 <__sfp_lock_release>
 8009578:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800957c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009580:	6025      	str	r5, [r4, #0]
 8009582:	61a5      	str	r5, [r4, #24]
 8009584:	2208      	movs	r2, #8
 8009586:	4629      	mov	r1, r5
 8009588:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800958c:	f7ff fac4 	bl	8008b18 <memset>
 8009590:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009594:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009598:	4620      	mov	r0, r4
 800959a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800959c:	3468      	adds	r4, #104	; 0x68
 800959e:	e7d9      	b.n	8009554 <__sfp+0x1c>
 80095a0:	2104      	movs	r1, #4
 80095a2:	4638      	mov	r0, r7
 80095a4:	f7ff ff62 	bl	800946c <__sfmoreglue>
 80095a8:	4604      	mov	r4, r0
 80095aa:	6030      	str	r0, [r6, #0]
 80095ac:	2800      	cmp	r0, #0
 80095ae:	d1d5      	bne.n	800955c <__sfp+0x24>
 80095b0:	f7ff ff78 	bl	80094a4 <__sfp_lock_release>
 80095b4:	230c      	movs	r3, #12
 80095b6:	603b      	str	r3, [r7, #0]
 80095b8:	e7ee      	b.n	8009598 <__sfp+0x60>
 80095ba:	bf00      	nop
 80095bc:	0800ab80 	.word	0x0800ab80
 80095c0:	ffff0001 	.word	0xffff0001

080095c4 <_fwalk_reent>:
 80095c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095c8:	4606      	mov	r6, r0
 80095ca:	4688      	mov	r8, r1
 80095cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80095d0:	2700      	movs	r7, #0
 80095d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80095d6:	f1b9 0901 	subs.w	r9, r9, #1
 80095da:	d505      	bpl.n	80095e8 <_fwalk_reent+0x24>
 80095dc:	6824      	ldr	r4, [r4, #0]
 80095de:	2c00      	cmp	r4, #0
 80095e0:	d1f7      	bne.n	80095d2 <_fwalk_reent+0xe>
 80095e2:	4638      	mov	r0, r7
 80095e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095e8:	89ab      	ldrh	r3, [r5, #12]
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d907      	bls.n	80095fe <_fwalk_reent+0x3a>
 80095ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80095f2:	3301      	adds	r3, #1
 80095f4:	d003      	beq.n	80095fe <_fwalk_reent+0x3a>
 80095f6:	4629      	mov	r1, r5
 80095f8:	4630      	mov	r0, r6
 80095fa:	47c0      	blx	r8
 80095fc:	4307      	orrs	r7, r0
 80095fe:	3568      	adds	r5, #104	; 0x68
 8009600:	e7e9      	b.n	80095d6 <_fwalk_reent+0x12>

08009602 <__retarget_lock_init_recursive>:
 8009602:	4770      	bx	lr

08009604 <__retarget_lock_acquire_recursive>:
 8009604:	4770      	bx	lr

08009606 <__retarget_lock_release_recursive>:
 8009606:	4770      	bx	lr

08009608 <__swhatbuf_r>:
 8009608:	b570      	push	{r4, r5, r6, lr}
 800960a:	460e      	mov	r6, r1
 800960c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009610:	2900      	cmp	r1, #0
 8009612:	b096      	sub	sp, #88	; 0x58
 8009614:	4614      	mov	r4, r2
 8009616:	461d      	mov	r5, r3
 8009618:	da07      	bge.n	800962a <__swhatbuf_r+0x22>
 800961a:	2300      	movs	r3, #0
 800961c:	602b      	str	r3, [r5, #0]
 800961e:	89b3      	ldrh	r3, [r6, #12]
 8009620:	061a      	lsls	r2, r3, #24
 8009622:	d410      	bmi.n	8009646 <__swhatbuf_r+0x3e>
 8009624:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009628:	e00e      	b.n	8009648 <__swhatbuf_r+0x40>
 800962a:	466a      	mov	r2, sp
 800962c:	f000 f9a2 	bl	8009974 <_fstat_r>
 8009630:	2800      	cmp	r0, #0
 8009632:	dbf2      	blt.n	800961a <__swhatbuf_r+0x12>
 8009634:	9a01      	ldr	r2, [sp, #4]
 8009636:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800963a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800963e:	425a      	negs	r2, r3
 8009640:	415a      	adcs	r2, r3
 8009642:	602a      	str	r2, [r5, #0]
 8009644:	e7ee      	b.n	8009624 <__swhatbuf_r+0x1c>
 8009646:	2340      	movs	r3, #64	; 0x40
 8009648:	2000      	movs	r0, #0
 800964a:	6023      	str	r3, [r4, #0]
 800964c:	b016      	add	sp, #88	; 0x58
 800964e:	bd70      	pop	{r4, r5, r6, pc}

08009650 <__smakebuf_r>:
 8009650:	898b      	ldrh	r3, [r1, #12]
 8009652:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009654:	079d      	lsls	r5, r3, #30
 8009656:	4606      	mov	r6, r0
 8009658:	460c      	mov	r4, r1
 800965a:	d507      	bpl.n	800966c <__smakebuf_r+0x1c>
 800965c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009660:	6023      	str	r3, [r4, #0]
 8009662:	6123      	str	r3, [r4, #16]
 8009664:	2301      	movs	r3, #1
 8009666:	6163      	str	r3, [r4, #20]
 8009668:	b002      	add	sp, #8
 800966a:	bd70      	pop	{r4, r5, r6, pc}
 800966c:	ab01      	add	r3, sp, #4
 800966e:	466a      	mov	r2, sp
 8009670:	f7ff ffca 	bl	8009608 <__swhatbuf_r>
 8009674:	9900      	ldr	r1, [sp, #0]
 8009676:	4605      	mov	r5, r0
 8009678:	4630      	mov	r0, r6
 800967a:	f000 f879 	bl	8009770 <_malloc_r>
 800967e:	b948      	cbnz	r0, 8009694 <__smakebuf_r+0x44>
 8009680:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009684:	059a      	lsls	r2, r3, #22
 8009686:	d4ef      	bmi.n	8009668 <__smakebuf_r+0x18>
 8009688:	f023 0303 	bic.w	r3, r3, #3
 800968c:	f043 0302 	orr.w	r3, r3, #2
 8009690:	81a3      	strh	r3, [r4, #12]
 8009692:	e7e3      	b.n	800965c <__smakebuf_r+0xc>
 8009694:	4b0d      	ldr	r3, [pc, #52]	; (80096cc <__smakebuf_r+0x7c>)
 8009696:	62b3      	str	r3, [r6, #40]	; 0x28
 8009698:	89a3      	ldrh	r3, [r4, #12]
 800969a:	6020      	str	r0, [r4, #0]
 800969c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096a0:	81a3      	strh	r3, [r4, #12]
 80096a2:	9b00      	ldr	r3, [sp, #0]
 80096a4:	6163      	str	r3, [r4, #20]
 80096a6:	9b01      	ldr	r3, [sp, #4]
 80096a8:	6120      	str	r0, [r4, #16]
 80096aa:	b15b      	cbz	r3, 80096c4 <__smakebuf_r+0x74>
 80096ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096b0:	4630      	mov	r0, r6
 80096b2:	f000 f971 	bl	8009998 <_isatty_r>
 80096b6:	b128      	cbz	r0, 80096c4 <__smakebuf_r+0x74>
 80096b8:	89a3      	ldrh	r3, [r4, #12]
 80096ba:	f023 0303 	bic.w	r3, r3, #3
 80096be:	f043 0301 	orr.w	r3, r3, #1
 80096c2:	81a3      	strh	r3, [r4, #12]
 80096c4:	89a0      	ldrh	r0, [r4, #12]
 80096c6:	4305      	orrs	r5, r0
 80096c8:	81a5      	strh	r5, [r4, #12]
 80096ca:	e7cd      	b.n	8009668 <__smakebuf_r+0x18>
 80096cc:	08009461 	.word	0x08009461

080096d0 <_free_r>:
 80096d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096d2:	2900      	cmp	r1, #0
 80096d4:	d048      	beq.n	8009768 <_free_r+0x98>
 80096d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096da:	9001      	str	r0, [sp, #4]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	f1a1 0404 	sub.w	r4, r1, #4
 80096e2:	bfb8      	it	lt
 80096e4:	18e4      	addlt	r4, r4, r3
 80096e6:	f000 f979 	bl	80099dc <__malloc_lock>
 80096ea:	4a20      	ldr	r2, [pc, #128]	; (800976c <_free_r+0x9c>)
 80096ec:	9801      	ldr	r0, [sp, #4]
 80096ee:	6813      	ldr	r3, [r2, #0]
 80096f0:	4615      	mov	r5, r2
 80096f2:	b933      	cbnz	r3, 8009702 <_free_r+0x32>
 80096f4:	6063      	str	r3, [r4, #4]
 80096f6:	6014      	str	r4, [r2, #0]
 80096f8:	b003      	add	sp, #12
 80096fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096fe:	f000 b973 	b.w	80099e8 <__malloc_unlock>
 8009702:	42a3      	cmp	r3, r4
 8009704:	d90b      	bls.n	800971e <_free_r+0x4e>
 8009706:	6821      	ldr	r1, [r4, #0]
 8009708:	1862      	adds	r2, r4, r1
 800970a:	4293      	cmp	r3, r2
 800970c:	bf04      	itt	eq
 800970e:	681a      	ldreq	r2, [r3, #0]
 8009710:	685b      	ldreq	r3, [r3, #4]
 8009712:	6063      	str	r3, [r4, #4]
 8009714:	bf04      	itt	eq
 8009716:	1852      	addeq	r2, r2, r1
 8009718:	6022      	streq	r2, [r4, #0]
 800971a:	602c      	str	r4, [r5, #0]
 800971c:	e7ec      	b.n	80096f8 <_free_r+0x28>
 800971e:	461a      	mov	r2, r3
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	b10b      	cbz	r3, 8009728 <_free_r+0x58>
 8009724:	42a3      	cmp	r3, r4
 8009726:	d9fa      	bls.n	800971e <_free_r+0x4e>
 8009728:	6811      	ldr	r1, [r2, #0]
 800972a:	1855      	adds	r5, r2, r1
 800972c:	42a5      	cmp	r5, r4
 800972e:	d10b      	bne.n	8009748 <_free_r+0x78>
 8009730:	6824      	ldr	r4, [r4, #0]
 8009732:	4421      	add	r1, r4
 8009734:	1854      	adds	r4, r2, r1
 8009736:	42a3      	cmp	r3, r4
 8009738:	6011      	str	r1, [r2, #0]
 800973a:	d1dd      	bne.n	80096f8 <_free_r+0x28>
 800973c:	681c      	ldr	r4, [r3, #0]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	6053      	str	r3, [r2, #4]
 8009742:	4421      	add	r1, r4
 8009744:	6011      	str	r1, [r2, #0]
 8009746:	e7d7      	b.n	80096f8 <_free_r+0x28>
 8009748:	d902      	bls.n	8009750 <_free_r+0x80>
 800974a:	230c      	movs	r3, #12
 800974c:	6003      	str	r3, [r0, #0]
 800974e:	e7d3      	b.n	80096f8 <_free_r+0x28>
 8009750:	6825      	ldr	r5, [r4, #0]
 8009752:	1961      	adds	r1, r4, r5
 8009754:	428b      	cmp	r3, r1
 8009756:	bf04      	itt	eq
 8009758:	6819      	ldreq	r1, [r3, #0]
 800975a:	685b      	ldreq	r3, [r3, #4]
 800975c:	6063      	str	r3, [r4, #4]
 800975e:	bf04      	itt	eq
 8009760:	1949      	addeq	r1, r1, r5
 8009762:	6021      	streq	r1, [r4, #0]
 8009764:	6054      	str	r4, [r2, #4]
 8009766:	e7c7      	b.n	80096f8 <_free_r+0x28>
 8009768:	b003      	add	sp, #12
 800976a:	bd30      	pop	{r4, r5, pc}
 800976c:	20002fc8 	.word	0x20002fc8

08009770 <_malloc_r>:
 8009770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009772:	1ccd      	adds	r5, r1, #3
 8009774:	f025 0503 	bic.w	r5, r5, #3
 8009778:	3508      	adds	r5, #8
 800977a:	2d0c      	cmp	r5, #12
 800977c:	bf38      	it	cc
 800977e:	250c      	movcc	r5, #12
 8009780:	2d00      	cmp	r5, #0
 8009782:	4606      	mov	r6, r0
 8009784:	db01      	blt.n	800978a <_malloc_r+0x1a>
 8009786:	42a9      	cmp	r1, r5
 8009788:	d903      	bls.n	8009792 <_malloc_r+0x22>
 800978a:	230c      	movs	r3, #12
 800978c:	6033      	str	r3, [r6, #0]
 800978e:	2000      	movs	r0, #0
 8009790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009792:	f000 f923 	bl	80099dc <__malloc_lock>
 8009796:	4921      	ldr	r1, [pc, #132]	; (800981c <_malloc_r+0xac>)
 8009798:	680a      	ldr	r2, [r1, #0]
 800979a:	4614      	mov	r4, r2
 800979c:	b99c      	cbnz	r4, 80097c6 <_malloc_r+0x56>
 800979e:	4f20      	ldr	r7, [pc, #128]	; (8009820 <_malloc_r+0xb0>)
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	b923      	cbnz	r3, 80097ae <_malloc_r+0x3e>
 80097a4:	4621      	mov	r1, r4
 80097a6:	4630      	mov	r0, r6
 80097a8:	f000 f83c 	bl	8009824 <_sbrk_r>
 80097ac:	6038      	str	r0, [r7, #0]
 80097ae:	4629      	mov	r1, r5
 80097b0:	4630      	mov	r0, r6
 80097b2:	f000 f837 	bl	8009824 <_sbrk_r>
 80097b6:	1c43      	adds	r3, r0, #1
 80097b8:	d123      	bne.n	8009802 <_malloc_r+0x92>
 80097ba:	230c      	movs	r3, #12
 80097bc:	6033      	str	r3, [r6, #0]
 80097be:	4630      	mov	r0, r6
 80097c0:	f000 f912 	bl	80099e8 <__malloc_unlock>
 80097c4:	e7e3      	b.n	800978e <_malloc_r+0x1e>
 80097c6:	6823      	ldr	r3, [r4, #0]
 80097c8:	1b5b      	subs	r3, r3, r5
 80097ca:	d417      	bmi.n	80097fc <_malloc_r+0x8c>
 80097cc:	2b0b      	cmp	r3, #11
 80097ce:	d903      	bls.n	80097d8 <_malloc_r+0x68>
 80097d0:	6023      	str	r3, [r4, #0]
 80097d2:	441c      	add	r4, r3
 80097d4:	6025      	str	r5, [r4, #0]
 80097d6:	e004      	b.n	80097e2 <_malloc_r+0x72>
 80097d8:	6863      	ldr	r3, [r4, #4]
 80097da:	42a2      	cmp	r2, r4
 80097dc:	bf0c      	ite	eq
 80097de:	600b      	streq	r3, [r1, #0]
 80097e0:	6053      	strne	r3, [r2, #4]
 80097e2:	4630      	mov	r0, r6
 80097e4:	f000 f900 	bl	80099e8 <__malloc_unlock>
 80097e8:	f104 000b 	add.w	r0, r4, #11
 80097ec:	1d23      	adds	r3, r4, #4
 80097ee:	f020 0007 	bic.w	r0, r0, #7
 80097f2:	1ac2      	subs	r2, r0, r3
 80097f4:	d0cc      	beq.n	8009790 <_malloc_r+0x20>
 80097f6:	1a1b      	subs	r3, r3, r0
 80097f8:	50a3      	str	r3, [r4, r2]
 80097fa:	e7c9      	b.n	8009790 <_malloc_r+0x20>
 80097fc:	4622      	mov	r2, r4
 80097fe:	6864      	ldr	r4, [r4, #4]
 8009800:	e7cc      	b.n	800979c <_malloc_r+0x2c>
 8009802:	1cc4      	adds	r4, r0, #3
 8009804:	f024 0403 	bic.w	r4, r4, #3
 8009808:	42a0      	cmp	r0, r4
 800980a:	d0e3      	beq.n	80097d4 <_malloc_r+0x64>
 800980c:	1a21      	subs	r1, r4, r0
 800980e:	4630      	mov	r0, r6
 8009810:	f000 f808 	bl	8009824 <_sbrk_r>
 8009814:	3001      	adds	r0, #1
 8009816:	d1dd      	bne.n	80097d4 <_malloc_r+0x64>
 8009818:	e7cf      	b.n	80097ba <_malloc_r+0x4a>
 800981a:	bf00      	nop
 800981c:	20002fc8 	.word	0x20002fc8
 8009820:	20002fcc 	.word	0x20002fcc

08009824 <_sbrk_r>:
 8009824:	b538      	push	{r3, r4, r5, lr}
 8009826:	4d06      	ldr	r5, [pc, #24]	; (8009840 <_sbrk_r+0x1c>)
 8009828:	2300      	movs	r3, #0
 800982a:	4604      	mov	r4, r0
 800982c:	4608      	mov	r0, r1
 800982e:	602b      	str	r3, [r5, #0]
 8009830:	f001 f8a8 	bl	800a984 <_sbrk>
 8009834:	1c43      	adds	r3, r0, #1
 8009836:	d102      	bne.n	800983e <_sbrk_r+0x1a>
 8009838:	682b      	ldr	r3, [r5, #0]
 800983a:	b103      	cbz	r3, 800983e <_sbrk_r+0x1a>
 800983c:	6023      	str	r3, [r4, #0]
 800983e:	bd38      	pop	{r3, r4, r5, pc}
 8009840:	200031fc 	.word	0x200031fc

08009844 <_raise_r>:
 8009844:	291f      	cmp	r1, #31
 8009846:	b538      	push	{r3, r4, r5, lr}
 8009848:	4604      	mov	r4, r0
 800984a:	460d      	mov	r5, r1
 800984c:	d904      	bls.n	8009858 <_raise_r+0x14>
 800984e:	2316      	movs	r3, #22
 8009850:	6003      	str	r3, [r0, #0]
 8009852:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009856:	bd38      	pop	{r3, r4, r5, pc}
 8009858:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800985a:	b112      	cbz	r2, 8009862 <_raise_r+0x1e>
 800985c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009860:	b94b      	cbnz	r3, 8009876 <_raise_r+0x32>
 8009862:	4620      	mov	r0, r4
 8009864:	f000 f830 	bl	80098c8 <_getpid_r>
 8009868:	462a      	mov	r2, r5
 800986a:	4601      	mov	r1, r0
 800986c:	4620      	mov	r0, r4
 800986e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009872:	f000 b817 	b.w	80098a4 <_kill_r>
 8009876:	2b01      	cmp	r3, #1
 8009878:	d00a      	beq.n	8009890 <_raise_r+0x4c>
 800987a:	1c59      	adds	r1, r3, #1
 800987c:	d103      	bne.n	8009886 <_raise_r+0x42>
 800987e:	2316      	movs	r3, #22
 8009880:	6003      	str	r3, [r0, #0]
 8009882:	2001      	movs	r0, #1
 8009884:	e7e7      	b.n	8009856 <_raise_r+0x12>
 8009886:	2400      	movs	r4, #0
 8009888:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800988c:	4628      	mov	r0, r5
 800988e:	4798      	blx	r3
 8009890:	2000      	movs	r0, #0
 8009892:	e7e0      	b.n	8009856 <_raise_r+0x12>

08009894 <raise>:
 8009894:	4b02      	ldr	r3, [pc, #8]	; (80098a0 <raise+0xc>)
 8009896:	4601      	mov	r1, r0
 8009898:	6818      	ldr	r0, [r3, #0]
 800989a:	f7ff bfd3 	b.w	8009844 <_raise_r>
 800989e:	bf00      	nop
 80098a0:	20000014 	.word	0x20000014

080098a4 <_kill_r>:
 80098a4:	b538      	push	{r3, r4, r5, lr}
 80098a6:	4d07      	ldr	r5, [pc, #28]	; (80098c4 <_kill_r+0x20>)
 80098a8:	2300      	movs	r3, #0
 80098aa:	4604      	mov	r4, r0
 80098ac:	4608      	mov	r0, r1
 80098ae:	4611      	mov	r1, r2
 80098b0:	602b      	str	r3, [r5, #0]
 80098b2:	f7f7 ff33 	bl	800171c <_kill>
 80098b6:	1c43      	adds	r3, r0, #1
 80098b8:	d102      	bne.n	80098c0 <_kill_r+0x1c>
 80098ba:	682b      	ldr	r3, [r5, #0]
 80098bc:	b103      	cbz	r3, 80098c0 <_kill_r+0x1c>
 80098be:	6023      	str	r3, [r4, #0]
 80098c0:	bd38      	pop	{r3, r4, r5, pc}
 80098c2:	bf00      	nop
 80098c4:	200031fc 	.word	0x200031fc

080098c8 <_getpid_r>:
 80098c8:	f7f7 bf20 	b.w	800170c <_getpid>

080098cc <__sread>:
 80098cc:	b510      	push	{r4, lr}
 80098ce:	460c      	mov	r4, r1
 80098d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098d4:	f000 f88e 	bl	80099f4 <_read_r>
 80098d8:	2800      	cmp	r0, #0
 80098da:	bfab      	itete	ge
 80098dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098de:	89a3      	ldrhlt	r3, [r4, #12]
 80098e0:	181b      	addge	r3, r3, r0
 80098e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80098e6:	bfac      	ite	ge
 80098e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80098ea:	81a3      	strhlt	r3, [r4, #12]
 80098ec:	bd10      	pop	{r4, pc}

080098ee <__swrite>:
 80098ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098f2:	461f      	mov	r7, r3
 80098f4:	898b      	ldrh	r3, [r1, #12]
 80098f6:	05db      	lsls	r3, r3, #23
 80098f8:	4605      	mov	r5, r0
 80098fa:	460c      	mov	r4, r1
 80098fc:	4616      	mov	r6, r2
 80098fe:	d505      	bpl.n	800990c <__swrite+0x1e>
 8009900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009904:	2302      	movs	r3, #2
 8009906:	2200      	movs	r2, #0
 8009908:	f000 f856 	bl	80099b8 <_lseek_r>
 800990c:	89a3      	ldrh	r3, [r4, #12]
 800990e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009912:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009916:	81a3      	strh	r3, [r4, #12]
 8009918:	4632      	mov	r2, r6
 800991a:	463b      	mov	r3, r7
 800991c:	4628      	mov	r0, r5
 800991e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009922:	f7ff b871 	b.w	8008a08 <_write_r>

08009926 <__sseek>:
 8009926:	b510      	push	{r4, lr}
 8009928:	460c      	mov	r4, r1
 800992a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800992e:	f000 f843 	bl	80099b8 <_lseek_r>
 8009932:	1c43      	adds	r3, r0, #1
 8009934:	89a3      	ldrh	r3, [r4, #12]
 8009936:	bf15      	itete	ne
 8009938:	6560      	strne	r0, [r4, #84]	; 0x54
 800993a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800993e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009942:	81a3      	strheq	r3, [r4, #12]
 8009944:	bf18      	it	ne
 8009946:	81a3      	strhne	r3, [r4, #12]
 8009948:	bd10      	pop	{r4, pc}

0800994a <__sclose>:
 800994a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800994e:	f000 b801 	b.w	8009954 <_close_r>
	...

08009954 <_close_r>:
 8009954:	b538      	push	{r3, r4, r5, lr}
 8009956:	4d06      	ldr	r5, [pc, #24]	; (8009970 <_close_r+0x1c>)
 8009958:	2300      	movs	r3, #0
 800995a:	4604      	mov	r4, r0
 800995c:	4608      	mov	r0, r1
 800995e:	602b      	str	r3, [r5, #0]
 8009960:	f7f7 ff13 	bl	800178a <_close>
 8009964:	1c43      	adds	r3, r0, #1
 8009966:	d102      	bne.n	800996e <_close_r+0x1a>
 8009968:	682b      	ldr	r3, [r5, #0]
 800996a:	b103      	cbz	r3, 800996e <_close_r+0x1a>
 800996c:	6023      	str	r3, [r4, #0]
 800996e:	bd38      	pop	{r3, r4, r5, pc}
 8009970:	200031fc 	.word	0x200031fc

08009974 <_fstat_r>:
 8009974:	b538      	push	{r3, r4, r5, lr}
 8009976:	4d07      	ldr	r5, [pc, #28]	; (8009994 <_fstat_r+0x20>)
 8009978:	2300      	movs	r3, #0
 800997a:	4604      	mov	r4, r0
 800997c:	4608      	mov	r0, r1
 800997e:	4611      	mov	r1, r2
 8009980:	602b      	str	r3, [r5, #0]
 8009982:	f7f7 ff0e 	bl	80017a2 <_fstat>
 8009986:	1c43      	adds	r3, r0, #1
 8009988:	d102      	bne.n	8009990 <_fstat_r+0x1c>
 800998a:	682b      	ldr	r3, [r5, #0]
 800998c:	b103      	cbz	r3, 8009990 <_fstat_r+0x1c>
 800998e:	6023      	str	r3, [r4, #0]
 8009990:	bd38      	pop	{r3, r4, r5, pc}
 8009992:	bf00      	nop
 8009994:	200031fc 	.word	0x200031fc

08009998 <_isatty_r>:
 8009998:	b538      	push	{r3, r4, r5, lr}
 800999a:	4d06      	ldr	r5, [pc, #24]	; (80099b4 <_isatty_r+0x1c>)
 800999c:	2300      	movs	r3, #0
 800999e:	4604      	mov	r4, r0
 80099a0:	4608      	mov	r0, r1
 80099a2:	602b      	str	r3, [r5, #0]
 80099a4:	f7f7 ff0d 	bl	80017c2 <_isatty>
 80099a8:	1c43      	adds	r3, r0, #1
 80099aa:	d102      	bne.n	80099b2 <_isatty_r+0x1a>
 80099ac:	682b      	ldr	r3, [r5, #0]
 80099ae:	b103      	cbz	r3, 80099b2 <_isatty_r+0x1a>
 80099b0:	6023      	str	r3, [r4, #0]
 80099b2:	bd38      	pop	{r3, r4, r5, pc}
 80099b4:	200031fc 	.word	0x200031fc

080099b8 <_lseek_r>:
 80099b8:	b538      	push	{r3, r4, r5, lr}
 80099ba:	4d07      	ldr	r5, [pc, #28]	; (80099d8 <_lseek_r+0x20>)
 80099bc:	4604      	mov	r4, r0
 80099be:	4608      	mov	r0, r1
 80099c0:	4611      	mov	r1, r2
 80099c2:	2200      	movs	r2, #0
 80099c4:	602a      	str	r2, [r5, #0]
 80099c6:	461a      	mov	r2, r3
 80099c8:	f7f7 ff06 	bl	80017d8 <_lseek>
 80099cc:	1c43      	adds	r3, r0, #1
 80099ce:	d102      	bne.n	80099d6 <_lseek_r+0x1e>
 80099d0:	682b      	ldr	r3, [r5, #0]
 80099d2:	b103      	cbz	r3, 80099d6 <_lseek_r+0x1e>
 80099d4:	6023      	str	r3, [r4, #0]
 80099d6:	bd38      	pop	{r3, r4, r5, pc}
 80099d8:	200031fc 	.word	0x200031fc

080099dc <__malloc_lock>:
 80099dc:	4801      	ldr	r0, [pc, #4]	; (80099e4 <__malloc_lock+0x8>)
 80099de:	f7ff be11 	b.w	8009604 <__retarget_lock_acquire_recursive>
 80099e2:	bf00      	nop
 80099e4:	200031f4 	.word	0x200031f4

080099e8 <__malloc_unlock>:
 80099e8:	4801      	ldr	r0, [pc, #4]	; (80099f0 <__malloc_unlock+0x8>)
 80099ea:	f7ff be0c 	b.w	8009606 <__retarget_lock_release_recursive>
 80099ee:	bf00      	nop
 80099f0:	200031f4 	.word	0x200031f4

080099f4 <_read_r>:
 80099f4:	b538      	push	{r3, r4, r5, lr}
 80099f6:	4d07      	ldr	r5, [pc, #28]	; (8009a14 <_read_r+0x20>)
 80099f8:	4604      	mov	r4, r0
 80099fa:	4608      	mov	r0, r1
 80099fc:	4611      	mov	r1, r2
 80099fe:	2200      	movs	r2, #0
 8009a00:	602a      	str	r2, [r5, #0]
 8009a02:	461a      	mov	r2, r3
 8009a04:	f7f7 fea4 	bl	8001750 <_read>
 8009a08:	1c43      	adds	r3, r0, #1
 8009a0a:	d102      	bne.n	8009a12 <_read_r+0x1e>
 8009a0c:	682b      	ldr	r3, [r5, #0]
 8009a0e:	b103      	cbz	r3, 8009a12 <_read_r+0x1e>
 8009a10:	6023      	str	r3, [r4, #0]
 8009a12:	bd38      	pop	{r3, r4, r5, pc}
 8009a14:	200031fc 	.word	0x200031fc

08009a18 <pow>:
 8009a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a1c:	ec59 8b10 	vmov	r8, r9, d0
 8009a20:	ec57 6b11 	vmov	r6, r7, d1
 8009a24:	f000 f8a8 	bl	8009b78 <__ieee754_pow>
 8009a28:	4b4e      	ldr	r3, [pc, #312]	; (8009b64 <pow+0x14c>)
 8009a2a:	f993 3000 	ldrsb.w	r3, [r3]
 8009a2e:	3301      	adds	r3, #1
 8009a30:	ec55 4b10 	vmov	r4, r5, d0
 8009a34:	d015      	beq.n	8009a62 <pow+0x4a>
 8009a36:	4632      	mov	r2, r6
 8009a38:	463b      	mov	r3, r7
 8009a3a:	4630      	mov	r0, r6
 8009a3c:	4639      	mov	r1, r7
 8009a3e:	f7f7 f8bd 	bl	8000bbc <__aeabi_dcmpun>
 8009a42:	b970      	cbnz	r0, 8009a62 <pow+0x4a>
 8009a44:	4642      	mov	r2, r8
 8009a46:	464b      	mov	r3, r9
 8009a48:	4640      	mov	r0, r8
 8009a4a:	4649      	mov	r1, r9
 8009a4c:	f7f7 f8b6 	bl	8000bbc <__aeabi_dcmpun>
 8009a50:	2200      	movs	r2, #0
 8009a52:	2300      	movs	r3, #0
 8009a54:	b148      	cbz	r0, 8009a6a <pow+0x52>
 8009a56:	4630      	mov	r0, r6
 8009a58:	4639      	mov	r1, r7
 8009a5a:	f7f7 f87d 	bl	8000b58 <__aeabi_dcmpeq>
 8009a5e:	2800      	cmp	r0, #0
 8009a60:	d17d      	bne.n	8009b5e <pow+0x146>
 8009a62:	ec45 4b10 	vmov	d0, r4, r5
 8009a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a6a:	4640      	mov	r0, r8
 8009a6c:	4649      	mov	r1, r9
 8009a6e:	f7f7 f873 	bl	8000b58 <__aeabi_dcmpeq>
 8009a72:	b1e0      	cbz	r0, 8009aae <pow+0x96>
 8009a74:	2200      	movs	r2, #0
 8009a76:	2300      	movs	r3, #0
 8009a78:	4630      	mov	r0, r6
 8009a7a:	4639      	mov	r1, r7
 8009a7c:	f7f7 f86c 	bl	8000b58 <__aeabi_dcmpeq>
 8009a80:	2800      	cmp	r0, #0
 8009a82:	d16c      	bne.n	8009b5e <pow+0x146>
 8009a84:	ec47 6b10 	vmov	d0, r6, r7
 8009a88:	f000 fe55 	bl	800a736 <finite>
 8009a8c:	2800      	cmp	r0, #0
 8009a8e:	d0e8      	beq.n	8009a62 <pow+0x4a>
 8009a90:	2200      	movs	r2, #0
 8009a92:	2300      	movs	r3, #0
 8009a94:	4630      	mov	r0, r6
 8009a96:	4639      	mov	r1, r7
 8009a98:	f7f7 f868 	bl	8000b6c <__aeabi_dcmplt>
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	d0e0      	beq.n	8009a62 <pow+0x4a>
 8009aa0:	f7fe ffe2 	bl	8008a68 <__errno>
 8009aa4:	2321      	movs	r3, #33	; 0x21
 8009aa6:	6003      	str	r3, [r0, #0]
 8009aa8:	2400      	movs	r4, #0
 8009aaa:	4d2f      	ldr	r5, [pc, #188]	; (8009b68 <pow+0x150>)
 8009aac:	e7d9      	b.n	8009a62 <pow+0x4a>
 8009aae:	ec45 4b10 	vmov	d0, r4, r5
 8009ab2:	f000 fe40 	bl	800a736 <finite>
 8009ab6:	bbb8      	cbnz	r0, 8009b28 <pow+0x110>
 8009ab8:	ec49 8b10 	vmov	d0, r8, r9
 8009abc:	f000 fe3b 	bl	800a736 <finite>
 8009ac0:	b390      	cbz	r0, 8009b28 <pow+0x110>
 8009ac2:	ec47 6b10 	vmov	d0, r6, r7
 8009ac6:	f000 fe36 	bl	800a736 <finite>
 8009aca:	b368      	cbz	r0, 8009b28 <pow+0x110>
 8009acc:	4622      	mov	r2, r4
 8009ace:	462b      	mov	r3, r5
 8009ad0:	4620      	mov	r0, r4
 8009ad2:	4629      	mov	r1, r5
 8009ad4:	f7f7 f872 	bl	8000bbc <__aeabi_dcmpun>
 8009ad8:	b160      	cbz	r0, 8009af4 <pow+0xdc>
 8009ada:	f7fe ffc5 	bl	8008a68 <__errno>
 8009ade:	2321      	movs	r3, #33	; 0x21
 8009ae0:	6003      	str	r3, [r0, #0]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	4610      	mov	r0, r2
 8009ae8:	4619      	mov	r1, r3
 8009aea:	f7f6 fef7 	bl	80008dc <__aeabi_ddiv>
 8009aee:	4604      	mov	r4, r0
 8009af0:	460d      	mov	r5, r1
 8009af2:	e7b6      	b.n	8009a62 <pow+0x4a>
 8009af4:	f7fe ffb8 	bl	8008a68 <__errno>
 8009af8:	2322      	movs	r3, #34	; 0x22
 8009afa:	6003      	str	r3, [r0, #0]
 8009afc:	2200      	movs	r2, #0
 8009afe:	2300      	movs	r3, #0
 8009b00:	4640      	mov	r0, r8
 8009b02:	4649      	mov	r1, r9
 8009b04:	f7f7 f832 	bl	8000b6c <__aeabi_dcmplt>
 8009b08:	2400      	movs	r4, #0
 8009b0a:	b158      	cbz	r0, 8009b24 <pow+0x10c>
 8009b0c:	ec47 6b10 	vmov	d0, r6, r7
 8009b10:	f000 fe26 	bl	800a760 <rint>
 8009b14:	4632      	mov	r2, r6
 8009b16:	ec51 0b10 	vmov	r0, r1, d0
 8009b1a:	463b      	mov	r3, r7
 8009b1c:	f7f7 f81c 	bl	8000b58 <__aeabi_dcmpeq>
 8009b20:	2800      	cmp	r0, #0
 8009b22:	d0c2      	beq.n	8009aaa <pow+0x92>
 8009b24:	4d11      	ldr	r5, [pc, #68]	; (8009b6c <pow+0x154>)
 8009b26:	e79c      	b.n	8009a62 <pow+0x4a>
 8009b28:	2200      	movs	r2, #0
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	4629      	mov	r1, r5
 8009b30:	f7f7 f812 	bl	8000b58 <__aeabi_dcmpeq>
 8009b34:	2800      	cmp	r0, #0
 8009b36:	d094      	beq.n	8009a62 <pow+0x4a>
 8009b38:	ec49 8b10 	vmov	d0, r8, r9
 8009b3c:	f000 fdfb 	bl	800a736 <finite>
 8009b40:	2800      	cmp	r0, #0
 8009b42:	d08e      	beq.n	8009a62 <pow+0x4a>
 8009b44:	ec47 6b10 	vmov	d0, r6, r7
 8009b48:	f000 fdf5 	bl	800a736 <finite>
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	d088      	beq.n	8009a62 <pow+0x4a>
 8009b50:	f7fe ff8a 	bl	8008a68 <__errno>
 8009b54:	2322      	movs	r3, #34	; 0x22
 8009b56:	6003      	str	r3, [r0, #0]
 8009b58:	2400      	movs	r4, #0
 8009b5a:	2500      	movs	r5, #0
 8009b5c:	e781      	b.n	8009a62 <pow+0x4a>
 8009b5e:	4d04      	ldr	r5, [pc, #16]	; (8009b70 <pow+0x158>)
 8009b60:	2400      	movs	r4, #0
 8009b62:	e77e      	b.n	8009a62 <pow+0x4a>
 8009b64:	20000078 	.word	0x20000078
 8009b68:	fff00000 	.word	0xfff00000
 8009b6c:	7ff00000 	.word	0x7ff00000
 8009b70:	3ff00000 	.word	0x3ff00000
 8009b74:	00000000 	.word	0x00000000

08009b78 <__ieee754_pow>:
 8009b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b7c:	ed2d 8b06 	vpush	{d8-d10}
 8009b80:	b08d      	sub	sp, #52	; 0x34
 8009b82:	ed8d 1b02 	vstr	d1, [sp, #8]
 8009b86:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8009b8a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8009b8e:	ea56 0100 	orrs.w	r1, r6, r0
 8009b92:	ec53 2b10 	vmov	r2, r3, d0
 8009b96:	f000 84d1 	beq.w	800a53c <__ieee754_pow+0x9c4>
 8009b9a:	497f      	ldr	r1, [pc, #508]	; (8009d98 <__ieee754_pow+0x220>)
 8009b9c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8009ba0:	428c      	cmp	r4, r1
 8009ba2:	ee10 8a10 	vmov	r8, s0
 8009ba6:	4699      	mov	r9, r3
 8009ba8:	dc09      	bgt.n	8009bbe <__ieee754_pow+0x46>
 8009baa:	d103      	bne.n	8009bb4 <__ieee754_pow+0x3c>
 8009bac:	b97a      	cbnz	r2, 8009bce <__ieee754_pow+0x56>
 8009bae:	42a6      	cmp	r6, r4
 8009bb0:	dd02      	ble.n	8009bb8 <__ieee754_pow+0x40>
 8009bb2:	e00c      	b.n	8009bce <__ieee754_pow+0x56>
 8009bb4:	428e      	cmp	r6, r1
 8009bb6:	dc02      	bgt.n	8009bbe <__ieee754_pow+0x46>
 8009bb8:	428e      	cmp	r6, r1
 8009bba:	d110      	bne.n	8009bde <__ieee754_pow+0x66>
 8009bbc:	b178      	cbz	r0, 8009bde <__ieee754_pow+0x66>
 8009bbe:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009bc2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009bc6:	ea54 0308 	orrs.w	r3, r4, r8
 8009bca:	f000 84b7 	beq.w	800a53c <__ieee754_pow+0x9c4>
 8009bce:	4873      	ldr	r0, [pc, #460]	; (8009d9c <__ieee754_pow+0x224>)
 8009bd0:	b00d      	add	sp, #52	; 0x34
 8009bd2:	ecbd 8b06 	vpop	{d8-d10}
 8009bd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bda:	f000 bdb9 	b.w	800a750 <nan>
 8009bde:	f1b9 0f00 	cmp.w	r9, #0
 8009be2:	da36      	bge.n	8009c52 <__ieee754_pow+0xda>
 8009be4:	496e      	ldr	r1, [pc, #440]	; (8009da0 <__ieee754_pow+0x228>)
 8009be6:	428e      	cmp	r6, r1
 8009be8:	dc51      	bgt.n	8009c8e <__ieee754_pow+0x116>
 8009bea:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8009bee:	428e      	cmp	r6, r1
 8009bf0:	f340 84af 	ble.w	800a552 <__ieee754_pow+0x9da>
 8009bf4:	1531      	asrs	r1, r6, #20
 8009bf6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009bfa:	2914      	cmp	r1, #20
 8009bfc:	dd0f      	ble.n	8009c1e <__ieee754_pow+0xa6>
 8009bfe:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8009c02:	fa20 fc01 	lsr.w	ip, r0, r1
 8009c06:	fa0c f101 	lsl.w	r1, ip, r1
 8009c0a:	4281      	cmp	r1, r0
 8009c0c:	f040 84a1 	bne.w	800a552 <__ieee754_pow+0x9da>
 8009c10:	f00c 0c01 	and.w	ip, ip, #1
 8009c14:	f1cc 0102 	rsb	r1, ip, #2
 8009c18:	9100      	str	r1, [sp, #0]
 8009c1a:	b180      	cbz	r0, 8009c3e <__ieee754_pow+0xc6>
 8009c1c:	e059      	b.n	8009cd2 <__ieee754_pow+0x15a>
 8009c1e:	2800      	cmp	r0, #0
 8009c20:	d155      	bne.n	8009cce <__ieee754_pow+0x156>
 8009c22:	f1c1 0114 	rsb	r1, r1, #20
 8009c26:	fa46 fc01 	asr.w	ip, r6, r1
 8009c2a:	fa0c f101 	lsl.w	r1, ip, r1
 8009c2e:	42b1      	cmp	r1, r6
 8009c30:	f040 848c 	bne.w	800a54c <__ieee754_pow+0x9d4>
 8009c34:	f00c 0c01 	and.w	ip, ip, #1
 8009c38:	f1cc 0102 	rsb	r1, ip, #2
 8009c3c:	9100      	str	r1, [sp, #0]
 8009c3e:	4959      	ldr	r1, [pc, #356]	; (8009da4 <__ieee754_pow+0x22c>)
 8009c40:	428e      	cmp	r6, r1
 8009c42:	d12d      	bne.n	8009ca0 <__ieee754_pow+0x128>
 8009c44:	2f00      	cmp	r7, #0
 8009c46:	da79      	bge.n	8009d3c <__ieee754_pow+0x1c4>
 8009c48:	4956      	ldr	r1, [pc, #344]	; (8009da4 <__ieee754_pow+0x22c>)
 8009c4a:	2000      	movs	r0, #0
 8009c4c:	f7f6 fe46 	bl	80008dc <__aeabi_ddiv>
 8009c50:	e016      	b.n	8009c80 <__ieee754_pow+0x108>
 8009c52:	2100      	movs	r1, #0
 8009c54:	9100      	str	r1, [sp, #0]
 8009c56:	2800      	cmp	r0, #0
 8009c58:	d13b      	bne.n	8009cd2 <__ieee754_pow+0x15a>
 8009c5a:	494f      	ldr	r1, [pc, #316]	; (8009d98 <__ieee754_pow+0x220>)
 8009c5c:	428e      	cmp	r6, r1
 8009c5e:	d1ee      	bne.n	8009c3e <__ieee754_pow+0xc6>
 8009c60:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009c64:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009c68:	ea53 0308 	orrs.w	r3, r3, r8
 8009c6c:	f000 8466 	beq.w	800a53c <__ieee754_pow+0x9c4>
 8009c70:	4b4d      	ldr	r3, [pc, #308]	; (8009da8 <__ieee754_pow+0x230>)
 8009c72:	429c      	cmp	r4, r3
 8009c74:	dd0d      	ble.n	8009c92 <__ieee754_pow+0x11a>
 8009c76:	2f00      	cmp	r7, #0
 8009c78:	f280 8464 	bge.w	800a544 <__ieee754_pow+0x9cc>
 8009c7c:	2000      	movs	r0, #0
 8009c7e:	2100      	movs	r1, #0
 8009c80:	ec41 0b10 	vmov	d0, r0, r1
 8009c84:	b00d      	add	sp, #52	; 0x34
 8009c86:	ecbd 8b06 	vpop	{d8-d10}
 8009c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c8e:	2102      	movs	r1, #2
 8009c90:	e7e0      	b.n	8009c54 <__ieee754_pow+0xdc>
 8009c92:	2f00      	cmp	r7, #0
 8009c94:	daf2      	bge.n	8009c7c <__ieee754_pow+0x104>
 8009c96:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8009c9a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009c9e:	e7ef      	b.n	8009c80 <__ieee754_pow+0x108>
 8009ca0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8009ca4:	d104      	bne.n	8009cb0 <__ieee754_pow+0x138>
 8009ca6:	4610      	mov	r0, r2
 8009ca8:	4619      	mov	r1, r3
 8009caa:	f7f6 fced 	bl	8000688 <__aeabi_dmul>
 8009cae:	e7e7      	b.n	8009c80 <__ieee754_pow+0x108>
 8009cb0:	493e      	ldr	r1, [pc, #248]	; (8009dac <__ieee754_pow+0x234>)
 8009cb2:	428f      	cmp	r7, r1
 8009cb4:	d10d      	bne.n	8009cd2 <__ieee754_pow+0x15a>
 8009cb6:	f1b9 0f00 	cmp.w	r9, #0
 8009cba:	db0a      	blt.n	8009cd2 <__ieee754_pow+0x15a>
 8009cbc:	ec43 2b10 	vmov	d0, r2, r3
 8009cc0:	b00d      	add	sp, #52	; 0x34
 8009cc2:	ecbd 8b06 	vpop	{d8-d10}
 8009cc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cca:	f000 bc77 	b.w	800a5bc <__ieee754_sqrt>
 8009cce:	2100      	movs	r1, #0
 8009cd0:	9100      	str	r1, [sp, #0]
 8009cd2:	ec43 2b10 	vmov	d0, r2, r3
 8009cd6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009cda:	f000 fd23 	bl	800a724 <fabs>
 8009cde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ce2:	ec51 0b10 	vmov	r0, r1, d0
 8009ce6:	f1b8 0f00 	cmp.w	r8, #0
 8009cea:	d12a      	bne.n	8009d42 <__ieee754_pow+0x1ca>
 8009cec:	b12c      	cbz	r4, 8009cfa <__ieee754_pow+0x182>
 8009cee:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8009da4 <__ieee754_pow+0x22c>
 8009cf2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8009cf6:	45e6      	cmp	lr, ip
 8009cf8:	d123      	bne.n	8009d42 <__ieee754_pow+0x1ca>
 8009cfa:	2f00      	cmp	r7, #0
 8009cfc:	da05      	bge.n	8009d0a <__ieee754_pow+0x192>
 8009cfe:	4602      	mov	r2, r0
 8009d00:	460b      	mov	r3, r1
 8009d02:	2000      	movs	r0, #0
 8009d04:	4927      	ldr	r1, [pc, #156]	; (8009da4 <__ieee754_pow+0x22c>)
 8009d06:	f7f6 fde9 	bl	80008dc <__aeabi_ddiv>
 8009d0a:	f1b9 0f00 	cmp.w	r9, #0
 8009d0e:	dab7      	bge.n	8009c80 <__ieee754_pow+0x108>
 8009d10:	9b00      	ldr	r3, [sp, #0]
 8009d12:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009d16:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009d1a:	4323      	orrs	r3, r4
 8009d1c:	d108      	bne.n	8009d30 <__ieee754_pow+0x1b8>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	460b      	mov	r3, r1
 8009d22:	4610      	mov	r0, r2
 8009d24:	4619      	mov	r1, r3
 8009d26:	f7f6 faf7 	bl	8000318 <__aeabi_dsub>
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	e78d      	b.n	8009c4c <__ieee754_pow+0xd4>
 8009d30:	9b00      	ldr	r3, [sp, #0]
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d1a4      	bne.n	8009c80 <__ieee754_pow+0x108>
 8009d36:	4602      	mov	r2, r0
 8009d38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d3c:	4610      	mov	r0, r2
 8009d3e:	4619      	mov	r1, r3
 8009d40:	e79e      	b.n	8009c80 <__ieee754_pow+0x108>
 8009d42:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8009d46:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 8009d4a:	950a      	str	r5, [sp, #40]	; 0x28
 8009d4c:	9d00      	ldr	r5, [sp, #0]
 8009d4e:	46ac      	mov	ip, r5
 8009d50:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009d52:	ea5c 0505 	orrs.w	r5, ip, r5
 8009d56:	d0e4      	beq.n	8009d22 <__ieee754_pow+0x1aa>
 8009d58:	4b15      	ldr	r3, [pc, #84]	; (8009db0 <__ieee754_pow+0x238>)
 8009d5a:	429e      	cmp	r6, r3
 8009d5c:	f340 80fc 	ble.w	8009f58 <__ieee754_pow+0x3e0>
 8009d60:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009d64:	429e      	cmp	r6, r3
 8009d66:	4b10      	ldr	r3, [pc, #64]	; (8009da8 <__ieee754_pow+0x230>)
 8009d68:	dd07      	ble.n	8009d7a <__ieee754_pow+0x202>
 8009d6a:	429c      	cmp	r4, r3
 8009d6c:	dc0a      	bgt.n	8009d84 <__ieee754_pow+0x20c>
 8009d6e:	2f00      	cmp	r7, #0
 8009d70:	da84      	bge.n	8009c7c <__ieee754_pow+0x104>
 8009d72:	a307      	add	r3, pc, #28	; (adr r3, 8009d90 <__ieee754_pow+0x218>)
 8009d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d78:	e795      	b.n	8009ca6 <__ieee754_pow+0x12e>
 8009d7a:	429c      	cmp	r4, r3
 8009d7c:	dbf7      	blt.n	8009d6e <__ieee754_pow+0x1f6>
 8009d7e:	4b09      	ldr	r3, [pc, #36]	; (8009da4 <__ieee754_pow+0x22c>)
 8009d80:	429c      	cmp	r4, r3
 8009d82:	dd17      	ble.n	8009db4 <__ieee754_pow+0x23c>
 8009d84:	2f00      	cmp	r7, #0
 8009d86:	dcf4      	bgt.n	8009d72 <__ieee754_pow+0x1fa>
 8009d88:	e778      	b.n	8009c7c <__ieee754_pow+0x104>
 8009d8a:	bf00      	nop
 8009d8c:	f3af 8000 	nop.w
 8009d90:	8800759c 	.word	0x8800759c
 8009d94:	7e37e43c 	.word	0x7e37e43c
 8009d98:	7ff00000 	.word	0x7ff00000
 8009d9c:	0800ab7d 	.word	0x0800ab7d
 8009da0:	433fffff 	.word	0x433fffff
 8009da4:	3ff00000 	.word	0x3ff00000
 8009da8:	3fefffff 	.word	0x3fefffff
 8009dac:	3fe00000 	.word	0x3fe00000
 8009db0:	41e00000 	.word	0x41e00000
 8009db4:	4b64      	ldr	r3, [pc, #400]	; (8009f48 <__ieee754_pow+0x3d0>)
 8009db6:	2200      	movs	r2, #0
 8009db8:	f7f6 faae 	bl	8000318 <__aeabi_dsub>
 8009dbc:	a356      	add	r3, pc, #344	; (adr r3, 8009f18 <__ieee754_pow+0x3a0>)
 8009dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc2:	4604      	mov	r4, r0
 8009dc4:	460d      	mov	r5, r1
 8009dc6:	f7f6 fc5f 	bl	8000688 <__aeabi_dmul>
 8009dca:	a355      	add	r3, pc, #340	; (adr r3, 8009f20 <__ieee754_pow+0x3a8>)
 8009dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd0:	4606      	mov	r6, r0
 8009dd2:	460f      	mov	r7, r1
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	4629      	mov	r1, r5
 8009dd8:	f7f6 fc56 	bl	8000688 <__aeabi_dmul>
 8009ddc:	4b5b      	ldr	r3, [pc, #364]	; (8009f4c <__ieee754_pow+0x3d4>)
 8009dde:	4682      	mov	sl, r0
 8009de0:	468b      	mov	fp, r1
 8009de2:	2200      	movs	r2, #0
 8009de4:	4620      	mov	r0, r4
 8009de6:	4629      	mov	r1, r5
 8009de8:	f7f6 fc4e 	bl	8000688 <__aeabi_dmul>
 8009dec:	4602      	mov	r2, r0
 8009dee:	460b      	mov	r3, r1
 8009df0:	a14d      	add	r1, pc, #308	; (adr r1, 8009f28 <__ieee754_pow+0x3b0>)
 8009df2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009df6:	f7f6 fa8f 	bl	8000318 <__aeabi_dsub>
 8009dfa:	4622      	mov	r2, r4
 8009dfc:	462b      	mov	r3, r5
 8009dfe:	f7f6 fc43 	bl	8000688 <__aeabi_dmul>
 8009e02:	4602      	mov	r2, r0
 8009e04:	460b      	mov	r3, r1
 8009e06:	2000      	movs	r0, #0
 8009e08:	4951      	ldr	r1, [pc, #324]	; (8009f50 <__ieee754_pow+0x3d8>)
 8009e0a:	f7f6 fa85 	bl	8000318 <__aeabi_dsub>
 8009e0e:	4622      	mov	r2, r4
 8009e10:	4680      	mov	r8, r0
 8009e12:	4689      	mov	r9, r1
 8009e14:	462b      	mov	r3, r5
 8009e16:	4620      	mov	r0, r4
 8009e18:	4629      	mov	r1, r5
 8009e1a:	f7f6 fc35 	bl	8000688 <__aeabi_dmul>
 8009e1e:	4602      	mov	r2, r0
 8009e20:	460b      	mov	r3, r1
 8009e22:	4640      	mov	r0, r8
 8009e24:	4649      	mov	r1, r9
 8009e26:	f7f6 fc2f 	bl	8000688 <__aeabi_dmul>
 8009e2a:	a341      	add	r3, pc, #260	; (adr r3, 8009f30 <__ieee754_pow+0x3b8>)
 8009e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e30:	f7f6 fc2a 	bl	8000688 <__aeabi_dmul>
 8009e34:	4602      	mov	r2, r0
 8009e36:	460b      	mov	r3, r1
 8009e38:	4650      	mov	r0, sl
 8009e3a:	4659      	mov	r1, fp
 8009e3c:	f7f6 fa6c 	bl	8000318 <__aeabi_dsub>
 8009e40:	4602      	mov	r2, r0
 8009e42:	460b      	mov	r3, r1
 8009e44:	4680      	mov	r8, r0
 8009e46:	4689      	mov	r9, r1
 8009e48:	4630      	mov	r0, r6
 8009e4a:	4639      	mov	r1, r7
 8009e4c:	f7f6 fa66 	bl	800031c <__adddf3>
 8009e50:	2400      	movs	r4, #0
 8009e52:	4632      	mov	r2, r6
 8009e54:	463b      	mov	r3, r7
 8009e56:	4620      	mov	r0, r4
 8009e58:	460d      	mov	r5, r1
 8009e5a:	f7f6 fa5d 	bl	8000318 <__aeabi_dsub>
 8009e5e:	4602      	mov	r2, r0
 8009e60:	460b      	mov	r3, r1
 8009e62:	4640      	mov	r0, r8
 8009e64:	4649      	mov	r1, r9
 8009e66:	f7f6 fa57 	bl	8000318 <__aeabi_dsub>
 8009e6a:	9b00      	ldr	r3, [sp, #0]
 8009e6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e6e:	3b01      	subs	r3, #1
 8009e70:	4313      	orrs	r3, r2
 8009e72:	4682      	mov	sl, r0
 8009e74:	468b      	mov	fp, r1
 8009e76:	f040 81f1 	bne.w	800a25c <__ieee754_pow+0x6e4>
 8009e7a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8009f38 <__ieee754_pow+0x3c0>
 8009e7e:	eeb0 8a47 	vmov.f32	s16, s14
 8009e82:	eef0 8a67 	vmov.f32	s17, s15
 8009e86:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009e8a:	2600      	movs	r6, #0
 8009e8c:	4632      	mov	r2, r6
 8009e8e:	463b      	mov	r3, r7
 8009e90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e94:	f7f6 fa40 	bl	8000318 <__aeabi_dsub>
 8009e98:	4622      	mov	r2, r4
 8009e9a:	462b      	mov	r3, r5
 8009e9c:	f7f6 fbf4 	bl	8000688 <__aeabi_dmul>
 8009ea0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ea4:	4680      	mov	r8, r0
 8009ea6:	4689      	mov	r9, r1
 8009ea8:	4650      	mov	r0, sl
 8009eaa:	4659      	mov	r1, fp
 8009eac:	f7f6 fbec 	bl	8000688 <__aeabi_dmul>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	460b      	mov	r3, r1
 8009eb4:	4640      	mov	r0, r8
 8009eb6:	4649      	mov	r1, r9
 8009eb8:	f7f6 fa30 	bl	800031c <__adddf3>
 8009ebc:	4632      	mov	r2, r6
 8009ebe:	463b      	mov	r3, r7
 8009ec0:	4680      	mov	r8, r0
 8009ec2:	4689      	mov	r9, r1
 8009ec4:	4620      	mov	r0, r4
 8009ec6:	4629      	mov	r1, r5
 8009ec8:	f7f6 fbde 	bl	8000688 <__aeabi_dmul>
 8009ecc:	460b      	mov	r3, r1
 8009ece:	4604      	mov	r4, r0
 8009ed0:	460d      	mov	r5, r1
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	4649      	mov	r1, r9
 8009ed6:	4640      	mov	r0, r8
 8009ed8:	f7f6 fa20 	bl	800031c <__adddf3>
 8009edc:	4b1d      	ldr	r3, [pc, #116]	; (8009f54 <__ieee754_pow+0x3dc>)
 8009ede:	4299      	cmp	r1, r3
 8009ee0:	ec45 4b19 	vmov	d9, r4, r5
 8009ee4:	4606      	mov	r6, r0
 8009ee6:	460f      	mov	r7, r1
 8009ee8:	468b      	mov	fp, r1
 8009eea:	f340 82fe 	ble.w	800a4ea <__ieee754_pow+0x972>
 8009eee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009ef2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009ef6:	4303      	orrs	r3, r0
 8009ef8:	f000 81f0 	beq.w	800a2dc <__ieee754_pow+0x764>
 8009efc:	a310      	add	r3, pc, #64	; (adr r3, 8009f40 <__ieee754_pow+0x3c8>)
 8009efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f02:	ec51 0b18 	vmov	r0, r1, d8
 8009f06:	f7f6 fbbf 	bl	8000688 <__aeabi_dmul>
 8009f0a:	a30d      	add	r3, pc, #52	; (adr r3, 8009f40 <__ieee754_pow+0x3c8>)
 8009f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f10:	e6cb      	b.n	8009caa <__ieee754_pow+0x132>
 8009f12:	bf00      	nop
 8009f14:	f3af 8000 	nop.w
 8009f18:	60000000 	.word	0x60000000
 8009f1c:	3ff71547 	.word	0x3ff71547
 8009f20:	f85ddf44 	.word	0xf85ddf44
 8009f24:	3e54ae0b 	.word	0x3e54ae0b
 8009f28:	55555555 	.word	0x55555555
 8009f2c:	3fd55555 	.word	0x3fd55555
 8009f30:	652b82fe 	.word	0x652b82fe
 8009f34:	3ff71547 	.word	0x3ff71547
 8009f38:	00000000 	.word	0x00000000
 8009f3c:	bff00000 	.word	0xbff00000
 8009f40:	8800759c 	.word	0x8800759c
 8009f44:	7e37e43c 	.word	0x7e37e43c
 8009f48:	3ff00000 	.word	0x3ff00000
 8009f4c:	3fd00000 	.word	0x3fd00000
 8009f50:	3fe00000 	.word	0x3fe00000
 8009f54:	408fffff 	.word	0x408fffff
 8009f58:	4bd7      	ldr	r3, [pc, #860]	; (800a2b8 <__ieee754_pow+0x740>)
 8009f5a:	ea03 0309 	and.w	r3, r3, r9
 8009f5e:	2200      	movs	r2, #0
 8009f60:	b92b      	cbnz	r3, 8009f6e <__ieee754_pow+0x3f6>
 8009f62:	4bd6      	ldr	r3, [pc, #856]	; (800a2bc <__ieee754_pow+0x744>)
 8009f64:	f7f6 fb90 	bl	8000688 <__aeabi_dmul>
 8009f68:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009f6c:	460c      	mov	r4, r1
 8009f6e:	1523      	asrs	r3, r4, #20
 8009f70:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009f74:	4413      	add	r3, r2
 8009f76:	9309      	str	r3, [sp, #36]	; 0x24
 8009f78:	4bd1      	ldr	r3, [pc, #836]	; (800a2c0 <__ieee754_pow+0x748>)
 8009f7a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009f7e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009f82:	429c      	cmp	r4, r3
 8009f84:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009f88:	dd08      	ble.n	8009f9c <__ieee754_pow+0x424>
 8009f8a:	4bce      	ldr	r3, [pc, #824]	; (800a2c4 <__ieee754_pow+0x74c>)
 8009f8c:	429c      	cmp	r4, r3
 8009f8e:	f340 8163 	ble.w	800a258 <__ieee754_pow+0x6e0>
 8009f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f94:	3301      	adds	r3, #1
 8009f96:	9309      	str	r3, [sp, #36]	; 0x24
 8009f98:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009f9c:	2400      	movs	r4, #0
 8009f9e:	00e3      	lsls	r3, r4, #3
 8009fa0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009fa2:	4bc9      	ldr	r3, [pc, #804]	; (800a2c8 <__ieee754_pow+0x750>)
 8009fa4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009fa8:	ed93 7b00 	vldr	d7, [r3]
 8009fac:	4629      	mov	r1, r5
 8009fae:	ec53 2b17 	vmov	r2, r3, d7
 8009fb2:	eeb0 8a47 	vmov.f32	s16, s14
 8009fb6:	eef0 8a67 	vmov.f32	s17, s15
 8009fba:	4682      	mov	sl, r0
 8009fbc:	f7f6 f9ac 	bl	8000318 <__aeabi_dsub>
 8009fc0:	4652      	mov	r2, sl
 8009fc2:	4606      	mov	r6, r0
 8009fc4:	460f      	mov	r7, r1
 8009fc6:	462b      	mov	r3, r5
 8009fc8:	ec51 0b18 	vmov	r0, r1, d8
 8009fcc:	f7f6 f9a6 	bl	800031c <__adddf3>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	460b      	mov	r3, r1
 8009fd4:	2000      	movs	r0, #0
 8009fd6:	49bd      	ldr	r1, [pc, #756]	; (800a2cc <__ieee754_pow+0x754>)
 8009fd8:	f7f6 fc80 	bl	80008dc <__aeabi_ddiv>
 8009fdc:	ec41 0b19 	vmov	d9, r0, r1
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	460b      	mov	r3, r1
 8009fe4:	4630      	mov	r0, r6
 8009fe6:	4639      	mov	r1, r7
 8009fe8:	f7f6 fb4e 	bl	8000688 <__aeabi_dmul>
 8009fec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009ff0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ff4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	9304      	str	r3, [sp, #16]
 8009ffc:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a000:	46ab      	mov	fp, r5
 800a002:	106d      	asrs	r5, r5, #1
 800a004:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a008:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a00c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a010:	2200      	movs	r2, #0
 800a012:	4640      	mov	r0, r8
 800a014:	4649      	mov	r1, r9
 800a016:	4614      	mov	r4, r2
 800a018:	461d      	mov	r5, r3
 800a01a:	f7f6 fb35 	bl	8000688 <__aeabi_dmul>
 800a01e:	4602      	mov	r2, r0
 800a020:	460b      	mov	r3, r1
 800a022:	4630      	mov	r0, r6
 800a024:	4639      	mov	r1, r7
 800a026:	f7f6 f977 	bl	8000318 <__aeabi_dsub>
 800a02a:	ec53 2b18 	vmov	r2, r3, d8
 800a02e:	4606      	mov	r6, r0
 800a030:	460f      	mov	r7, r1
 800a032:	4620      	mov	r0, r4
 800a034:	4629      	mov	r1, r5
 800a036:	f7f6 f96f 	bl	8000318 <__aeabi_dsub>
 800a03a:	4602      	mov	r2, r0
 800a03c:	460b      	mov	r3, r1
 800a03e:	4650      	mov	r0, sl
 800a040:	4659      	mov	r1, fp
 800a042:	f7f6 f969 	bl	8000318 <__aeabi_dsub>
 800a046:	4642      	mov	r2, r8
 800a048:	464b      	mov	r3, r9
 800a04a:	f7f6 fb1d 	bl	8000688 <__aeabi_dmul>
 800a04e:	4602      	mov	r2, r0
 800a050:	460b      	mov	r3, r1
 800a052:	4630      	mov	r0, r6
 800a054:	4639      	mov	r1, r7
 800a056:	f7f6 f95f 	bl	8000318 <__aeabi_dsub>
 800a05a:	ec53 2b19 	vmov	r2, r3, d9
 800a05e:	f7f6 fb13 	bl	8000688 <__aeabi_dmul>
 800a062:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a066:	ec41 0b18 	vmov	d8, r0, r1
 800a06a:	4610      	mov	r0, r2
 800a06c:	4619      	mov	r1, r3
 800a06e:	f7f6 fb0b 	bl	8000688 <__aeabi_dmul>
 800a072:	a37d      	add	r3, pc, #500	; (adr r3, 800a268 <__ieee754_pow+0x6f0>)
 800a074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a078:	4604      	mov	r4, r0
 800a07a:	460d      	mov	r5, r1
 800a07c:	f7f6 fb04 	bl	8000688 <__aeabi_dmul>
 800a080:	a37b      	add	r3, pc, #492	; (adr r3, 800a270 <__ieee754_pow+0x6f8>)
 800a082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a086:	f7f6 f949 	bl	800031c <__adddf3>
 800a08a:	4622      	mov	r2, r4
 800a08c:	462b      	mov	r3, r5
 800a08e:	f7f6 fafb 	bl	8000688 <__aeabi_dmul>
 800a092:	a379      	add	r3, pc, #484	; (adr r3, 800a278 <__ieee754_pow+0x700>)
 800a094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a098:	f7f6 f940 	bl	800031c <__adddf3>
 800a09c:	4622      	mov	r2, r4
 800a09e:	462b      	mov	r3, r5
 800a0a0:	f7f6 faf2 	bl	8000688 <__aeabi_dmul>
 800a0a4:	a376      	add	r3, pc, #472	; (adr r3, 800a280 <__ieee754_pow+0x708>)
 800a0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0aa:	f7f6 f937 	bl	800031c <__adddf3>
 800a0ae:	4622      	mov	r2, r4
 800a0b0:	462b      	mov	r3, r5
 800a0b2:	f7f6 fae9 	bl	8000688 <__aeabi_dmul>
 800a0b6:	a374      	add	r3, pc, #464	; (adr r3, 800a288 <__ieee754_pow+0x710>)
 800a0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0bc:	f7f6 f92e 	bl	800031c <__adddf3>
 800a0c0:	4622      	mov	r2, r4
 800a0c2:	462b      	mov	r3, r5
 800a0c4:	f7f6 fae0 	bl	8000688 <__aeabi_dmul>
 800a0c8:	a371      	add	r3, pc, #452	; (adr r3, 800a290 <__ieee754_pow+0x718>)
 800a0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ce:	f7f6 f925 	bl	800031c <__adddf3>
 800a0d2:	4622      	mov	r2, r4
 800a0d4:	4606      	mov	r6, r0
 800a0d6:	460f      	mov	r7, r1
 800a0d8:	462b      	mov	r3, r5
 800a0da:	4620      	mov	r0, r4
 800a0dc:	4629      	mov	r1, r5
 800a0de:	f7f6 fad3 	bl	8000688 <__aeabi_dmul>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	4630      	mov	r0, r6
 800a0e8:	4639      	mov	r1, r7
 800a0ea:	f7f6 facd 	bl	8000688 <__aeabi_dmul>
 800a0ee:	4642      	mov	r2, r8
 800a0f0:	4604      	mov	r4, r0
 800a0f2:	460d      	mov	r5, r1
 800a0f4:	464b      	mov	r3, r9
 800a0f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0fa:	f7f6 f90f 	bl	800031c <__adddf3>
 800a0fe:	ec53 2b18 	vmov	r2, r3, d8
 800a102:	f7f6 fac1 	bl	8000688 <__aeabi_dmul>
 800a106:	4622      	mov	r2, r4
 800a108:	462b      	mov	r3, r5
 800a10a:	f7f6 f907 	bl	800031c <__adddf3>
 800a10e:	4642      	mov	r2, r8
 800a110:	4682      	mov	sl, r0
 800a112:	468b      	mov	fp, r1
 800a114:	464b      	mov	r3, r9
 800a116:	4640      	mov	r0, r8
 800a118:	4649      	mov	r1, r9
 800a11a:	f7f6 fab5 	bl	8000688 <__aeabi_dmul>
 800a11e:	4b6c      	ldr	r3, [pc, #432]	; (800a2d0 <__ieee754_pow+0x758>)
 800a120:	2200      	movs	r2, #0
 800a122:	4606      	mov	r6, r0
 800a124:	460f      	mov	r7, r1
 800a126:	f7f6 f8f9 	bl	800031c <__adddf3>
 800a12a:	4652      	mov	r2, sl
 800a12c:	465b      	mov	r3, fp
 800a12e:	f7f6 f8f5 	bl	800031c <__adddf3>
 800a132:	9c04      	ldr	r4, [sp, #16]
 800a134:	460d      	mov	r5, r1
 800a136:	4622      	mov	r2, r4
 800a138:	460b      	mov	r3, r1
 800a13a:	4640      	mov	r0, r8
 800a13c:	4649      	mov	r1, r9
 800a13e:	f7f6 faa3 	bl	8000688 <__aeabi_dmul>
 800a142:	4b63      	ldr	r3, [pc, #396]	; (800a2d0 <__ieee754_pow+0x758>)
 800a144:	4680      	mov	r8, r0
 800a146:	4689      	mov	r9, r1
 800a148:	2200      	movs	r2, #0
 800a14a:	4620      	mov	r0, r4
 800a14c:	4629      	mov	r1, r5
 800a14e:	f7f6 f8e3 	bl	8000318 <__aeabi_dsub>
 800a152:	4632      	mov	r2, r6
 800a154:	463b      	mov	r3, r7
 800a156:	f7f6 f8df 	bl	8000318 <__aeabi_dsub>
 800a15a:	4602      	mov	r2, r0
 800a15c:	460b      	mov	r3, r1
 800a15e:	4650      	mov	r0, sl
 800a160:	4659      	mov	r1, fp
 800a162:	f7f6 f8d9 	bl	8000318 <__aeabi_dsub>
 800a166:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a16a:	f7f6 fa8d 	bl	8000688 <__aeabi_dmul>
 800a16e:	4622      	mov	r2, r4
 800a170:	4606      	mov	r6, r0
 800a172:	460f      	mov	r7, r1
 800a174:	462b      	mov	r3, r5
 800a176:	ec51 0b18 	vmov	r0, r1, d8
 800a17a:	f7f6 fa85 	bl	8000688 <__aeabi_dmul>
 800a17e:	4602      	mov	r2, r0
 800a180:	460b      	mov	r3, r1
 800a182:	4630      	mov	r0, r6
 800a184:	4639      	mov	r1, r7
 800a186:	f7f6 f8c9 	bl	800031c <__adddf3>
 800a18a:	4606      	mov	r6, r0
 800a18c:	460f      	mov	r7, r1
 800a18e:	4602      	mov	r2, r0
 800a190:	460b      	mov	r3, r1
 800a192:	4640      	mov	r0, r8
 800a194:	4649      	mov	r1, r9
 800a196:	f7f6 f8c1 	bl	800031c <__adddf3>
 800a19a:	9c04      	ldr	r4, [sp, #16]
 800a19c:	a33e      	add	r3, pc, #248	; (adr r3, 800a298 <__ieee754_pow+0x720>)
 800a19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a2:	4620      	mov	r0, r4
 800a1a4:	460d      	mov	r5, r1
 800a1a6:	f7f6 fa6f 	bl	8000688 <__aeabi_dmul>
 800a1aa:	4642      	mov	r2, r8
 800a1ac:	ec41 0b18 	vmov	d8, r0, r1
 800a1b0:	464b      	mov	r3, r9
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	4629      	mov	r1, r5
 800a1b6:	f7f6 f8af 	bl	8000318 <__aeabi_dsub>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	460b      	mov	r3, r1
 800a1be:	4630      	mov	r0, r6
 800a1c0:	4639      	mov	r1, r7
 800a1c2:	f7f6 f8a9 	bl	8000318 <__aeabi_dsub>
 800a1c6:	a336      	add	r3, pc, #216	; (adr r3, 800a2a0 <__ieee754_pow+0x728>)
 800a1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1cc:	f7f6 fa5c 	bl	8000688 <__aeabi_dmul>
 800a1d0:	a335      	add	r3, pc, #212	; (adr r3, 800a2a8 <__ieee754_pow+0x730>)
 800a1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d6:	4606      	mov	r6, r0
 800a1d8:	460f      	mov	r7, r1
 800a1da:	4620      	mov	r0, r4
 800a1dc:	4629      	mov	r1, r5
 800a1de:	f7f6 fa53 	bl	8000688 <__aeabi_dmul>
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	4630      	mov	r0, r6
 800a1e8:	4639      	mov	r1, r7
 800a1ea:	f7f6 f897 	bl	800031c <__adddf3>
 800a1ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a1f0:	4b38      	ldr	r3, [pc, #224]	; (800a2d4 <__ieee754_pow+0x75c>)
 800a1f2:	4413      	add	r3, r2
 800a1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f8:	f7f6 f890 	bl	800031c <__adddf3>
 800a1fc:	4682      	mov	sl, r0
 800a1fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a200:	468b      	mov	fp, r1
 800a202:	f7f6 f9d7 	bl	80005b4 <__aeabi_i2d>
 800a206:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a208:	4b33      	ldr	r3, [pc, #204]	; (800a2d8 <__ieee754_pow+0x760>)
 800a20a:	4413      	add	r3, r2
 800a20c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a210:	4606      	mov	r6, r0
 800a212:	460f      	mov	r7, r1
 800a214:	4652      	mov	r2, sl
 800a216:	465b      	mov	r3, fp
 800a218:	ec51 0b18 	vmov	r0, r1, d8
 800a21c:	f7f6 f87e 	bl	800031c <__adddf3>
 800a220:	4642      	mov	r2, r8
 800a222:	464b      	mov	r3, r9
 800a224:	f7f6 f87a 	bl	800031c <__adddf3>
 800a228:	4632      	mov	r2, r6
 800a22a:	463b      	mov	r3, r7
 800a22c:	f7f6 f876 	bl	800031c <__adddf3>
 800a230:	9c04      	ldr	r4, [sp, #16]
 800a232:	4632      	mov	r2, r6
 800a234:	463b      	mov	r3, r7
 800a236:	4620      	mov	r0, r4
 800a238:	460d      	mov	r5, r1
 800a23a:	f7f6 f86d 	bl	8000318 <__aeabi_dsub>
 800a23e:	4642      	mov	r2, r8
 800a240:	464b      	mov	r3, r9
 800a242:	f7f6 f869 	bl	8000318 <__aeabi_dsub>
 800a246:	ec53 2b18 	vmov	r2, r3, d8
 800a24a:	f7f6 f865 	bl	8000318 <__aeabi_dsub>
 800a24e:	4602      	mov	r2, r0
 800a250:	460b      	mov	r3, r1
 800a252:	4650      	mov	r0, sl
 800a254:	4659      	mov	r1, fp
 800a256:	e606      	b.n	8009e66 <__ieee754_pow+0x2ee>
 800a258:	2401      	movs	r4, #1
 800a25a:	e6a0      	b.n	8009f9e <__ieee754_pow+0x426>
 800a25c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800a2b0 <__ieee754_pow+0x738>
 800a260:	e60d      	b.n	8009e7e <__ieee754_pow+0x306>
 800a262:	bf00      	nop
 800a264:	f3af 8000 	nop.w
 800a268:	4a454eef 	.word	0x4a454eef
 800a26c:	3fca7e28 	.word	0x3fca7e28
 800a270:	93c9db65 	.word	0x93c9db65
 800a274:	3fcd864a 	.word	0x3fcd864a
 800a278:	a91d4101 	.word	0xa91d4101
 800a27c:	3fd17460 	.word	0x3fd17460
 800a280:	518f264d 	.word	0x518f264d
 800a284:	3fd55555 	.word	0x3fd55555
 800a288:	db6fabff 	.word	0xdb6fabff
 800a28c:	3fdb6db6 	.word	0x3fdb6db6
 800a290:	33333303 	.word	0x33333303
 800a294:	3fe33333 	.word	0x3fe33333
 800a298:	e0000000 	.word	0xe0000000
 800a29c:	3feec709 	.word	0x3feec709
 800a2a0:	dc3a03fd 	.word	0xdc3a03fd
 800a2a4:	3feec709 	.word	0x3feec709
 800a2a8:	145b01f5 	.word	0x145b01f5
 800a2ac:	be3e2fe0 	.word	0xbe3e2fe0
 800a2b0:	00000000 	.word	0x00000000
 800a2b4:	3ff00000 	.word	0x3ff00000
 800a2b8:	7ff00000 	.word	0x7ff00000
 800a2bc:	43400000 	.word	0x43400000
 800a2c0:	0003988e 	.word	0x0003988e
 800a2c4:	000bb679 	.word	0x000bb679
 800a2c8:	0800ac18 	.word	0x0800ac18
 800a2cc:	3ff00000 	.word	0x3ff00000
 800a2d0:	40080000 	.word	0x40080000
 800a2d4:	0800ac38 	.word	0x0800ac38
 800a2d8:	0800ac28 	.word	0x0800ac28
 800a2dc:	a3b5      	add	r3, pc, #724	; (adr r3, 800a5b4 <__ieee754_pow+0xa3c>)
 800a2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e2:	4640      	mov	r0, r8
 800a2e4:	4649      	mov	r1, r9
 800a2e6:	f7f6 f819 	bl	800031c <__adddf3>
 800a2ea:	4622      	mov	r2, r4
 800a2ec:	ec41 0b1a 	vmov	d10, r0, r1
 800a2f0:	462b      	mov	r3, r5
 800a2f2:	4630      	mov	r0, r6
 800a2f4:	4639      	mov	r1, r7
 800a2f6:	f7f6 f80f 	bl	8000318 <__aeabi_dsub>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	ec51 0b1a 	vmov	r0, r1, d10
 800a302:	f7f6 fc51 	bl	8000ba8 <__aeabi_dcmpgt>
 800a306:	2800      	cmp	r0, #0
 800a308:	f47f adf8 	bne.w	8009efc <__ieee754_pow+0x384>
 800a30c:	4aa4      	ldr	r2, [pc, #656]	; (800a5a0 <__ieee754_pow+0xa28>)
 800a30e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a312:	4293      	cmp	r3, r2
 800a314:	f340 810b 	ble.w	800a52e <__ieee754_pow+0x9b6>
 800a318:	151b      	asrs	r3, r3, #20
 800a31a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a31e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a322:	fa4a f303 	asr.w	r3, sl, r3
 800a326:	445b      	add	r3, fp
 800a328:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a32c:	4e9d      	ldr	r6, [pc, #628]	; (800a5a4 <__ieee754_pow+0xa2c>)
 800a32e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a332:	4116      	asrs	r6, r2
 800a334:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a338:	2000      	movs	r0, #0
 800a33a:	ea23 0106 	bic.w	r1, r3, r6
 800a33e:	f1c2 0214 	rsb	r2, r2, #20
 800a342:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a346:	fa4a fa02 	asr.w	sl, sl, r2
 800a34a:	f1bb 0f00 	cmp.w	fp, #0
 800a34e:	4602      	mov	r2, r0
 800a350:	460b      	mov	r3, r1
 800a352:	4620      	mov	r0, r4
 800a354:	4629      	mov	r1, r5
 800a356:	bfb8      	it	lt
 800a358:	f1ca 0a00 	rsblt	sl, sl, #0
 800a35c:	f7f5 ffdc 	bl	8000318 <__aeabi_dsub>
 800a360:	ec41 0b19 	vmov	d9, r0, r1
 800a364:	4642      	mov	r2, r8
 800a366:	464b      	mov	r3, r9
 800a368:	ec51 0b19 	vmov	r0, r1, d9
 800a36c:	f7f5 ffd6 	bl	800031c <__adddf3>
 800a370:	2400      	movs	r4, #0
 800a372:	a379      	add	r3, pc, #484	; (adr r3, 800a558 <__ieee754_pow+0x9e0>)
 800a374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a378:	4620      	mov	r0, r4
 800a37a:	460d      	mov	r5, r1
 800a37c:	f7f6 f984 	bl	8000688 <__aeabi_dmul>
 800a380:	ec53 2b19 	vmov	r2, r3, d9
 800a384:	4606      	mov	r6, r0
 800a386:	460f      	mov	r7, r1
 800a388:	4620      	mov	r0, r4
 800a38a:	4629      	mov	r1, r5
 800a38c:	f7f5 ffc4 	bl	8000318 <__aeabi_dsub>
 800a390:	4602      	mov	r2, r0
 800a392:	460b      	mov	r3, r1
 800a394:	4640      	mov	r0, r8
 800a396:	4649      	mov	r1, r9
 800a398:	f7f5 ffbe 	bl	8000318 <__aeabi_dsub>
 800a39c:	a370      	add	r3, pc, #448	; (adr r3, 800a560 <__ieee754_pow+0x9e8>)
 800a39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a2:	f7f6 f971 	bl	8000688 <__aeabi_dmul>
 800a3a6:	a370      	add	r3, pc, #448	; (adr r3, 800a568 <__ieee754_pow+0x9f0>)
 800a3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ac:	4680      	mov	r8, r0
 800a3ae:	4689      	mov	r9, r1
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	4629      	mov	r1, r5
 800a3b4:	f7f6 f968 	bl	8000688 <__aeabi_dmul>
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	460b      	mov	r3, r1
 800a3bc:	4640      	mov	r0, r8
 800a3be:	4649      	mov	r1, r9
 800a3c0:	f7f5 ffac 	bl	800031c <__adddf3>
 800a3c4:	4604      	mov	r4, r0
 800a3c6:	460d      	mov	r5, r1
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	4630      	mov	r0, r6
 800a3ce:	4639      	mov	r1, r7
 800a3d0:	f7f5 ffa4 	bl	800031c <__adddf3>
 800a3d4:	4632      	mov	r2, r6
 800a3d6:	463b      	mov	r3, r7
 800a3d8:	4680      	mov	r8, r0
 800a3da:	4689      	mov	r9, r1
 800a3dc:	f7f5 ff9c 	bl	8000318 <__aeabi_dsub>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	4629      	mov	r1, r5
 800a3e8:	f7f5 ff96 	bl	8000318 <__aeabi_dsub>
 800a3ec:	4642      	mov	r2, r8
 800a3ee:	4606      	mov	r6, r0
 800a3f0:	460f      	mov	r7, r1
 800a3f2:	464b      	mov	r3, r9
 800a3f4:	4640      	mov	r0, r8
 800a3f6:	4649      	mov	r1, r9
 800a3f8:	f7f6 f946 	bl	8000688 <__aeabi_dmul>
 800a3fc:	a35c      	add	r3, pc, #368	; (adr r3, 800a570 <__ieee754_pow+0x9f8>)
 800a3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a402:	4604      	mov	r4, r0
 800a404:	460d      	mov	r5, r1
 800a406:	f7f6 f93f 	bl	8000688 <__aeabi_dmul>
 800a40a:	a35b      	add	r3, pc, #364	; (adr r3, 800a578 <__ieee754_pow+0xa00>)
 800a40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a410:	f7f5 ff82 	bl	8000318 <__aeabi_dsub>
 800a414:	4622      	mov	r2, r4
 800a416:	462b      	mov	r3, r5
 800a418:	f7f6 f936 	bl	8000688 <__aeabi_dmul>
 800a41c:	a358      	add	r3, pc, #352	; (adr r3, 800a580 <__ieee754_pow+0xa08>)
 800a41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a422:	f7f5 ff7b 	bl	800031c <__adddf3>
 800a426:	4622      	mov	r2, r4
 800a428:	462b      	mov	r3, r5
 800a42a:	f7f6 f92d 	bl	8000688 <__aeabi_dmul>
 800a42e:	a356      	add	r3, pc, #344	; (adr r3, 800a588 <__ieee754_pow+0xa10>)
 800a430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a434:	f7f5 ff70 	bl	8000318 <__aeabi_dsub>
 800a438:	4622      	mov	r2, r4
 800a43a:	462b      	mov	r3, r5
 800a43c:	f7f6 f924 	bl	8000688 <__aeabi_dmul>
 800a440:	a353      	add	r3, pc, #332	; (adr r3, 800a590 <__ieee754_pow+0xa18>)
 800a442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a446:	f7f5 ff69 	bl	800031c <__adddf3>
 800a44a:	4622      	mov	r2, r4
 800a44c:	462b      	mov	r3, r5
 800a44e:	f7f6 f91b 	bl	8000688 <__aeabi_dmul>
 800a452:	4602      	mov	r2, r0
 800a454:	460b      	mov	r3, r1
 800a456:	4640      	mov	r0, r8
 800a458:	4649      	mov	r1, r9
 800a45a:	f7f5 ff5d 	bl	8000318 <__aeabi_dsub>
 800a45e:	4604      	mov	r4, r0
 800a460:	460d      	mov	r5, r1
 800a462:	4602      	mov	r2, r0
 800a464:	460b      	mov	r3, r1
 800a466:	4640      	mov	r0, r8
 800a468:	4649      	mov	r1, r9
 800a46a:	f7f6 f90d 	bl	8000688 <__aeabi_dmul>
 800a46e:	2200      	movs	r2, #0
 800a470:	ec41 0b19 	vmov	d9, r0, r1
 800a474:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a478:	4620      	mov	r0, r4
 800a47a:	4629      	mov	r1, r5
 800a47c:	f7f5 ff4c 	bl	8000318 <__aeabi_dsub>
 800a480:	4602      	mov	r2, r0
 800a482:	460b      	mov	r3, r1
 800a484:	ec51 0b19 	vmov	r0, r1, d9
 800a488:	f7f6 fa28 	bl	80008dc <__aeabi_ddiv>
 800a48c:	4632      	mov	r2, r6
 800a48e:	4604      	mov	r4, r0
 800a490:	460d      	mov	r5, r1
 800a492:	463b      	mov	r3, r7
 800a494:	4640      	mov	r0, r8
 800a496:	4649      	mov	r1, r9
 800a498:	f7f6 f8f6 	bl	8000688 <__aeabi_dmul>
 800a49c:	4632      	mov	r2, r6
 800a49e:	463b      	mov	r3, r7
 800a4a0:	f7f5 ff3c 	bl	800031c <__adddf3>
 800a4a4:	4602      	mov	r2, r0
 800a4a6:	460b      	mov	r3, r1
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	4629      	mov	r1, r5
 800a4ac:	f7f5 ff34 	bl	8000318 <__aeabi_dsub>
 800a4b0:	4642      	mov	r2, r8
 800a4b2:	464b      	mov	r3, r9
 800a4b4:	f7f5 ff30 	bl	8000318 <__aeabi_dsub>
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	493a      	ldr	r1, [pc, #232]	; (800a5a8 <__ieee754_pow+0xa30>)
 800a4be:	2000      	movs	r0, #0
 800a4c0:	f7f5 ff2a 	bl	8000318 <__aeabi_dsub>
 800a4c4:	e9cd 0100 	strd	r0, r1, [sp]
 800a4c8:	9b01      	ldr	r3, [sp, #4]
 800a4ca:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a4ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4d2:	da2f      	bge.n	800a534 <__ieee754_pow+0x9bc>
 800a4d4:	4650      	mov	r0, sl
 800a4d6:	ed9d 0b00 	vldr	d0, [sp]
 800a4da:	f000 f9cd 	bl	800a878 <scalbn>
 800a4de:	ec51 0b10 	vmov	r0, r1, d0
 800a4e2:	ec53 2b18 	vmov	r2, r3, d8
 800a4e6:	f7ff bbe0 	b.w	8009caa <__ieee754_pow+0x132>
 800a4ea:	4b30      	ldr	r3, [pc, #192]	; (800a5ac <__ieee754_pow+0xa34>)
 800a4ec:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a4f0:	429e      	cmp	r6, r3
 800a4f2:	f77f af0b 	ble.w	800a30c <__ieee754_pow+0x794>
 800a4f6:	4b2e      	ldr	r3, [pc, #184]	; (800a5b0 <__ieee754_pow+0xa38>)
 800a4f8:	440b      	add	r3, r1
 800a4fa:	4303      	orrs	r3, r0
 800a4fc:	d00b      	beq.n	800a516 <__ieee754_pow+0x99e>
 800a4fe:	a326      	add	r3, pc, #152	; (adr r3, 800a598 <__ieee754_pow+0xa20>)
 800a500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a504:	ec51 0b18 	vmov	r0, r1, d8
 800a508:	f7f6 f8be 	bl	8000688 <__aeabi_dmul>
 800a50c:	a322      	add	r3, pc, #136	; (adr r3, 800a598 <__ieee754_pow+0xa20>)
 800a50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a512:	f7ff bbca 	b.w	8009caa <__ieee754_pow+0x132>
 800a516:	4622      	mov	r2, r4
 800a518:	462b      	mov	r3, r5
 800a51a:	f7f5 fefd 	bl	8000318 <__aeabi_dsub>
 800a51e:	4642      	mov	r2, r8
 800a520:	464b      	mov	r3, r9
 800a522:	f7f6 fb37 	bl	8000b94 <__aeabi_dcmpge>
 800a526:	2800      	cmp	r0, #0
 800a528:	f43f aef0 	beq.w	800a30c <__ieee754_pow+0x794>
 800a52c:	e7e7      	b.n	800a4fe <__ieee754_pow+0x986>
 800a52e:	f04f 0a00 	mov.w	sl, #0
 800a532:	e717      	b.n	800a364 <__ieee754_pow+0x7ec>
 800a534:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a538:	4619      	mov	r1, r3
 800a53a:	e7d2      	b.n	800a4e2 <__ieee754_pow+0x96a>
 800a53c:	491a      	ldr	r1, [pc, #104]	; (800a5a8 <__ieee754_pow+0xa30>)
 800a53e:	2000      	movs	r0, #0
 800a540:	f7ff bb9e 	b.w	8009c80 <__ieee754_pow+0x108>
 800a544:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a548:	f7ff bb9a 	b.w	8009c80 <__ieee754_pow+0x108>
 800a54c:	9000      	str	r0, [sp, #0]
 800a54e:	f7ff bb76 	b.w	8009c3e <__ieee754_pow+0xc6>
 800a552:	2100      	movs	r1, #0
 800a554:	f7ff bb60 	b.w	8009c18 <__ieee754_pow+0xa0>
 800a558:	00000000 	.word	0x00000000
 800a55c:	3fe62e43 	.word	0x3fe62e43
 800a560:	fefa39ef 	.word	0xfefa39ef
 800a564:	3fe62e42 	.word	0x3fe62e42
 800a568:	0ca86c39 	.word	0x0ca86c39
 800a56c:	be205c61 	.word	0xbe205c61
 800a570:	72bea4d0 	.word	0x72bea4d0
 800a574:	3e663769 	.word	0x3e663769
 800a578:	c5d26bf1 	.word	0xc5d26bf1
 800a57c:	3ebbbd41 	.word	0x3ebbbd41
 800a580:	af25de2c 	.word	0xaf25de2c
 800a584:	3f11566a 	.word	0x3f11566a
 800a588:	16bebd93 	.word	0x16bebd93
 800a58c:	3f66c16c 	.word	0x3f66c16c
 800a590:	5555553e 	.word	0x5555553e
 800a594:	3fc55555 	.word	0x3fc55555
 800a598:	c2f8f359 	.word	0xc2f8f359
 800a59c:	01a56e1f 	.word	0x01a56e1f
 800a5a0:	3fe00000 	.word	0x3fe00000
 800a5a4:	000fffff 	.word	0x000fffff
 800a5a8:	3ff00000 	.word	0x3ff00000
 800a5ac:	4090cbff 	.word	0x4090cbff
 800a5b0:	3f6f3400 	.word	0x3f6f3400
 800a5b4:	652b82fe 	.word	0x652b82fe
 800a5b8:	3c971547 	.word	0x3c971547

0800a5bc <__ieee754_sqrt>:
 800a5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5c0:	ec55 4b10 	vmov	r4, r5, d0
 800a5c4:	4e56      	ldr	r6, [pc, #344]	; (800a720 <__ieee754_sqrt+0x164>)
 800a5c6:	43ae      	bics	r6, r5
 800a5c8:	ee10 0a10 	vmov	r0, s0
 800a5cc:	ee10 3a10 	vmov	r3, s0
 800a5d0:	4629      	mov	r1, r5
 800a5d2:	462a      	mov	r2, r5
 800a5d4:	d110      	bne.n	800a5f8 <__ieee754_sqrt+0x3c>
 800a5d6:	ee10 2a10 	vmov	r2, s0
 800a5da:	462b      	mov	r3, r5
 800a5dc:	f7f6 f854 	bl	8000688 <__aeabi_dmul>
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	460b      	mov	r3, r1
 800a5e4:	4620      	mov	r0, r4
 800a5e6:	4629      	mov	r1, r5
 800a5e8:	f7f5 fe98 	bl	800031c <__adddf3>
 800a5ec:	4604      	mov	r4, r0
 800a5ee:	460d      	mov	r5, r1
 800a5f0:	ec45 4b10 	vmov	d0, r4, r5
 800a5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5f8:	2d00      	cmp	r5, #0
 800a5fa:	dc10      	bgt.n	800a61e <__ieee754_sqrt+0x62>
 800a5fc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a600:	4330      	orrs	r0, r6
 800a602:	d0f5      	beq.n	800a5f0 <__ieee754_sqrt+0x34>
 800a604:	b15d      	cbz	r5, 800a61e <__ieee754_sqrt+0x62>
 800a606:	ee10 2a10 	vmov	r2, s0
 800a60a:	462b      	mov	r3, r5
 800a60c:	ee10 0a10 	vmov	r0, s0
 800a610:	f7f5 fe82 	bl	8000318 <__aeabi_dsub>
 800a614:	4602      	mov	r2, r0
 800a616:	460b      	mov	r3, r1
 800a618:	f7f6 f960 	bl	80008dc <__aeabi_ddiv>
 800a61c:	e7e6      	b.n	800a5ec <__ieee754_sqrt+0x30>
 800a61e:	1509      	asrs	r1, r1, #20
 800a620:	d076      	beq.n	800a710 <__ieee754_sqrt+0x154>
 800a622:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a626:	07ce      	lsls	r6, r1, #31
 800a628:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800a62c:	bf5e      	ittt	pl
 800a62e:	0fda      	lsrpl	r2, r3, #31
 800a630:	005b      	lslpl	r3, r3, #1
 800a632:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800a636:	0fda      	lsrs	r2, r3, #31
 800a638:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800a63c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800a640:	2000      	movs	r0, #0
 800a642:	106d      	asrs	r5, r5, #1
 800a644:	005b      	lsls	r3, r3, #1
 800a646:	f04f 0e16 	mov.w	lr, #22
 800a64a:	4684      	mov	ip, r0
 800a64c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a650:	eb0c 0401 	add.w	r4, ip, r1
 800a654:	4294      	cmp	r4, r2
 800a656:	bfde      	ittt	le
 800a658:	1b12      	suble	r2, r2, r4
 800a65a:	eb04 0c01 	addle.w	ip, r4, r1
 800a65e:	1840      	addle	r0, r0, r1
 800a660:	0052      	lsls	r2, r2, #1
 800a662:	f1be 0e01 	subs.w	lr, lr, #1
 800a666:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a66a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a66e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a672:	d1ed      	bne.n	800a650 <__ieee754_sqrt+0x94>
 800a674:	4671      	mov	r1, lr
 800a676:	2720      	movs	r7, #32
 800a678:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a67c:	4562      	cmp	r2, ip
 800a67e:	eb04 060e 	add.w	r6, r4, lr
 800a682:	dc02      	bgt.n	800a68a <__ieee754_sqrt+0xce>
 800a684:	d113      	bne.n	800a6ae <__ieee754_sqrt+0xf2>
 800a686:	429e      	cmp	r6, r3
 800a688:	d811      	bhi.n	800a6ae <__ieee754_sqrt+0xf2>
 800a68a:	2e00      	cmp	r6, #0
 800a68c:	eb06 0e04 	add.w	lr, r6, r4
 800a690:	da43      	bge.n	800a71a <__ieee754_sqrt+0x15e>
 800a692:	f1be 0f00 	cmp.w	lr, #0
 800a696:	db40      	blt.n	800a71a <__ieee754_sqrt+0x15e>
 800a698:	f10c 0801 	add.w	r8, ip, #1
 800a69c:	eba2 020c 	sub.w	r2, r2, ip
 800a6a0:	429e      	cmp	r6, r3
 800a6a2:	bf88      	it	hi
 800a6a4:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800a6a8:	1b9b      	subs	r3, r3, r6
 800a6aa:	4421      	add	r1, r4
 800a6ac:	46c4      	mov	ip, r8
 800a6ae:	0052      	lsls	r2, r2, #1
 800a6b0:	3f01      	subs	r7, #1
 800a6b2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a6b6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a6ba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a6be:	d1dd      	bne.n	800a67c <__ieee754_sqrt+0xc0>
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	d006      	beq.n	800a6d2 <__ieee754_sqrt+0x116>
 800a6c4:	1c4c      	adds	r4, r1, #1
 800a6c6:	bf13      	iteet	ne
 800a6c8:	3101      	addne	r1, #1
 800a6ca:	3001      	addeq	r0, #1
 800a6cc:	4639      	moveq	r1, r7
 800a6ce:	f021 0101 	bicne.w	r1, r1, #1
 800a6d2:	1043      	asrs	r3, r0, #1
 800a6d4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a6d8:	0849      	lsrs	r1, r1, #1
 800a6da:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a6de:	07c2      	lsls	r2, r0, #31
 800a6e0:	bf48      	it	mi
 800a6e2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800a6e6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800a6ea:	460c      	mov	r4, r1
 800a6ec:	463d      	mov	r5, r7
 800a6ee:	e77f      	b.n	800a5f0 <__ieee754_sqrt+0x34>
 800a6f0:	0ada      	lsrs	r2, r3, #11
 800a6f2:	3815      	subs	r0, #21
 800a6f4:	055b      	lsls	r3, r3, #21
 800a6f6:	2a00      	cmp	r2, #0
 800a6f8:	d0fa      	beq.n	800a6f0 <__ieee754_sqrt+0x134>
 800a6fa:	02d7      	lsls	r7, r2, #11
 800a6fc:	d50a      	bpl.n	800a714 <__ieee754_sqrt+0x158>
 800a6fe:	f1c1 0420 	rsb	r4, r1, #32
 800a702:	fa23 f404 	lsr.w	r4, r3, r4
 800a706:	1e4d      	subs	r5, r1, #1
 800a708:	408b      	lsls	r3, r1
 800a70a:	4322      	orrs	r2, r4
 800a70c:	1b41      	subs	r1, r0, r5
 800a70e:	e788      	b.n	800a622 <__ieee754_sqrt+0x66>
 800a710:	4608      	mov	r0, r1
 800a712:	e7f0      	b.n	800a6f6 <__ieee754_sqrt+0x13a>
 800a714:	0052      	lsls	r2, r2, #1
 800a716:	3101      	adds	r1, #1
 800a718:	e7ef      	b.n	800a6fa <__ieee754_sqrt+0x13e>
 800a71a:	46e0      	mov	r8, ip
 800a71c:	e7be      	b.n	800a69c <__ieee754_sqrt+0xe0>
 800a71e:	bf00      	nop
 800a720:	7ff00000 	.word	0x7ff00000

0800a724 <fabs>:
 800a724:	ec51 0b10 	vmov	r0, r1, d0
 800a728:	ee10 2a10 	vmov	r2, s0
 800a72c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a730:	ec43 2b10 	vmov	d0, r2, r3
 800a734:	4770      	bx	lr

0800a736 <finite>:
 800a736:	b082      	sub	sp, #8
 800a738:	ed8d 0b00 	vstr	d0, [sp]
 800a73c:	9801      	ldr	r0, [sp, #4]
 800a73e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a742:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a746:	0fc0      	lsrs	r0, r0, #31
 800a748:	b002      	add	sp, #8
 800a74a:	4770      	bx	lr
 800a74c:	0000      	movs	r0, r0
	...

0800a750 <nan>:
 800a750:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a758 <nan+0x8>
 800a754:	4770      	bx	lr
 800a756:	bf00      	nop
 800a758:	00000000 	.word	0x00000000
 800a75c:	7ff80000 	.word	0x7ff80000

0800a760 <rint>:
 800a760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a762:	ec51 0b10 	vmov	r0, r1, d0
 800a766:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a76a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a76e:	2e13      	cmp	r6, #19
 800a770:	ee10 4a10 	vmov	r4, s0
 800a774:	460b      	mov	r3, r1
 800a776:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800a77a:	dc58      	bgt.n	800a82e <rint+0xce>
 800a77c:	2e00      	cmp	r6, #0
 800a77e:	da2b      	bge.n	800a7d8 <rint+0x78>
 800a780:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a784:	4302      	orrs	r2, r0
 800a786:	d023      	beq.n	800a7d0 <rint+0x70>
 800a788:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a78c:	4302      	orrs	r2, r0
 800a78e:	4254      	negs	r4, r2
 800a790:	4314      	orrs	r4, r2
 800a792:	0c4b      	lsrs	r3, r1, #17
 800a794:	0b24      	lsrs	r4, r4, #12
 800a796:	045b      	lsls	r3, r3, #17
 800a798:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800a79c:	ea44 0103 	orr.w	r1, r4, r3
 800a7a0:	4b32      	ldr	r3, [pc, #200]	; (800a86c <rint+0x10c>)
 800a7a2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a7a6:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	460b      	mov	r3, r1
 800a7ae:	4630      	mov	r0, r6
 800a7b0:	4639      	mov	r1, r7
 800a7b2:	f7f5 fdb3 	bl	800031c <__adddf3>
 800a7b6:	e9cd 0100 	strd	r0, r1, [sp]
 800a7ba:	463b      	mov	r3, r7
 800a7bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7c0:	4632      	mov	r2, r6
 800a7c2:	f7f5 fda9 	bl	8000318 <__aeabi_dsub>
 800a7c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a7ca:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800a7ce:	4639      	mov	r1, r7
 800a7d0:	ec41 0b10 	vmov	d0, r0, r1
 800a7d4:	b003      	add	sp, #12
 800a7d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7d8:	4a25      	ldr	r2, [pc, #148]	; (800a870 <rint+0x110>)
 800a7da:	4132      	asrs	r2, r6
 800a7dc:	ea01 0702 	and.w	r7, r1, r2
 800a7e0:	4307      	orrs	r7, r0
 800a7e2:	d0f5      	beq.n	800a7d0 <rint+0x70>
 800a7e4:	0851      	lsrs	r1, r2, #1
 800a7e6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800a7ea:	4314      	orrs	r4, r2
 800a7ec:	d00c      	beq.n	800a808 <rint+0xa8>
 800a7ee:	ea23 0201 	bic.w	r2, r3, r1
 800a7f2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a7f6:	2e13      	cmp	r6, #19
 800a7f8:	fa43 f606 	asr.w	r6, r3, r6
 800a7fc:	bf0c      	ite	eq
 800a7fe:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800a802:	2400      	movne	r4, #0
 800a804:	ea42 0306 	orr.w	r3, r2, r6
 800a808:	4918      	ldr	r1, [pc, #96]	; (800a86c <rint+0x10c>)
 800a80a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800a80e:	4622      	mov	r2, r4
 800a810:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a814:	4620      	mov	r0, r4
 800a816:	4629      	mov	r1, r5
 800a818:	f7f5 fd80 	bl	800031c <__adddf3>
 800a81c:	e9cd 0100 	strd	r0, r1, [sp]
 800a820:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a824:	4622      	mov	r2, r4
 800a826:	462b      	mov	r3, r5
 800a828:	f7f5 fd76 	bl	8000318 <__aeabi_dsub>
 800a82c:	e7d0      	b.n	800a7d0 <rint+0x70>
 800a82e:	2e33      	cmp	r6, #51	; 0x33
 800a830:	dd07      	ble.n	800a842 <rint+0xe2>
 800a832:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a836:	d1cb      	bne.n	800a7d0 <rint+0x70>
 800a838:	ee10 2a10 	vmov	r2, s0
 800a83c:	f7f5 fd6e 	bl	800031c <__adddf3>
 800a840:	e7c6      	b.n	800a7d0 <rint+0x70>
 800a842:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800a846:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800a84a:	40d6      	lsrs	r6, r2
 800a84c:	4230      	tst	r0, r6
 800a84e:	d0bf      	beq.n	800a7d0 <rint+0x70>
 800a850:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800a854:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800a858:	bf1f      	itttt	ne
 800a85a:	ea24 0101 	bicne.w	r1, r4, r1
 800a85e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800a862:	fa44 f202 	asrne.w	r2, r4, r2
 800a866:	ea41 0402 	orrne.w	r4, r1, r2
 800a86a:	e7cd      	b.n	800a808 <rint+0xa8>
 800a86c:	0800ac48 	.word	0x0800ac48
 800a870:	000fffff 	.word	0x000fffff
 800a874:	00000000 	.word	0x00000000

0800a878 <scalbn>:
 800a878:	b570      	push	{r4, r5, r6, lr}
 800a87a:	ec55 4b10 	vmov	r4, r5, d0
 800a87e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a882:	4606      	mov	r6, r0
 800a884:	462b      	mov	r3, r5
 800a886:	b99a      	cbnz	r2, 800a8b0 <scalbn+0x38>
 800a888:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a88c:	4323      	orrs	r3, r4
 800a88e:	d036      	beq.n	800a8fe <scalbn+0x86>
 800a890:	4b39      	ldr	r3, [pc, #228]	; (800a978 <scalbn+0x100>)
 800a892:	4629      	mov	r1, r5
 800a894:	ee10 0a10 	vmov	r0, s0
 800a898:	2200      	movs	r2, #0
 800a89a:	f7f5 fef5 	bl	8000688 <__aeabi_dmul>
 800a89e:	4b37      	ldr	r3, [pc, #220]	; (800a97c <scalbn+0x104>)
 800a8a0:	429e      	cmp	r6, r3
 800a8a2:	4604      	mov	r4, r0
 800a8a4:	460d      	mov	r5, r1
 800a8a6:	da10      	bge.n	800a8ca <scalbn+0x52>
 800a8a8:	a32b      	add	r3, pc, #172	; (adr r3, 800a958 <scalbn+0xe0>)
 800a8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ae:	e03a      	b.n	800a926 <scalbn+0xae>
 800a8b0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a8b4:	428a      	cmp	r2, r1
 800a8b6:	d10c      	bne.n	800a8d2 <scalbn+0x5a>
 800a8b8:	ee10 2a10 	vmov	r2, s0
 800a8bc:	4620      	mov	r0, r4
 800a8be:	4629      	mov	r1, r5
 800a8c0:	f7f5 fd2c 	bl	800031c <__adddf3>
 800a8c4:	4604      	mov	r4, r0
 800a8c6:	460d      	mov	r5, r1
 800a8c8:	e019      	b.n	800a8fe <scalbn+0x86>
 800a8ca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	3a36      	subs	r2, #54	; 0x36
 800a8d2:	4432      	add	r2, r6
 800a8d4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a8d8:	428a      	cmp	r2, r1
 800a8da:	dd08      	ble.n	800a8ee <scalbn+0x76>
 800a8dc:	2d00      	cmp	r5, #0
 800a8de:	a120      	add	r1, pc, #128	; (adr r1, 800a960 <scalbn+0xe8>)
 800a8e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8e4:	da1c      	bge.n	800a920 <scalbn+0xa8>
 800a8e6:	a120      	add	r1, pc, #128	; (adr r1, 800a968 <scalbn+0xf0>)
 800a8e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8ec:	e018      	b.n	800a920 <scalbn+0xa8>
 800a8ee:	2a00      	cmp	r2, #0
 800a8f0:	dd08      	ble.n	800a904 <scalbn+0x8c>
 800a8f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a8f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a8fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a8fe:	ec45 4b10 	vmov	d0, r4, r5
 800a902:	bd70      	pop	{r4, r5, r6, pc}
 800a904:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a908:	da19      	bge.n	800a93e <scalbn+0xc6>
 800a90a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a90e:	429e      	cmp	r6, r3
 800a910:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a914:	dd0a      	ble.n	800a92c <scalbn+0xb4>
 800a916:	a112      	add	r1, pc, #72	; (adr r1, 800a960 <scalbn+0xe8>)
 800a918:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d1e2      	bne.n	800a8e6 <scalbn+0x6e>
 800a920:	a30f      	add	r3, pc, #60	; (adr r3, 800a960 <scalbn+0xe8>)
 800a922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a926:	f7f5 feaf 	bl	8000688 <__aeabi_dmul>
 800a92a:	e7cb      	b.n	800a8c4 <scalbn+0x4c>
 800a92c:	a10a      	add	r1, pc, #40	; (adr r1, 800a958 <scalbn+0xe0>)
 800a92e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d0b8      	beq.n	800a8a8 <scalbn+0x30>
 800a936:	a10e      	add	r1, pc, #56	; (adr r1, 800a970 <scalbn+0xf8>)
 800a938:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a93c:	e7b4      	b.n	800a8a8 <scalbn+0x30>
 800a93e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a942:	3236      	adds	r2, #54	; 0x36
 800a944:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a948:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a94c:	4620      	mov	r0, r4
 800a94e:	4b0c      	ldr	r3, [pc, #48]	; (800a980 <scalbn+0x108>)
 800a950:	2200      	movs	r2, #0
 800a952:	e7e8      	b.n	800a926 <scalbn+0xae>
 800a954:	f3af 8000 	nop.w
 800a958:	c2f8f359 	.word	0xc2f8f359
 800a95c:	01a56e1f 	.word	0x01a56e1f
 800a960:	8800759c 	.word	0x8800759c
 800a964:	7e37e43c 	.word	0x7e37e43c
 800a968:	8800759c 	.word	0x8800759c
 800a96c:	fe37e43c 	.word	0xfe37e43c
 800a970:	c2f8f359 	.word	0xc2f8f359
 800a974:	81a56e1f 	.word	0x81a56e1f
 800a978:	43500000 	.word	0x43500000
 800a97c:	ffff3cb0 	.word	0xffff3cb0
 800a980:	3c900000 	.word	0x3c900000

0800a984 <_sbrk>:
 800a984:	4b04      	ldr	r3, [pc, #16]	; (800a998 <_sbrk+0x14>)
 800a986:	6819      	ldr	r1, [r3, #0]
 800a988:	4602      	mov	r2, r0
 800a98a:	b909      	cbnz	r1, 800a990 <_sbrk+0xc>
 800a98c:	4903      	ldr	r1, [pc, #12]	; (800a99c <_sbrk+0x18>)
 800a98e:	6019      	str	r1, [r3, #0]
 800a990:	6818      	ldr	r0, [r3, #0]
 800a992:	4402      	add	r2, r0
 800a994:	601a      	str	r2, [r3, #0]
 800a996:	4770      	bx	lr
 800a998:	20002fd0 	.word	0x20002fd0
 800a99c:	20003200 	.word	0x20003200

0800a9a0 <_init>:
 800a9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9a2:	bf00      	nop
 800a9a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9a6:	bc08      	pop	{r3}
 800a9a8:	469e      	mov	lr, r3
 800a9aa:	4770      	bx	lr

0800a9ac <_fini>:
 800a9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ae:	bf00      	nop
 800a9b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9b2:	bc08      	pop	{r3}
 800a9b4:	469e      	mov	lr, r3
 800a9b6:	4770      	bx	lr
