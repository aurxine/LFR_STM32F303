
LFR_STM32F303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006324  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080064b4  080064b4  000164b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006598  08006598  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08006598  08006598  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006598  08006598  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006598  08006598  00016598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800659c  0800659c  0001659c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080065a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003084  20000014  080065b4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003098  080065b4  00023098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d4f  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030cc  00000000  00000000  00038d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  0003be60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001158  00000000  00000000  0003d120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020143  00000000  00000000  0003e278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015332  00000000  00000000  0005e3bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1430  00000000  00000000  000736ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00134b1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ebc  00000000  00000000  00134b70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800649c 	.word	0x0800649c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	0800649c 	.word	0x0800649c

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20002ff0 	.word	0x20002ff0

08000264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b086      	sub	sp, #24
 8000268:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800026a:	f000 fa63 	bl	8000734 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026e:	f000 f82b 	bl	80002c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000272:	f000 f86b 	bl	800034c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL |= (1 << 0);
 8000276:	4b11      	ldr	r3, [pc, #68]	; (80002bc <main+0x58>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	4a10      	ldr	r2, [pc, #64]	; (80002bc <main+0x58>)
 800027c:	f043 0301 	orr.w	r3, r3, #1
 8000280:	6013      	str	r3, [r2, #0]

//  SEGGER_SYSVIEW_Conf();
//
//  SEGGER_SYSVIEW_Start();

  status = xTaskCreate(svIRSensorReadTask, "IR_Sensor_Reading_Task", 200, NULL, 4, &IR_sensor_task_handle);
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	9301      	str	r3, [sp, #4]
 8000286:	2304      	movs	r3, #4
 8000288:	9300      	str	r3, [sp, #0]
 800028a:	2300      	movs	r3, #0
 800028c:	22c8      	movs	r2, #200	; 0xc8
 800028e:	490c      	ldr	r1, [pc, #48]	; (80002c0 <main+0x5c>)
 8000290:	480c      	ldr	r0, [pc, #48]	; (80002c4 <main+0x60>)
 8000292:	f002 ff2f 	bl	80030f4 <xTaskCreate>
 8000296:	60f8      	str	r0, [r7, #12]

  configASSERT(status == pdPASS);
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	2b01      	cmp	r3, #1
 800029c:	d00a      	beq.n	80002b4 <main+0x50>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800029e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002a2:	f383 8811 	msr	BASEPRI, r3
 80002a6:	f3bf 8f6f 	isb	sy
 80002aa:	f3bf 8f4f 	dsb	sy
 80002ae:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80002b0:	bf00      	nop
 80002b2:	e7fe      	b.n	80002b2 <main+0x4e>

  vTaskStartScheduler();
 80002b4:	f003 f882 	bl	80033bc <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002b8:	e7fe      	b.n	80002b8 <main+0x54>
 80002ba:	bf00      	nop
 80002bc:	e0001000 	.word	0xe0001000
 80002c0:	080064b4 	.word	0x080064b4
 80002c4:	080004b5 	.word	0x080004b5

080002c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b090      	sub	sp, #64	; 0x40
 80002cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ce:	f107 0318 	add.w	r3, r7, #24
 80002d2:	2228      	movs	r2, #40	; 0x28
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f006 f8d8 	bl	800648c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
 80002e6:	60da      	str	r2, [r3, #12]
 80002e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ea:	2302      	movs	r3, #2
 80002ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ee:	2301      	movs	r3, #1
 80002f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f2:	2310      	movs	r3, #16
 80002f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f6:	2302      	movs	r3, #2
 80002f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002fa:	2300      	movs	r3, #0
 80002fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002fe:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8000302:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000304:	f107 0318 	add.w	r3, r7, #24
 8000308:	4618      	mov	r0, r3
 800030a:	f000 fcd5 	bl	8000cb8 <HAL_RCC_OscConfig>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000314:	f000 f930 	bl	8000578 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000318:	230f      	movs	r3, #15
 800031a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800031c:	2302      	movs	r3, #2
 800031e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000320:	2300      	movs	r3, #0
 8000322:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000324:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000328:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800032a:	2300      	movs	r3, #0
 800032c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	2101      	movs	r1, #1
 8000332:	4618      	mov	r0, r3
 8000334:	f001 fbc8 	bl	8001ac8 <HAL_RCC_ClockConfig>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800033e:	f000 f91b 	bl	8000578 <Error_Handler>
  }
}
 8000342:	bf00      	nop
 8000344:	3740      	adds	r7, #64	; 0x40
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
	...

0800034c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b08a      	sub	sp, #40	; 0x28
 8000350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000352:	f107 0314 	add.w	r3, r7, #20
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	605a      	str	r2, [r3, #4]
 800035c:	609a      	str	r2, [r3, #8]
 800035e:	60da      	str	r2, [r3, #12]
 8000360:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000362:	4b50      	ldr	r3, [pc, #320]	; (80004a4 <MX_GPIO_Init+0x158>)
 8000364:	695b      	ldr	r3, [r3, #20]
 8000366:	4a4f      	ldr	r2, [pc, #316]	; (80004a4 <MX_GPIO_Init+0x158>)
 8000368:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800036c:	6153      	str	r3, [r2, #20]
 800036e:	4b4d      	ldr	r3, [pc, #308]	; (80004a4 <MX_GPIO_Init+0x158>)
 8000370:	695b      	ldr	r3, [r3, #20]
 8000372:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000376:	613b      	str	r3, [r7, #16]
 8000378:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800037a:	4b4a      	ldr	r3, [pc, #296]	; (80004a4 <MX_GPIO_Init+0x158>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	4a49      	ldr	r2, [pc, #292]	; (80004a4 <MX_GPIO_Init+0x158>)
 8000380:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000384:	6153      	str	r3, [r2, #20]
 8000386:	4b47      	ldr	r3, [pc, #284]	; (80004a4 <MX_GPIO_Init+0x158>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800038e:	60fb      	str	r3, [r7, #12]
 8000390:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000392:	4b44      	ldr	r3, [pc, #272]	; (80004a4 <MX_GPIO_Init+0x158>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	4a43      	ldr	r2, [pc, #268]	; (80004a4 <MX_GPIO_Init+0x158>)
 8000398:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800039c:	6153      	str	r3, [r2, #20]
 800039e:	4b41      	ldr	r3, [pc, #260]	; (80004a4 <MX_GPIO_Init+0x158>)
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003a6:	60bb      	str	r3, [r7, #8]
 80003a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003aa:	4b3e      	ldr	r3, [pc, #248]	; (80004a4 <MX_GPIO_Init+0x158>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	4a3d      	ldr	r2, [pc, #244]	; (80004a4 <MX_GPIO_Init+0x158>)
 80003b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003b4:	6153      	str	r3, [r2, #20]
 80003b6:	4b3b      	ldr	r3, [pc, #236]	; (80004a4 <MX_GPIO_Init+0x158>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003be:	607b      	str	r3, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c2:	4b38      	ldr	r3, [pc, #224]	; (80004a4 <MX_GPIO_Init+0x158>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	4a37      	ldr	r2, [pc, #220]	; (80004a4 <MX_GPIO_Init+0x158>)
 80003c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003cc:	6153      	str	r3, [r2, #20]
 80003ce:	4b35      	ldr	r3, [pc, #212]	; (80004a4 <MX_GPIO_Init+0x158>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003d6:	603b      	str	r3, [r7, #0]
 80003d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80003da:	2200      	movs	r2, #0
 80003dc:	f64f 7108 	movw	r1, #65288	; 0xff08
 80003e0:	4831      	ldr	r0, [pc, #196]	; (80004a8 <MX_GPIO_Init+0x15c>)
 80003e2:	f000 fc51 	bl	8000c88 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80003e6:	2337      	movs	r3, #55	; 0x37
 80003e8:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80003ea:	4b30      	ldr	r3, [pc, #192]	; (80004ac <MX_GPIO_Init+0x160>)
 80003ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ee:	2300      	movs	r3, #0
 80003f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80003f2:	f107 0314 	add.w	r3, r7, #20
 80003f6:	4619      	mov	r1, r3
 80003f8:	482b      	ldr	r0, [pc, #172]	; (80004a8 <MX_GPIO_Init+0x15c>)
 80003fa:	f000 fab3 	bl	8000964 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80003fe:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000402:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000404:	2301      	movs	r3, #1
 8000406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000408:	2300      	movs	r3, #0
 800040a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040c:	2300      	movs	r3, #0
 800040e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000410:	f107 0314 	add.w	r3, r7, #20
 8000414:	4619      	mov	r1, r3
 8000416:	4824      	ldr	r0, [pc, #144]	; (80004a8 <MX_GPIO_Init+0x15c>)
 8000418:	f000 faa4 	bl	8000964 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800041c:	2301      	movs	r3, #1
 800041e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000420:	2300      	movs	r3, #0
 8000422:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000424:	2300      	movs	r3, #0
 8000426:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000428:	f107 0314 	add.w	r3, r7, #20
 800042c:	4619      	mov	r1, r3
 800042e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000432:	f000 fa97 	bl	8000964 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000436:	23e0      	movs	r3, #224	; 0xe0
 8000438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800043a:	2302      	movs	r3, #2
 800043c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043e:	2300      	movs	r3, #0
 8000440:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000442:	2300      	movs	r3, #0
 8000444:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000446:	2305      	movs	r3, #5
 8000448:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044a:	f107 0314 	add.w	r3, r7, #20
 800044e:	4619      	mov	r1, r3
 8000450:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000454:	f000 fa86 	bl	8000964 <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000458:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800045c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800045e:	2302      	movs	r3, #2
 8000460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000462:	2300      	movs	r3, #0
 8000464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000466:	2303      	movs	r3, #3
 8000468:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800046a:	230e      	movs	r3, #14
 800046c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800046e:	f107 0314 	add.w	r3, r7, #20
 8000472:	4619      	mov	r1, r3
 8000474:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000478:	f000 fa74 	bl	8000964 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800047c:	23c0      	movs	r3, #192	; 0xc0
 800047e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000480:	2312      	movs	r3, #18
 8000482:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000484:	2301      	movs	r3, #1
 8000486:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000488:	2300      	movs	r3, #0
 800048a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800048c:	2304      	movs	r3, #4
 800048e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000490:	f107 0314 	add.w	r3, r7, #20
 8000494:	4619      	mov	r1, r3
 8000496:	4806      	ldr	r0, [pc, #24]	; (80004b0 <MX_GPIO_Init+0x164>)
 8000498:	f000 fa64 	bl	8000964 <HAL_GPIO_Init>

}
 800049c:	bf00      	nop
 800049e:	3728      	adds	r7, #40	; 0x28
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40021000 	.word	0x40021000
 80004a8:	48001000 	.word	0x48001000
 80004ac:	10120000 	.word	0x10120000
 80004b0:	48000400 	.word	0x48000400

080004b4 <svIRSensorReadTask>:

/* USER CODE BEGIN 4 */
static void svIRSensorReadTask(void* parameters)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b084      	sub	sp, #16
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
	while(1)
	{
		uint8_t sensor_data = ucReadAllIRSensors();
 80004bc:	f000 f804 	bl	80004c8 <ucReadAllIRSensors>
 80004c0:	4603      	mov	r3, r0
 80004c2:	73fb      	strb	r3, [r7, #15]
	{
 80004c4:	e7fa      	b.n	80004bc <svIRSensorReadTask+0x8>
	...

080004c8 <ucReadAllIRSensors>:
	}
}

uint8_t ucReadAllIRSensors()
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
	uint8_t sensor_vals = 0;
 80004ce:	2300      	movs	r3, #0
 80004d0:	71fb      	strb	r3, [r7, #7]

	for(int i = 0; i < TOTAL_IR_SENSORS; i++)
 80004d2:	2300      	movs	r3, #0
 80004d4:	603b      	str	r3, [r7, #0]
 80004d6:	e033      	b.n	8000540 <ucReadAllIRSensors+0x78>
	{
		HAL_GPIO_WritePin(S0_PORT, S0, i & (1 << 0));
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	f003 0301 	and.w	r3, r3, #1
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	461a      	mov	r2, r3
 80004e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004e8:	4819      	ldr	r0, [pc, #100]	; (8000550 <ucReadAllIRSensors+0x88>)
 80004ea:	f000 fbcd 	bl	8000c88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S1_PORT, S1, i & (1 << 1));
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	f003 0302 	and.w	r3, r3, #2
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	461a      	mov	r2, r3
 80004fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004fe:	4814      	ldr	r0, [pc, #80]	; (8000550 <ucReadAllIRSensors+0x88>)
 8000500:	f000 fbc2 	bl	8000c88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S2_PORT, S2, i & (1 << 2));
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	b2db      	uxtb	r3, r3
 8000508:	f003 0304 	and.w	r3, r3, #4
 800050c:	b2db      	uxtb	r3, r3
 800050e:	461a      	mov	r2, r3
 8000510:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000514:	480e      	ldr	r0, [pc, #56]	; (8000550 <ucReadAllIRSensors+0x88>)
 8000516:	f000 fbb7 	bl	8000c88 <HAL_GPIO_WritePin>

		sensor_vals |= HAL_GPIO_ReadPin(IR_CHANNEL_PORT, IR_CHANNEL) << i;
 800051a:	2101      	movs	r1, #1
 800051c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000520:	f000 fb9a 	bl	8000c58 <HAL_GPIO_ReadPin>
 8000524:	4603      	mov	r3, r0
 8000526:	461a      	mov	r2, r3
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	fa02 f303 	lsl.w	r3, r2, r3
 800052e:	b25a      	sxtb	r2, r3
 8000530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000534:	4313      	orrs	r3, r2
 8000536:	b25b      	sxtb	r3, r3
 8000538:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < TOTAL_IR_SENSORS; i++)
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	3301      	adds	r3, #1
 800053e:	603b      	str	r3, [r7, #0]
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	2b07      	cmp	r3, #7
 8000544:	ddc8      	ble.n	80004d8 <ucReadAllIRSensors+0x10>
	}

	return sensor_vals;
 8000546:	79fb      	ldrb	r3, [r7, #7]
}
 8000548:	4618      	mov	r0, r3
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	48001000 	.word	0x48001000

08000554 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a04      	ldr	r2, [pc, #16]	; (8000574 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d101      	bne.n	800056a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000566:	f000 f8fb 	bl	8000760 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40001000 	.word	0x40001000

08000578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800057c:	b672      	cpsid	i
}
 800057e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000580:	e7fe      	b.n	8000580 <Error_Handler+0x8>
	...

08000584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800058a:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <HAL_MspInit+0x44>)
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	4a0e      	ldr	r2, [pc, #56]	; (80005c8 <HAL_MspInit+0x44>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6193      	str	r3, [r2, #24]
 8000596:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <HAL_MspInit+0x44>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a2:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <HAL_MspInit+0x44>)
 80005a4:	69db      	ldr	r3, [r3, #28]
 80005a6:	4a08      	ldr	r2, [pc, #32]	; (80005c8 <HAL_MspInit+0x44>)
 80005a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ac:	61d3      	str	r3, [r2, #28]
 80005ae:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_MspInit+0x44>)
 80005b0:	69db      	ldr	r3, [r3, #28]
 80005b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b6:	603b      	str	r3, [r7, #0]
 80005b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 80005ba:	f004 f88d 	bl	80046d8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40021000 	.word	0x40021000

080005cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08c      	sub	sp, #48	; 0x30
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80005dc:	2200      	movs	r2, #0
 80005de:	6879      	ldr	r1, [r7, #4]
 80005e0:	2036      	movs	r0, #54	; 0x36
 80005e2:	f000 f995 	bl	8000910 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80005e6:	2036      	movs	r0, #54	; 0x36
 80005e8:	f000 f9ae 	bl	8000948 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80005ec:	4b1f      	ldr	r3, [pc, #124]	; (800066c <HAL_InitTick+0xa0>)
 80005ee:	69db      	ldr	r3, [r3, #28]
 80005f0:	4a1e      	ldr	r2, [pc, #120]	; (800066c <HAL_InitTick+0xa0>)
 80005f2:	f043 0310 	orr.w	r3, r3, #16
 80005f6:	61d3      	str	r3, [r2, #28]
 80005f8:	4b1c      	ldr	r3, [pc, #112]	; (800066c <HAL_InitTick+0xa0>)
 80005fa:	69db      	ldr	r3, [r3, #28]
 80005fc:	f003 0310 	and.w	r3, r3, #16
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000604:	f107 0210 	add.w	r2, r7, #16
 8000608:	f107 0314 	add.w	r3, r7, #20
 800060c:	4611      	mov	r1, r2
 800060e:	4618      	mov	r0, r3
 8000610:	f001 fc6e 	bl	8001ef0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000614:	f001 fc4a 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
 8000618:	4603      	mov	r3, r0
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800061e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000620:	4a13      	ldr	r2, [pc, #76]	; (8000670 <HAL_InitTick+0xa4>)
 8000622:	fba2 2303 	umull	r2, r3, r2, r3
 8000626:	0c9b      	lsrs	r3, r3, #18
 8000628:	3b01      	subs	r3, #1
 800062a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800062c:	4b11      	ldr	r3, [pc, #68]	; (8000674 <HAL_InitTick+0xa8>)
 800062e:	4a12      	ldr	r2, [pc, #72]	; (8000678 <HAL_InitTick+0xac>)
 8000630:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000632:	4b10      	ldr	r3, [pc, #64]	; (8000674 <HAL_InitTick+0xa8>)
 8000634:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000638:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800063a:	4a0e      	ldr	r2, [pc, #56]	; (8000674 <HAL_InitTick+0xa8>)
 800063c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800063e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <HAL_InitTick+0xa8>)
 8000642:	2200      	movs	r2, #0
 8000644:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000646:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <HAL_InitTick+0xa8>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800064c:	4809      	ldr	r0, [pc, #36]	; (8000674 <HAL_InitTick+0xa8>)
 800064e:	f001 fc81 	bl	8001f54 <HAL_TIM_Base_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d104      	bne.n	8000662 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000658:	4806      	ldr	r0, [pc, #24]	; (8000674 <HAL_InitTick+0xa8>)
 800065a:	f001 fcdd 	bl	8002018 <HAL_TIM_Base_Start_IT>
 800065e:	4603      	mov	r3, r0
 8000660:	e000      	b.n	8000664 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000662:	2301      	movs	r3, #1
}
 8000664:	4618      	mov	r0, r3
 8000666:	3730      	adds	r7, #48	; 0x30
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40021000 	.word	0x40021000
 8000670:	431bde83 	.word	0x431bde83
 8000674:	20002f60 	.word	0x20002f60
 8000678:	40001000 	.word	0x40001000

0800067c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000680:	e7fe      	b.n	8000680 <NMI_Handler+0x4>

08000682 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000686:	e7fe      	b.n	8000686 <HardFault_Handler+0x4>

08000688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800068c:	e7fe      	b.n	800068c <MemManage_Handler+0x4>

0800068e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000692:	e7fe      	b.n	8000692 <BusFault_Handler+0x4>

08000694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000698:	e7fe      	b.n	8000698 <UsageFault_Handler+0x4>

0800069a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80006ac:	4802      	ldr	r0, [pc, #8]	; (80006b8 <TIM6_DAC_IRQHandler+0x10>)
 80006ae:	f001 fd1d 	bl	80020ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20002f60 	.word	0x20002f60

080006bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <SystemInit+0x20>)
 80006c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006c6:	4a05      	ldr	r2, [pc, #20]	; (80006dc <SystemInit+0x20>)
 80006c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000718 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e4:	480d      	ldr	r0, [pc, #52]	; (800071c <LoopForever+0x6>)
  ldr r1, =_edata
 80006e6:	490e      	ldr	r1, [pc, #56]	; (8000720 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006e8:	4a0e      	ldr	r2, [pc, #56]	; (8000724 <LoopForever+0xe>)
  movs r3, #0
 80006ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ec:	e002      	b.n	80006f4 <LoopCopyDataInit>

080006ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006f2:	3304      	adds	r3, #4

080006f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f8:	d3f9      	bcc.n	80006ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006fa:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006fc:	4c0b      	ldr	r4, [pc, #44]	; (800072c <LoopForever+0x16>)
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000700:	e001      	b.n	8000706 <LoopFillZerobss>

08000702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000704:	3204      	adds	r2, #4

08000706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000708:	d3fb      	bcc.n	8000702 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800070a:	f7ff ffd7 	bl	80006bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800070e:	f005 fe7d 	bl	800640c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000712:	f7ff fda7 	bl	8000264 <main>

08000716 <LoopForever>:

LoopForever:
    b LoopForever
 8000716:	e7fe      	b.n	8000716 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000718:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800071c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000720:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000724:	080065a0 	.word	0x080065a0
  ldr r2, =_sbss
 8000728:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800072c:	20003098 	.word	0x20003098

08000730 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000730:	e7fe      	b.n	8000730 <ADC1_2_IRQHandler>
	...

08000734 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <HAL_Init+0x28>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a07      	ldr	r2, [pc, #28]	; (800075c <HAL_Init+0x28>)
 800073e:	f043 0310 	orr.w	r3, r3, #16
 8000742:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000744:	2003      	movs	r0, #3
 8000746:	f000 f8d8 	bl	80008fa <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800074a:	2000      	movs	r0, #0
 800074c:	f7ff ff3e 	bl	80005cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000750:	f7ff ff18 	bl	8000584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000754:	2300      	movs	r3, #0
}
 8000756:	4618      	mov	r0, r3
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40022000 	.word	0x40022000

08000760 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <HAL_IncTick+0x20>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	461a      	mov	r2, r3
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <HAL_IncTick+0x24>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4413      	add	r3, r2
 8000770:	4a04      	ldr	r2, [pc, #16]	; (8000784 <HAL_IncTick+0x24>)
 8000772:	6013      	str	r3, [r2, #0]
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	20000008 	.word	0x20000008
 8000784:	20002fac 	.word	0x20002fac

08000788 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  return uwTick;  
 800078c:	4b03      	ldr	r3, [pc, #12]	; (800079c <HAL_GetTick+0x14>)
 800078e:	681b      	ldr	r3, [r3, #0]
}
 8000790:	4618      	mov	r0, r3
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	20002fac 	.word	0x20002fac

080007a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	f003 0307 	and.w	r3, r3, #7
 80007ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <__NVIC_SetPriorityGrouping+0x44>)
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007b6:	68ba      	ldr	r2, [r7, #8]
 80007b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007bc:	4013      	ands	r3, r2
 80007be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007d2:	4a04      	ldr	r2, [pc, #16]	; (80007e4 <__NVIC_SetPriorityGrouping+0x44>)
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	60d3      	str	r3, [r2, #12]
}
 80007d8:	bf00      	nop
 80007da:	3714      	adds	r7, #20
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007ec:	4b04      	ldr	r3, [pc, #16]	; (8000800 <__NVIC_GetPriorityGrouping+0x18>)
 80007ee:	68db      	ldr	r3, [r3, #12]
 80007f0:	0a1b      	lsrs	r3, r3, #8
 80007f2:	f003 0307 	and.w	r3, r3, #7
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800080e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000812:	2b00      	cmp	r3, #0
 8000814:	db0b      	blt.n	800082e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	f003 021f 	and.w	r2, r3, #31
 800081c:	4907      	ldr	r1, [pc, #28]	; (800083c <__NVIC_EnableIRQ+0x38>)
 800081e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000822:	095b      	lsrs	r3, r3, #5
 8000824:	2001      	movs	r0, #1
 8000826:	fa00 f202 	lsl.w	r2, r0, r2
 800082a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	e000e100 	.word	0xe000e100

08000840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	6039      	str	r1, [r7, #0]
 800084a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800084c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000850:	2b00      	cmp	r3, #0
 8000852:	db0a      	blt.n	800086a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	b2da      	uxtb	r2, r3
 8000858:	490c      	ldr	r1, [pc, #48]	; (800088c <__NVIC_SetPriority+0x4c>)
 800085a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085e:	0112      	lsls	r2, r2, #4
 8000860:	b2d2      	uxtb	r2, r2
 8000862:	440b      	add	r3, r1
 8000864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000868:	e00a      	b.n	8000880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	b2da      	uxtb	r2, r3
 800086e:	4908      	ldr	r1, [pc, #32]	; (8000890 <__NVIC_SetPriority+0x50>)
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	f003 030f 	and.w	r3, r3, #15
 8000876:	3b04      	subs	r3, #4
 8000878:	0112      	lsls	r2, r2, #4
 800087a:	b2d2      	uxtb	r2, r2
 800087c:	440b      	add	r3, r1
 800087e:	761a      	strb	r2, [r3, #24]
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	e000e100 	.word	0xe000e100
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000894:	b480      	push	{r7}
 8000896:	b089      	sub	sp, #36	; 0x24
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	f003 0307 	and.w	r3, r3, #7
 80008a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	f1c3 0307 	rsb	r3, r3, #7
 80008ae:	2b04      	cmp	r3, #4
 80008b0:	bf28      	it	cs
 80008b2:	2304      	movcs	r3, #4
 80008b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	3304      	adds	r3, #4
 80008ba:	2b06      	cmp	r3, #6
 80008bc:	d902      	bls.n	80008c4 <NVIC_EncodePriority+0x30>
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	3b03      	subs	r3, #3
 80008c2:	e000      	b.n	80008c6 <NVIC_EncodePriority+0x32>
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008cc:	69bb      	ldr	r3, [r7, #24]
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	43da      	mvns	r2, r3
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	401a      	ands	r2, r3
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	fa01 f303 	lsl.w	r3, r1, r3
 80008e6:	43d9      	mvns	r1, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ec:	4313      	orrs	r3, r2
         );
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3724      	adds	r7, #36	; 0x24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b082      	sub	sp, #8
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f7ff ff4c 	bl	80007a0 <__NVIC_SetPriorityGrouping>
}
 8000908:	bf00      	nop
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	607a      	str	r2, [r7, #4]
 800091c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000922:	f7ff ff61 	bl	80007e8 <__NVIC_GetPriorityGrouping>
 8000926:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	68b9      	ldr	r1, [r7, #8]
 800092c:	6978      	ldr	r0, [r7, #20]
 800092e:	f7ff ffb1 	bl	8000894 <NVIC_EncodePriority>
 8000932:	4602      	mov	r2, r0
 8000934:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000938:	4611      	mov	r1, r2
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff ff80 	bl	8000840 <__NVIC_SetPriority>
}
 8000940:	bf00      	nop
 8000942:	3718      	adds	r7, #24
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff ff54 	bl	8000804 <__NVIC_EnableIRQ>
}
 800095c:	bf00      	nop
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000964:	b480      	push	{r7}
 8000966:	b087      	sub	sp, #28
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000972:	e154      	b.n	8000c1e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	2101      	movs	r1, #1
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	fa01 f303 	lsl.w	r3, r1, r3
 8000980:	4013      	ands	r3, r2
 8000982:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	2b00      	cmp	r3, #0
 8000988:	f000 8146 	beq.w	8000c18 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d00b      	beq.n	80009ac <HAL_GPIO_Init+0x48>
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	2b02      	cmp	r3, #2
 800099a:	d007      	beq.n	80009ac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009a0:	2b11      	cmp	r3, #17
 80009a2:	d003      	beq.n	80009ac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	2b12      	cmp	r3, #18
 80009aa:	d130      	bne.n	8000a0e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	689b      	ldr	r3, [r3, #8]
 80009b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	2203      	movs	r2, #3
 80009b8:	fa02 f303 	lsl.w	r3, r2, r3
 80009bc:	43db      	mvns	r3, r3
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	4013      	ands	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	68da      	ldr	r2, [r3, #12]
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009e2:	2201      	movs	r2, #1
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	43db      	mvns	r3, r3
 80009ec:	693a      	ldr	r2, [r7, #16]
 80009ee:	4013      	ands	r3, r2
 80009f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	091b      	lsrs	r3, r3, #4
 80009f8:	f003 0201 	and.w	r2, r3, #1
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	68db      	ldr	r3, [r3, #12]
 8000a12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	2203      	movs	r2, #3
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	43db      	mvns	r3, r3
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	4013      	ands	r3, r2
 8000a24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	689a      	ldr	r2, [r3, #8]
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	2b02      	cmp	r3, #2
 8000a44:	d003      	beq.n	8000a4e <HAL_GPIO_Init+0xea>
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	2b12      	cmp	r3, #18
 8000a4c:	d123      	bne.n	8000a96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	08da      	lsrs	r2, r3, #3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	3208      	adds	r2, #8
 8000a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	f003 0307 	and.w	r3, r3, #7
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	220f      	movs	r2, #15
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	43db      	mvns	r3, r3
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	4013      	ands	r3, r2
 8000a70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	691a      	ldr	r2, [r3, #16]
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	f003 0307 	and.w	r3, r3, #7
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	08da      	lsrs	r2, r3, #3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3208      	adds	r2, #8
 8000a90:	6939      	ldr	r1, [r7, #16]
 8000a92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	2203      	movs	r2, #3
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f003 0203 	and.w	r2, r3, #3
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	f000 80a0 	beq.w	8000c18 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad8:	4b58      	ldr	r3, [pc, #352]	; (8000c3c <HAL_GPIO_Init+0x2d8>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	4a57      	ldr	r2, [pc, #348]	; (8000c3c <HAL_GPIO_Init+0x2d8>)
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	6193      	str	r3, [r2, #24]
 8000ae4:	4b55      	ldr	r3, [pc, #340]	; (8000c3c <HAL_GPIO_Init+0x2d8>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	f003 0301 	and.w	r3, r3, #1
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000af0:	4a53      	ldr	r2, [pc, #332]	; (8000c40 <HAL_GPIO_Init+0x2dc>)
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	089b      	lsrs	r3, r3, #2
 8000af6:	3302      	adds	r3, #2
 8000af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000afc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	f003 0303 	and.w	r3, r3, #3
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	220f      	movs	r2, #15
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	4013      	ands	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b1a:	d019      	beq.n	8000b50 <HAL_GPIO_Init+0x1ec>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a49      	ldr	r2, [pc, #292]	; (8000c44 <HAL_GPIO_Init+0x2e0>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d013      	beq.n	8000b4c <HAL_GPIO_Init+0x1e8>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a48      	ldr	r2, [pc, #288]	; (8000c48 <HAL_GPIO_Init+0x2e4>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d00d      	beq.n	8000b48 <HAL_GPIO_Init+0x1e4>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a47      	ldr	r2, [pc, #284]	; (8000c4c <HAL_GPIO_Init+0x2e8>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d007      	beq.n	8000b44 <HAL_GPIO_Init+0x1e0>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a46      	ldr	r2, [pc, #280]	; (8000c50 <HAL_GPIO_Init+0x2ec>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d101      	bne.n	8000b40 <HAL_GPIO_Init+0x1dc>
 8000b3c:	2304      	movs	r3, #4
 8000b3e:	e008      	b.n	8000b52 <HAL_GPIO_Init+0x1ee>
 8000b40:	2305      	movs	r3, #5
 8000b42:	e006      	b.n	8000b52 <HAL_GPIO_Init+0x1ee>
 8000b44:	2303      	movs	r3, #3
 8000b46:	e004      	b.n	8000b52 <HAL_GPIO_Init+0x1ee>
 8000b48:	2302      	movs	r3, #2
 8000b4a:	e002      	b.n	8000b52 <HAL_GPIO_Init+0x1ee>
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	e000      	b.n	8000b52 <HAL_GPIO_Init+0x1ee>
 8000b50:	2300      	movs	r3, #0
 8000b52:	697a      	ldr	r2, [r7, #20]
 8000b54:	f002 0203 	and.w	r2, r2, #3
 8000b58:	0092      	lsls	r2, r2, #2
 8000b5a:	4093      	lsls	r3, r2
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b62:	4937      	ldr	r1, [pc, #220]	; (8000c40 <HAL_GPIO_Init+0x2dc>)
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	089b      	lsrs	r3, r3, #2
 8000b68:	3302      	adds	r3, #2
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b70:	4b38      	ldr	r3, [pc, #224]	; (8000c54 <HAL_GPIO_Init+0x2f0>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d003      	beq.n	8000b94 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b94:	4a2f      	ldr	r2, [pc, #188]	; (8000c54 <HAL_GPIO_Init+0x2f0>)
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b9a:	4b2e      	ldr	r3, [pc, #184]	; (8000c54 <HAL_GPIO_Init+0x2f0>)
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	43db      	mvns	r3, r3
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d003      	beq.n	8000bbe <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bbe:	4a25      	ldr	r2, [pc, #148]	; (8000c54 <HAL_GPIO_Init+0x2f0>)
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bc4:	4b23      	ldr	r3, [pc, #140]	; (8000c54 <HAL_GPIO_Init+0x2f0>)
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d003      	beq.n	8000be8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000be8:	4a1a      	ldr	r2, [pc, #104]	; (8000c54 <HAL_GPIO_Init+0x2f0>)
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bee:	4b19      	ldr	r3, [pc, #100]	; (8000c54 <HAL_GPIO_Init+0x2f0>)
 8000bf0:	68db      	ldr	r3, [r3, #12]
 8000bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d003      	beq.n	8000c12 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c12:	4a10      	ldr	r2, [pc, #64]	; (8000c54 <HAL_GPIO_Init+0x2f0>)
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	fa22 f303 	lsr.w	r3, r2, r3
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	f47f aea3 	bne.w	8000974 <HAL_GPIO_Init+0x10>
  }
}
 8000c2e:	bf00      	nop
 8000c30:	bf00      	nop
 8000c32:	371c      	adds	r7, #28
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40010000 	.word	0x40010000
 8000c44:	48000400 	.word	0x48000400
 8000c48:	48000800 	.word	0x48000800
 8000c4c:	48000c00 	.word	0x48000c00
 8000c50:	48001000 	.word	0x48001000
 8000c54:	40010400 	.word	0x40010400

08000c58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	460b      	mov	r3, r1
 8000c62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	691a      	ldr	r2, [r3, #16]
 8000c68:	887b      	ldrh	r3, [r7, #2]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d002      	beq.n	8000c76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000c70:	2301      	movs	r3, #1
 8000c72:	73fb      	strb	r3, [r7, #15]
 8000c74:	e001      	b.n	8000c7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c76:	2300      	movs	r3, #0
 8000c78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	807b      	strh	r3, [r7, #2]
 8000c94:	4613      	mov	r3, r2
 8000c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c98:	787b      	ldrb	r3, [r7, #1]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d003      	beq.n	8000ca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c9e:	887a      	ldrh	r2, [r7, #2]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ca4:	e002      	b.n	8000cac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ca6:	887a      	ldrh	r2, [r7, #2]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d102      	bne.n	8000cd2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	f000 bef4 	b.w	8001aba <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	f000 816a 	beq.w	8000fb6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ce2:	4bb3      	ldr	r3, [pc, #716]	; (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f003 030c 	and.w	r3, r3, #12
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	d00c      	beq.n	8000d08 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cee:	4bb0      	ldr	r3, [pc, #704]	; (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f003 030c 	and.w	r3, r3, #12
 8000cf6:	2b08      	cmp	r3, #8
 8000cf8:	d159      	bne.n	8000dae <HAL_RCC_OscConfig+0xf6>
 8000cfa:	4bad      	ldr	r3, [pc, #692]	; (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d06:	d152      	bne.n	8000dae <HAL_RCC_OscConfig+0xf6>
 8000d08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d0c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d10:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000d14:	fa93 f3a3 	rbit	r3, r3
 8000d18:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d1c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d20:	fab3 f383 	clz	r3, r3
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	095b      	lsrs	r3, r3, #5
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	f043 0301 	orr.w	r3, r3, #1
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d102      	bne.n	8000d3a <HAL_RCC_OscConfig+0x82>
 8000d34:	4b9e      	ldr	r3, [pc, #632]	; (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	e015      	b.n	8000d66 <HAL_RCC_OscConfig+0xae>
 8000d3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d3e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d42:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000d46:	fa93 f3a3 	rbit	r3, r3
 8000d4a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d52:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d56:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000d5a:	fa93 f3a3 	rbit	r3, r3
 8000d5e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000d62:	4b93      	ldr	r3, [pc, #588]	; (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d6a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000d6e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000d72:	fa92 f2a2 	rbit	r2, r2
 8000d76:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000d7a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000d7e:	fab2 f282 	clz	r2, r2
 8000d82:	b2d2      	uxtb	r2, r2
 8000d84:	f042 0220 	orr.w	r2, r2, #32
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	f002 021f 	and.w	r2, r2, #31
 8000d8e:	2101      	movs	r1, #1
 8000d90:	fa01 f202 	lsl.w	r2, r1, r2
 8000d94:	4013      	ands	r3, r2
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f000 810c 	beq.w	8000fb4 <HAL_RCC_OscConfig+0x2fc>
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8106 	bne.w	8000fb4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	f000 be86 	b.w	8001aba <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000db8:	d106      	bne.n	8000dc8 <HAL_RCC_OscConfig+0x110>
 8000dba:	4b7d      	ldr	r3, [pc, #500]	; (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a7c      	ldr	r2, [pc, #496]	; (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dc4:	6013      	str	r3, [r2, #0]
 8000dc6:	e030      	b.n	8000e2a <HAL_RCC_OscConfig+0x172>
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d10c      	bne.n	8000dec <HAL_RCC_OscConfig+0x134>
 8000dd2:	4b77      	ldr	r3, [pc, #476]	; (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a76      	ldr	r2, [pc, #472]	; (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000dd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ddc:	6013      	str	r3, [r2, #0]
 8000dde:	4b74      	ldr	r3, [pc, #464]	; (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a73      	ldr	r2, [pc, #460]	; (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000de4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000de8:	6013      	str	r3, [r2, #0]
 8000dea:	e01e      	b.n	8000e2a <HAL_RCC_OscConfig+0x172>
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000df6:	d10c      	bne.n	8000e12 <HAL_RCC_OscConfig+0x15a>
 8000df8:	4b6d      	ldr	r3, [pc, #436]	; (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a6c      	ldr	r2, [pc, #432]	; (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000dfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e02:	6013      	str	r3, [r2, #0]
 8000e04:	4b6a      	ldr	r3, [pc, #424]	; (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a69      	ldr	r2, [pc, #420]	; (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000e0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e0e:	6013      	str	r3, [r2, #0]
 8000e10:	e00b      	b.n	8000e2a <HAL_RCC_OscConfig+0x172>
 8000e12:	4b67      	ldr	r3, [pc, #412]	; (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a66      	ldr	r2, [pc, #408]	; (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e1c:	6013      	str	r3, [r2, #0]
 8000e1e:	4b64      	ldr	r3, [pc, #400]	; (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a63      	ldr	r2, [pc, #396]	; (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000e24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e28:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e2a:	4b61      	ldr	r3, [pc, #388]	; (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2e:	f023 020f 	bic.w	r2, r3, #15
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	495d      	ldr	r1, [pc, #372]	; (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d059      	beq.n	8000efc <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e48:	f7ff fc9e 	bl	8000788 <HAL_GetTick>
 8000e4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e50:	e00a      	b.n	8000e68 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e52:	f7ff fc99 	bl	8000788 <HAL_GetTick>
 8000e56:	4602      	mov	r2, r0
 8000e58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	2b64      	cmp	r3, #100	; 0x64
 8000e60:	d902      	bls.n	8000e68 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000e62:	2303      	movs	r3, #3
 8000e64:	f000 be29 	b.w	8001aba <HAL_RCC_OscConfig+0xe02>
 8000e68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e6c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e70:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000e74:	fa93 f3a3 	rbit	r3, r3
 8000e78:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000e7c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e80:	fab3 f383 	clz	r3, r3
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	095b      	lsrs	r3, r3, #5
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	f043 0301 	orr.w	r3, r3, #1
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d102      	bne.n	8000e9a <HAL_RCC_OscConfig+0x1e2>
 8000e94:	4b46      	ldr	r3, [pc, #280]	; (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	e015      	b.n	8000ec6 <HAL_RCC_OscConfig+0x20e>
 8000e9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e9e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000ea6:	fa93 f3a3 	rbit	r3, r3
 8000eaa:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000eae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eb2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000eb6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000eba:	fa93 f3a3 	rbit	r3, r3
 8000ebe:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000ec2:	4b3b      	ldr	r3, [pc, #236]	; (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000eca:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000ece:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000ed2:	fa92 f2a2 	rbit	r2, r2
 8000ed6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000eda:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000ede:	fab2 f282 	clz	r2, r2
 8000ee2:	b2d2      	uxtb	r2, r2
 8000ee4:	f042 0220 	orr.w	r2, r2, #32
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	f002 021f 	and.w	r2, r2, #31
 8000eee:	2101      	movs	r1, #1
 8000ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d0ab      	beq.n	8000e52 <HAL_RCC_OscConfig+0x19a>
 8000efa:	e05c      	b.n	8000fb6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000efc:	f7ff fc44 	bl	8000788 <HAL_GetTick>
 8000f00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f04:	e00a      	b.n	8000f1c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f06:	f7ff fc3f 	bl	8000788 <HAL_GetTick>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	2b64      	cmp	r3, #100	; 0x64
 8000f14:	d902      	bls.n	8000f1c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8000f16:	2303      	movs	r3, #3
 8000f18:	f000 bdcf 	b.w	8001aba <HAL_RCC_OscConfig+0xe02>
 8000f1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f20:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f24:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000f28:	fa93 f3a3 	rbit	r3, r3
 8000f2c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000f30:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f34:	fab3 f383 	clz	r3, r3
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	095b      	lsrs	r3, r3, #5
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d102      	bne.n	8000f4e <HAL_RCC_OscConfig+0x296>
 8000f48:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	e015      	b.n	8000f7a <HAL_RCC_OscConfig+0x2c2>
 8000f4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f52:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f56:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000f5a:	fa93 f3a3 	rbit	r3, r3
 8000f5e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000f62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f66:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f6a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000f6e:	fa93 f3a3 	rbit	r3, r3
 8000f72:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <HAL_RCC_OscConfig+0x2f8>)
 8000f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f7e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000f82:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000f86:	fa92 f2a2 	rbit	r2, r2
 8000f8a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000f8e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000f92:	fab2 f282 	clz	r2, r2
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	f042 0220 	orr.w	r2, r2, #32
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	f002 021f 	and.w	r2, r2, #31
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa8:	4013      	ands	r3, r2
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d1ab      	bne.n	8000f06 <HAL_RCC_OscConfig+0x24e>
 8000fae:	e002      	b.n	8000fb6 <HAL_RCC_OscConfig+0x2fe>
 8000fb0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f003 0302 	and.w	r3, r3, #2
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	f000 816f 	beq.w	80012a4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fc6:	4bd0      	ldr	r3, [pc, #832]	; (8001308 <HAL_RCC_OscConfig+0x650>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 030c 	and.w	r3, r3, #12
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d00b      	beq.n	8000fea <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fd2:	4bcd      	ldr	r3, [pc, #820]	; (8001308 <HAL_RCC_OscConfig+0x650>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 030c 	and.w	r3, r3, #12
 8000fda:	2b08      	cmp	r3, #8
 8000fdc:	d16c      	bne.n	80010b8 <HAL_RCC_OscConfig+0x400>
 8000fde:	4bca      	ldr	r3, [pc, #808]	; (8001308 <HAL_RCC_OscConfig+0x650>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d166      	bne.n	80010b8 <HAL_RCC_OscConfig+0x400>
 8000fea:	2302      	movs	r3, #2
 8000fec:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000ff4:	fa93 f3a3 	rbit	r3, r3
 8000ff8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000ffc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001000:	fab3 f383 	clz	r3, r3
 8001004:	b2db      	uxtb	r3, r3
 8001006:	095b      	lsrs	r3, r3, #5
 8001008:	b2db      	uxtb	r3, r3
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	b2db      	uxtb	r3, r3
 8001010:	2b01      	cmp	r3, #1
 8001012:	d102      	bne.n	800101a <HAL_RCC_OscConfig+0x362>
 8001014:	4bbc      	ldr	r3, [pc, #752]	; (8001308 <HAL_RCC_OscConfig+0x650>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	e013      	b.n	8001042 <HAL_RCC_OscConfig+0x38a>
 800101a:	2302      	movs	r3, #2
 800101c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001020:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001024:	fa93 f3a3 	rbit	r3, r3
 8001028:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800102c:	2302      	movs	r3, #2
 800102e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001032:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001036:	fa93 f3a3 	rbit	r3, r3
 800103a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800103e:	4bb2      	ldr	r3, [pc, #712]	; (8001308 <HAL_RCC_OscConfig+0x650>)
 8001040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001042:	2202      	movs	r2, #2
 8001044:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001048:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800104c:	fa92 f2a2 	rbit	r2, r2
 8001050:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001054:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001058:	fab2 f282 	clz	r2, r2
 800105c:	b2d2      	uxtb	r2, r2
 800105e:	f042 0220 	orr.w	r2, r2, #32
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	f002 021f 	and.w	r2, r2, #31
 8001068:	2101      	movs	r1, #1
 800106a:	fa01 f202 	lsl.w	r2, r1, r2
 800106e:	4013      	ands	r3, r2
 8001070:	2b00      	cmp	r3, #0
 8001072:	d007      	beq.n	8001084 <HAL_RCC_OscConfig+0x3cc>
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	691b      	ldr	r3, [r3, #16]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d002      	beq.n	8001084 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	f000 bd1b 	b.w	8001aba <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001084:	4ba0      	ldr	r3, [pc, #640]	; (8001308 <HAL_RCC_OscConfig+0x650>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	21f8      	movs	r1, #248	; 0xf8
 8001094:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001098:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800109c:	fa91 f1a1 	rbit	r1, r1
 80010a0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80010a4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80010a8:	fab1 f181 	clz	r1, r1
 80010ac:	b2c9      	uxtb	r1, r1
 80010ae:	408b      	lsls	r3, r1
 80010b0:	4995      	ldr	r1, [pc, #596]	; (8001308 <HAL_RCC_OscConfig+0x650>)
 80010b2:	4313      	orrs	r3, r2
 80010b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010b6:	e0f5      	b.n	80012a4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	691b      	ldr	r3, [r3, #16]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f000 8085 	beq.w	80011ce <HAL_RCC_OscConfig+0x516>
 80010c4:	2301      	movs	r3, #1
 80010c6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ca:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80010ce:	fa93 f3a3 	rbit	r3, r3
 80010d2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80010d6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010da:	fab3 f383 	clz	r3, r3
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	461a      	mov	r2, r3
 80010ec:	2301      	movs	r3, #1
 80010ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f0:	f7ff fb4a 	bl	8000788 <HAL_GetTick>
 80010f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010f8:	e00a      	b.n	8001110 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010fa:	f7ff fb45 	bl	8000788 <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d902      	bls.n	8001110 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	f000 bcd5 	b.w	8001aba <HAL_RCC_OscConfig+0xe02>
 8001110:	2302      	movs	r3, #2
 8001112:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001116:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800111a:	fa93 f3a3 	rbit	r3, r3
 800111e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001122:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001126:	fab3 f383 	clz	r3, r3
 800112a:	b2db      	uxtb	r3, r3
 800112c:	095b      	lsrs	r3, r3, #5
 800112e:	b2db      	uxtb	r3, r3
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b01      	cmp	r3, #1
 8001138:	d102      	bne.n	8001140 <HAL_RCC_OscConfig+0x488>
 800113a:	4b73      	ldr	r3, [pc, #460]	; (8001308 <HAL_RCC_OscConfig+0x650>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	e013      	b.n	8001168 <HAL_RCC_OscConfig+0x4b0>
 8001140:	2302      	movs	r3, #2
 8001142:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001146:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800114a:	fa93 f3a3 	rbit	r3, r3
 800114e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001152:	2302      	movs	r3, #2
 8001154:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001158:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800115c:	fa93 f3a3 	rbit	r3, r3
 8001160:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001164:	4b68      	ldr	r3, [pc, #416]	; (8001308 <HAL_RCC_OscConfig+0x650>)
 8001166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001168:	2202      	movs	r2, #2
 800116a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800116e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001172:	fa92 f2a2 	rbit	r2, r2
 8001176:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800117a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800117e:	fab2 f282 	clz	r2, r2
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	f042 0220 	orr.w	r2, r2, #32
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	f002 021f 	and.w	r2, r2, #31
 800118e:	2101      	movs	r1, #1
 8001190:	fa01 f202 	lsl.w	r2, r1, r2
 8001194:	4013      	ands	r3, r2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0af      	beq.n	80010fa <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800119a:	4b5b      	ldr	r3, [pc, #364]	; (8001308 <HAL_RCC_OscConfig+0x650>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	695b      	ldr	r3, [r3, #20]
 80011a8:	21f8      	movs	r1, #248	; 0xf8
 80011aa:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ae:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80011b2:	fa91 f1a1 	rbit	r1, r1
 80011b6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80011ba:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80011be:	fab1 f181 	clz	r1, r1
 80011c2:	b2c9      	uxtb	r1, r1
 80011c4:	408b      	lsls	r3, r1
 80011c6:	4950      	ldr	r1, [pc, #320]	; (8001308 <HAL_RCC_OscConfig+0x650>)
 80011c8:	4313      	orrs	r3, r2
 80011ca:	600b      	str	r3, [r1, #0]
 80011cc:	e06a      	b.n	80012a4 <HAL_RCC_OscConfig+0x5ec>
 80011ce:	2301      	movs	r3, #1
 80011d0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80011d8:	fa93 f3a3 	rbit	r3, r3
 80011dc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80011e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011e4:	fab3 f383 	clz	r3, r3
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011ee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	461a      	mov	r2, r3
 80011f6:	2300      	movs	r3, #0
 80011f8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fa:	f7ff fac5 	bl	8000788 <HAL_GetTick>
 80011fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001202:	e00a      	b.n	800121a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001204:	f7ff fac0 	bl	8000788 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d902      	bls.n	800121a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	f000 bc50 	b.w	8001aba <HAL_RCC_OscConfig+0xe02>
 800121a:	2302      	movs	r3, #2
 800121c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001220:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001224:	fa93 f3a3 	rbit	r3, r3
 8001228:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800122c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001230:	fab3 f383 	clz	r3, r3
 8001234:	b2db      	uxtb	r3, r3
 8001236:	095b      	lsrs	r3, r3, #5
 8001238:	b2db      	uxtb	r3, r3
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b01      	cmp	r3, #1
 8001242:	d102      	bne.n	800124a <HAL_RCC_OscConfig+0x592>
 8001244:	4b30      	ldr	r3, [pc, #192]	; (8001308 <HAL_RCC_OscConfig+0x650>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	e013      	b.n	8001272 <HAL_RCC_OscConfig+0x5ba>
 800124a:	2302      	movs	r3, #2
 800124c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001250:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001254:	fa93 f3a3 	rbit	r3, r3
 8001258:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800125c:	2302      	movs	r3, #2
 800125e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001262:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001266:	fa93 f3a3 	rbit	r3, r3
 800126a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800126e:	4b26      	ldr	r3, [pc, #152]	; (8001308 <HAL_RCC_OscConfig+0x650>)
 8001270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001272:	2202      	movs	r2, #2
 8001274:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001278:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800127c:	fa92 f2a2 	rbit	r2, r2
 8001280:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001284:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001288:	fab2 f282 	clz	r2, r2
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	f042 0220 	orr.w	r2, r2, #32
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	f002 021f 	and.w	r2, r2, #31
 8001298:	2101      	movs	r1, #1
 800129a:	fa01 f202 	lsl.w	r2, r1, r2
 800129e:	4013      	ands	r3, r2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1af      	bne.n	8001204 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0308 	and.w	r3, r3, #8
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 80da 	beq.w	8001468 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d069      	beq.n	8001392 <HAL_RCC_OscConfig+0x6da>
 80012be:	2301      	movs	r3, #1
 80012c0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80012c8:	fa93 f3a3 	rbit	r3, r3
 80012cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80012d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012d4:	fab3 f383 	clz	r3, r3
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	461a      	mov	r2, r3
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <HAL_RCC_OscConfig+0x654>)
 80012de:	4413      	add	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	461a      	mov	r2, r3
 80012e4:	2301      	movs	r3, #1
 80012e6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e8:	f7ff fa4e 	bl	8000788 <HAL_GetTick>
 80012ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012f0:	e00e      	b.n	8001310 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012f2:	f7ff fa49 	bl	8000788 <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d906      	bls.n	8001310 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e3d9      	b.n	8001aba <HAL_RCC_OscConfig+0xe02>
 8001306:	bf00      	nop
 8001308:	40021000 	.word	0x40021000
 800130c:	10908120 	.word	0x10908120
 8001310:	2302      	movs	r3, #2
 8001312:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001316:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800131a:	fa93 f3a3 	rbit	r3, r3
 800131e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001322:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001326:	2202      	movs	r2, #2
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	fa93 f2a3 	rbit	r2, r3
 8001334:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800133e:	2202      	movs	r2, #2
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	fa93 f2a3 	rbit	r2, r3
 800134c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001350:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001352:	4ba5      	ldr	r3, [pc, #660]	; (80015e8 <HAL_RCC_OscConfig+0x930>)
 8001354:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001356:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800135a:	2102      	movs	r1, #2
 800135c:	6019      	str	r1, [r3, #0]
 800135e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	fa93 f1a3 	rbit	r1, r3
 8001368:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800136c:	6019      	str	r1, [r3, #0]
  return result;
 800136e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	fab3 f383 	clz	r3, r3
 8001378:	b2db      	uxtb	r3, r3
 800137a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800137e:	b2db      	uxtb	r3, r3
 8001380:	f003 031f 	and.w	r3, r3, #31
 8001384:	2101      	movs	r1, #1
 8001386:	fa01 f303 	lsl.w	r3, r1, r3
 800138a:	4013      	ands	r3, r2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0b0      	beq.n	80012f2 <HAL_RCC_OscConfig+0x63a>
 8001390:	e06a      	b.n	8001468 <HAL_RCC_OscConfig+0x7b0>
 8001392:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001396:	2201      	movs	r2, #1
 8001398:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800139a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	fa93 f2a3 	rbit	r2, r3
 80013a4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80013a8:	601a      	str	r2, [r3, #0]
  return result;
 80013aa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80013ae:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013b0:	fab3 f383 	clz	r3, r3
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	461a      	mov	r2, r3
 80013b8:	4b8c      	ldr	r3, [pc, #560]	; (80015ec <HAL_RCC_OscConfig+0x934>)
 80013ba:	4413      	add	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	461a      	mov	r2, r3
 80013c0:	2300      	movs	r3, #0
 80013c2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c4:	f7ff f9e0 	bl	8000788 <HAL_GetTick>
 80013c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013cc:	e009      	b.n	80013e2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ce:	f7ff f9db 	bl	8000788 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e36b      	b.n	8001aba <HAL_RCC_OscConfig+0xe02>
 80013e2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80013e6:	2202      	movs	r2, #2
 80013e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ea:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	fa93 f2a3 	rbit	r2, r3
 80013f4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80013fe:	2202      	movs	r2, #2
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	fa93 f2a3 	rbit	r2, r3
 800140c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001416:	2202      	movs	r2, #2
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	fa93 f2a3 	rbit	r2, r3
 8001424:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001428:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800142a:	4b6f      	ldr	r3, [pc, #444]	; (80015e8 <HAL_RCC_OscConfig+0x930>)
 800142c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800142e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001432:	2102      	movs	r1, #2
 8001434:	6019      	str	r1, [r3, #0]
 8001436:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	fa93 f1a3 	rbit	r1, r3
 8001440:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001444:	6019      	str	r1, [r3, #0]
  return result;
 8001446:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	fab3 f383 	clz	r3, r3
 8001450:	b2db      	uxtb	r3, r3
 8001452:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001456:	b2db      	uxtb	r3, r3
 8001458:	f003 031f 	and.w	r3, r3, #31
 800145c:	2101      	movs	r1, #1
 800145e:	fa01 f303 	lsl.w	r3, r1, r3
 8001462:	4013      	ands	r3, r2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1b2      	bne.n	80013ce <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 8158 	beq.w	8001728 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001478:	2300      	movs	r3, #0
 800147a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800147e:	4b5a      	ldr	r3, [pc, #360]	; (80015e8 <HAL_RCC_OscConfig+0x930>)
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d112      	bne.n	80014b0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800148a:	4b57      	ldr	r3, [pc, #348]	; (80015e8 <HAL_RCC_OscConfig+0x930>)
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	4a56      	ldr	r2, [pc, #344]	; (80015e8 <HAL_RCC_OscConfig+0x930>)
 8001490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001494:	61d3      	str	r3, [r2, #28]
 8001496:	4b54      	ldr	r3, [pc, #336]	; (80015e8 <HAL_RCC_OscConfig+0x930>)
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800149e:	f107 0308 	add.w	r3, r7, #8
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	f107 0308 	add.w	r3, r7, #8
 80014a8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80014aa:	2301      	movs	r3, #1
 80014ac:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b0:	4b4f      	ldr	r3, [pc, #316]	; (80015f0 <HAL_RCC_OscConfig+0x938>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d11a      	bne.n	80014f2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014bc:	4b4c      	ldr	r3, [pc, #304]	; (80015f0 <HAL_RCC_OscConfig+0x938>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a4b      	ldr	r2, [pc, #300]	; (80015f0 <HAL_RCC_OscConfig+0x938>)
 80014c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014c8:	f7ff f95e 	bl	8000788 <HAL_GetTick>
 80014cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d0:	e009      	b.n	80014e6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014d2:	f7ff f959 	bl	8000788 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b64      	cmp	r3, #100	; 0x64
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e2e9      	b.n	8001aba <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e6:	4b42      	ldr	r3, [pc, #264]	; (80015f0 <HAL_RCC_OscConfig+0x938>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0ef      	beq.n	80014d2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d106      	bne.n	800150a <HAL_RCC_OscConfig+0x852>
 80014fc:	4b3a      	ldr	r3, [pc, #232]	; (80015e8 <HAL_RCC_OscConfig+0x930>)
 80014fe:	6a1b      	ldr	r3, [r3, #32]
 8001500:	4a39      	ldr	r2, [pc, #228]	; (80015e8 <HAL_RCC_OscConfig+0x930>)
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	6213      	str	r3, [r2, #32]
 8001508:	e02f      	b.n	800156a <HAL_RCC_OscConfig+0x8b2>
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d10c      	bne.n	800152e <HAL_RCC_OscConfig+0x876>
 8001514:	4b34      	ldr	r3, [pc, #208]	; (80015e8 <HAL_RCC_OscConfig+0x930>)
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	4a33      	ldr	r2, [pc, #204]	; (80015e8 <HAL_RCC_OscConfig+0x930>)
 800151a:	f023 0301 	bic.w	r3, r3, #1
 800151e:	6213      	str	r3, [r2, #32]
 8001520:	4b31      	ldr	r3, [pc, #196]	; (80015e8 <HAL_RCC_OscConfig+0x930>)
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	4a30      	ldr	r2, [pc, #192]	; (80015e8 <HAL_RCC_OscConfig+0x930>)
 8001526:	f023 0304 	bic.w	r3, r3, #4
 800152a:	6213      	str	r3, [r2, #32]
 800152c:	e01d      	b.n	800156a <HAL_RCC_OscConfig+0x8b2>
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	2b05      	cmp	r3, #5
 8001536:	d10c      	bne.n	8001552 <HAL_RCC_OscConfig+0x89a>
 8001538:	4b2b      	ldr	r3, [pc, #172]	; (80015e8 <HAL_RCC_OscConfig+0x930>)
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	4a2a      	ldr	r2, [pc, #168]	; (80015e8 <HAL_RCC_OscConfig+0x930>)
 800153e:	f043 0304 	orr.w	r3, r3, #4
 8001542:	6213      	str	r3, [r2, #32]
 8001544:	4b28      	ldr	r3, [pc, #160]	; (80015e8 <HAL_RCC_OscConfig+0x930>)
 8001546:	6a1b      	ldr	r3, [r3, #32]
 8001548:	4a27      	ldr	r2, [pc, #156]	; (80015e8 <HAL_RCC_OscConfig+0x930>)
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	6213      	str	r3, [r2, #32]
 8001550:	e00b      	b.n	800156a <HAL_RCC_OscConfig+0x8b2>
 8001552:	4b25      	ldr	r3, [pc, #148]	; (80015e8 <HAL_RCC_OscConfig+0x930>)
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	4a24      	ldr	r2, [pc, #144]	; (80015e8 <HAL_RCC_OscConfig+0x930>)
 8001558:	f023 0301 	bic.w	r3, r3, #1
 800155c:	6213      	str	r3, [r2, #32]
 800155e:	4b22      	ldr	r3, [pc, #136]	; (80015e8 <HAL_RCC_OscConfig+0x930>)
 8001560:	6a1b      	ldr	r3, [r3, #32]
 8001562:	4a21      	ldr	r2, [pc, #132]	; (80015e8 <HAL_RCC_OscConfig+0x930>)
 8001564:	f023 0304 	bic.w	r3, r3, #4
 8001568:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d06b      	beq.n	800164c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001574:	f7ff f908 	bl	8000788 <HAL_GetTick>
 8001578:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157c:	e00b      	b.n	8001596 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800157e:	f7ff f903 	bl	8000788 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	f241 3288 	movw	r2, #5000	; 0x1388
 800158e:	4293      	cmp	r3, r2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e291      	b.n	8001aba <HAL_RCC_OscConfig+0xe02>
 8001596:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800159a:	2202      	movs	r2, #2
 800159c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	fa93 f2a3 	rbit	r2, r3
 80015a8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80015b2:	2202      	movs	r2, #2
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	fa93 f2a3 	rbit	r2, r3
 80015c0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80015c4:	601a      	str	r2, [r3, #0]
  return result;
 80015c6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80015ca:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015cc:	fab3 f383 	clz	r3, r3
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	095b      	lsrs	r3, r3, #5
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	f043 0302 	orr.w	r3, r3, #2
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d109      	bne.n	80015f4 <HAL_RCC_OscConfig+0x93c>
 80015e0:	4b01      	ldr	r3, [pc, #4]	; (80015e8 <HAL_RCC_OscConfig+0x930>)
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	e014      	b.n	8001610 <HAL_RCC_OscConfig+0x958>
 80015e6:	bf00      	nop
 80015e8:	40021000 	.word	0x40021000
 80015ec:	10908120 	.word	0x10908120
 80015f0:	40007000 	.word	0x40007000
 80015f4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80015f8:	2202      	movs	r2, #2
 80015fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	fa93 f2a3 	rbit	r2, r3
 8001606:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	4bbb      	ldr	r3, [pc, #748]	; (80018fc <HAL_RCC_OscConfig+0xc44>)
 800160e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001610:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001614:	2102      	movs	r1, #2
 8001616:	6011      	str	r1, [r2, #0]
 8001618:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800161c:	6812      	ldr	r2, [r2, #0]
 800161e:	fa92 f1a2 	rbit	r1, r2
 8001622:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001626:	6011      	str	r1, [r2, #0]
  return result;
 8001628:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800162c:	6812      	ldr	r2, [r2, #0]
 800162e:	fab2 f282 	clz	r2, r2
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	f002 021f 	and.w	r2, r2, #31
 800163e:	2101      	movs	r1, #1
 8001640:	fa01 f202 	lsl.w	r2, r1, r2
 8001644:	4013      	ands	r3, r2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d099      	beq.n	800157e <HAL_RCC_OscConfig+0x8c6>
 800164a:	e063      	b.n	8001714 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164c:	f7ff f89c 	bl	8000788 <HAL_GetTick>
 8001650:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001654:	e00b      	b.n	800166e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001656:	f7ff f897 	bl	8000788 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	f241 3288 	movw	r2, #5000	; 0x1388
 8001666:	4293      	cmp	r3, r2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e225      	b.n	8001aba <HAL_RCC_OscConfig+0xe02>
 800166e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001672:	2202      	movs	r2, #2
 8001674:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001676:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	fa93 f2a3 	rbit	r2, r3
 8001680:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800168a:	2202      	movs	r2, #2
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	fa93 f2a3 	rbit	r2, r3
 8001698:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800169c:	601a      	str	r2, [r3, #0]
  return result;
 800169e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80016a2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a4:	fab3 f383 	clz	r3, r3
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	095b      	lsrs	r3, r3, #5
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	f043 0302 	orr.w	r3, r3, #2
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d102      	bne.n	80016be <HAL_RCC_OscConfig+0xa06>
 80016b8:	4b90      	ldr	r3, [pc, #576]	; (80018fc <HAL_RCC_OscConfig+0xc44>)
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	e00d      	b.n	80016da <HAL_RCC_OscConfig+0xa22>
 80016be:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80016c2:	2202      	movs	r2, #2
 80016c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	fa93 f2a3 	rbit	r2, r3
 80016d0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	4b89      	ldr	r3, [pc, #548]	; (80018fc <HAL_RCC_OscConfig+0xc44>)
 80016d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016da:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80016de:	2102      	movs	r1, #2
 80016e0:	6011      	str	r1, [r2, #0]
 80016e2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80016e6:	6812      	ldr	r2, [r2, #0]
 80016e8:	fa92 f1a2 	rbit	r1, r2
 80016ec:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80016f0:	6011      	str	r1, [r2, #0]
  return result;
 80016f2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80016f6:	6812      	ldr	r2, [r2, #0]
 80016f8:	fab2 f282 	clz	r2, r2
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	f002 021f 	and.w	r2, r2, #31
 8001708:	2101      	movs	r1, #1
 800170a:	fa01 f202 	lsl.w	r2, r1, r2
 800170e:	4013      	ands	r3, r2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1a0      	bne.n	8001656 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001714:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001718:	2b01      	cmp	r3, #1
 800171a:	d105      	bne.n	8001728 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800171c:	4b77      	ldr	r3, [pc, #476]	; (80018fc <HAL_RCC_OscConfig+0xc44>)
 800171e:	69db      	ldr	r3, [r3, #28]
 8001720:	4a76      	ldr	r2, [pc, #472]	; (80018fc <HAL_RCC_OscConfig+0xc44>)
 8001722:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001726:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 81c2 	beq.w	8001ab8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001734:	4b71      	ldr	r3, [pc, #452]	; (80018fc <HAL_RCC_OscConfig+0xc44>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 030c 	and.w	r3, r3, #12
 800173c:	2b08      	cmp	r3, #8
 800173e:	f000 819c 	beq.w	8001a7a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	2b02      	cmp	r3, #2
 800174a:	f040 8114 	bne.w	8001976 <HAL_RCC_OscConfig+0xcbe>
 800174e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001752:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001756:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001758:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	fa93 f2a3 	rbit	r2, r3
 8001762:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001766:	601a      	str	r2, [r3, #0]
  return result;
 8001768:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800176c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800176e:	fab3 f383 	clz	r3, r3
 8001772:	b2db      	uxtb	r3, r3
 8001774:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001778:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	461a      	mov	r2, r3
 8001780:	2300      	movs	r3, #0
 8001782:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001784:	f7ff f800 	bl	8000788 <HAL_GetTick>
 8001788:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800178c:	e009      	b.n	80017a2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800178e:	f7fe fffb 	bl	8000788 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e18b      	b.n	8001aba <HAL_RCC_OscConfig+0xe02>
 80017a2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80017a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ac:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	fa93 f2a3 	rbit	r2, r3
 80017b6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80017ba:	601a      	str	r2, [r3, #0]
  return result;
 80017bc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80017c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017c2:	fab3 f383 	clz	r3, r3
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	095b      	lsrs	r3, r3, #5
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d102      	bne.n	80017dc <HAL_RCC_OscConfig+0xb24>
 80017d6:	4b49      	ldr	r3, [pc, #292]	; (80018fc <HAL_RCC_OscConfig+0xc44>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	e01b      	b.n	8001814 <HAL_RCC_OscConfig+0xb5c>
 80017dc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	fa93 f2a3 	rbit	r2, r3
 80017f0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80017fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	fa93 f2a3 	rbit	r2, r3
 800180a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	4b3a      	ldr	r3, [pc, #232]	; (80018fc <HAL_RCC_OscConfig+0xc44>)
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001818:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800181c:	6011      	str	r1, [r2, #0]
 800181e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001822:	6812      	ldr	r2, [r2, #0]
 8001824:	fa92 f1a2 	rbit	r1, r2
 8001828:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800182c:	6011      	str	r1, [r2, #0]
  return result;
 800182e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001832:	6812      	ldr	r2, [r2, #0]
 8001834:	fab2 f282 	clz	r2, r2
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	f042 0220 	orr.w	r2, r2, #32
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	f002 021f 	and.w	r2, r2, #31
 8001844:	2101      	movs	r1, #1
 8001846:	fa01 f202 	lsl.w	r2, r1, r2
 800184a:	4013      	ands	r3, r2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d19e      	bne.n	800178e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001850:	4b2a      	ldr	r3, [pc, #168]	; (80018fc <HAL_RCC_OscConfig+0xc44>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001858:	1d3b      	adds	r3, r7, #4
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	430b      	orrs	r3, r1
 8001866:	4925      	ldr	r1, [pc, #148]	; (80018fc <HAL_RCC_OscConfig+0xc44>)
 8001868:	4313      	orrs	r3, r2
 800186a:	604b      	str	r3, [r1, #4]
 800186c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001870:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001874:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001876:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	fa93 f2a3 	rbit	r2, r3
 8001880:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001884:	601a      	str	r2, [r3, #0]
  return result;
 8001886:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800188a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800188c:	fab3 f383 	clz	r3, r3
 8001890:	b2db      	uxtb	r3, r3
 8001892:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001896:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	461a      	mov	r2, r3
 800189e:	2301      	movs	r3, #1
 80018a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a2:	f7fe ff71 	bl	8000788 <HAL_GetTick>
 80018a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018aa:	e009      	b.n	80018c0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ac:	f7fe ff6c 	bl	8000788 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e0fc      	b.n	8001aba <HAL_RCC_OscConfig+0xe02>
 80018c0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	fa93 f2a3 	rbit	r2, r3
 80018d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018d8:	601a      	str	r2, [r3, #0]
  return result;
 80018da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018de:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018e0:	fab3 f383 	clz	r3, r3
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	095b      	lsrs	r3, r3, #5
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d105      	bne.n	8001900 <HAL_RCC_OscConfig+0xc48>
 80018f4:	4b01      	ldr	r3, [pc, #4]	; (80018fc <HAL_RCC_OscConfig+0xc44>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	e01e      	b.n	8001938 <HAL_RCC_OscConfig+0xc80>
 80018fa:	bf00      	nop
 80018fc:	40021000 	.word	0x40021000
 8001900:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001904:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001908:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	fa93 f2a3 	rbit	r2, r3
 8001914:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800191e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	fa93 f2a3 	rbit	r2, r3
 800192e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	4b63      	ldr	r3, [pc, #396]	; (8001ac4 <HAL_RCC_OscConfig+0xe0c>)
 8001936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001938:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800193c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001940:	6011      	str	r1, [r2, #0]
 8001942:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001946:	6812      	ldr	r2, [r2, #0]
 8001948:	fa92 f1a2 	rbit	r1, r2
 800194c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001950:	6011      	str	r1, [r2, #0]
  return result;
 8001952:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001956:	6812      	ldr	r2, [r2, #0]
 8001958:	fab2 f282 	clz	r2, r2
 800195c:	b2d2      	uxtb	r2, r2
 800195e:	f042 0220 	orr.w	r2, r2, #32
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	f002 021f 	and.w	r2, r2, #31
 8001968:	2101      	movs	r1, #1
 800196a:	fa01 f202 	lsl.w	r2, r1, r2
 800196e:	4013      	ands	r3, r2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d09b      	beq.n	80018ac <HAL_RCC_OscConfig+0xbf4>
 8001974:	e0a0      	b.n	8001ab8 <HAL_RCC_OscConfig+0xe00>
 8001976:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800197a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800197e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001980:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	fa93 f2a3 	rbit	r2, r3
 800198a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800198e:	601a      	str	r2, [r3, #0]
  return result;
 8001990:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001994:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001996:	fab3 f383 	clz	r3, r3
 800199a:	b2db      	uxtb	r3, r3
 800199c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	461a      	mov	r2, r3
 80019a8:	2300      	movs	r3, #0
 80019aa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ac:	f7fe feec 	bl	8000788 <HAL_GetTick>
 80019b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b4:	e009      	b.n	80019ca <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b6:	f7fe fee7 	bl	8000788 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e077      	b.n	8001aba <HAL_RCC_OscConfig+0xe02>
 80019ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	fa93 f2a3 	rbit	r2, r3
 80019de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e2:	601a      	str	r2, [r3, #0]
  return result;
 80019e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ea:	fab3 f383 	clz	r3, r3
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	095b      	lsrs	r3, r3, #5
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d102      	bne.n	8001a04 <HAL_RCC_OscConfig+0xd4c>
 80019fe:	4b31      	ldr	r3, [pc, #196]	; (8001ac4 <HAL_RCC_OscConfig+0xe0c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	e01b      	b.n	8001a3c <HAL_RCC_OscConfig+0xd84>
 8001a04:	f107 0320 	add.w	r3, r7, #32
 8001a08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0e:	f107 0320 	add.w	r3, r7, #32
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	fa93 f2a3 	rbit	r2, r3
 8001a18:	f107 031c 	add.w	r3, r7, #28
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	f107 0318 	add.w	r3, r7, #24
 8001a22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	f107 0318 	add.w	r3, r7, #24
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	fa93 f2a3 	rbit	r2, r3
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	4b22      	ldr	r3, [pc, #136]	; (8001ac4 <HAL_RCC_OscConfig+0xe0c>)
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3c:	f107 0210 	add.w	r2, r7, #16
 8001a40:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a44:	6011      	str	r1, [r2, #0]
 8001a46:	f107 0210 	add.w	r2, r7, #16
 8001a4a:	6812      	ldr	r2, [r2, #0]
 8001a4c:	fa92 f1a2 	rbit	r1, r2
 8001a50:	f107 020c 	add.w	r2, r7, #12
 8001a54:	6011      	str	r1, [r2, #0]
  return result;
 8001a56:	f107 020c 	add.w	r2, r7, #12
 8001a5a:	6812      	ldr	r2, [r2, #0]
 8001a5c:	fab2 f282 	clz	r2, r2
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	f042 0220 	orr.w	r2, r2, #32
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	f002 021f 	and.w	r2, r2, #31
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a72:	4013      	ands	r3, r2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d19e      	bne.n	80019b6 <HAL_RCC_OscConfig+0xcfe>
 8001a78:	e01e      	b.n	8001ab8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a7a:	1d3b      	adds	r3, r7, #4
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	69db      	ldr	r3, [r3, #28]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d101      	bne.n	8001a88 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e018      	b.n	8001aba <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a88:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <HAL_RCC_OscConfig+0xe0c>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001a90:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001a94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a98:	1d3b      	adds	r3, r7, #4
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d108      	bne.n	8001ab4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001aa2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001aa6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001aaa:	1d3b      	adds	r3, r7, #4
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d001      	beq.n	8001ab8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e000      	b.n	8001aba <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40021000 	.word	0x40021000

08001ac8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b09e      	sub	sp, #120	; 0x78
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e162      	b.n	8001da6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ae0:	4b90      	ldr	r3, [pc, #576]	; (8001d24 <HAL_RCC_ClockConfig+0x25c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d910      	bls.n	8001b10 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aee:	4b8d      	ldr	r3, [pc, #564]	; (8001d24 <HAL_RCC_ClockConfig+0x25c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f023 0207 	bic.w	r2, r3, #7
 8001af6:	498b      	ldr	r1, [pc, #556]	; (8001d24 <HAL_RCC_ClockConfig+0x25c>)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afe:	4b89      	ldr	r3, [pc, #548]	; (8001d24 <HAL_RCC_ClockConfig+0x25c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d001      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e14a      	b.n	8001da6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d008      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b1c:	4b82      	ldr	r3, [pc, #520]	; (8001d28 <HAL_RCC_ClockConfig+0x260>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	497f      	ldr	r1, [pc, #508]	; (8001d28 <HAL_RCC_ClockConfig+0x260>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 80dc 	beq.w	8001cf4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d13c      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xf6>
 8001b44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b48:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b4c:	fa93 f3a3 	rbit	r3, r3
 8001b50:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001b52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b54:	fab3 f383 	clz	r3, r3
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	095b      	lsrs	r3, r3, #5
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d102      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xa6>
 8001b68:	4b6f      	ldr	r3, [pc, #444]	; (8001d28 <HAL_RCC_ClockConfig+0x260>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	e00f      	b.n	8001b8e <HAL_RCC_ClockConfig+0xc6>
 8001b6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b72:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b76:	fa93 f3a3 	rbit	r3, r3
 8001b7a:	667b      	str	r3, [r7, #100]	; 0x64
 8001b7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b80:	663b      	str	r3, [r7, #96]	; 0x60
 8001b82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b84:	fa93 f3a3 	rbit	r3, r3
 8001b88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b8a:	4b67      	ldr	r3, [pc, #412]	; (8001d28 <HAL_RCC_ClockConfig+0x260>)
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b92:	65ba      	str	r2, [r7, #88]	; 0x58
 8001b94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b96:	fa92 f2a2 	rbit	r2, r2
 8001b9a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001b9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b9e:	fab2 f282 	clz	r2, r2
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	f042 0220 	orr.w	r2, r2, #32
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	f002 021f 	and.w	r2, r2, #31
 8001bae:	2101      	movs	r1, #1
 8001bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d17b      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e0f3      	b.n	8001da6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d13c      	bne.n	8001c40 <HAL_RCC_ClockConfig+0x178>
 8001bc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bce:	fa93 f3a3 	rbit	r3, r3
 8001bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bd6:	fab3 f383 	clz	r3, r3
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	095b      	lsrs	r3, r3, #5
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d102      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0x128>
 8001bea:	4b4f      	ldr	r3, [pc, #316]	; (8001d28 <HAL_RCC_ClockConfig+0x260>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	e00f      	b.n	8001c10 <HAL_RCC_ClockConfig+0x148>
 8001bf0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bf4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bf8:	fa93 f3a3 	rbit	r3, r3
 8001bfc:	647b      	str	r3, [r7, #68]	; 0x44
 8001bfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c02:	643b      	str	r3, [r7, #64]	; 0x40
 8001c04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c06:	fa93 f3a3 	rbit	r3, r3
 8001c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c0c:	4b46      	ldr	r3, [pc, #280]	; (8001d28 <HAL_RCC_ClockConfig+0x260>)
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c14:	63ba      	str	r2, [r7, #56]	; 0x38
 8001c16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c18:	fa92 f2a2 	rbit	r2, r2
 8001c1c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001c1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c20:	fab2 f282 	clz	r2, r2
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	f042 0220 	orr.w	r2, r2, #32
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	f002 021f 	and.w	r2, r2, #31
 8001c30:	2101      	movs	r1, #1
 8001c32:	fa01 f202 	lsl.w	r2, r1, r2
 8001c36:	4013      	ands	r3, r2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d13a      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e0b2      	b.n	8001da6 <HAL_RCC_ClockConfig+0x2de>
 8001c40:	2302      	movs	r3, #2
 8001c42:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c46:	fa93 f3a3 	rbit	r3, r3
 8001c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c4e:	fab3 f383 	clz	r3, r3
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	095b      	lsrs	r3, r3, #5
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d102      	bne.n	8001c68 <HAL_RCC_ClockConfig+0x1a0>
 8001c62:	4b31      	ldr	r3, [pc, #196]	; (8001d28 <HAL_RCC_ClockConfig+0x260>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	e00d      	b.n	8001c84 <HAL_RCC_ClockConfig+0x1bc>
 8001c68:	2302      	movs	r3, #2
 8001c6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c6e:	fa93 f3a3 	rbit	r3, r3
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
 8001c74:	2302      	movs	r3, #2
 8001c76:	623b      	str	r3, [r7, #32]
 8001c78:	6a3b      	ldr	r3, [r7, #32]
 8001c7a:	fa93 f3a3 	rbit	r3, r3
 8001c7e:	61fb      	str	r3, [r7, #28]
 8001c80:	4b29      	ldr	r3, [pc, #164]	; (8001d28 <HAL_RCC_ClockConfig+0x260>)
 8001c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c84:	2202      	movs	r2, #2
 8001c86:	61ba      	str	r2, [r7, #24]
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	fa92 f2a2 	rbit	r2, r2
 8001c8e:	617a      	str	r2, [r7, #20]
  return result;
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	fab2 f282 	clz	r2, r2
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	f042 0220 	orr.w	r2, r2, #32
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	f002 021f 	and.w	r2, r2, #31
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca8:	4013      	ands	r3, r2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e079      	b.n	8001da6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cb2:	4b1d      	ldr	r3, [pc, #116]	; (8001d28 <HAL_RCC_ClockConfig+0x260>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f023 0203 	bic.w	r2, r3, #3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	491a      	ldr	r1, [pc, #104]	; (8001d28 <HAL_RCC_ClockConfig+0x260>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cc4:	f7fe fd60 	bl	8000788 <HAL_GetTick>
 8001cc8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cca:	e00a      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ccc:	f7fe fd5c 	bl	8000788 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e061      	b.n	8001da6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce2:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <HAL_RCC_ClockConfig+0x260>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 020c 	and.w	r2, r3, #12
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d1eb      	bne.n	8001ccc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <HAL_RCC_ClockConfig+0x25c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d214      	bcs.n	8001d2c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d02:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <HAL_RCC_ClockConfig+0x25c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f023 0207 	bic.w	r2, r3, #7
 8001d0a:	4906      	ldr	r1, [pc, #24]	; (8001d24 <HAL_RCC_ClockConfig+0x25c>)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d12:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <HAL_RCC_ClockConfig+0x25c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d005      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e040      	b.n	8001da6 <HAL_RCC_ClockConfig+0x2de>
 8001d24:	40022000 	.word	0x40022000
 8001d28:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d38:	4b1d      	ldr	r3, [pc, #116]	; (8001db0 <HAL_RCC_ClockConfig+0x2e8>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	491a      	ldr	r1, [pc, #104]	; (8001db0 <HAL_RCC_ClockConfig+0x2e8>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d009      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d56:	4b16      	ldr	r3, [pc, #88]	; (8001db0 <HAL_RCC_ClockConfig+0x2e8>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	4912      	ldr	r1, [pc, #72]	; (8001db0 <HAL_RCC_ClockConfig+0x2e8>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d6a:	f000 f829 	bl	8001dc0 <HAL_RCC_GetSysClockFreq>
 8001d6e:	4601      	mov	r1, r0
 8001d70:	4b0f      	ldr	r3, [pc, #60]	; (8001db0 <HAL_RCC_ClockConfig+0x2e8>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d78:	22f0      	movs	r2, #240	; 0xf0
 8001d7a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	fa92 f2a2 	rbit	r2, r2
 8001d82:	60fa      	str	r2, [r7, #12]
  return result;
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	fab2 f282 	clz	r2, r2
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	40d3      	lsrs	r3, r2
 8001d8e:	4a09      	ldr	r2, [pc, #36]	; (8001db4 <HAL_RCC_ClockConfig+0x2ec>)
 8001d90:	5cd3      	ldrb	r3, [r2, r3]
 8001d92:	fa21 f303 	lsr.w	r3, r1, r3
 8001d96:	4a08      	ldr	r2, [pc, #32]	; (8001db8 <HAL_RCC_ClockConfig+0x2f0>)
 8001d98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001d9a:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <HAL_RCC_ClockConfig+0x2f4>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe fc14 	bl	80005cc <HAL_InitTick>
  
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3778      	adds	r7, #120	; 0x78
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40021000 	.word	0x40021000
 8001db4:	08006554 	.word	0x08006554
 8001db8:	20000000 	.word	0x20000000
 8001dbc:	20000004 	.word	0x20000004

08001dc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b08b      	sub	sp, #44	; 0x2c
 8001dc4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61bb      	str	r3, [r7, #24]
 8001dce:	2300      	movs	r3, #0
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001dda:	4b29      	ldr	r3, [pc, #164]	; (8001e80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f003 030c 	and.w	r3, r3, #12
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	d002      	beq.n	8001df0 <HAL_RCC_GetSysClockFreq+0x30>
 8001dea:	2b08      	cmp	r3, #8
 8001dec:	d003      	beq.n	8001df6 <HAL_RCC_GetSysClockFreq+0x36>
 8001dee:	e03c      	b.n	8001e6a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001df0:	4b24      	ldr	r3, [pc, #144]	; (8001e84 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001df2:	623b      	str	r3, [r7, #32]
      break;
 8001df4:	e03c      	b.n	8001e70 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001dfc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001e00:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e02:	68ba      	ldr	r2, [r7, #8]
 8001e04:	fa92 f2a2 	rbit	r2, r2
 8001e08:	607a      	str	r2, [r7, #4]
  return result;
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	fab2 f282 	clz	r2, r2
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	40d3      	lsrs	r3, r2
 8001e14:	4a1c      	ldr	r2, [pc, #112]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e16:	5cd3      	ldrb	r3, [r2, r3]
 8001e18:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001e1a:	4b19      	ldr	r3, [pc, #100]	; (8001e80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	220f      	movs	r2, #15
 8001e24:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	fa92 f2a2 	rbit	r2, r2
 8001e2c:	60fa      	str	r2, [r7, #12]
  return result;
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	fab2 f282 	clz	r2, r2
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	40d3      	lsrs	r3, r2
 8001e38:	4a14      	ldr	r2, [pc, #80]	; (8001e8c <HAL_RCC_GetSysClockFreq+0xcc>)
 8001e3a:	5cd3      	ldrb	r3, [r2, r3]
 8001e3c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d008      	beq.n	8001e5a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e48:	4a0e      	ldr	r2, [pc, #56]	; (8001e84 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	fb02 f303 	mul.w	r3, r2, r3
 8001e56:	627b      	str	r3, [r7, #36]	; 0x24
 8001e58:	e004      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	4a0c      	ldr	r2, [pc, #48]	; (8001e90 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e5e:	fb02 f303 	mul.w	r3, r2, r3
 8001e62:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	623b      	str	r3, [r7, #32]
      break;
 8001e68:	e002      	b.n	8001e70 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e6a:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e6c:	623b      	str	r3, [r7, #32]
      break;
 8001e6e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e70:	6a3b      	ldr	r3, [r7, #32]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	372c      	adds	r7, #44	; 0x2c
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40021000 	.word	0x40021000
 8001e84:	007a1200 	.word	0x007a1200
 8001e88:	0800656c 	.word	0x0800656c
 8001e8c:	0800657c 	.word	0x0800657c
 8001e90:	003d0900 	.word	0x003d0900

08001e94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e98:	4b03      	ldr	r3, [pc, #12]	; (8001ea8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	20000000 	.word	0x20000000

08001eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001eb2:	f7ff ffef 	bl	8001e94 <HAL_RCC_GetHCLKFreq>
 8001eb6:	4601      	mov	r1, r0
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ec0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001ec4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	fa92 f2a2 	rbit	r2, r2
 8001ecc:	603a      	str	r2, [r7, #0]
  return result;
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	fab2 f282 	clz	r2, r2
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	40d3      	lsrs	r3, r2
 8001ed8:	4a04      	ldr	r2, [pc, #16]	; (8001eec <HAL_RCC_GetPCLK1Freq+0x40>)
 8001eda:	5cd3      	ldrb	r3, [r2, r3]
 8001edc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	08006564 	.word	0x08006564

08001ef0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	220f      	movs	r2, #15
 8001efe:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f00:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <HAL_RCC_GetClockConfig+0x5c>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 0203 	and.w	r2, r3, #3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001f0c:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <HAL_RCC_GetClockConfig+0x5c>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8001f18:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <HAL_RCC_GetClockConfig+0x5c>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f24:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <HAL_RCC_GetClockConfig+0x5c>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	08db      	lsrs	r3, r3, #3
 8001f2a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001f32:	4b07      	ldr	r3, [pc, #28]	; (8001f50 <HAL_RCC_GetClockConfig+0x60>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0207 	and.w	r2, r3, #7
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	601a      	str	r2, [r3, #0]
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40022000 	.word	0x40022000

08001f54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e049      	b.n	8001ffa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d106      	bne.n	8001f80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f841 	bl	8002002 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2202      	movs	r2, #2
 8001f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3304      	adds	r3, #4
 8001f90:	4619      	mov	r1, r3
 8001f92:	4610      	mov	r0, r2
 8001f94:	f000 f9f2 	bl	800237c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
	...

08002018 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b01      	cmp	r3, #1
 800202a:	d001      	beq.n	8002030 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e04a      	b.n	80020c6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2202      	movs	r2, #2
 8002034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0201 	orr.w	r2, r2, #1
 8002046:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a21      	ldr	r2, [pc, #132]	; (80020d4 <HAL_TIM_Base_Start_IT+0xbc>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d018      	beq.n	8002084 <HAL_TIM_Base_Start_IT+0x6c>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800205a:	d013      	beq.n	8002084 <HAL_TIM_Base_Start_IT+0x6c>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a1d      	ldr	r2, [pc, #116]	; (80020d8 <HAL_TIM_Base_Start_IT+0xc0>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d00e      	beq.n	8002084 <HAL_TIM_Base_Start_IT+0x6c>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a1c      	ldr	r2, [pc, #112]	; (80020dc <HAL_TIM_Base_Start_IT+0xc4>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d009      	beq.n	8002084 <HAL_TIM_Base_Start_IT+0x6c>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a1a      	ldr	r2, [pc, #104]	; (80020e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d004      	beq.n	8002084 <HAL_TIM_Base_Start_IT+0x6c>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a19      	ldr	r2, [pc, #100]	; (80020e4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d115      	bne.n	80020b0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	4b17      	ldr	r3, [pc, #92]	; (80020e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800208c:	4013      	ands	r3, r2
 800208e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2b06      	cmp	r3, #6
 8002094:	d015      	beq.n	80020c2 <HAL_TIM_Base_Start_IT+0xaa>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800209c:	d011      	beq.n	80020c2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f042 0201 	orr.w	r2, r2, #1
 80020ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020ae:	e008      	b.n	80020c2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 0201 	orr.w	r2, r2, #1
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	e000      	b.n	80020c4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	40012c00 	.word	0x40012c00
 80020d8:	40000400 	.word	0x40000400
 80020dc:	40000800 	.word	0x40000800
 80020e0:	40013400 	.word	0x40013400
 80020e4:	40014000 	.word	0x40014000
 80020e8:	00010007 	.word	0x00010007

080020ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d122      	bne.n	8002148 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b02      	cmp	r3, #2
 800210e:	d11b      	bne.n	8002148 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f06f 0202 	mvn.w	r2, #2
 8002118:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	f003 0303 	and.w	r3, r3, #3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f905 	bl	800233e <HAL_TIM_IC_CaptureCallback>
 8002134:	e005      	b.n	8002142 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f8f7 	bl	800232a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 f908 	bl	8002352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	f003 0304 	and.w	r3, r3, #4
 8002152:	2b04      	cmp	r3, #4
 8002154:	d122      	bne.n	800219c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b04      	cmp	r3, #4
 8002162:	d11b      	bne.n	800219c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f06f 0204 	mvn.w	r2, #4
 800216c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2202      	movs	r2, #2
 8002172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f8db 	bl	800233e <HAL_TIM_IC_CaptureCallback>
 8002188:	e005      	b.n	8002196 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f8cd 	bl	800232a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 f8de 	bl	8002352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	2b08      	cmp	r3, #8
 80021a8:	d122      	bne.n	80021f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	f003 0308 	and.w	r3, r3, #8
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d11b      	bne.n	80021f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f06f 0208 	mvn.w	r2, #8
 80021c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2204      	movs	r2, #4
 80021c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f8b1 	bl	800233e <HAL_TIM_IC_CaptureCallback>
 80021dc:	e005      	b.n	80021ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f8a3 	bl	800232a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f8b4 	bl	8002352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	f003 0310 	and.w	r3, r3, #16
 80021fa:	2b10      	cmp	r3, #16
 80021fc:	d122      	bne.n	8002244 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	f003 0310 	and.w	r3, r3, #16
 8002208:	2b10      	cmp	r3, #16
 800220a:	d11b      	bne.n	8002244 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f06f 0210 	mvn.w	r2, #16
 8002214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2208      	movs	r2, #8
 800221a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f887 	bl	800233e <HAL_TIM_IC_CaptureCallback>
 8002230:	e005      	b.n	800223e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f879 	bl	800232a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 f88a 	bl	8002352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b01      	cmp	r3, #1
 8002250:	d10e      	bne.n	8002270 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b01      	cmp	r3, #1
 800225e:	d107      	bne.n	8002270 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f06f 0201 	mvn.w	r2, #1
 8002268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7fe f972 	bl	8000554 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800227a:	2b80      	cmp	r3, #128	; 0x80
 800227c:	d10e      	bne.n	800229c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002288:	2b80      	cmp	r3, #128	; 0x80
 800228a:	d107      	bne.n	800229c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f90a 	bl	80024b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022aa:	d10e      	bne.n	80022ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b6:	2b80      	cmp	r3, #128	; 0x80
 80022b8:	d107      	bne.n	80022ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80022c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f8fd 	bl	80024c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d4:	2b40      	cmp	r3, #64	; 0x40
 80022d6:	d10e      	bne.n	80022f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e2:	2b40      	cmp	r3, #64	; 0x40
 80022e4:	d107      	bne.n	80022f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 f838 	bl	8002366 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	f003 0320 	and.w	r3, r3, #32
 8002300:	2b20      	cmp	r3, #32
 8002302:	d10e      	bne.n	8002322 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	f003 0320 	and.w	r3, r3, #32
 800230e:	2b20      	cmp	r3, #32
 8002310:	d107      	bne.n	8002322 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f06f 0220 	mvn.w	r2, #32
 800231a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f8bd 	bl	800249c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
	...

0800237c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a3c      	ldr	r2, [pc, #240]	; (8002480 <TIM_Base_SetConfig+0x104>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d00f      	beq.n	80023b4 <TIM_Base_SetConfig+0x38>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800239a:	d00b      	beq.n	80023b4 <TIM_Base_SetConfig+0x38>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a39      	ldr	r2, [pc, #228]	; (8002484 <TIM_Base_SetConfig+0x108>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d007      	beq.n	80023b4 <TIM_Base_SetConfig+0x38>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a38      	ldr	r2, [pc, #224]	; (8002488 <TIM_Base_SetConfig+0x10c>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d003      	beq.n	80023b4 <TIM_Base_SetConfig+0x38>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a37      	ldr	r2, [pc, #220]	; (800248c <TIM_Base_SetConfig+0x110>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d108      	bne.n	80023c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a2d      	ldr	r2, [pc, #180]	; (8002480 <TIM_Base_SetConfig+0x104>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d01b      	beq.n	8002406 <TIM_Base_SetConfig+0x8a>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023d4:	d017      	beq.n	8002406 <TIM_Base_SetConfig+0x8a>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a2a      	ldr	r2, [pc, #168]	; (8002484 <TIM_Base_SetConfig+0x108>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d013      	beq.n	8002406 <TIM_Base_SetConfig+0x8a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a29      	ldr	r2, [pc, #164]	; (8002488 <TIM_Base_SetConfig+0x10c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d00f      	beq.n	8002406 <TIM_Base_SetConfig+0x8a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a28      	ldr	r2, [pc, #160]	; (800248c <TIM_Base_SetConfig+0x110>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d00b      	beq.n	8002406 <TIM_Base_SetConfig+0x8a>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a27      	ldr	r2, [pc, #156]	; (8002490 <TIM_Base_SetConfig+0x114>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d007      	beq.n	8002406 <TIM_Base_SetConfig+0x8a>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a26      	ldr	r2, [pc, #152]	; (8002494 <TIM_Base_SetConfig+0x118>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d003      	beq.n	8002406 <TIM_Base_SetConfig+0x8a>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a25      	ldr	r2, [pc, #148]	; (8002498 <TIM_Base_SetConfig+0x11c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d108      	bne.n	8002418 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800240c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	4313      	orrs	r3, r2
 8002416:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	4313      	orrs	r3, r2
 8002424:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a10      	ldr	r2, [pc, #64]	; (8002480 <TIM_Base_SetConfig+0x104>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d00f      	beq.n	8002464 <TIM_Base_SetConfig+0xe8>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a11      	ldr	r2, [pc, #68]	; (800248c <TIM_Base_SetConfig+0x110>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d00b      	beq.n	8002464 <TIM_Base_SetConfig+0xe8>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a10      	ldr	r2, [pc, #64]	; (8002490 <TIM_Base_SetConfig+0x114>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d007      	beq.n	8002464 <TIM_Base_SetConfig+0xe8>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a0f      	ldr	r2, [pc, #60]	; (8002494 <TIM_Base_SetConfig+0x118>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d003      	beq.n	8002464 <TIM_Base_SetConfig+0xe8>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a0e      	ldr	r2, [pc, #56]	; (8002498 <TIM_Base_SetConfig+0x11c>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d103      	bne.n	800246c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	691a      	ldr	r2, [r3, #16]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	615a      	str	r2, [r3, #20]
}
 8002472:	bf00      	nop
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	40012c00 	.word	0x40012c00
 8002484:	40000400 	.word	0x40000400
 8002488:	40000800 	.word	0x40000800
 800248c:	40013400 	.word	0x40013400
 8002490:	40014000 	.word	0x40014000
 8002494:	40014400 	.word	0x40014400
 8002498:	40014800 	.word	0x40014800

0800249c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f103 0208 	add.w	r2, r3, #8
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024f0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f103 0208 	add.w	r2, r3, #8
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f103 0208 	add.w	r2, r3, #8
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002532:	b480      	push	{r7}
 8002534:	b085      	sub	sp, #20
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
 800253a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	601a      	str	r2, [r3, #0]
}
 800256e:	bf00      	nop
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800257a:	b480      	push	{r7}
 800257c:	b085      	sub	sp, #20
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
 8002582:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002590:	d103      	bne.n	800259a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	e00c      	b.n	80025b4 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3308      	adds	r3, #8
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	e002      	b.n	80025a8 <vListInsert+0x2e>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d2f6      	bcs.n	80025a2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	1c5a      	adds	r2, r3, #1
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	601a      	str	r2, [r3, #0]
}
 80025e0:	bf00      	nop
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6892      	ldr	r2, [r2, #8]
 8002602:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6852      	ldr	r2, [r2, #4]
 800260c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	429a      	cmp	r2, r3
 8002616:	d103      	bne.n	8002620 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	1e5a      	subs	r2, r3, #1
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10a      	bne.n	800266a <xQueueGenericReset+0x2a>
        __asm volatile
 8002654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002658:	f383 8811 	msr	BASEPRI, r3
 800265c:	f3bf 8f6f 	isb	sy
 8002660:	f3bf 8f4f 	dsb	sy
 8002664:	60bb      	str	r3, [r7, #8]
    }
 8002666:	bf00      	nop
 8002668:	e7fe      	b.n	8002668 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800266a:	f002 f8b3 	bl	80047d4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002676:	68f9      	ldr	r1, [r7, #12]
 8002678:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800267a:	fb01 f303 	mul.w	r3, r1, r3
 800267e:	441a      	add	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269a:	3b01      	subs	r3, #1
 800269c:	68f9      	ldr	r1, [r7, #12]
 800269e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80026a0:	fb01 f303 	mul.w	r3, r1, r3
 80026a4:	441a      	add	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	22ff      	movs	r2, #255	; 0xff
 80026ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	22ff      	movs	r2, #255	; 0xff
 80026b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d114      	bne.n	80026ea <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d01a      	beq.n	80026fe <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	3310      	adds	r3, #16
 80026cc:	4618      	mov	r0, r3
 80026ce:	f001 f90d 	bl	80038ec <xTaskRemoveFromEventList>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d012      	beq.n	80026fe <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80026d8:	4b0c      	ldr	r3, [pc, #48]	; (800270c <xQueueGenericReset+0xcc>)
 80026da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	f3bf 8f4f 	dsb	sy
 80026e4:	f3bf 8f6f 	isb	sy
 80026e8:	e009      	b.n	80026fe <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	3310      	adds	r3, #16
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff fef2 	bl	80024d8 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	3324      	adds	r3, #36	; 0x24
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff feed 	bl	80024d8 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80026fe:	f002 f899 	bl	8004834 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002702:	2301      	movs	r3, #1
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	e000ed04 	.word	0xe000ed04

08002710 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002710:	b580      	push	{r7, lr}
 8002712:	b08c      	sub	sp, #48	; 0x30
 8002714:	af02      	add	r7, sp, #8
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	4613      	mov	r3, r2
 800271c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10a      	bne.n	800273a <xQueueGenericCreate+0x2a>
        __asm volatile
 8002724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002728:	f383 8811 	msr	BASEPRI, r3
 800272c:	f3bf 8f6f 	isb	sy
 8002730:	f3bf 8f4f 	dsb	sy
 8002734:	61bb      	str	r3, [r7, #24]
    }
 8002736:	bf00      	nop
 8002738:	e7fe      	b.n	8002738 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	fb02 f303 	mul.w	r3, r2, r3
 8002742:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d006      	beq.n	8002758 <xQueueGenericCreate+0x48>
 800274a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	429a      	cmp	r2, r3
 8002756:	d101      	bne.n	800275c <xQueueGenericCreate+0x4c>
 8002758:	2301      	movs	r3, #1
 800275a:	e000      	b.n	800275e <xQueueGenericCreate+0x4e>
 800275c:	2300      	movs	r3, #0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10a      	bne.n	8002778 <xQueueGenericCreate+0x68>
        __asm volatile
 8002762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002766:	f383 8811 	msr	BASEPRI, r3
 800276a:	f3bf 8f6f 	isb	sy
 800276e:	f3bf 8f4f 	dsb	sy
 8002772:	617b      	str	r3, [r7, #20]
    }
 8002774:	bf00      	nop
 8002776:	e7fe      	b.n	8002776 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800277e:	d90a      	bls.n	8002796 <xQueueGenericCreate+0x86>
        __asm volatile
 8002780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002784:	f383 8811 	msr	BASEPRI, r3
 8002788:	f3bf 8f6f 	isb	sy
 800278c:	f3bf 8f4f 	dsb	sy
 8002790:	613b      	str	r3, [r7, #16]
    }
 8002792:	bf00      	nop
 8002794:	e7fe      	b.n	8002794 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	3350      	adds	r3, #80	; 0x50
 800279a:	4618      	mov	r0, r3
 800279c:	f002 f946 	bl	8004a2c <pvPortMalloc>
 80027a0:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80027a2:	6a3b      	ldr	r3, [r7, #32]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00d      	beq.n	80027c4 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	3350      	adds	r3, #80	; 0x50
 80027b0:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80027b2:	79fa      	ldrb	r2, [r7, #7]
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	4613      	mov	r3, r2
 80027ba:	69fa      	ldr	r2, [r7, #28]
 80027bc:	68b9      	ldr	r1, [r7, #8]
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 f805 	bl	80027ce <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80027c4:	6a3b      	ldr	r3, [r7, #32]
    }
 80027c6:	4618      	mov	r0, r3
 80027c8:	3728      	adds	r7, #40	; 0x28
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b084      	sub	sp, #16
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	60f8      	str	r0, [r7, #12]
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	607a      	str	r2, [r7, #4]
 80027da:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d103      	bne.n	80027ea <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	e002      	b.n	80027f0 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80027fc:	2101      	movs	r1, #1
 80027fe:	69b8      	ldr	r0, [r7, #24]
 8002800:	f7ff ff1e 	bl	8002640 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	78fa      	ldrb	r2, [r7, #3]
 8002808:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800280c:	78fb      	ldrb	r3, [r7, #3]
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	68f9      	ldr	r1, [r7, #12]
 8002812:	2073      	movs	r0, #115	; 0x73
 8002814:	f002 ff4a 	bl	80056ac <SEGGER_SYSVIEW_RecordU32x3>
}
 8002818:	bf00      	nop
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b090      	sub	sp, #64	; 0x40
 8002824:	af02      	add	r7, sp, #8
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
 800282c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800282e:	2300      	movs	r3, #0
 8002830:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10a      	bne.n	8002852 <xQueueGenericSend+0x32>
        __asm volatile
 800283c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002840:	f383 8811 	msr	BASEPRI, r3
 8002844:	f3bf 8f6f 	isb	sy
 8002848:	f3bf 8f4f 	dsb	sy
 800284c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800284e:	bf00      	nop
 8002850:	e7fe      	b.n	8002850 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d103      	bne.n	8002860 <xQueueGenericSend+0x40>
 8002858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <xQueueGenericSend+0x44>
 8002860:	2301      	movs	r3, #1
 8002862:	e000      	b.n	8002866 <xQueueGenericSend+0x46>
 8002864:	2300      	movs	r3, #0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10a      	bne.n	8002880 <xQueueGenericSend+0x60>
        __asm volatile
 800286a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286e:	f383 8811 	msr	BASEPRI, r3
 8002872:	f3bf 8f6f 	isb	sy
 8002876:	f3bf 8f4f 	dsb	sy
 800287a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800287c:	bf00      	nop
 800287e:	e7fe      	b.n	800287e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d103      	bne.n	800288e <xQueueGenericSend+0x6e>
 8002886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288a:	2b01      	cmp	r3, #1
 800288c:	d101      	bne.n	8002892 <xQueueGenericSend+0x72>
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <xQueueGenericSend+0x74>
 8002892:	2300      	movs	r3, #0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10a      	bne.n	80028ae <xQueueGenericSend+0x8e>
        __asm volatile
 8002898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289c:	f383 8811 	msr	BASEPRI, r3
 80028a0:	f3bf 8f6f 	isb	sy
 80028a4:	f3bf 8f4f 	dsb	sy
 80028a8:	623b      	str	r3, [r7, #32]
    }
 80028aa:	bf00      	nop
 80028ac:	e7fe      	b.n	80028ac <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028ae:	f001 f9bd 	bl	8003c2c <xTaskGetSchedulerState>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d102      	bne.n	80028be <xQueueGenericSend+0x9e>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <xQueueGenericSend+0xa2>
 80028be:	2301      	movs	r3, #1
 80028c0:	e000      	b.n	80028c4 <xQueueGenericSend+0xa4>
 80028c2:	2300      	movs	r3, #0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10a      	bne.n	80028de <xQueueGenericSend+0xbe>
        __asm volatile
 80028c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028cc:	f383 8811 	msr	BASEPRI, r3
 80028d0:	f3bf 8f6f 	isb	sy
 80028d4:	f3bf 8f4f 	dsb	sy
 80028d8:	61fb      	str	r3, [r7, #28]
    }
 80028da:	bf00      	nop
 80028dc:	e7fe      	b.n	80028dc <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80028de:	f001 ff79 	bl	80047d4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80028e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d302      	bcc.n	80028f4 <xQueueGenericSend+0xd4>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d136      	bne.n	8002962 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 80028f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f6:	4618      	mov	r0, r3
 80028f8:	f003 fc40 	bl	800617c <SEGGER_SYSVIEW_ShrinkId>
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	460b      	mov	r3, r1
 8002906:	4601      	mov	r1, r0
 8002908:	205a      	movs	r0, #90	; 0x5a
 800290a:	f002 ff45 	bl	8005798 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	68b9      	ldr	r1, [r7, #8]
 8002912:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002914:	f000 fa78 	bl	8002e08 <prvCopyDataToQueue>
 8002918:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800291a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	2b00      	cmp	r3, #0
 8002920:	d010      	beq.n	8002944 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002924:	3324      	adds	r3, #36	; 0x24
 8002926:	4618      	mov	r0, r3
 8002928:	f000 ffe0 	bl	80038ec <xTaskRemoveFromEventList>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d013      	beq.n	800295a <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002932:	4b4d      	ldr	r3, [pc, #308]	; (8002a68 <xQueueGenericSend+0x248>)
 8002934:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	f3bf 8f4f 	dsb	sy
 800293e:	f3bf 8f6f 	isb	sy
 8002942:	e00a      	b.n	800295a <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002946:	2b00      	cmp	r3, #0
 8002948:	d007      	beq.n	800295a <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800294a:	4b47      	ldr	r3, [pc, #284]	; (8002a68 <xQueueGenericSend+0x248>)
 800294c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	f3bf 8f4f 	dsb	sy
 8002956:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800295a:	f001 ff6b 	bl	8004834 <vPortExitCritical>
                return pdPASS;
 800295e:	2301      	movs	r3, #1
 8002960:	e07d      	b.n	8002a5e <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d110      	bne.n	800298a <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002968:	f001 ff64 	bl	8004834 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 800296c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296e:	4618      	mov	r0, r3
 8002970:	f003 fc04 	bl	800617c <SEGGER_SYSVIEW_ShrinkId>
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	460b      	mov	r3, r1
 800297e:	4601      	mov	r1, r0
 8002980:	205a      	movs	r0, #90	; 0x5a
 8002982:	f002 ff09 	bl	8005798 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002986:	2300      	movs	r3, #0
 8002988:	e069      	b.n	8002a5e <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 800298a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800298c:	2b00      	cmp	r3, #0
 800298e:	d106      	bne.n	800299e <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002990:	f107 0314 	add.w	r3, r7, #20
 8002994:	4618      	mov	r0, r3
 8002996:	f001 f80f 	bl	80039b8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800299a:	2301      	movs	r3, #1
 800299c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800299e:	f001 ff49 	bl	8004834 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80029a2:	f000 fd6d 	bl	8003480 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80029a6:	f001 ff15 	bl	80047d4 <vPortEnterCritical>
 80029aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029b0:	b25b      	sxtb	r3, r3
 80029b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029b6:	d103      	bne.n	80029c0 <xQueueGenericSend+0x1a0>
 80029b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029c6:	b25b      	sxtb	r3, r3
 80029c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029cc:	d103      	bne.n	80029d6 <xQueueGenericSend+0x1b6>
 80029ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029d6:	f001 ff2d 	bl	8004834 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029da:	1d3a      	adds	r2, r7, #4
 80029dc:	f107 0314 	add.w	r3, r7, #20
 80029e0:	4611      	mov	r1, r2
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 fffe 	bl	80039e4 <xTaskCheckForTimeOut>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d124      	bne.n	8002a38 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80029ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029f0:	f000 fb02 	bl	8002ff8 <prvIsQueueFull>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d018      	beq.n	8002a2c <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80029fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fc:	3310      	adds	r3, #16
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	4611      	mov	r1, r2
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 ff20 	bl	8003848 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002a08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a0a:	f000 fa8d 	bl	8002f28 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002a0e:	f000 fd45 	bl	800349c <xTaskResumeAll>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f47f af62 	bne.w	80028de <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002a1a:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <xQueueGenericSend+0x248>)
 8002a1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	f3bf 8f4f 	dsb	sy
 8002a26:	f3bf 8f6f 	isb	sy
 8002a2a:	e758      	b.n	80028de <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002a2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a2e:	f000 fa7b 	bl	8002f28 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002a32:	f000 fd33 	bl	800349c <xTaskResumeAll>
 8002a36:	e752      	b.n	80028de <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002a38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a3a:	f000 fa75 	bl	8002f28 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002a3e:	f000 fd2d 	bl	800349c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a44:	4618      	mov	r0, r3
 8002a46:	f003 fb99 	bl	800617c <SEGGER_SYSVIEW_ShrinkId>
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	460b      	mov	r3, r1
 8002a54:	4601      	mov	r1, r0
 8002a56:	205a      	movs	r0, #90	; 0x5a
 8002a58:	f002 fe9e 	bl	8005798 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002a5c:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3738      	adds	r7, #56	; 0x38
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	e000ed04 	.word	0xe000ed04

08002a6c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b090      	sub	sp, #64	; 0x40
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
 8002a78:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10a      	bne.n	8002a9a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a88:	f383 8811 	msr	BASEPRI, r3
 8002a8c:	f3bf 8f6f 	isb	sy
 8002a90:	f3bf 8f4f 	dsb	sy
 8002a94:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002a96:	bf00      	nop
 8002a98:	e7fe      	b.n	8002a98 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d103      	bne.n	8002aa8 <xQueueGenericSendFromISR+0x3c>
 8002aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <xQueueGenericSendFromISR+0x40>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <xQueueGenericSendFromISR+0x42>
 8002aac:	2300      	movs	r3, #0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10a      	bne.n	8002ac8 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab6:	f383 8811 	msr	BASEPRI, r3
 8002aba:	f3bf 8f6f 	isb	sy
 8002abe:	f3bf 8f4f 	dsb	sy
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002ac4:	bf00      	nop
 8002ac6:	e7fe      	b.n	8002ac6 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d103      	bne.n	8002ad6 <xQueueGenericSendFromISR+0x6a>
 8002ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d101      	bne.n	8002ada <xQueueGenericSendFromISR+0x6e>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <xQueueGenericSendFromISR+0x70>
 8002ada:	2300      	movs	r3, #0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10a      	bne.n	8002af6 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae4:	f383 8811 	msr	BASEPRI, r3
 8002ae8:	f3bf 8f6f 	isb	sy
 8002aec:	f3bf 8f4f 	dsb	sy
 8002af0:	623b      	str	r3, [r7, #32]
    }
 8002af2:	bf00      	nop
 8002af4:	e7fe      	b.n	8002af4 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002af6:	f001 ff59 	bl	80049ac <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002afa:	f3ef 8211 	mrs	r2, BASEPRI
 8002afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b02:	f383 8811 	msr	BASEPRI, r3
 8002b06:	f3bf 8f6f 	isb	sy
 8002b0a:	f3bf 8f4f 	dsb	sy
 8002b0e:	61fa      	str	r2, [r7, #28]
 8002b10:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002b12:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002b14:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d302      	bcc.n	8002b28 <xQueueGenericSendFromISR+0xbc>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d148      	bne.n	8002bba <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b36:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f003 fb1e 	bl	800617c <SEGGER_SYSVIEW_ShrinkId>
 8002b40:	4601      	mov	r1, r0
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	461a      	mov	r2, r3
 8002b46:	2060      	movs	r0, #96	; 0x60
 8002b48:	f002 fd56 	bl	80055f8 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	68b9      	ldr	r1, [r7, #8]
 8002b50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002b52:	f000 f959 	bl	8002e08 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002b56:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002b5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b5e:	d112      	bne.n	8002b86 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d025      	beq.n	8002bb4 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6a:	3324      	adds	r3, #36	; 0x24
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 febd 	bl	80038ec <xTaskRemoveFromEventList>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d01d      	beq.n	8002bb4 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d01a      	beq.n	8002bb4 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	e016      	b.n	8002bb4 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002b86:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002b8a:	2b7f      	cmp	r3, #127	; 0x7f
 8002b8c:	d10a      	bne.n	8002ba4 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b92:	f383 8811 	msr	BASEPRI, r3
 8002b96:	f3bf 8f6f 	isb	sy
 8002b9a:	f3bf 8f4f 	dsb	sy
 8002b9e:	617b      	str	r3, [r7, #20]
    }
 8002ba0:	bf00      	nop
 8002ba2:	e7fe      	b.n	8002ba2 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002ba4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ba8:	3301      	adds	r3, #1
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	b25a      	sxtb	r2, r3
 8002bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002bb8:	e00b      	b.n	8002bd2 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f003 fadd 	bl	800617c <SEGGER_SYSVIEW_ShrinkId>
 8002bc2:	4601      	mov	r1, r0
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	2060      	movs	r0, #96	; 0x60
 8002bca:	f002 fd15 	bl	80055f8 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd4:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002bdc:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3740      	adds	r7, #64	; 0x40
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002be8:	b590      	push	{r4, r7, lr}
 8002bea:	b08f      	sub	sp, #60	; 0x3c
 8002bec:	af02      	add	r7, sp, #8
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10a      	bne.n	8002c18 <xQueueReceive+0x30>
        __asm volatile
 8002c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c06:	f383 8811 	msr	BASEPRI, r3
 8002c0a:	f3bf 8f6f 	isb	sy
 8002c0e:	f3bf 8f4f 	dsb	sy
 8002c12:	623b      	str	r3, [r7, #32]
    }
 8002c14:	bf00      	nop
 8002c16:	e7fe      	b.n	8002c16 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d103      	bne.n	8002c26 <xQueueReceive+0x3e>
 8002c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <xQueueReceive+0x42>
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <xQueueReceive+0x44>
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10a      	bne.n	8002c46 <xQueueReceive+0x5e>
        __asm volatile
 8002c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c34:	f383 8811 	msr	BASEPRI, r3
 8002c38:	f3bf 8f6f 	isb	sy
 8002c3c:	f3bf 8f4f 	dsb	sy
 8002c40:	61fb      	str	r3, [r7, #28]
    }
 8002c42:	bf00      	nop
 8002c44:	e7fe      	b.n	8002c44 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c46:	f000 fff1 	bl	8003c2c <xTaskGetSchedulerState>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d102      	bne.n	8002c56 <xQueueReceive+0x6e>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <xQueueReceive+0x72>
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <xQueueReceive+0x74>
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10a      	bne.n	8002c76 <xQueueReceive+0x8e>
        __asm volatile
 8002c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c64:	f383 8811 	msr	BASEPRI, r3
 8002c68:	f3bf 8f6f 	isb	sy
 8002c6c:	f3bf 8f4f 	dsb	sy
 8002c70:	61bb      	str	r3, [r7, #24]
    }
 8002c72:	bf00      	nop
 8002c74:	e7fe      	b.n	8002c74 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002c76:	f001 fdad 	bl	80047d4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d02f      	beq.n	8002ce6 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c86:	68b9      	ldr	r1, [r7, #8]
 8002c88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c8a:	f000 f927 	bl	8002edc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c90:	4618      	mov	r0, r3
 8002c92:	f003 fa73 	bl	800617c <SEGGER_SYSVIEW_ShrinkId>
 8002c96:	4604      	mov	r4, r0
 8002c98:	2000      	movs	r0, #0
 8002c9a:	f003 fa6f 	bl	800617c <SEGGER_SYSVIEW_ShrinkId>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	9100      	str	r1, [sp, #0]
 8002ca6:	4621      	mov	r1, r4
 8002ca8:	205c      	movs	r0, #92	; 0x5c
 8002caa:	f002 fd75 	bl	8005798 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	1e5a      	subs	r2, r3, #1
 8002cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00f      	beq.n	8002cde <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc0:	3310      	adds	r3, #16
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 fe12 	bl	80038ec <xTaskRemoveFromEventList>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d007      	beq.n	8002cde <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002cce:	4b4d      	ldr	r3, [pc, #308]	; (8002e04 <xQueueReceive+0x21c>)
 8002cd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	f3bf 8f4f 	dsb	sy
 8002cda:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002cde:	f001 fda9 	bl	8004834 <vPortExitCritical>
                return pdPASS;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e08a      	b.n	8002dfc <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d113      	bne.n	8002d14 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002cec:	f001 fda2 	bl	8004834 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f003 fa42 	bl	800617c <SEGGER_SYSVIEW_ShrinkId>
 8002cf8:	4604      	mov	r4, r0
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	f003 fa3e 	bl	800617c <SEGGER_SYSVIEW_ShrinkId>
 8002d00:	4602      	mov	r2, r0
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2101      	movs	r1, #1
 8002d06:	9100      	str	r1, [sp, #0]
 8002d08:	4621      	mov	r1, r4
 8002d0a:	205c      	movs	r0, #92	; 0x5c
 8002d0c:	f002 fd44 	bl	8005798 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002d10:	2300      	movs	r3, #0
 8002d12:	e073      	b.n	8002dfc <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002d1a:	f107 0310 	add.w	r3, r7, #16
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 fe4a 	bl	80039b8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002d24:	2301      	movs	r3, #1
 8002d26:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002d28:	f001 fd84 	bl	8004834 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002d2c:	f000 fba8 	bl	8003480 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002d30:	f001 fd50 	bl	80047d4 <vPortEnterCritical>
 8002d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d3a:	b25b      	sxtb	r3, r3
 8002d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d40:	d103      	bne.n	8002d4a <xQueueReceive+0x162>
 8002d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d50:	b25b      	sxtb	r3, r3
 8002d52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d56:	d103      	bne.n	8002d60 <xQueueReceive+0x178>
 8002d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d60:	f001 fd68 	bl	8004834 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d64:	1d3a      	adds	r2, r7, #4
 8002d66:	f107 0310 	add.w	r3, r7, #16
 8002d6a:	4611      	mov	r1, r2
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 fe39 	bl	80039e4 <xTaskCheckForTimeOut>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d124      	bne.n	8002dc2 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d7a:	f000 f927 	bl	8002fcc <prvIsQueueEmpty>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d018      	beq.n	8002db6 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d86:	3324      	adds	r3, #36	; 0x24
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	4611      	mov	r1, r2
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 fd5b 	bl	8003848 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002d92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d94:	f000 f8c8 	bl	8002f28 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002d98:	f000 fb80 	bl	800349c <xTaskResumeAll>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f47f af69 	bne.w	8002c76 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002da4:	4b17      	ldr	r3, [pc, #92]	; (8002e04 <xQueueReceive+0x21c>)
 8002da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	f3bf 8f4f 	dsb	sy
 8002db0:	f3bf 8f6f 	isb	sy
 8002db4:	e75f      	b.n	8002c76 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002db6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002db8:	f000 f8b6 	bl	8002f28 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002dbc:	f000 fb6e 	bl	800349c <xTaskResumeAll>
 8002dc0:	e759      	b.n	8002c76 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002dc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dc4:	f000 f8b0 	bl	8002f28 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002dc8:	f000 fb68 	bl	800349c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002dcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dce:	f000 f8fd 	bl	8002fcc <prvIsQueueEmpty>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f43f af4e 	beq.w	8002c76 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f003 f9cd 	bl	800617c <SEGGER_SYSVIEW_ShrinkId>
 8002de2:	4604      	mov	r4, r0
 8002de4:	2000      	movs	r0, #0
 8002de6:	f003 f9c9 	bl	800617c <SEGGER_SYSVIEW_ShrinkId>
 8002dea:	4602      	mov	r2, r0
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2101      	movs	r1, #1
 8002df0:	9100      	str	r1, [sp, #0]
 8002df2:	4621      	mov	r1, r4
 8002df4:	205c      	movs	r0, #92	; 0x5c
 8002df6:	f002 fccf 	bl	8005798 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002dfa:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3734      	adds	r7, #52	; 0x34
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd90      	pop	{r4, r7, pc}
 8002e04:	e000ed04 	.word	0xe000ed04

08002e08 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002e14:	2300      	movs	r3, #0
 8002e16:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10d      	bne.n	8002e42 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d14d      	bne.n	8002eca <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 ff18 	bl	8003c68 <xTaskPriorityDisinherit>
 8002e38:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	609a      	str	r2, [r3, #8]
 8002e40:	e043      	b.n	8002eca <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d119      	bne.n	8002e7c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6858      	ldr	r0, [r3, #4]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	461a      	mov	r2, r3
 8002e52:	68b9      	ldr	r1, [r7, #8]
 8002e54:	f003 fb0c 	bl	8006470 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	441a      	add	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d32b      	bcc.n	8002eca <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	605a      	str	r2, [r3, #4]
 8002e7a:	e026      	b.n	8002eca <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	68d8      	ldr	r0, [r3, #12]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	461a      	mov	r2, r3
 8002e86:	68b9      	ldr	r1, [r7, #8]
 8002e88:	f003 faf2 	bl	8006470 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	425b      	negs	r3, r3
 8002e96:	441a      	add	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d207      	bcs.n	8002eb8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	425b      	negs	r3, r3
 8002eb2:	441a      	add	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d105      	bne.n	8002eca <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d002      	beq.n	8002eca <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1c5a      	adds	r2, r3, #1
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002ed2:	697b      	ldr	r3, [r7, #20]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d018      	beq.n	8002f20 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	441a      	add	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68da      	ldr	r2, [r3, #12]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d303      	bcc.n	8002f10 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68d9      	ldr	r1, [r3, #12]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	461a      	mov	r2, r3
 8002f1a:	6838      	ldr	r0, [r7, #0]
 8002f1c:	f003 faa8 	bl	8006470 <memcpy>
    }
}
 8002f20:	bf00      	nop
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002f30:	f001 fc50 	bl	80047d4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f3a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f3c:	e011      	b.n	8002f62 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d012      	beq.n	8002f6c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	3324      	adds	r3, #36	; 0x24
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 fcce 	bl	80038ec <xTaskRemoveFromEventList>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002f56:	f000 fdab 	bl	8003ab0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	dce9      	bgt.n	8002f3e <prvUnlockQueue+0x16>
 8002f6a:	e000      	b.n	8002f6e <prvUnlockQueue+0x46>
                        break;
 8002f6c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	22ff      	movs	r2, #255	; 0xff
 8002f72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002f76:	f001 fc5d 	bl	8004834 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002f7a:	f001 fc2b 	bl	80047d4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f84:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f86:	e011      	b.n	8002fac <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d012      	beq.n	8002fb6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3310      	adds	r3, #16
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 fca9 	bl	80038ec <xTaskRemoveFromEventList>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002fa0:	f000 fd86 	bl	8003ab0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002fa4:	7bbb      	ldrb	r3, [r7, #14]
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	dce9      	bgt.n	8002f88 <prvUnlockQueue+0x60>
 8002fb4:	e000      	b.n	8002fb8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002fb6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	22ff      	movs	r2, #255	; 0xff
 8002fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002fc0:	f001 fc38 	bl	8004834 <vPortExitCritical>
}
 8002fc4:	bf00      	nop
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002fd4:	f001 fbfe 	bl	80047d4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d102      	bne.n	8002fe6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	e001      	b.n	8002fea <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002fea:	f001 fc23 	bl	8004834 <vPortExitCritical>

    return xReturn;
 8002fee:	68fb      	ldr	r3, [r7, #12]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003000:	f001 fbe8 	bl	80047d4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300c:	429a      	cmp	r2, r3
 800300e:	d102      	bne.n	8003016 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003010:	2301      	movs	r3, #1
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	e001      	b.n	800301a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800301a:	f001 fc0b 	bl	8004834 <vPortExitCritical>

    return xReturn;
 800301e:	68fb      	ldr	r3, [r7, #12]
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003032:	2300      	movs	r3, #0
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	e01e      	b.n	8003076 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003038:	4a13      	ldr	r2, [pc, #76]	; (8003088 <vQueueAddToRegistry+0x60>)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d115      	bne.n	8003070 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003044:	4910      	ldr	r1, [pc, #64]	; (8003088 <vQueueAddToRegistry+0x60>)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800304e:	4a0e      	ldr	r2, [pc, #56]	; (8003088 <vQueueAddToRegistry+0x60>)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	4413      	add	r3, r2
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4618      	mov	r0, r3
 800305e:	f003 f88d 	bl	800617c <SEGGER_SYSVIEW_ShrinkId>
 8003062:	4601      	mov	r1, r0
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	2071      	movs	r0, #113	; 0x71
 800306a:	f002 fac5 	bl	80055f8 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800306e:	e006      	b.n	800307e <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	3301      	adds	r3, #1
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2b07      	cmp	r3, #7
 800307a:	d9dd      	bls.n	8003038 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800307c:	bf00      	nop
 800307e:	bf00      	nop
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	20002fb0 	.word	0x20002fb0

0800308c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800309c:	f001 fb9a 	bl	80047d4 <vPortEnterCritical>
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030a6:	b25b      	sxtb	r3, r3
 80030a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030ac:	d103      	bne.n	80030b6 <vQueueWaitForMessageRestricted+0x2a>
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030bc:	b25b      	sxtb	r3, r3
 80030be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030c2:	d103      	bne.n	80030cc <vQueueWaitForMessageRestricted+0x40>
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030cc:	f001 fbb2 	bl	8004834 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d106      	bne.n	80030e6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	3324      	adds	r3, #36	; 0x24
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	68b9      	ldr	r1, [r7, #8]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 fbd5 	bl	8003890 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80030e6:	6978      	ldr	r0, [r7, #20]
 80030e8:	f7ff ff1e 	bl	8002f28 <prvUnlockQueue>
    }
 80030ec:	bf00      	nop
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08c      	sub	sp, #48	; 0x30
 80030f8:	af04      	add	r7, sp, #16
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	603b      	str	r3, [r7, #0]
 8003100:	4613      	mov	r3, r2
 8003102:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003104:	88fb      	ldrh	r3, [r7, #6]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4618      	mov	r0, r3
 800310a:	f001 fc8f 	bl	8004a2c <pvPortMalloc>
 800310e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00e      	beq.n	8003134 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003116:	2058      	movs	r0, #88	; 0x58
 8003118:	f001 fc88 	bl	8004a2c <pvPortMalloc>
 800311c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d003      	beq.n	800312c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	631a      	str	r2, [r3, #48]	; 0x30
 800312a:	e005      	b.n	8003138 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800312c:	6978      	ldr	r0, [r7, #20]
 800312e:	f001 fd5d 	bl	8004bec <vPortFree>
 8003132:	e001      	b.n	8003138 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003134:	2300      	movs	r3, #0
 8003136:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d013      	beq.n	8003166 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800313e:	88fa      	ldrh	r2, [r7, #6]
 8003140:	2300      	movs	r3, #0
 8003142:	9303      	str	r3, [sp, #12]
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	9302      	str	r3, [sp, #8]
 8003148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800314a:	9301      	str	r3, [sp, #4]
 800314c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	68b9      	ldr	r1, [r7, #8]
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 f80e 	bl	8003176 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800315a:	69f8      	ldr	r0, [r7, #28]
 800315c:	f000 f8a2 	bl	80032a4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003160:	2301      	movs	r3, #1
 8003162:	61bb      	str	r3, [r7, #24]
 8003164:	e002      	b.n	800316c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003166:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800316a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800316c:	69bb      	ldr	r3, [r7, #24]
    }
 800316e:	4618      	mov	r0, r3
 8003170:	3720      	adds	r7, #32
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b088      	sub	sp, #32
 800317a:	af00      	add	r7, sp, #0
 800317c:	60f8      	str	r0, [r7, #12]
 800317e:	60b9      	str	r1, [r7, #8]
 8003180:	607a      	str	r2, [r7, #4]
 8003182:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003186:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	461a      	mov	r2, r3
 800318e:	21a5      	movs	r1, #165	; 0xa5
 8003190:	f003 f97c 	bl	800648c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003196:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800319e:	3b01      	subs	r3, #1
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	f023 0307 	bic.w	r3, r3, #7
 80031ac:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00a      	beq.n	80031ce <prvInitialiseNewTask+0x58>
        __asm volatile
 80031b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031bc:	f383 8811 	msr	BASEPRI, r3
 80031c0:	f3bf 8f6f 	isb	sy
 80031c4:	f3bf 8f4f 	dsb	sy
 80031c8:	617b      	str	r3, [r7, #20]
    }
 80031ca:	bf00      	nop
 80031cc:	e7fe      	b.n	80031cc <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d01f      	beq.n	8003214 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031d4:	2300      	movs	r3, #0
 80031d6:	61fb      	str	r3, [r7, #28]
 80031d8:	e012      	b.n	8003200 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	4413      	add	r3, r2
 80031e0:	7819      	ldrb	r1, [r3, #0]
 80031e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	4413      	add	r3, r2
 80031e8:	3334      	adds	r3, #52	; 0x34
 80031ea:	460a      	mov	r2, r1
 80031ec:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	4413      	add	r3, r2
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d006      	beq.n	8003208 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	3301      	adds	r3, #1
 80031fe:	61fb      	str	r3, [r7, #28]
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	2b09      	cmp	r3, #9
 8003204:	d9e9      	bls.n	80031da <prvInitialiseNewTask+0x64>
 8003206:	e000      	b.n	800320a <prvInitialiseNewTask+0x94>
            {
                break;
 8003208:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800320a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003212:	e003      	b.n	800321c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800321c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321e:	2b04      	cmp	r3, #4
 8003220:	d901      	bls.n	8003226 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003222:	2304      	movs	r3, #4
 8003224:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003228:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800322a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800322c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003230:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003234:	2200      	movs	r2, #0
 8003236:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323a:	3304      	adds	r3, #4
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff f96b 	bl	8002518 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003244:	3318      	adds	r3, #24
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff f966 	bl	8002518 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800324c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003250:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003254:	f1c3 0205 	rsb	r2, r3, #5
 8003258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800325c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003260:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003264:	3350      	adds	r3, #80	; 0x50
 8003266:	2204      	movs	r2, #4
 8003268:	2100      	movs	r1, #0
 800326a:	4618      	mov	r0, r3
 800326c:	f003 f90e 	bl	800648c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003272:	3354      	adds	r3, #84	; 0x54
 8003274:	2201      	movs	r2, #1
 8003276:	2100      	movs	r1, #0
 8003278:	4618      	mov	r0, r3
 800327a:	f003 f907 	bl	800648c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	68f9      	ldr	r1, [r7, #12]
 8003282:	69b8      	ldr	r0, [r7, #24]
 8003284:	f001 f8fa 	bl	800447c <pxPortInitialiseStack>
 8003288:	4602      	mov	r2, r0
 800328a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800328e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003290:	2b00      	cmp	r3, #0
 8003292:	d002      	beq.n	800329a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003298:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800329a:	bf00      	nop
 800329c:	3720      	adds	r7, #32
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
	...

080032a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80032a4:	b5b0      	push	{r4, r5, r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af02      	add	r7, sp, #8
 80032aa:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80032ac:	f001 fa92 	bl	80047d4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80032b0:	4b3b      	ldr	r3, [pc, #236]	; (80033a0 <prvAddNewTaskToReadyList+0xfc>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	3301      	adds	r3, #1
 80032b6:	4a3a      	ldr	r2, [pc, #232]	; (80033a0 <prvAddNewTaskToReadyList+0xfc>)
 80032b8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80032ba:	4b3a      	ldr	r3, [pc, #232]	; (80033a4 <prvAddNewTaskToReadyList+0x100>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d109      	bne.n	80032d6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80032c2:	4a38      	ldr	r2, [pc, #224]	; (80033a4 <prvAddNewTaskToReadyList+0x100>)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80032c8:	4b35      	ldr	r3, [pc, #212]	; (80033a0 <prvAddNewTaskToReadyList+0xfc>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d110      	bne.n	80032f2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80032d0:	f000 fc12 	bl	8003af8 <prvInitialiseTaskLists>
 80032d4:	e00d      	b.n	80032f2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80032d6:	4b34      	ldr	r3, [pc, #208]	; (80033a8 <prvAddNewTaskToReadyList+0x104>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d109      	bne.n	80032f2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80032de:	4b31      	ldr	r3, [pc, #196]	; (80033a4 <prvAddNewTaskToReadyList+0x100>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d802      	bhi.n	80032f2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80032ec:	4a2d      	ldr	r2, [pc, #180]	; (80033a4 <prvAddNewTaskToReadyList+0x100>)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80032f2:	4b2e      	ldr	r3, [pc, #184]	; (80033ac <prvAddNewTaskToReadyList+0x108>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	3301      	adds	r3, #1
 80032f8:	4a2c      	ldr	r2, [pc, #176]	; (80033ac <prvAddNewTaskToReadyList+0x108>)
 80032fa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80032fc:	4b2b      	ldr	r3, [pc, #172]	; (80033ac <prvAddNewTaskToReadyList+0x108>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d016      	beq.n	8003338 <prvAddNewTaskToReadyList+0x94>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4618      	mov	r0, r3
 800330e:	f002 fe0f 	bl	8005f30 <SEGGER_SYSVIEW_OnTaskCreate>
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	461d      	mov	r5, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	461c      	mov	r4, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	1ae3      	subs	r3, r4, r3
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	462b      	mov	r3, r5
 8003334:	f001 fd78 	bl	8004e28 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4618      	mov	r0, r3
 800333c:	f002 fe7c 	bl	8006038 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	2201      	movs	r2, #1
 8003346:	409a      	lsls	r2, r3
 8003348:	4b19      	ldr	r3, [pc, #100]	; (80033b0 <prvAddNewTaskToReadyList+0x10c>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4313      	orrs	r3, r2
 800334e:	4a18      	ldr	r2, [pc, #96]	; (80033b0 <prvAddNewTaskToReadyList+0x10c>)
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003356:	4613      	mov	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4a15      	ldr	r2, [pc, #84]	; (80033b4 <prvAddNewTaskToReadyList+0x110>)
 8003360:	441a      	add	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3304      	adds	r3, #4
 8003366:	4619      	mov	r1, r3
 8003368:	4610      	mov	r0, r2
 800336a:	f7ff f8e2 	bl	8002532 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800336e:	f001 fa61 	bl	8004834 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003372:	4b0d      	ldr	r3, [pc, #52]	; (80033a8 <prvAddNewTaskToReadyList+0x104>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00e      	beq.n	8003398 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800337a:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <prvAddNewTaskToReadyList+0x100>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003384:	429a      	cmp	r2, r3
 8003386:	d207      	bcs.n	8003398 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003388:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <prvAddNewTaskToReadyList+0x114>)
 800338a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	f3bf 8f4f 	dsb	sy
 8003394:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003398:	bf00      	nop
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bdb0      	pop	{r4, r5, r7, pc}
 80033a0:	20000108 	.word	0x20000108
 80033a4:	20000030 	.word	0x20000030
 80033a8:	20000114 	.word	0x20000114
 80033ac:	20000124 	.word	0x20000124
 80033b0:	20000110 	.word	0x20000110
 80033b4:	20000034 	.word	0x20000034
 80033b8:	e000ed04 	.word	0xe000ed04

080033bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80033c2:	4b27      	ldr	r3, [pc, #156]	; (8003460 <vTaskStartScheduler+0xa4>)
 80033c4:	9301      	str	r3, [sp, #4]
 80033c6:	2300      	movs	r3, #0
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	2300      	movs	r3, #0
 80033cc:	2282      	movs	r2, #130	; 0x82
 80033ce:	4925      	ldr	r1, [pc, #148]	; (8003464 <vTaskStartScheduler+0xa8>)
 80033d0:	4825      	ldr	r0, [pc, #148]	; (8003468 <vTaskStartScheduler+0xac>)
 80033d2:	f7ff fe8f 	bl	80030f4 <xTaskCreate>
 80033d6:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d102      	bne.n	80033e4 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80033de:	f000 fd3b 	bl	8003e58 <xTimerCreateTimerTask>
 80033e2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d124      	bne.n	8003434 <vTaskStartScheduler+0x78>
        __asm volatile
 80033ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ee:	f383 8811 	msr	BASEPRI, r3
 80033f2:	f3bf 8f6f 	isb	sy
 80033f6:	f3bf 8f4f 	dsb	sy
 80033fa:	60bb      	str	r3, [r7, #8]
    }
 80033fc:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80033fe:	4b1b      	ldr	r3, [pc, #108]	; (800346c <vTaskStartScheduler+0xb0>)
 8003400:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003404:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003406:	4b1a      	ldr	r3, [pc, #104]	; (8003470 <vTaskStartScheduler+0xb4>)
 8003408:	2201      	movs	r2, #1
 800340a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800340c:	4b19      	ldr	r3, [pc, #100]	; (8003474 <vTaskStartScheduler+0xb8>)
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003412:	4b19      	ldr	r3, [pc, #100]	; (8003478 <vTaskStartScheduler+0xbc>)
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	4b12      	ldr	r3, [pc, #72]	; (8003460 <vTaskStartScheduler+0xa4>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	429a      	cmp	r2, r3
 800341c:	d102      	bne.n	8003424 <vTaskStartScheduler+0x68>
 800341e:	f002 fd6b 	bl	8005ef8 <SEGGER_SYSVIEW_OnIdle>
 8003422:	e004      	b.n	800342e <vTaskStartScheduler+0x72>
 8003424:	4b14      	ldr	r3, [pc, #80]	; (8003478 <vTaskStartScheduler+0xbc>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f002 fdc3 	bl	8005fb4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800342e:	f001 f8b1 	bl	8004594 <xPortStartScheduler>
 8003432:	e00e      	b.n	8003452 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800343a:	d10a      	bne.n	8003452 <vTaskStartScheduler+0x96>
        __asm volatile
 800343c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003440:	f383 8811 	msr	BASEPRI, r3
 8003444:	f3bf 8f6f 	isb	sy
 8003448:	f3bf 8f4f 	dsb	sy
 800344c:	607b      	str	r3, [r7, #4]
    }
 800344e:	bf00      	nop
 8003450:	e7fe      	b.n	8003450 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003452:	4b0a      	ldr	r3, [pc, #40]	; (800347c <vTaskStartScheduler+0xc0>)
 8003454:	681b      	ldr	r3, [r3, #0]
}
 8003456:	bf00      	nop
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	2000012c 	.word	0x2000012c
 8003464:	080064cc 	.word	0x080064cc
 8003468:	08003ac9 	.word	0x08003ac9
 800346c:	20000128 	.word	0x20000128
 8003470:	20000114 	.word	0x20000114
 8003474:	2000010c 	.word	0x2000010c
 8003478:	20000030 	.word	0x20000030
 800347c:	2000000c 	.word	0x2000000c

08003480 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003484:	4b04      	ldr	r3, [pc, #16]	; (8003498 <vTaskSuspendAll+0x18>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	3301      	adds	r3, #1
 800348a:	4a03      	ldr	r2, [pc, #12]	; (8003498 <vTaskSuspendAll+0x18>)
 800348c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800348e:	bf00      	nop
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	20000130 	.word	0x20000130

0800349c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80034a2:	2300      	movs	r3, #0
 80034a4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80034a6:	2300      	movs	r3, #0
 80034a8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80034aa:	4b43      	ldr	r3, [pc, #268]	; (80035b8 <xTaskResumeAll+0x11c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10a      	bne.n	80034c8 <xTaskResumeAll+0x2c>
        __asm volatile
 80034b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b6:	f383 8811 	msr	BASEPRI, r3
 80034ba:	f3bf 8f6f 	isb	sy
 80034be:	f3bf 8f4f 	dsb	sy
 80034c2:	603b      	str	r3, [r7, #0]
    }
 80034c4:	bf00      	nop
 80034c6:	e7fe      	b.n	80034c6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80034c8:	f001 f984 	bl	80047d4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80034cc:	4b3a      	ldr	r3, [pc, #232]	; (80035b8 <xTaskResumeAll+0x11c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	3b01      	subs	r3, #1
 80034d2:	4a39      	ldr	r2, [pc, #228]	; (80035b8 <xTaskResumeAll+0x11c>)
 80034d4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034d6:	4b38      	ldr	r3, [pc, #224]	; (80035b8 <xTaskResumeAll+0x11c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d165      	bne.n	80035aa <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80034de:	4b37      	ldr	r3, [pc, #220]	; (80035bc <xTaskResumeAll+0x120>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d061      	beq.n	80035aa <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034e6:	e032      	b.n	800354e <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034e8:	4b35      	ldr	r3, [pc, #212]	; (80035c0 <xTaskResumeAll+0x124>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	3318      	adds	r3, #24
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff f879 	bl	80025ec <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	3304      	adds	r3, #4
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff f874 	bl	80025ec <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4618      	mov	r0, r3
 8003508:	f002 fd96 	bl	8006038 <SEGGER_SYSVIEW_OnTaskStartReady>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003510:	2201      	movs	r2, #1
 8003512:	409a      	lsls	r2, r3
 8003514:	4b2b      	ldr	r3, [pc, #172]	; (80035c4 <xTaskResumeAll+0x128>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4313      	orrs	r3, r2
 800351a:	4a2a      	ldr	r2, [pc, #168]	; (80035c4 <xTaskResumeAll+0x128>)
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003522:	4613      	mov	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4a27      	ldr	r2, [pc, #156]	; (80035c8 <xTaskResumeAll+0x12c>)
 800352c:	441a      	add	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	3304      	adds	r3, #4
 8003532:	4619      	mov	r1, r3
 8003534:	4610      	mov	r0, r2
 8003536:	f7fe fffc 	bl	8002532 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800353e:	4b23      	ldr	r3, [pc, #140]	; (80035cc <xTaskResumeAll+0x130>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003544:	429a      	cmp	r2, r3
 8003546:	d302      	bcc.n	800354e <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8003548:	4b21      	ldr	r3, [pc, #132]	; (80035d0 <xTaskResumeAll+0x134>)
 800354a:	2201      	movs	r2, #1
 800354c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800354e:	4b1c      	ldr	r3, [pc, #112]	; (80035c0 <xTaskResumeAll+0x124>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1c8      	bne.n	80034e8 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800355c:	f000 fb4a 	bl	8003bf4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003560:	4b1c      	ldr	r3, [pc, #112]	; (80035d4 <xTaskResumeAll+0x138>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d010      	beq.n	800358e <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800356c:	f000 f846 	bl	80035fc <xTaskIncrementTick>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8003576:	4b16      	ldr	r3, [pc, #88]	; (80035d0 <xTaskResumeAll+0x134>)
 8003578:	2201      	movs	r2, #1
 800357a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3b01      	subs	r3, #1
 8003580:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1f1      	bne.n	800356c <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8003588:	4b12      	ldr	r3, [pc, #72]	; (80035d4 <xTaskResumeAll+0x138>)
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800358e:	4b10      	ldr	r3, [pc, #64]	; (80035d0 <xTaskResumeAll+0x134>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d009      	beq.n	80035aa <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003596:	2301      	movs	r3, #1
 8003598:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800359a:	4b0f      	ldr	r3, [pc, #60]	; (80035d8 <xTaskResumeAll+0x13c>)
 800359c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	f3bf 8f4f 	dsb	sy
 80035a6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80035aa:	f001 f943 	bl	8004834 <vPortExitCritical>

    return xAlreadyYielded;
 80035ae:	68bb      	ldr	r3, [r7, #8]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	20000130 	.word	0x20000130
 80035bc:	20000108 	.word	0x20000108
 80035c0:	200000c8 	.word	0x200000c8
 80035c4:	20000110 	.word	0x20000110
 80035c8:	20000034 	.word	0x20000034
 80035cc:	20000030 	.word	0x20000030
 80035d0:	2000011c 	.word	0x2000011c
 80035d4:	20000118 	.word	0x20000118
 80035d8:	e000ed04 	.word	0xe000ed04

080035dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80035e2:	4b05      	ldr	r3, [pc, #20]	; (80035f8 <xTaskGetTickCount+0x1c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80035e8:	687b      	ldr	r3, [r7, #4]
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	2000010c 	.word	0x2000010c

080035fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003602:	2300      	movs	r3, #0
 8003604:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003606:	4b50      	ldr	r3, [pc, #320]	; (8003748 <xTaskIncrementTick+0x14c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	f040 8092 	bne.w	8003734 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003610:	4b4e      	ldr	r3, [pc, #312]	; (800374c <xTaskIncrementTick+0x150>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	3301      	adds	r3, #1
 8003616:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003618:	4a4c      	ldr	r2, [pc, #304]	; (800374c <xTaskIncrementTick+0x150>)
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d120      	bne.n	8003666 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003624:	4b4a      	ldr	r3, [pc, #296]	; (8003750 <xTaskIncrementTick+0x154>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <xTaskIncrementTick+0x48>
        __asm volatile
 800362e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003632:	f383 8811 	msr	BASEPRI, r3
 8003636:	f3bf 8f6f 	isb	sy
 800363a:	f3bf 8f4f 	dsb	sy
 800363e:	603b      	str	r3, [r7, #0]
    }
 8003640:	bf00      	nop
 8003642:	e7fe      	b.n	8003642 <xTaskIncrementTick+0x46>
 8003644:	4b42      	ldr	r3, [pc, #264]	; (8003750 <xTaskIncrementTick+0x154>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	4b42      	ldr	r3, [pc, #264]	; (8003754 <xTaskIncrementTick+0x158>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a40      	ldr	r2, [pc, #256]	; (8003750 <xTaskIncrementTick+0x154>)
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	4a40      	ldr	r2, [pc, #256]	; (8003754 <xTaskIncrementTick+0x158>)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6013      	str	r3, [r2, #0]
 8003658:	4b3f      	ldr	r3, [pc, #252]	; (8003758 <xTaskIncrementTick+0x15c>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3301      	adds	r3, #1
 800365e:	4a3e      	ldr	r2, [pc, #248]	; (8003758 <xTaskIncrementTick+0x15c>)
 8003660:	6013      	str	r3, [r2, #0]
 8003662:	f000 fac7 	bl	8003bf4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003666:	4b3d      	ldr	r3, [pc, #244]	; (800375c <xTaskIncrementTick+0x160>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	429a      	cmp	r2, r3
 800366e:	d34c      	bcc.n	800370a <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003670:	4b37      	ldr	r3, [pc, #220]	; (8003750 <xTaskIncrementTick+0x154>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d104      	bne.n	8003684 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800367a:	4b38      	ldr	r3, [pc, #224]	; (800375c <xTaskIncrementTick+0x160>)
 800367c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003680:	601a      	str	r2, [r3, #0]
                    break;
 8003682:	e042      	b.n	800370a <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003684:	4b32      	ldr	r3, [pc, #200]	; (8003750 <xTaskIncrementTick+0x154>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	429a      	cmp	r2, r3
 800369a:	d203      	bcs.n	80036a4 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800369c:	4a2f      	ldr	r2, [pc, #188]	; (800375c <xTaskIncrementTick+0x160>)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80036a2:	e032      	b.n	800370a <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	3304      	adds	r3, #4
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7fe ff9f 	bl	80025ec <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d004      	beq.n	80036c0 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	3318      	adds	r3, #24
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fe ff96 	bl	80025ec <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f002 fcb8 	bl	8006038 <SEGGER_SYSVIEW_OnTaskStartReady>
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036cc:	2201      	movs	r2, #1
 80036ce:	409a      	lsls	r2, r3
 80036d0:	4b23      	ldr	r3, [pc, #140]	; (8003760 <xTaskIncrementTick+0x164>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	4a22      	ldr	r2, [pc, #136]	; (8003760 <xTaskIncrementTick+0x164>)
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036de:	4613      	mov	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4413      	add	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4a1f      	ldr	r2, [pc, #124]	; (8003764 <xTaskIncrementTick+0x168>)
 80036e8:	441a      	add	r2, r3
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	3304      	adds	r3, #4
 80036ee:	4619      	mov	r1, r3
 80036f0:	4610      	mov	r0, r2
 80036f2:	f7fe ff1e 	bl	8002532 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036fa:	4b1b      	ldr	r3, [pc, #108]	; (8003768 <xTaskIncrementTick+0x16c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003700:	429a      	cmp	r2, r3
 8003702:	d3b5      	bcc.n	8003670 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8003704:	2301      	movs	r3, #1
 8003706:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003708:	e7b2      	b.n	8003670 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800370a:	4b17      	ldr	r3, [pc, #92]	; (8003768 <xTaskIncrementTick+0x16c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003710:	4914      	ldr	r1, [pc, #80]	; (8003764 <xTaskIncrementTick+0x168>)
 8003712:	4613      	mov	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	440b      	add	r3, r1
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d901      	bls.n	8003726 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8003722:	2301      	movs	r3, #1
 8003724:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003726:	4b11      	ldr	r3, [pc, #68]	; (800376c <xTaskIncrementTick+0x170>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d007      	beq.n	800373e <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 800372e:	2301      	movs	r3, #1
 8003730:	617b      	str	r3, [r7, #20]
 8003732:	e004      	b.n	800373e <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003734:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <xTaskIncrementTick+0x174>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	3301      	adds	r3, #1
 800373a:	4a0d      	ldr	r2, [pc, #52]	; (8003770 <xTaskIncrementTick+0x174>)
 800373c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800373e:	697b      	ldr	r3, [r7, #20]
}
 8003740:	4618      	mov	r0, r3
 8003742:	3718      	adds	r7, #24
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	20000130 	.word	0x20000130
 800374c:	2000010c 	.word	0x2000010c
 8003750:	200000c0 	.word	0x200000c0
 8003754:	200000c4 	.word	0x200000c4
 8003758:	20000120 	.word	0x20000120
 800375c:	20000128 	.word	0x20000128
 8003760:	20000110 	.word	0x20000110
 8003764:	20000034 	.word	0x20000034
 8003768:	20000030 	.word	0x20000030
 800376c:	2000011c 	.word	0x2000011c
 8003770:	20000118 	.word	0x20000118

08003774 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800377a:	4b2d      	ldr	r3, [pc, #180]	; (8003830 <vTaskSwitchContext+0xbc>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003782:	4b2c      	ldr	r3, [pc, #176]	; (8003834 <vTaskSwitchContext+0xc0>)
 8003784:	2201      	movs	r2, #1
 8003786:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003788:	e04d      	b.n	8003826 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800378a:	4b2a      	ldr	r3, [pc, #168]	; (8003834 <vTaskSwitchContext+0xc0>)
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003790:	4b29      	ldr	r3, [pc, #164]	; (8003838 <vTaskSwitchContext+0xc4>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	fab3 f383 	clz	r3, r3
 800379c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800379e:	7afb      	ldrb	r3, [r7, #11]
 80037a0:	f1c3 031f 	rsb	r3, r3, #31
 80037a4:	617b      	str	r3, [r7, #20]
 80037a6:	4925      	ldr	r1, [pc, #148]	; (800383c <vTaskSwitchContext+0xc8>)
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	4613      	mov	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4413      	add	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	440b      	add	r3, r1
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10a      	bne.n	80037d0 <vTaskSwitchContext+0x5c>
        __asm volatile
 80037ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037be:	f383 8811 	msr	BASEPRI, r3
 80037c2:	f3bf 8f6f 	isb	sy
 80037c6:	f3bf 8f4f 	dsb	sy
 80037ca:	607b      	str	r3, [r7, #4]
    }
 80037cc:	bf00      	nop
 80037ce:	e7fe      	b.n	80037ce <vTaskSwitchContext+0x5a>
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	4613      	mov	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4a18      	ldr	r2, [pc, #96]	; (800383c <vTaskSwitchContext+0xc8>)
 80037dc:	4413      	add	r3, r2
 80037de:	613b      	str	r3, [r7, #16]
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	605a      	str	r2, [r3, #4]
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	3308      	adds	r3, #8
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d104      	bne.n	8003800 <vTaskSwitchContext+0x8c>
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	605a      	str	r2, [r3, #4]
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	4a0e      	ldr	r2, [pc, #56]	; (8003840 <vTaskSwitchContext+0xcc>)
 8003808:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800380a:	4b0d      	ldr	r3, [pc, #52]	; (8003840 <vTaskSwitchContext+0xcc>)
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <vTaskSwitchContext+0xd0>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	429a      	cmp	r2, r3
 8003814:	d102      	bne.n	800381c <vTaskSwitchContext+0xa8>
 8003816:	f002 fb6f 	bl	8005ef8 <SEGGER_SYSVIEW_OnIdle>
}
 800381a:	e004      	b.n	8003826 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 800381c:	4b08      	ldr	r3, [pc, #32]	; (8003840 <vTaskSwitchContext+0xcc>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4618      	mov	r0, r3
 8003822:	f002 fbc7 	bl	8005fb4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003826:	bf00      	nop
 8003828:	3718      	adds	r7, #24
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	20000130 	.word	0x20000130
 8003834:	2000011c 	.word	0x2000011c
 8003838:	20000110 	.word	0x20000110
 800383c:	20000034 	.word	0x20000034
 8003840:	20000030 	.word	0x20000030
 8003844:	2000012c 	.word	0x2000012c

08003848 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10a      	bne.n	800386e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385c:	f383 8811 	msr	BASEPRI, r3
 8003860:	f3bf 8f6f 	isb	sy
 8003864:	f3bf 8f4f 	dsb	sy
 8003868:	60fb      	str	r3, [r7, #12]
    }
 800386a:	bf00      	nop
 800386c:	e7fe      	b.n	800386c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800386e:	4b07      	ldr	r3, [pc, #28]	; (800388c <vTaskPlaceOnEventList+0x44>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	3318      	adds	r3, #24
 8003874:	4619      	mov	r1, r3
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7fe fe7f 	bl	800257a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800387c:	2101      	movs	r1, #1
 800387e:	6838      	ldr	r0, [r7, #0]
 8003880:	f000 fa72 	bl	8003d68 <prvAddCurrentTaskToDelayedList>
}
 8003884:	bf00      	nop
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	20000030 	.word	0x20000030

08003890 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10a      	bne.n	80038b8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80038a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a6:	f383 8811 	msr	BASEPRI, r3
 80038aa:	f3bf 8f6f 	isb	sy
 80038ae:	f3bf 8f4f 	dsb	sy
 80038b2:	617b      	str	r3, [r7, #20]
    }
 80038b4:	bf00      	nop
 80038b6:	e7fe      	b.n	80038b6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038b8:	4b0b      	ldr	r3, [pc, #44]	; (80038e8 <vTaskPlaceOnEventListRestricted+0x58>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	3318      	adds	r3, #24
 80038be:	4619      	mov	r1, r3
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f7fe fe36 	bl	8002532 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d002      	beq.n	80038d2 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80038cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038d0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80038d2:	2024      	movs	r0, #36	; 0x24
 80038d4:	f001 fe36 	bl	8005544 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	68b8      	ldr	r0, [r7, #8]
 80038dc:	f000 fa44 	bl	8003d68 <prvAddCurrentTaskToDelayedList>
    }
 80038e0:	bf00      	nop
 80038e2:	3718      	adds	r7, #24
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	20000030 	.word	0x20000030

080038ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10a      	bne.n	8003918 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003906:	f383 8811 	msr	BASEPRI, r3
 800390a:	f3bf 8f6f 	isb	sy
 800390e:	f3bf 8f4f 	dsb	sy
 8003912:	60fb      	str	r3, [r7, #12]
    }
 8003914:	bf00      	nop
 8003916:	e7fe      	b.n	8003916 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	3318      	adds	r3, #24
 800391c:	4618      	mov	r0, r3
 800391e:	f7fe fe65 	bl	80025ec <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003922:	4b1f      	ldr	r3, [pc, #124]	; (80039a0 <xTaskRemoveFromEventList+0xb4>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d120      	bne.n	800396c <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	3304      	adds	r3, #4
 800392e:	4618      	mov	r0, r3
 8003930:	f7fe fe5c 	bl	80025ec <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	4618      	mov	r0, r3
 8003938:	f002 fb7e 	bl	8006038 <SEGGER_SYSVIEW_OnTaskStartReady>
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003940:	2201      	movs	r2, #1
 8003942:	409a      	lsls	r2, r3
 8003944:	4b17      	ldr	r3, [pc, #92]	; (80039a4 <xTaskRemoveFromEventList+0xb8>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4313      	orrs	r3, r2
 800394a:	4a16      	ldr	r2, [pc, #88]	; (80039a4 <xTaskRemoveFromEventList+0xb8>)
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003952:	4613      	mov	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4a13      	ldr	r2, [pc, #76]	; (80039a8 <xTaskRemoveFromEventList+0xbc>)
 800395c:	441a      	add	r2, r3
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	3304      	adds	r3, #4
 8003962:	4619      	mov	r1, r3
 8003964:	4610      	mov	r0, r2
 8003966:	f7fe fde4 	bl	8002532 <vListInsertEnd>
 800396a:	e005      	b.n	8003978 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	3318      	adds	r3, #24
 8003970:	4619      	mov	r1, r3
 8003972:	480e      	ldr	r0, [pc, #56]	; (80039ac <xTaskRemoveFromEventList+0xc0>)
 8003974:	f7fe fddd 	bl	8002532 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800397c:	4b0c      	ldr	r3, [pc, #48]	; (80039b0 <xTaskRemoveFromEventList+0xc4>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003982:	429a      	cmp	r2, r3
 8003984:	d905      	bls.n	8003992 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003986:	2301      	movs	r3, #1
 8003988:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800398a:	4b0a      	ldr	r3, [pc, #40]	; (80039b4 <xTaskRemoveFromEventList+0xc8>)
 800398c:	2201      	movs	r2, #1
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	e001      	b.n	8003996 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003992:	2300      	movs	r3, #0
 8003994:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003996:	697b      	ldr	r3, [r7, #20]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	20000130 	.word	0x20000130
 80039a4:	20000110 	.word	0x20000110
 80039a8:	20000034 	.word	0x20000034
 80039ac:	200000c8 	.word	0x200000c8
 80039b0:	20000030 	.word	0x20000030
 80039b4:	2000011c 	.word	0x2000011c

080039b8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80039c0:	4b06      	ldr	r3, [pc, #24]	; (80039dc <vTaskInternalSetTimeOutState+0x24>)
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80039c8:	4b05      	ldr	r3, [pc, #20]	; (80039e0 <vTaskInternalSetTimeOutState+0x28>)
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	605a      	str	r2, [r3, #4]
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	20000120 	.word	0x20000120
 80039e0:	2000010c 	.word	0x2000010c

080039e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b088      	sub	sp, #32
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10a      	bne.n	8003a0a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80039f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f8:	f383 8811 	msr	BASEPRI, r3
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	613b      	str	r3, [r7, #16]
    }
 8003a06:	bf00      	nop
 8003a08:	e7fe      	b.n	8003a08 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10a      	bne.n	8003a26 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a14:	f383 8811 	msr	BASEPRI, r3
 8003a18:	f3bf 8f6f 	isb	sy
 8003a1c:	f3bf 8f4f 	dsb	sy
 8003a20:	60fb      	str	r3, [r7, #12]
    }
 8003a22:	bf00      	nop
 8003a24:	e7fe      	b.n	8003a24 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003a26:	f000 fed5 	bl	80047d4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003a2a:	4b1f      	ldr	r3, [pc, #124]	; (8003aa8 <xTaskCheckForTimeOut+0xc4>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a42:	d102      	bne.n	8003a4a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003a44:	2300      	movs	r3, #0
 8003a46:	61fb      	str	r3, [r7, #28]
 8003a48:	e026      	b.n	8003a98 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	4b17      	ldr	r3, [pc, #92]	; (8003aac <xTaskCheckForTimeOut+0xc8>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d00a      	beq.n	8003a6c <xTaskCheckForTimeOut+0x88>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d305      	bcc.n	8003a6c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003a60:	2301      	movs	r3, #1
 8003a62:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	e015      	b.n	8003a98 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d20b      	bcs.n	8003a8e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	1ad2      	subs	r2, r2, r3
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7ff ff98 	bl	80039b8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	61fb      	str	r3, [r7, #28]
 8003a8c:	e004      	b.n	8003a98 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003a94:	2301      	movs	r3, #1
 8003a96:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003a98:	f000 fecc 	bl	8004834 <vPortExitCritical>

    return xReturn;
 8003a9c:	69fb      	ldr	r3, [r7, #28]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3720      	adds	r7, #32
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	2000010c 	.word	0x2000010c
 8003aac:	20000120 	.word	0x20000120

08003ab0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003ab4:	4b03      	ldr	r3, [pc, #12]	; (8003ac4 <vTaskMissedYield+0x14>)
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]
}
 8003aba:	bf00      	nop
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	2000011c 	.word	0x2000011c

08003ac8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003ad0:	f000 f852 	bl	8003b78 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ad4:	4b06      	ldr	r3, [pc, #24]	; (8003af0 <prvIdleTask+0x28>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d9f9      	bls.n	8003ad0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003adc:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <prvIdleTask+0x2c>)
 8003ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	f3bf 8f4f 	dsb	sy
 8003ae8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003aec:	e7f0      	b.n	8003ad0 <prvIdleTask+0x8>
 8003aee:	bf00      	nop
 8003af0:	20000034 	.word	0x20000034
 8003af4:	e000ed04 	.word	0xe000ed04

08003af8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003afe:	2300      	movs	r3, #0
 8003b00:	607b      	str	r3, [r7, #4]
 8003b02:	e00c      	b.n	8003b1e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	4613      	mov	r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	4413      	add	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4a12      	ldr	r2, [pc, #72]	; (8003b58 <prvInitialiseTaskLists+0x60>)
 8003b10:	4413      	add	r3, r2
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fe fce0 	bl	80024d8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	607b      	str	r3, [r7, #4]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	d9ef      	bls.n	8003b04 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003b24:	480d      	ldr	r0, [pc, #52]	; (8003b5c <prvInitialiseTaskLists+0x64>)
 8003b26:	f7fe fcd7 	bl	80024d8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003b2a:	480d      	ldr	r0, [pc, #52]	; (8003b60 <prvInitialiseTaskLists+0x68>)
 8003b2c:	f7fe fcd4 	bl	80024d8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003b30:	480c      	ldr	r0, [pc, #48]	; (8003b64 <prvInitialiseTaskLists+0x6c>)
 8003b32:	f7fe fcd1 	bl	80024d8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003b36:	480c      	ldr	r0, [pc, #48]	; (8003b68 <prvInitialiseTaskLists+0x70>)
 8003b38:	f7fe fcce 	bl	80024d8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003b3c:	480b      	ldr	r0, [pc, #44]	; (8003b6c <prvInitialiseTaskLists+0x74>)
 8003b3e:	f7fe fccb 	bl	80024d8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003b42:	4b0b      	ldr	r3, [pc, #44]	; (8003b70 <prvInitialiseTaskLists+0x78>)
 8003b44:	4a05      	ldr	r2, [pc, #20]	; (8003b5c <prvInitialiseTaskLists+0x64>)
 8003b46:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b48:	4b0a      	ldr	r3, [pc, #40]	; (8003b74 <prvInitialiseTaskLists+0x7c>)
 8003b4a:	4a05      	ldr	r2, [pc, #20]	; (8003b60 <prvInitialiseTaskLists+0x68>)
 8003b4c:	601a      	str	r2, [r3, #0]
}
 8003b4e:	bf00      	nop
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	20000034 	.word	0x20000034
 8003b5c:	20000098 	.word	0x20000098
 8003b60:	200000ac 	.word	0x200000ac
 8003b64:	200000c8 	.word	0x200000c8
 8003b68:	200000dc 	.word	0x200000dc
 8003b6c:	200000f4 	.word	0x200000f4
 8003b70:	200000c0 	.word	0x200000c0
 8003b74:	200000c4 	.word	0x200000c4

08003b78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b7e:	e019      	b.n	8003bb4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003b80:	f000 fe28 	bl	80047d4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b84:	4b10      	ldr	r3, [pc, #64]	; (8003bc8 <prvCheckTasksWaitingTermination+0x50>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3304      	adds	r3, #4
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7fe fd2b 	bl	80025ec <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003b96:	4b0d      	ldr	r3, [pc, #52]	; (8003bcc <prvCheckTasksWaitingTermination+0x54>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	4a0b      	ldr	r2, [pc, #44]	; (8003bcc <prvCheckTasksWaitingTermination+0x54>)
 8003b9e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <prvCheckTasksWaitingTermination+0x58>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	4a0a      	ldr	r2, [pc, #40]	; (8003bd0 <prvCheckTasksWaitingTermination+0x58>)
 8003ba8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003baa:	f000 fe43 	bl	8004834 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f810 	bl	8003bd4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bb4:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <prvCheckTasksWaitingTermination+0x58>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1e1      	bne.n	8003b80 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003bbc:	bf00      	nop
 8003bbe:	bf00      	nop
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	200000dc 	.word	0x200000dc
 8003bcc:	20000108 	.word	0x20000108
 8003bd0:	200000f0 	.word	0x200000f0

08003bd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be0:	4618      	mov	r0, r3
 8003be2:	f001 f803 	bl	8004bec <vPortFree>
                vPortFree( pxTCB );
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f001 f800 	bl	8004bec <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003bec:	bf00      	nop
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bf8:	4b0a      	ldr	r3, [pc, #40]	; (8003c24 <prvResetNextTaskUnblockTime+0x30>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d104      	bne.n	8003c0c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003c02:	4b09      	ldr	r3, [pc, #36]	; (8003c28 <prvResetNextTaskUnblockTime+0x34>)
 8003c04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c08:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003c0a:	e005      	b.n	8003c18 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c0c:	4b05      	ldr	r3, [pc, #20]	; (8003c24 <prvResetNextTaskUnblockTime+0x30>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a04      	ldr	r2, [pc, #16]	; (8003c28 <prvResetNextTaskUnblockTime+0x34>)
 8003c16:	6013      	str	r3, [r2, #0]
}
 8003c18:	bf00      	nop
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	200000c0 	.word	0x200000c0
 8003c28:	20000128 	.word	0x20000128

08003c2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003c32:	4b0b      	ldr	r3, [pc, #44]	; (8003c60 <xTaskGetSchedulerState+0x34>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d102      	bne.n	8003c40 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	607b      	str	r3, [r7, #4]
 8003c3e:	e008      	b.n	8003c52 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c40:	4b08      	ldr	r3, [pc, #32]	; (8003c64 <xTaskGetSchedulerState+0x38>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d102      	bne.n	8003c4e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003c48:	2302      	movs	r3, #2
 8003c4a:	607b      	str	r3, [r7, #4]
 8003c4c:	e001      	b.n	8003c52 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003c52:	687b      	ldr	r3, [r7, #4]
    }
 8003c54:	4618      	mov	r0, r3
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	20000114 	.word	0x20000114
 8003c64:	20000130 	.word	0x20000130

08003c68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003c74:	2300      	movs	r3, #0
 8003c76:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d068      	beq.n	8003d50 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003c7e:	4b37      	ldr	r3, [pc, #220]	; (8003d5c <xTaskPriorityDisinherit+0xf4>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d00a      	beq.n	8003c9e <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8c:	f383 8811 	msr	BASEPRI, r3
 8003c90:	f3bf 8f6f 	isb	sy
 8003c94:	f3bf 8f4f 	dsb	sy
 8003c98:	60fb      	str	r3, [r7, #12]
    }
 8003c9a:	bf00      	nop
 8003c9c:	e7fe      	b.n	8003c9c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10a      	bne.n	8003cbc <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003caa:	f383 8811 	msr	BASEPRI, r3
 8003cae:	f3bf 8f6f 	isb	sy
 8003cb2:	f3bf 8f4f 	dsb	sy
 8003cb6:	60bb      	str	r3, [r7, #8]
    }
 8003cb8:	bf00      	nop
 8003cba:	e7fe      	b.n	8003cba <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc0:	1e5a      	subs	r2, r3, #1
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d03e      	beq.n	8003d50 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d13a      	bne.n	8003d50 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	3304      	adds	r3, #4
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7fe fc84 	bl	80025ec <uxListRemove>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10a      	bne.n	8003d00 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cee:	2201      	movs	r2, #1
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	43da      	mvns	r2, r3
 8003cf6:	4b1a      	ldr	r3, [pc, #104]	; (8003d60 <xTaskPriorityDisinherit+0xf8>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	4a18      	ldr	r2, [pc, #96]	; (8003d60 <xTaskPriorityDisinherit+0xf8>)
 8003cfe:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4619      	mov	r1, r3
 8003d04:	204a      	movs	r0, #74	; 0x4a
 8003d06:	f001 fc3b 	bl	8005580 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d16:	f1c3 0205 	rsb	r2, r3, #5
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d22:	2201      	movs	r2, #1
 8003d24:	409a      	lsls	r2, r3
 8003d26:	4b0e      	ldr	r3, [pc, #56]	; (8003d60 <xTaskPriorityDisinherit+0xf8>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	4a0c      	ldr	r2, [pc, #48]	; (8003d60 <xTaskPriorityDisinherit+0xf8>)
 8003d2e:	6013      	str	r3, [r2, #0]
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d34:	4613      	mov	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4413      	add	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4a09      	ldr	r2, [pc, #36]	; (8003d64 <xTaskPriorityDisinherit+0xfc>)
 8003d3e:	441a      	add	r2, r3
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	3304      	adds	r3, #4
 8003d44:	4619      	mov	r1, r3
 8003d46:	4610      	mov	r0, r2
 8003d48:	f7fe fbf3 	bl	8002532 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003d50:	697b      	ldr	r3, [r7, #20]
    }
 8003d52:	4618      	mov	r0, r3
 8003d54:	3718      	adds	r7, #24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	20000030 	.word	0x20000030
 8003d60:	20000110 	.word	0x20000110
 8003d64:	20000034 	.word	0x20000034

08003d68 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003d72:	4b32      	ldr	r3, [pc, #200]	; (8003e3c <prvAddCurrentTaskToDelayedList+0xd4>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d78:	4b31      	ldr	r3, [pc, #196]	; (8003e40 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fe fc34 	bl	80025ec <uxListRemove>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10b      	bne.n	8003da2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003d8a:	4b2d      	ldr	r3, [pc, #180]	; (8003e40 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	2201      	movs	r2, #1
 8003d92:	fa02 f303 	lsl.w	r3, r2, r3
 8003d96:	43da      	mvns	r2, r3
 8003d98:	4b2a      	ldr	r3, [pc, #168]	; (8003e44 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	4a29      	ldr	r2, [pc, #164]	; (8003e44 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003da0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003da8:	d110      	bne.n	8003dcc <prvAddCurrentTaskToDelayedList+0x64>
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00d      	beq.n	8003dcc <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003db0:	4b23      	ldr	r3, [pc, #140]	; (8003e40 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	211b      	movs	r1, #27
 8003db6:	4618      	mov	r0, r3
 8003db8:	f002 f980 	bl	80060bc <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003dbc:	4b20      	ldr	r3, [pc, #128]	; (8003e40 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	4820      	ldr	r0, [pc, #128]	; (8003e48 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003dc6:	f7fe fbb4 	bl	8002532 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003dca:	e032      	b.n	8003e32 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003dd4:	4b1a      	ldr	r3, [pc, #104]	; (8003e40 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d20f      	bcs.n	8003e04 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003de4:	4b16      	ldr	r3, [pc, #88]	; (8003e40 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2104      	movs	r1, #4
 8003dea:	4618      	mov	r0, r3
 8003dec:	f002 f966 	bl	80060bc <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003df0:	4b16      	ldr	r3, [pc, #88]	; (8003e4c <prvAddCurrentTaskToDelayedList+0xe4>)
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	4b12      	ldr	r3, [pc, #72]	; (8003e40 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	3304      	adds	r3, #4
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	4610      	mov	r0, r2
 8003dfe:	f7fe fbbc 	bl	800257a <vListInsert>
}
 8003e02:	e016      	b.n	8003e32 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003e04:	4b0e      	ldr	r3, [pc, #56]	; (8003e40 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2104      	movs	r1, #4
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f002 f956 	bl	80060bc <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e10:	4b0f      	ldr	r3, [pc, #60]	; (8003e50 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	4b0a      	ldr	r3, [pc, #40]	; (8003e40 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	3304      	adds	r3, #4
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4610      	mov	r0, r2
 8003e1e:	f7fe fbac 	bl	800257a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003e22:	4b0c      	ldr	r3, [pc, #48]	; (8003e54 <prvAddCurrentTaskToDelayedList+0xec>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d202      	bcs.n	8003e32 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003e2c:	4a09      	ldr	r2, [pc, #36]	; (8003e54 <prvAddCurrentTaskToDelayedList+0xec>)
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	6013      	str	r3, [r2, #0]
}
 8003e32:	bf00      	nop
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	2000010c 	.word	0x2000010c
 8003e40:	20000030 	.word	0x20000030
 8003e44:	20000110 	.word	0x20000110
 8003e48:	200000f4 	.word	0x200000f4
 8003e4c:	200000c4 	.word	0x200000c4
 8003e50:	200000c0 	.word	0x200000c0
 8003e54:	20000128 	.word	0x20000128

08003e58 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003e62:	f000 fad5 	bl	8004410 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003e66:	4b11      	ldr	r3, [pc, #68]	; (8003eac <xTimerCreateTimerTask+0x54>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00b      	beq.n	8003e86 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003e6e:	4b10      	ldr	r3, [pc, #64]	; (8003eb0 <xTimerCreateTimerTask+0x58>)
 8003e70:	9301      	str	r3, [sp, #4]
 8003e72:	2302      	movs	r3, #2
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	2300      	movs	r3, #0
 8003e78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003e7c:	490d      	ldr	r1, [pc, #52]	; (8003eb4 <xTimerCreateTimerTask+0x5c>)
 8003e7e:	480e      	ldr	r0, [pc, #56]	; (8003eb8 <xTimerCreateTimerTask+0x60>)
 8003e80:	f7ff f938 	bl	80030f4 <xTaskCreate>
 8003e84:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d10a      	bne.n	8003ea2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e90:	f383 8811 	msr	BASEPRI, r3
 8003e94:	f3bf 8f6f 	isb	sy
 8003e98:	f3bf 8f4f 	dsb	sy
 8003e9c:	603b      	str	r3, [r7, #0]
    }
 8003e9e:	bf00      	nop
 8003ea0:	e7fe      	b.n	8003ea0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003ea2:	687b      	ldr	r3, [r7, #4]
    }
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3708      	adds	r7, #8
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	20000164 	.word	0x20000164
 8003eb0:	20000168 	.word	0x20000168
 8003eb4:	080064d4 	.word	0x080064d4
 8003eb8:	08003ff1 	.word	0x08003ff1

08003ebc <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b08a      	sub	sp, #40	; 0x28
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
 8003ec8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10a      	bne.n	8003eea <xTimerGenericCommand+0x2e>
        __asm volatile
 8003ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed8:	f383 8811 	msr	BASEPRI, r3
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	623b      	str	r3, [r7, #32]
    }
 8003ee6:	bf00      	nop
 8003ee8:	e7fe      	b.n	8003ee8 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003eea:	4b1a      	ldr	r3, [pc, #104]	; (8003f54 <xTimerGenericCommand+0x98>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d02a      	beq.n	8003f48 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	2b05      	cmp	r3, #5
 8003f02:	dc18      	bgt.n	8003f36 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003f04:	f7ff fe92 	bl	8003c2c <xTaskGetSchedulerState>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d109      	bne.n	8003f22 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003f0e:	4b11      	ldr	r3, [pc, #68]	; (8003f54 <xTimerGenericCommand+0x98>)
 8003f10:	6818      	ldr	r0, [r3, #0]
 8003f12:	f107 0114 	add.w	r1, r7, #20
 8003f16:	2300      	movs	r3, #0
 8003f18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f1a:	f7fe fc81 	bl	8002820 <xQueueGenericSend>
 8003f1e:	6278      	str	r0, [r7, #36]	; 0x24
 8003f20:	e012      	b.n	8003f48 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003f22:	4b0c      	ldr	r3, [pc, #48]	; (8003f54 <xTimerGenericCommand+0x98>)
 8003f24:	6818      	ldr	r0, [r3, #0]
 8003f26:	f107 0114 	add.w	r1, r7, #20
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f7fe fc77 	bl	8002820 <xQueueGenericSend>
 8003f32:	6278      	str	r0, [r7, #36]	; 0x24
 8003f34:	e008      	b.n	8003f48 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003f36:	4b07      	ldr	r3, [pc, #28]	; (8003f54 <xTimerGenericCommand+0x98>)
 8003f38:	6818      	ldr	r0, [r3, #0]
 8003f3a:	f107 0114 	add.w	r1, r7, #20
 8003f3e:	2300      	movs	r3, #0
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	f7fe fd93 	bl	8002a6c <xQueueGenericSendFromISR>
 8003f46:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3728      	adds	r7, #40	; 0x28
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	20000164 	.word	0x20000164

08003f58 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b088      	sub	sp, #32
 8003f5c:	af02      	add	r7, sp, #8
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f62:	4b22      	ldr	r3, [pc, #136]	; (8003fec <prvProcessExpiredTimer+0x94>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	3304      	adds	r3, #4
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7fe fb3b 	bl	80025ec <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d022      	beq.n	8003fca <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	699a      	ldr	r2, [r3, #24]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	18d1      	adds	r1, r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	6978      	ldr	r0, [r7, #20]
 8003f92:	f000 f8d1 	bl	8004138 <prvInsertTimerInActiveList>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d01f      	beq.n	8003fdc <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	6978      	ldr	r0, [r7, #20]
 8003fa8:	f7ff ff88 	bl	8003ebc <xTimerGenericCommand>
 8003fac:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d113      	bne.n	8003fdc <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb8:	f383 8811 	msr	BASEPRI, r3
 8003fbc:	f3bf 8f6f 	isb	sy
 8003fc0:	f3bf 8f4f 	dsb	sy
 8003fc4:	60fb      	str	r3, [r7, #12]
    }
 8003fc6:	bf00      	nop
 8003fc8:	e7fe      	b.n	8003fc8 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fd0:	f023 0301 	bic.w	r3, r3, #1
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	6978      	ldr	r0, [r7, #20]
 8003fe2:	4798      	blx	r3
    }
 8003fe4:	bf00      	nop
 8003fe6:	3718      	adds	r7, #24
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	2000015c 	.word	0x2000015c

08003ff0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ff8:	f107 0308 	add.w	r3, r7, #8
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 f857 	bl	80040b0 <prvGetNextExpireTime>
 8004002:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	4619      	mov	r1, r3
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 f803 	bl	8004014 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800400e:	f000 f8d5 	bl	80041bc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004012:	e7f1      	b.n	8003ff8 <prvTimerTask+0x8>

08004014 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800401e:	f7ff fa2f 	bl	8003480 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004022:	f107 0308 	add.w	r3, r7, #8
 8004026:	4618      	mov	r0, r3
 8004028:	f000 f866 	bl	80040f8 <prvSampleTimeNow>
 800402c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d130      	bne.n	8004096 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10a      	bne.n	8004050 <prvProcessTimerOrBlockTask+0x3c>
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	429a      	cmp	r2, r3
 8004040:	d806      	bhi.n	8004050 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004042:	f7ff fa2b 	bl	800349c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004046:	68f9      	ldr	r1, [r7, #12]
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f7ff ff85 	bl	8003f58 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800404e:	e024      	b.n	800409a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d008      	beq.n	8004068 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004056:	4b13      	ldr	r3, [pc, #76]	; (80040a4 <prvProcessTimerOrBlockTask+0x90>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d101      	bne.n	8004064 <prvProcessTimerOrBlockTask+0x50>
 8004060:	2301      	movs	r3, #1
 8004062:	e000      	b.n	8004066 <prvProcessTimerOrBlockTask+0x52>
 8004064:	2300      	movs	r3, #0
 8004066:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004068:	4b0f      	ldr	r3, [pc, #60]	; (80040a8 <prvProcessTimerOrBlockTask+0x94>)
 800406a:	6818      	ldr	r0, [r3, #0]
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	4619      	mov	r1, r3
 8004076:	f7ff f809 	bl	800308c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800407a:	f7ff fa0f 	bl	800349c <xTaskResumeAll>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10a      	bne.n	800409a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004084:	4b09      	ldr	r3, [pc, #36]	; (80040ac <prvProcessTimerOrBlockTask+0x98>)
 8004086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	f3bf 8f6f 	isb	sy
    }
 8004094:	e001      	b.n	800409a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004096:	f7ff fa01 	bl	800349c <xTaskResumeAll>
    }
 800409a:	bf00      	nop
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	20000160 	.word	0x20000160
 80040a8:	20000164 	.word	0x20000164
 80040ac:	e000ed04 	.word	0xe000ed04

080040b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80040b8:	4b0e      	ldr	r3, [pc, #56]	; (80040f4 <prvGetNextExpireTime+0x44>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <prvGetNextExpireTime+0x16>
 80040c2:	2201      	movs	r2, #1
 80040c4:	e000      	b.n	80040c8 <prvGetNextExpireTime+0x18>
 80040c6:	2200      	movs	r2, #0
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d105      	bne.n	80040e0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040d4:	4b07      	ldr	r3, [pc, #28]	; (80040f4 <prvGetNextExpireTime+0x44>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	60fb      	str	r3, [r7, #12]
 80040de:	e001      	b.n	80040e4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80040e4:	68fb      	ldr	r3, [r7, #12]
    }
 80040e6:	4618      	mov	r0, r3
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	2000015c 	.word	0x2000015c

080040f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004100:	f7ff fa6c 	bl	80035dc <xTaskGetTickCount>
 8004104:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004106:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <prvSampleTimeNow+0x3c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	429a      	cmp	r2, r3
 800410e:	d205      	bcs.n	800411c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004110:	f000 f91a 	bl	8004348 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	e002      	b.n	8004122 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004122:	4a04      	ldr	r2, [pc, #16]	; (8004134 <prvSampleTimeNow+0x3c>)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004128:	68fb      	ldr	r3, [r7, #12]
    }
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	2000016c 	.word	0x2000016c

08004138 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004146:	2300      	movs	r3, #0
 8004148:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	429a      	cmp	r2, r3
 800415c:	d812      	bhi.n	8004184 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	1ad2      	subs	r2, r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	429a      	cmp	r2, r3
 800416a:	d302      	bcc.n	8004172 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800416c:	2301      	movs	r3, #1
 800416e:	617b      	str	r3, [r7, #20]
 8004170:	e01b      	b.n	80041aa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004172:	4b10      	ldr	r3, [pc, #64]	; (80041b4 <prvInsertTimerInActiveList+0x7c>)
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	3304      	adds	r3, #4
 800417a:	4619      	mov	r1, r3
 800417c:	4610      	mov	r0, r2
 800417e:	f7fe f9fc 	bl	800257a <vListInsert>
 8004182:	e012      	b.n	80041aa <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	429a      	cmp	r2, r3
 800418a:	d206      	bcs.n	800419a <prvInsertTimerInActiveList+0x62>
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	429a      	cmp	r2, r3
 8004192:	d302      	bcc.n	800419a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004194:	2301      	movs	r3, #1
 8004196:	617b      	str	r3, [r7, #20]
 8004198:	e007      	b.n	80041aa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800419a:	4b07      	ldr	r3, [pc, #28]	; (80041b8 <prvInsertTimerInActiveList+0x80>)
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	3304      	adds	r3, #4
 80041a2:	4619      	mov	r1, r3
 80041a4:	4610      	mov	r0, r2
 80041a6:	f7fe f9e8 	bl	800257a <vListInsert>
            }
        }

        return xProcessTimerNow;
 80041aa:	697b      	ldr	r3, [r7, #20]
    }
 80041ac:	4618      	mov	r0, r3
 80041ae:	3718      	adds	r7, #24
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	20000160 	.word	0x20000160
 80041b8:	2000015c 	.word	0x2000015c

080041bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80041bc:	b580      	push	{r7, lr}
 80041be:	b08c      	sub	sp, #48	; 0x30
 80041c0:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80041c2:	e0ae      	b.n	8004322 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f2c0 80aa 	blt.w	8004320 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d004      	beq.n	80041e2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041da:	3304      	adds	r3, #4
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fe fa05 	bl	80025ec <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041e2:	1d3b      	adds	r3, r7, #4
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff ff87 	bl	80040f8 <prvSampleTimeNow>
 80041ea:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	2b09      	cmp	r3, #9
 80041f0:	f200 8097 	bhi.w	8004322 <prvProcessReceivedCommands+0x166>
 80041f4:	a201      	add	r2, pc, #4	; (adr r2, 80041fc <prvProcessReceivedCommands+0x40>)
 80041f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fa:	bf00      	nop
 80041fc:	08004225 	.word	0x08004225
 8004200:	08004225 	.word	0x08004225
 8004204:	08004225 	.word	0x08004225
 8004208:	08004299 	.word	0x08004299
 800420c:	080042ad 	.word	0x080042ad
 8004210:	080042f7 	.word	0x080042f7
 8004214:	08004225 	.word	0x08004225
 8004218:	08004225 	.word	0x08004225
 800421c:	08004299 	.word	0x08004299
 8004220:	080042ad 	.word	0x080042ad
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800422a:	f043 0301 	orr.w	r3, r3, #1
 800422e:	b2da      	uxtb	r2, r3
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	18d1      	adds	r1, r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6a3a      	ldr	r2, [r7, #32]
 8004242:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004244:	f7ff ff78 	bl	8004138 <prvInsertTimerInActiveList>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d069      	beq.n	8004322 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004254:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004258:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800425c:	f003 0304 	and.w	r3, r3, #4
 8004260:	2b00      	cmp	r3, #0
 8004262:	d05e      	beq.n	8004322 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	441a      	add	r2, r3
 800426c:	2300      	movs	r3, #0
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	2300      	movs	r3, #0
 8004272:	2100      	movs	r1, #0
 8004274:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004276:	f7ff fe21 	bl	8003ebc <xTimerGenericCommand>
 800427a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d14f      	bne.n	8004322 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8004282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004286:	f383 8811 	msr	BASEPRI, r3
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	61bb      	str	r3, [r7, #24]
    }
 8004294:	bf00      	nop
 8004296:	e7fe      	b.n	8004296 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800429e:	f023 0301 	bic.w	r3, r3, #1
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80042aa:	e03a      	b.n	8004322 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80042ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042b2:	f043 0301 	orr.w	r3, r3, #1
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10a      	bne.n	80042e2 <prvProcessReceivedCommands+0x126>
        __asm volatile
 80042cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d0:	f383 8811 	msr	BASEPRI, r3
 80042d4:	f3bf 8f6f 	isb	sy
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	617b      	str	r3, [r7, #20]
    }
 80042de:	bf00      	nop
 80042e0:	e7fe      	b.n	80042e0 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80042e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e4:	699a      	ldr	r2, [r3, #24]
 80042e6:	6a3b      	ldr	r3, [r7, #32]
 80042e8:	18d1      	adds	r1, r2, r3
 80042ea:	6a3b      	ldr	r3, [r7, #32]
 80042ec:	6a3a      	ldr	r2, [r7, #32]
 80042ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042f0:	f7ff ff22 	bl	8004138 <prvInsertTimerInActiveList>
                        break;
 80042f4:	e015      	b.n	8004322 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d103      	bne.n	800430c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8004304:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004306:	f000 fc71 	bl	8004bec <vPortFree>
 800430a:	e00a      	b.n	8004322 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004312:	f023 0301 	bic.w	r3, r3, #1
 8004316:	b2da      	uxtb	r2, r3
 8004318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800431e:	e000      	b.n	8004322 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004320:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004322:	4b08      	ldr	r3, [pc, #32]	; (8004344 <prvProcessReceivedCommands+0x188>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f107 0108 	add.w	r1, r7, #8
 800432a:	2200      	movs	r2, #0
 800432c:	4618      	mov	r0, r3
 800432e:	f7fe fc5b 	bl	8002be8 <xQueueReceive>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	f47f af45 	bne.w	80041c4 <prvProcessReceivedCommands+0x8>
        }
    }
 800433a:	bf00      	nop
 800433c:	bf00      	nop
 800433e:	3728      	adds	r7, #40	; 0x28
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	20000164 	.word	0x20000164

08004348 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004348:	b580      	push	{r7, lr}
 800434a:	b088      	sub	sp, #32
 800434c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800434e:	e048      	b.n	80043e2 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004350:	4b2d      	ldr	r3, [pc, #180]	; (8004408 <prvSwitchTimerLists+0xc0>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800435a:	4b2b      	ldr	r3, [pc, #172]	; (8004408 <prvSwitchTimerLists+0xc0>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	3304      	adds	r3, #4
 8004368:	4618      	mov	r0, r3
 800436a:	f7fe f93f 	bl	80025ec <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b00      	cmp	r3, #0
 8004382:	d02e      	beq.n	80043e2 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	4413      	add	r3, r2
 800438c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	429a      	cmp	r2, r3
 8004394:	d90e      	bls.n	80043b4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80043a2:	4b19      	ldr	r3, [pc, #100]	; (8004408 <prvSwitchTimerLists+0xc0>)
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	3304      	adds	r3, #4
 80043aa:	4619      	mov	r1, r3
 80043ac:	4610      	mov	r0, r2
 80043ae:	f7fe f8e4 	bl	800257a <vListInsert>
 80043b2:	e016      	b.n	80043e2 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80043b4:	2300      	movs	r3, #0
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	2300      	movs	r3, #0
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	2100      	movs	r1, #0
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f7ff fd7c 	bl	8003ebc <xTimerGenericCommand>
 80043c4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10a      	bne.n	80043e2 <prvSwitchTimerLists+0x9a>
        __asm volatile
 80043cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d0:	f383 8811 	msr	BASEPRI, r3
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	603b      	str	r3, [r7, #0]
    }
 80043de:	bf00      	nop
 80043e0:	e7fe      	b.n	80043e0 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043e2:	4b09      	ldr	r3, [pc, #36]	; (8004408 <prvSwitchTimerLists+0xc0>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1b1      	bne.n	8004350 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80043ec:	4b06      	ldr	r3, [pc, #24]	; (8004408 <prvSwitchTimerLists+0xc0>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80043f2:	4b06      	ldr	r3, [pc, #24]	; (800440c <prvSwitchTimerLists+0xc4>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a04      	ldr	r2, [pc, #16]	; (8004408 <prvSwitchTimerLists+0xc0>)
 80043f8:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80043fa:	4a04      	ldr	r2, [pc, #16]	; (800440c <prvSwitchTimerLists+0xc4>)
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	6013      	str	r3, [r2, #0]
    }
 8004400:	bf00      	nop
 8004402:	3718      	adds	r7, #24
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	2000015c 	.word	0x2000015c
 800440c:	20000160 	.word	0x20000160

08004410 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004414:	f000 f9de 	bl	80047d4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004418:	4b12      	ldr	r3, [pc, #72]	; (8004464 <prvCheckForValidListAndQueue+0x54>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d11d      	bne.n	800445c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004420:	4811      	ldr	r0, [pc, #68]	; (8004468 <prvCheckForValidListAndQueue+0x58>)
 8004422:	f7fe f859 	bl	80024d8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004426:	4811      	ldr	r0, [pc, #68]	; (800446c <prvCheckForValidListAndQueue+0x5c>)
 8004428:	f7fe f856 	bl	80024d8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800442c:	4b10      	ldr	r3, [pc, #64]	; (8004470 <prvCheckForValidListAndQueue+0x60>)
 800442e:	4a0e      	ldr	r2, [pc, #56]	; (8004468 <prvCheckForValidListAndQueue+0x58>)
 8004430:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004432:	4b10      	ldr	r3, [pc, #64]	; (8004474 <prvCheckForValidListAndQueue+0x64>)
 8004434:	4a0d      	ldr	r2, [pc, #52]	; (800446c <prvCheckForValidListAndQueue+0x5c>)
 8004436:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004438:	2200      	movs	r2, #0
 800443a:	210c      	movs	r1, #12
 800443c:	200a      	movs	r0, #10
 800443e:	f7fe f967 	bl	8002710 <xQueueGenericCreate>
 8004442:	4603      	mov	r3, r0
 8004444:	4a07      	ldr	r2, [pc, #28]	; (8004464 <prvCheckForValidListAndQueue+0x54>)
 8004446:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004448:	4b06      	ldr	r3, [pc, #24]	; (8004464 <prvCheckForValidListAndQueue+0x54>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d005      	beq.n	800445c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004450:	4b04      	ldr	r3, [pc, #16]	; (8004464 <prvCheckForValidListAndQueue+0x54>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4908      	ldr	r1, [pc, #32]	; (8004478 <prvCheckForValidListAndQueue+0x68>)
 8004456:	4618      	mov	r0, r3
 8004458:	f7fe fde6 	bl	8003028 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800445c:	f000 f9ea 	bl	8004834 <vPortExitCritical>
    }
 8004460:	bf00      	nop
 8004462:	bd80      	pop	{r7, pc}
 8004464:	20000164 	.word	0x20000164
 8004468:	20000134 	.word	0x20000134
 800446c:	20000148 	.word	0x20000148
 8004470:	2000015c 	.word	0x2000015c
 8004474:	20000160 	.word	0x20000160
 8004478:	080064dc 	.word	0x080064dc

0800447c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	3b04      	subs	r3, #4
 800448c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004494:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	3b04      	subs	r3, #4
 800449a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f023 0201 	bic.w	r2, r3, #1
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	3b04      	subs	r3, #4
 80044aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80044ac:	4a0c      	ldr	r2, [pc, #48]	; (80044e0 <pxPortInitialiseStack+0x64>)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	3b14      	subs	r3, #20
 80044b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	3b04      	subs	r3, #4
 80044c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f06f 0202 	mvn.w	r2, #2
 80044ca:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	3b20      	subs	r3, #32
 80044d0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80044d2:	68fb      	ldr	r3, [r7, #12]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr
 80044e0:	080044e5 	.word	0x080044e5

080044e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80044ea:	2300      	movs	r3, #0
 80044ec:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80044ee:	4b12      	ldr	r3, [pc, #72]	; (8004538 <prvTaskExitError+0x54>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044f6:	d00a      	beq.n	800450e <prvTaskExitError+0x2a>
        __asm volatile
 80044f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fc:	f383 8811 	msr	BASEPRI, r3
 8004500:	f3bf 8f6f 	isb	sy
 8004504:	f3bf 8f4f 	dsb	sy
 8004508:	60fb      	str	r3, [r7, #12]
    }
 800450a:	bf00      	nop
 800450c:	e7fe      	b.n	800450c <prvTaskExitError+0x28>
        __asm volatile
 800450e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004512:	f383 8811 	msr	BASEPRI, r3
 8004516:	f3bf 8f6f 	isb	sy
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	60bb      	str	r3, [r7, #8]
    }
 8004520:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004522:	bf00      	nop
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0fc      	beq.n	8004524 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800452a:	bf00      	nop
 800452c:	bf00      	nop
 800452e:	3714      	adds	r7, #20
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	20000010 	.word	0x20000010
 800453c:	00000000 	.word	0x00000000

08004540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004540:	4b07      	ldr	r3, [pc, #28]	; (8004560 <pxCurrentTCBConst2>)
 8004542:	6819      	ldr	r1, [r3, #0]
 8004544:	6808      	ldr	r0, [r1, #0]
 8004546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800454a:	f380 8809 	msr	PSP, r0
 800454e:	f3bf 8f6f 	isb	sy
 8004552:	f04f 0000 	mov.w	r0, #0
 8004556:	f380 8811 	msr	BASEPRI, r0
 800455a:	4770      	bx	lr
 800455c:	f3af 8000 	nop.w

08004560 <pxCurrentTCBConst2>:
 8004560:	20000030 	.word	0x20000030
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004564:	bf00      	nop
 8004566:	bf00      	nop

08004568 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004568:	4808      	ldr	r0, [pc, #32]	; (800458c <prvPortStartFirstTask+0x24>)
 800456a:	6800      	ldr	r0, [r0, #0]
 800456c:	6800      	ldr	r0, [r0, #0]
 800456e:	f380 8808 	msr	MSP, r0
 8004572:	f04f 0000 	mov.w	r0, #0
 8004576:	f380 8814 	msr	CONTROL, r0
 800457a:	b662      	cpsie	i
 800457c:	b661      	cpsie	f
 800457e:	f3bf 8f4f 	dsb	sy
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	df00      	svc	0
 8004588:	bf00      	nop
 800458a:	0000      	.short	0x0000
 800458c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004590:	bf00      	nop
 8004592:	bf00      	nop

08004594 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800459a:	4b46      	ldr	r3, [pc, #280]	; (80046b4 <xPortStartScheduler+0x120>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a46      	ldr	r2, [pc, #280]	; (80046b8 <xPortStartScheduler+0x124>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d10a      	bne.n	80045ba <xPortStartScheduler+0x26>
        __asm volatile
 80045a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a8:	f383 8811 	msr	BASEPRI, r3
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	613b      	str	r3, [r7, #16]
    }
 80045b6:	bf00      	nop
 80045b8:	e7fe      	b.n	80045b8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80045ba:	4b3e      	ldr	r3, [pc, #248]	; (80046b4 <xPortStartScheduler+0x120>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a3f      	ldr	r2, [pc, #252]	; (80046bc <xPortStartScheduler+0x128>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d10a      	bne.n	80045da <xPortStartScheduler+0x46>
        __asm volatile
 80045c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c8:	f383 8811 	msr	BASEPRI, r3
 80045cc:	f3bf 8f6f 	isb	sy
 80045d0:	f3bf 8f4f 	dsb	sy
 80045d4:	60fb      	str	r3, [r7, #12]
    }
 80045d6:	bf00      	nop
 80045d8:	e7fe      	b.n	80045d8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80045da:	4b39      	ldr	r3, [pc, #228]	; (80046c0 <xPortStartScheduler+0x12c>)
 80045dc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	22ff      	movs	r2, #255	; 0xff
 80045ea:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80045f4:	78fb      	ldrb	r3, [r7, #3]
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	4b31      	ldr	r3, [pc, #196]	; (80046c4 <xPortStartScheduler+0x130>)
 8004600:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004602:	4b31      	ldr	r3, [pc, #196]	; (80046c8 <xPortStartScheduler+0x134>)
 8004604:	2207      	movs	r2, #7
 8004606:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004608:	e009      	b.n	800461e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800460a:	4b2f      	ldr	r3, [pc, #188]	; (80046c8 <xPortStartScheduler+0x134>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	3b01      	subs	r3, #1
 8004610:	4a2d      	ldr	r2, [pc, #180]	; (80046c8 <xPortStartScheduler+0x134>)
 8004612:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004614:	78fb      	ldrb	r3, [r7, #3]
 8004616:	b2db      	uxtb	r3, r3
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	b2db      	uxtb	r3, r3
 800461c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800461e:	78fb      	ldrb	r3, [r7, #3]
 8004620:	b2db      	uxtb	r3, r3
 8004622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004626:	2b80      	cmp	r3, #128	; 0x80
 8004628:	d0ef      	beq.n	800460a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800462a:	4b27      	ldr	r3, [pc, #156]	; (80046c8 <xPortStartScheduler+0x134>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f1c3 0307 	rsb	r3, r3, #7
 8004632:	2b04      	cmp	r3, #4
 8004634:	d00a      	beq.n	800464c <xPortStartScheduler+0xb8>
        __asm volatile
 8004636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463a:	f383 8811 	msr	BASEPRI, r3
 800463e:	f3bf 8f6f 	isb	sy
 8004642:	f3bf 8f4f 	dsb	sy
 8004646:	60bb      	str	r3, [r7, #8]
    }
 8004648:	bf00      	nop
 800464a:	e7fe      	b.n	800464a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800464c:	4b1e      	ldr	r3, [pc, #120]	; (80046c8 <xPortStartScheduler+0x134>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	021b      	lsls	r3, r3, #8
 8004652:	4a1d      	ldr	r2, [pc, #116]	; (80046c8 <xPortStartScheduler+0x134>)
 8004654:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004656:	4b1c      	ldr	r3, [pc, #112]	; (80046c8 <xPortStartScheduler+0x134>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800465e:	4a1a      	ldr	r2, [pc, #104]	; (80046c8 <xPortStartScheduler+0x134>)
 8004660:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	b2da      	uxtb	r2, r3
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800466a:	4b18      	ldr	r3, [pc, #96]	; (80046cc <xPortStartScheduler+0x138>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a17      	ldr	r2, [pc, #92]	; (80046cc <xPortStartScheduler+0x138>)
 8004670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004674:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004676:	4b15      	ldr	r3, [pc, #84]	; (80046cc <xPortStartScheduler+0x138>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a14      	ldr	r2, [pc, #80]	; (80046cc <xPortStartScheduler+0x138>)
 800467c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004680:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004682:	f000 f963 	bl	800494c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004686:	4b12      	ldr	r3, [pc, #72]	; (80046d0 <xPortStartScheduler+0x13c>)
 8004688:	2200      	movs	r2, #0
 800468a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800468c:	f000 f982 	bl	8004994 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004690:	4b10      	ldr	r3, [pc, #64]	; (80046d4 <xPortStartScheduler+0x140>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a0f      	ldr	r2, [pc, #60]	; (80046d4 <xPortStartScheduler+0x140>)
 8004696:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800469a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800469c:	f7ff ff64 	bl	8004568 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80046a0:	f7ff f868 	bl	8003774 <vTaskSwitchContext>
    prvTaskExitError();
 80046a4:	f7ff ff1e 	bl	80044e4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3718      	adds	r7, #24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	e000ed00 	.word	0xe000ed00
 80046b8:	410fc271 	.word	0x410fc271
 80046bc:	410fc270 	.word	0x410fc270
 80046c0:	e000e400 	.word	0xe000e400
 80046c4:	20000170 	.word	0x20000170
 80046c8:	20000174 	.word	0x20000174
 80046cc:	e000ed20 	.word	0xe000ed20
 80046d0:	20000010 	.word	0x20000010
 80046d4:	e000ef34 	.word	0xe000ef34

080046d8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80046d8:	b480      	push	{r7}
 80046da:	b087      	sub	sp, #28
 80046dc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80046de:	4b37      	ldr	r3, [pc, #220]	; (80047bc <vInitPrioGroupValue+0xe4>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a37      	ldr	r2, [pc, #220]	; (80047c0 <vInitPrioGroupValue+0xe8>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d10a      	bne.n	80046fe <vInitPrioGroupValue+0x26>
        __asm volatile
 80046e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ec:	f383 8811 	msr	BASEPRI, r3
 80046f0:	f3bf 8f6f 	isb	sy
 80046f4:	f3bf 8f4f 	dsb	sy
 80046f8:	613b      	str	r3, [r7, #16]
    }
 80046fa:	bf00      	nop
 80046fc:	e7fe      	b.n	80046fc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80046fe:	4b2f      	ldr	r3, [pc, #188]	; (80047bc <vInitPrioGroupValue+0xe4>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a30      	ldr	r2, [pc, #192]	; (80047c4 <vInitPrioGroupValue+0xec>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d10a      	bne.n	800471e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470c:	f383 8811 	msr	BASEPRI, r3
 8004710:	f3bf 8f6f 	isb	sy
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	60fb      	str	r3, [r7, #12]
    }
 800471a:	bf00      	nop
 800471c:	e7fe      	b.n	800471c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800471e:	4b2a      	ldr	r3, [pc, #168]	; (80047c8 <vInitPrioGroupValue+0xf0>)
 8004720:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	b2db      	uxtb	r3, r3
 8004728:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	22ff      	movs	r2, #255	; 0xff
 800472e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	b2db      	uxtb	r3, r3
 8004736:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004738:	78fb      	ldrb	r3, [r7, #3]
 800473a:	b2db      	uxtb	r3, r3
 800473c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004740:	b2da      	uxtb	r2, r3
 8004742:	4b22      	ldr	r3, [pc, #136]	; (80047cc <vInitPrioGroupValue+0xf4>)
 8004744:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004746:	4b22      	ldr	r3, [pc, #136]	; (80047d0 <vInitPrioGroupValue+0xf8>)
 8004748:	2207      	movs	r2, #7
 800474a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800474c:	e009      	b.n	8004762 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800474e:	4b20      	ldr	r3, [pc, #128]	; (80047d0 <vInitPrioGroupValue+0xf8>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3b01      	subs	r3, #1
 8004754:	4a1e      	ldr	r2, [pc, #120]	; (80047d0 <vInitPrioGroupValue+0xf8>)
 8004756:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004758:	78fb      	ldrb	r3, [r7, #3]
 800475a:	b2db      	uxtb	r3, r3
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	b2db      	uxtb	r3, r3
 8004760:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004762:	78fb      	ldrb	r3, [r7, #3]
 8004764:	b2db      	uxtb	r3, r3
 8004766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476a:	2b80      	cmp	r3, #128	; 0x80
 800476c:	d0ef      	beq.n	800474e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800476e:	4b18      	ldr	r3, [pc, #96]	; (80047d0 <vInitPrioGroupValue+0xf8>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f1c3 0307 	rsb	r3, r3, #7
 8004776:	2b04      	cmp	r3, #4
 8004778:	d00a      	beq.n	8004790 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800477a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477e:	f383 8811 	msr	BASEPRI, r3
 8004782:	f3bf 8f6f 	isb	sy
 8004786:	f3bf 8f4f 	dsb	sy
 800478a:	60bb      	str	r3, [r7, #8]
    }
 800478c:	bf00      	nop
 800478e:	e7fe      	b.n	800478e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004790:	4b0f      	ldr	r3, [pc, #60]	; (80047d0 <vInitPrioGroupValue+0xf8>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	021b      	lsls	r3, r3, #8
 8004796:	4a0e      	ldr	r2, [pc, #56]	; (80047d0 <vInitPrioGroupValue+0xf8>)
 8004798:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800479a:	4b0d      	ldr	r3, [pc, #52]	; (80047d0 <vInitPrioGroupValue+0xf8>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047a2:	4a0b      	ldr	r2, [pc, #44]	; (80047d0 <vInitPrioGroupValue+0xf8>)
 80047a4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80047ae:	bf00      	nop
 80047b0:	371c      	adds	r7, #28
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	e000ed00 	.word	0xe000ed00
 80047c0:	410fc271 	.word	0x410fc271
 80047c4:	410fc270 	.word	0x410fc270
 80047c8:	e000e400 	.word	0xe000e400
 80047cc:	20000170 	.word	0x20000170
 80047d0:	20000174 	.word	0x20000174

080047d4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
        __asm volatile
 80047da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047de:	f383 8811 	msr	BASEPRI, r3
 80047e2:	f3bf 8f6f 	isb	sy
 80047e6:	f3bf 8f4f 	dsb	sy
 80047ea:	607b      	str	r3, [r7, #4]
    }
 80047ec:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80047ee:	4b0f      	ldr	r3, [pc, #60]	; (800482c <vPortEnterCritical+0x58>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	3301      	adds	r3, #1
 80047f4:	4a0d      	ldr	r2, [pc, #52]	; (800482c <vPortEnterCritical+0x58>)
 80047f6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80047f8:	4b0c      	ldr	r3, [pc, #48]	; (800482c <vPortEnterCritical+0x58>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d10f      	bne.n	8004820 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004800:	4b0b      	ldr	r3, [pc, #44]	; (8004830 <vPortEnterCritical+0x5c>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00a      	beq.n	8004820 <vPortEnterCritical+0x4c>
        __asm volatile
 800480a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480e:	f383 8811 	msr	BASEPRI, r3
 8004812:	f3bf 8f6f 	isb	sy
 8004816:	f3bf 8f4f 	dsb	sy
 800481a:	603b      	str	r3, [r7, #0]
    }
 800481c:	bf00      	nop
 800481e:	e7fe      	b.n	800481e <vPortEnterCritical+0x4a>
    }
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	20000010 	.word	0x20000010
 8004830:	e000ed04 	.word	0xe000ed04

08004834 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800483a:	4b12      	ldr	r3, [pc, #72]	; (8004884 <vPortExitCritical+0x50>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10a      	bne.n	8004858 <vPortExitCritical+0x24>
        __asm volatile
 8004842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004846:	f383 8811 	msr	BASEPRI, r3
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	607b      	str	r3, [r7, #4]
    }
 8004854:	bf00      	nop
 8004856:	e7fe      	b.n	8004856 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004858:	4b0a      	ldr	r3, [pc, #40]	; (8004884 <vPortExitCritical+0x50>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	3b01      	subs	r3, #1
 800485e:	4a09      	ldr	r2, [pc, #36]	; (8004884 <vPortExitCritical+0x50>)
 8004860:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004862:	4b08      	ldr	r3, [pc, #32]	; (8004884 <vPortExitCritical+0x50>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d105      	bne.n	8004876 <vPortExitCritical+0x42>
 800486a:	2300      	movs	r3, #0
 800486c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	f383 8811 	msr	BASEPRI, r3
    }
 8004874:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	20000010 	.word	0x20000010
	...

08004890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004890:	f3ef 8009 	mrs	r0, PSP
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	4b15      	ldr	r3, [pc, #84]	; (80048f0 <pxCurrentTCBConst>)
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	f01e 0f10 	tst.w	lr, #16
 80048a0:	bf08      	it	eq
 80048a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80048a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048aa:	6010      	str	r0, [r2, #0]
 80048ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80048b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80048b4:	f380 8811 	msr	BASEPRI, r0
 80048b8:	f3bf 8f4f 	dsb	sy
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	f7fe ff58 	bl	8003774 <vTaskSwitchContext>
 80048c4:	f04f 0000 	mov.w	r0, #0
 80048c8:	f380 8811 	msr	BASEPRI, r0
 80048cc:	bc09      	pop	{r0, r3}
 80048ce:	6819      	ldr	r1, [r3, #0]
 80048d0:	6808      	ldr	r0, [r1, #0]
 80048d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048d6:	f01e 0f10 	tst.w	lr, #16
 80048da:	bf08      	it	eq
 80048dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80048e0:	f380 8809 	msr	PSP, r0
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	f3af 8000 	nop.w

080048f0 <pxCurrentTCBConst>:
 80048f0:	20000030 	.word	0x20000030
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80048f4:	bf00      	nop
 80048f6:	bf00      	nop

080048f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
        __asm volatile
 80048fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004902:	f383 8811 	msr	BASEPRI, r3
 8004906:	f3bf 8f6f 	isb	sy
 800490a:	f3bf 8f4f 	dsb	sy
 800490e:	607b      	str	r3, [r7, #4]
    }
 8004910:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004912:	f001 fa77 	bl	8005e04 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004916:	f7fe fe71 	bl	80035fc <xTaskIncrementTick>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d006      	beq.n	800492e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004920:	f001 face 	bl	8005ec0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004924:	4b08      	ldr	r3, [pc, #32]	; (8004948 <SysTick_Handler+0x50>)
 8004926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800492a:	601a      	str	r2, [r3, #0]
 800492c:	e001      	b.n	8004932 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800492e:	f001 faab 	bl	8005e88 <SEGGER_SYSVIEW_RecordExitISR>
 8004932:	2300      	movs	r3, #0
 8004934:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	f383 8811 	msr	BASEPRI, r3
    }
 800493c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800493e:	bf00      	nop
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	e000ed04 	.word	0xe000ed04

0800494c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004950:	4b0b      	ldr	r3, [pc, #44]	; (8004980 <vPortSetupTimerInterrupt+0x34>)
 8004952:	2200      	movs	r2, #0
 8004954:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004956:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <vPortSetupTimerInterrupt+0x38>)
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800495c:	4b0a      	ldr	r3, [pc, #40]	; (8004988 <vPortSetupTimerInterrupt+0x3c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a0a      	ldr	r2, [pc, #40]	; (800498c <vPortSetupTimerInterrupt+0x40>)
 8004962:	fba2 2303 	umull	r2, r3, r2, r3
 8004966:	099b      	lsrs	r3, r3, #6
 8004968:	4a09      	ldr	r2, [pc, #36]	; (8004990 <vPortSetupTimerInterrupt+0x44>)
 800496a:	3b01      	subs	r3, #1
 800496c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800496e:	4b04      	ldr	r3, [pc, #16]	; (8004980 <vPortSetupTimerInterrupt+0x34>)
 8004970:	2207      	movs	r2, #7
 8004972:	601a      	str	r2, [r3, #0]
}
 8004974:	bf00      	nop
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	e000e010 	.word	0xe000e010
 8004984:	e000e018 	.word	0xe000e018
 8004988:	20000000 	.word	0x20000000
 800498c:	10624dd3 	.word	0x10624dd3
 8004990:	e000e014 	.word	0xe000e014

08004994 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004994:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80049a4 <vPortEnableVFP+0x10>
 8004998:	6801      	ldr	r1, [r0, #0]
 800499a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800499e:	6001      	str	r1, [r0, #0]
 80049a0:	4770      	bx	lr
 80049a2:	0000      	.short	0x0000
 80049a4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80049a8:	bf00      	nop
 80049aa:	bf00      	nop

080049ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80049b2:	f3ef 8305 	mrs	r3, IPSR
 80049b6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2b0f      	cmp	r3, #15
 80049bc:	d914      	bls.n	80049e8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80049be:	4a17      	ldr	r2, [pc, #92]	; (8004a1c <vPortValidateInterruptPriority+0x70>)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4413      	add	r3, r2
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80049c8:	4b15      	ldr	r3, [pc, #84]	; (8004a20 <vPortValidateInterruptPriority+0x74>)
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	7afa      	ldrb	r2, [r7, #11]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d20a      	bcs.n	80049e8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80049d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d6:	f383 8811 	msr	BASEPRI, r3
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	607b      	str	r3, [r7, #4]
    }
 80049e4:	bf00      	nop
 80049e6:	e7fe      	b.n	80049e6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80049e8:	4b0e      	ldr	r3, [pc, #56]	; (8004a24 <vPortValidateInterruptPriority+0x78>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049f0:	4b0d      	ldr	r3, [pc, #52]	; (8004a28 <vPortValidateInterruptPriority+0x7c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d90a      	bls.n	8004a0e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80049f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fc:	f383 8811 	msr	BASEPRI, r3
 8004a00:	f3bf 8f6f 	isb	sy
 8004a04:	f3bf 8f4f 	dsb	sy
 8004a08:	603b      	str	r3, [r7, #0]
    }
 8004a0a:	bf00      	nop
 8004a0c:	e7fe      	b.n	8004a0c <vPortValidateInterruptPriority+0x60>
    }
 8004a0e:	bf00      	nop
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	e000e3f0 	.word	0xe000e3f0
 8004a20:	20000170 	.word	0x20000170
 8004a24:	e000ed0c 	.word	0xe000ed0c
 8004a28:	20000174 	.word	0x20000174

08004a2c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b08a      	sub	sp, #40	; 0x28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004a34:	2300      	movs	r3, #0
 8004a36:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004a38:	f7fe fd22 	bl	8003480 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004a3c:	4b65      	ldr	r3, [pc, #404]	; (8004bd4 <pvPortMalloc+0x1a8>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004a44:	f000 f934 	bl	8004cb0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a48:	4b63      	ldr	r3, [pc, #396]	; (8004bd8 <pvPortMalloc+0x1ac>)
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f040 80a7 	bne.w	8004ba4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d02d      	beq.n	8004ab8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004a5c:	2208      	movs	r2, #8
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d227      	bcs.n	8004ab8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004a68:	2208      	movs	r2, #8
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d021      	beq.n	8004abe <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f023 0307 	bic.w	r3, r3, #7
 8004a80:	3308      	adds	r3, #8
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d214      	bcs.n	8004ab2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f023 0307 	bic.w	r3, r3, #7
 8004a8e:	3308      	adds	r3, #8
 8004a90:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d010      	beq.n	8004abe <pvPortMalloc+0x92>
        __asm volatile
 8004a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa0:	f383 8811 	msr	BASEPRI, r3
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	617b      	str	r3, [r7, #20]
    }
 8004aae:	bf00      	nop
 8004ab0:	e7fe      	b.n	8004ab0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ab6:	e002      	b.n	8004abe <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	607b      	str	r3, [r7, #4]
 8004abc:	e000      	b.n	8004ac0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004abe:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d06e      	beq.n	8004ba4 <pvPortMalloc+0x178>
 8004ac6:	4b45      	ldr	r3, [pc, #276]	; (8004bdc <pvPortMalloc+0x1b0>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d869      	bhi.n	8004ba4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004ad0:	4b43      	ldr	r3, [pc, #268]	; (8004be0 <pvPortMalloc+0x1b4>)
 8004ad2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004ad4:	4b42      	ldr	r3, [pc, #264]	; (8004be0 <pvPortMalloc+0x1b4>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ada:	e004      	b.n	8004ae6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d903      	bls.n	8004af8 <pvPortMalloc+0xcc>
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1f1      	bne.n	8004adc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004af8:	4b36      	ldr	r3, [pc, #216]	; (8004bd4 <pvPortMalloc+0x1a8>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d050      	beq.n	8004ba4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b02:	6a3b      	ldr	r3, [r7, #32]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2208      	movs	r2, #8
 8004b08:	4413      	add	r3, r2
 8004b0a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	1ad2      	subs	r2, r2, r3
 8004b1c:	2308      	movs	r3, #8
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d91f      	bls.n	8004b64 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4413      	add	r3, r2
 8004b2a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <pvPortMalloc+0x120>
        __asm volatile
 8004b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3a:	f383 8811 	msr	BASEPRI, r3
 8004b3e:	f3bf 8f6f 	isb	sy
 8004b42:	f3bf 8f4f 	dsb	sy
 8004b46:	613b      	str	r3, [r7, #16]
    }
 8004b48:	bf00      	nop
 8004b4a:	e7fe      	b.n	8004b4a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	1ad2      	subs	r2, r2, r3
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b5e:	69b8      	ldr	r0, [r7, #24]
 8004b60:	f000 f908 	bl	8004d74 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b64:	4b1d      	ldr	r3, [pc, #116]	; (8004bdc <pvPortMalloc+0x1b0>)
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	4a1b      	ldr	r2, [pc, #108]	; (8004bdc <pvPortMalloc+0x1b0>)
 8004b70:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b72:	4b1a      	ldr	r3, [pc, #104]	; (8004bdc <pvPortMalloc+0x1b0>)
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	4b1b      	ldr	r3, [pc, #108]	; (8004be4 <pvPortMalloc+0x1b8>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d203      	bcs.n	8004b86 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b7e:	4b17      	ldr	r3, [pc, #92]	; (8004bdc <pvPortMalloc+0x1b0>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a18      	ldr	r2, [pc, #96]	; (8004be4 <pvPortMalloc+0x1b8>)
 8004b84:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	4b13      	ldr	r3, [pc, #76]	; (8004bd8 <pvPortMalloc+0x1ac>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	2200      	movs	r2, #0
 8004b98:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004b9a:	4b13      	ldr	r3, [pc, #76]	; (8004be8 <pvPortMalloc+0x1bc>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	4a11      	ldr	r2, [pc, #68]	; (8004be8 <pvPortMalloc+0x1bc>)
 8004ba2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004ba4:	f7fe fc7a 	bl	800349c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	f003 0307 	and.w	r3, r3, #7
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <pvPortMalloc+0x19c>
        __asm volatile
 8004bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb6:	f383 8811 	msr	BASEPRI, r3
 8004bba:	f3bf 8f6f 	isb	sy
 8004bbe:	f3bf 8f4f 	dsb	sy
 8004bc2:	60fb      	str	r3, [r7, #12]
    }
 8004bc4:	bf00      	nop
 8004bc6:	e7fe      	b.n	8004bc6 <pvPortMalloc+0x19a>
    return pvReturn;
 8004bc8:	69fb      	ldr	r3, [r7, #28]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3728      	adds	r7, #40	; 0x28
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	20002980 	.word	0x20002980
 8004bd8:	20002994 	.word	0x20002994
 8004bdc:	20002984 	.word	0x20002984
 8004be0:	20002978 	.word	0x20002978
 8004be4:	20002988 	.word	0x20002988
 8004be8:	2000298c 	.word	0x2000298c

08004bec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d04d      	beq.n	8004c9a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004bfe:	2308      	movs	r3, #8
 8004c00:	425b      	negs	r3, r3
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	4413      	add	r3, r2
 8004c06:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	4b24      	ldr	r3, [pc, #144]	; (8004ca4 <vPortFree+0xb8>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4013      	ands	r3, r2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10a      	bne.n	8004c30 <vPortFree+0x44>
        __asm volatile
 8004c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	60fb      	str	r3, [r7, #12]
    }
 8004c2c:	bf00      	nop
 8004c2e:	e7fe      	b.n	8004c2e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00a      	beq.n	8004c4e <vPortFree+0x62>
        __asm volatile
 8004c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3c:	f383 8811 	msr	BASEPRI, r3
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	60bb      	str	r3, [r7, #8]
    }
 8004c4a:	bf00      	nop
 8004c4c:	e7fe      	b.n	8004c4c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	4b14      	ldr	r3, [pc, #80]	; (8004ca4 <vPortFree+0xb8>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4013      	ands	r3, r2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d01e      	beq.n	8004c9a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d11a      	bne.n	8004c9a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	4b0e      	ldr	r3, [pc, #56]	; (8004ca4 <vPortFree+0xb8>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	43db      	mvns	r3, r3
 8004c6e:	401a      	ands	r2, r3
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004c74:	f7fe fc04 	bl	8003480 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ca8 <vPortFree+0xbc>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4413      	add	r3, r2
 8004c82:	4a09      	ldr	r2, [pc, #36]	; (8004ca8 <vPortFree+0xbc>)
 8004c84:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c86:	6938      	ldr	r0, [r7, #16]
 8004c88:	f000 f874 	bl	8004d74 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004c8c:	4b07      	ldr	r3, [pc, #28]	; (8004cac <vPortFree+0xc0>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	3301      	adds	r3, #1
 8004c92:	4a06      	ldr	r2, [pc, #24]	; (8004cac <vPortFree+0xc0>)
 8004c94:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004c96:	f7fe fc01 	bl	800349c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004c9a:	bf00      	nop
 8004c9c:	3718      	adds	r7, #24
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	20002994 	.word	0x20002994
 8004ca8:	20002984 	.word	0x20002984
 8004cac:	20002990 	.word	0x20002990

08004cb0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004cb6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004cba:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004cbc:	4b27      	ldr	r3, [pc, #156]	; (8004d5c <prvHeapInit+0xac>)
 8004cbe:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f003 0307 	and.w	r3, r3, #7
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00c      	beq.n	8004ce4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	3307      	adds	r3, #7
 8004cce:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f023 0307 	bic.w	r3, r3, #7
 8004cd6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	4a1f      	ldr	r2, [pc, #124]	; (8004d5c <prvHeapInit+0xac>)
 8004ce0:	4413      	add	r3, r2
 8004ce2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ce8:	4a1d      	ldr	r2, [pc, #116]	; (8004d60 <prvHeapInit+0xb0>)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004cee:	4b1c      	ldr	r3, [pc, #112]	; (8004d60 <prvHeapInit+0xb0>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004cfc:	2208      	movs	r2, #8
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	1a9b      	subs	r3, r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f023 0307 	bic.w	r3, r3, #7
 8004d0a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4a15      	ldr	r2, [pc, #84]	; (8004d64 <prvHeapInit+0xb4>)
 8004d10:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004d12:	4b14      	ldr	r3, [pc, #80]	; (8004d64 <prvHeapInit+0xb4>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2200      	movs	r2, #0
 8004d18:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004d1a:	4b12      	ldr	r3, [pc, #72]	; (8004d64 <prvHeapInit+0xb4>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	1ad2      	subs	r2, r2, r3
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d30:	4b0c      	ldr	r3, [pc, #48]	; (8004d64 <prvHeapInit+0xb4>)
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	4a0a      	ldr	r2, [pc, #40]	; (8004d68 <prvHeapInit+0xb8>)
 8004d3e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	4a09      	ldr	r2, [pc, #36]	; (8004d6c <prvHeapInit+0xbc>)
 8004d46:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d48:	4b09      	ldr	r3, [pc, #36]	; (8004d70 <prvHeapInit+0xc0>)
 8004d4a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d4e:	601a      	str	r2, [r3, #0]
}
 8004d50:	bf00      	nop
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr
 8004d5c:	20000178 	.word	0x20000178
 8004d60:	20002978 	.word	0x20002978
 8004d64:	20002980 	.word	0x20002980
 8004d68:	20002988 	.word	0x20002988
 8004d6c:	20002984 	.word	0x20002984
 8004d70:	20002994 	.word	0x20002994

08004d74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d7c:	4b28      	ldr	r3, [pc, #160]	; (8004e20 <prvInsertBlockIntoFreeList+0xac>)
 8004d7e:	60fb      	str	r3, [r7, #12]
 8004d80:	e002      	b.n	8004d88 <prvInsertBlockIntoFreeList+0x14>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	60fb      	str	r3, [r7, #12]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d8f7      	bhi.n	8004d82 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d108      	bne.n	8004db6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	441a      	add	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	441a      	add	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d118      	bne.n	8004dfc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	4b15      	ldr	r3, [pc, #84]	; (8004e24 <prvInsertBlockIntoFreeList+0xb0>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d00d      	beq.n	8004df2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	441a      	add	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	e008      	b.n	8004e04 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004df2:	4b0c      	ldr	r3, [pc, #48]	; (8004e24 <prvInsertBlockIntoFreeList+0xb0>)
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	601a      	str	r2, [r3, #0]
 8004dfa:	e003      	b.n	8004e04 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d002      	beq.n	8004e12 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004e12:	bf00      	nop
 8004e14:	3714      	adds	r7, #20
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	20002978 	.word	0x20002978
 8004e24:	20002980 	.word	0x20002980

08004e28 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af02      	add	r7, sp, #8
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
 8004e34:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004e36:	2205      	movs	r2, #5
 8004e38:	492b      	ldr	r1, [pc, #172]	; (8004ee8 <SYSVIEW_AddTask+0xc0>)
 8004e3a:	68b8      	ldr	r0, [r7, #8]
 8004e3c:	f001 fb0a 	bl	8006454 <memcmp>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d04b      	beq.n	8004ede <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004e46:	4b29      	ldr	r3, [pc, #164]	; (8004eec <SYSVIEW_AddTask+0xc4>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2b07      	cmp	r3, #7
 8004e4c:	d903      	bls.n	8004e56 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004e4e:	4828      	ldr	r0, [pc, #160]	; (8004ef0 <SYSVIEW_AddTask+0xc8>)
 8004e50:	f001 fa80 	bl	8006354 <SEGGER_SYSVIEW_Warn>
    return;
 8004e54:	e044      	b.n	8004ee0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004e56:	4b25      	ldr	r3, [pc, #148]	; (8004eec <SYSVIEW_AddTask+0xc4>)
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	4926      	ldr	r1, [pc, #152]	; (8004ef4 <SYSVIEW_AddTask+0xcc>)
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4413      	add	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	440b      	add	r3, r1
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004e6a:	4b20      	ldr	r3, [pc, #128]	; (8004eec <SYSVIEW_AddTask+0xc4>)
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	4921      	ldr	r1, [pc, #132]	; (8004ef4 <SYSVIEW_AddTask+0xcc>)
 8004e70:	4613      	mov	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	440b      	add	r3, r1
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	68ba      	ldr	r2, [r7, #8]
 8004e7e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004e80:	4b1a      	ldr	r3, [pc, #104]	; (8004eec <SYSVIEW_AddTask+0xc4>)
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	491b      	ldr	r1, [pc, #108]	; (8004ef4 <SYSVIEW_AddTask+0xcc>)
 8004e86:	4613      	mov	r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	4413      	add	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	440b      	add	r3, r1
 8004e90:	3308      	adds	r3, #8
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004e96:	4b15      	ldr	r3, [pc, #84]	; (8004eec <SYSVIEW_AddTask+0xc4>)
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	4916      	ldr	r1, [pc, #88]	; (8004ef4 <SYSVIEW_AddTask+0xcc>)
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4413      	add	r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	440b      	add	r3, r1
 8004ea6:	330c      	adds	r3, #12
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004eac:	4b0f      	ldr	r3, [pc, #60]	; (8004eec <SYSVIEW_AddTask+0xc4>)
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	4910      	ldr	r1, [pc, #64]	; (8004ef4 <SYSVIEW_AddTask+0xcc>)
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4413      	add	r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	440b      	add	r3, r1
 8004ebc:	3310      	adds	r3, #16
 8004ebe:	69ba      	ldr	r2, [r7, #24]
 8004ec0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004ec2:	4b0a      	ldr	r3, [pc, #40]	; (8004eec <SYSVIEW_AddTask+0xc4>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	4a08      	ldr	r2, [pc, #32]	; (8004eec <SYSVIEW_AddTask+0xc4>)
 8004eca:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	9300      	str	r3, [sp, #0]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	68b9      	ldr	r1, [r7, #8]
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f000 f80e 	bl	8004ef8 <SYSVIEW_SendTaskInfo>
 8004edc:	e000      	b.n	8004ee0 <SYSVIEW_AddTask+0xb8>
    return;
 8004ede:	bf00      	nop

}
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	080064e4 	.word	0x080064e4
 8004eec:	20002a38 	.word	0x20002a38
 8004ef0:	080064ec 	.word	0x080064ec
 8004ef4:	20002998 	.word	0x20002998

08004ef8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b08a      	sub	sp, #40	; 0x28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
 8004f04:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004f06:	f107 0314 	add.w	r3, r7, #20
 8004f0a:	2214      	movs	r2, #20
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f001 fabc 	bl	800648c <memset>
  TaskInfo.TaskID     = TaskID;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f26:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004f28:	f107 0314 	add.w	r3, r7, #20
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f000 fe3f 	bl	8005bb0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004f32:	bf00      	nop
 8004f34:	3728      	adds	r7, #40	; 0x28
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
	...

08004f3c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004f42:	4b24      	ldr	r3, [pc, #144]	; (8004fd4 <_DoInit+0x98>)
 8004f44:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2203      	movs	r2, #3
 8004f4a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2203      	movs	r2, #3
 8004f50:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a20      	ldr	r2, [pc, #128]	; (8004fd8 <_DoInit+0x9c>)
 8004f56:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a20      	ldr	r2, [pc, #128]	; (8004fdc <_DoInit+0xa0>)
 8004f5c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f64:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a17      	ldr	r2, [pc, #92]	; (8004fd8 <_DoInit+0x9c>)
 8004f7c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a17      	ldr	r2, [pc, #92]	; (8004fe0 <_DoInit+0xa4>)
 8004f82:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2210      	movs	r2, #16
 8004f88:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	3307      	adds	r3, #7
 8004fa0:	4a10      	ldr	r2, [pc, #64]	; (8004fe4 <_DoInit+0xa8>)
 8004fa2:	6810      	ldr	r0, [r2, #0]
 8004fa4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004fa6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a0e      	ldr	r2, [pc, #56]	; (8004fe8 <_DoInit+0xac>)
 8004fae:	6810      	ldr	r0, [r2, #0]
 8004fb0:	6018      	str	r0, [r3, #0]
 8004fb2:	8891      	ldrh	r1, [r2, #4]
 8004fb4:	7992      	ldrb	r2, [r2, #6]
 8004fb6:	8099      	strh	r1, [r3, #4]
 8004fb8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004fba:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004fc4:	f3bf 8f5f 	dmb	sy
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr
 8004fd4:	20002ff0 	.word	0x20002ff0
 8004fd8:	0800653c 	.word	0x0800653c
 8004fdc:	20002a3c 	.word	0x20002a3c
 8004fe0:	20002e3c 	.word	0x20002e3c
 8004fe4:	08006548 	.word	0x08006548
 8004fe8:	0800654c 	.word	0x0800654c

08004fec <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b08c      	sub	sp, #48	; 0x30
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004ff8:	4b3e      	ldr	r3, [pc, #248]	; (80050f4 <SEGGER_RTT_ReadNoLock+0x108>)
 8004ffa:	623b      	str	r3, [r7, #32]
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <SEGGER_RTT_ReadNoLock+0x1e>
 8005006:	f7ff ff99 	bl	8004f3c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	4613      	mov	r3, r2
 800500e:	005b      	lsls	r3, r3, #1
 8005010:	4413      	add	r3, r2
 8005012:	00db      	lsls	r3, r3, #3
 8005014:	3360      	adds	r3, #96	; 0x60
 8005016:	4a37      	ldr	r2, [pc, #220]	; (80050f4 <SEGGER_RTT_ReadNoLock+0x108>)
 8005018:	4413      	add	r3, r2
 800501a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800502c:	2300      	movs	r3, #0
 800502e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005030:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	429a      	cmp	r2, r3
 8005036:	d92b      	bls.n	8005090 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	689a      	ldr	r2, [r3, #8]
 800503c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4293      	cmp	r3, r2
 8005048:	bf28      	it	cs
 800504a:	4613      	movcs	r3, r2
 800504c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005054:	4413      	add	r3, r2
 8005056:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	6939      	ldr	r1, [r7, #16]
 800505c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800505e:	f001 fa07 	bl	8006470 <memcpy>
    NumBytesRead += NumBytesRem;
 8005062:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	4413      	add	r3, r2
 8005068:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800506a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	4413      	add	r3, r2
 8005070:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800507a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	4413      	add	r3, r2
 8005080:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005088:	429a      	cmp	r2, r3
 800508a:	d101      	bne.n	8005090 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800508c:	2300      	movs	r3, #0
 800508e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005090:	69ba      	ldr	r2, [r7, #24]
 8005092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4293      	cmp	r3, r2
 800509e:	bf28      	it	cs
 80050a0:	4613      	movcs	r3, r2
 80050a2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d019      	beq.n	80050de <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b0:	4413      	add	r3, r2
 80050b2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	6939      	ldr	r1, [r7, #16]
 80050b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050ba:	f001 f9d9 	bl	8006470 <memcpy>
    NumBytesRead += NumBytesRem;
 80050be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	4413      	add	r3, r2
 80050c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80050c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	4413      	add	r3, r2
 80050cc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80050d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	4413      	add	r3, r2
 80050dc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80050de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d002      	beq.n	80050ea <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050e8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80050ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3730      	adds	r7, #48	; 0x30
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	20002ff0 	.word	0x20002ff0

080050f8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80050f8:	b480      	push	{r7}
 80050fa:	b087      	sub	sp, #28
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005104:	2300      	movs	r3, #0
 8005106:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00f      	beq.n	800512e <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800510e:	e002      	b.n	8005116 <_EncodeStr+0x1e>
      Len++;
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	3301      	adds	r3, #1
 8005114:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	4413      	add	r3, r2
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1f6      	bne.n	8005110 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	429a      	cmp	r2, r3
 8005128:	d901      	bls.n	800512e <_EncodeStr+0x36>
      Len = Limit;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	2bfe      	cmp	r3, #254	; 0xfe
 8005132:	d806      	bhi.n	8005142 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	1c5a      	adds	r2, r3, #1
 8005138:	60fa      	str	r2, [r7, #12]
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	b2d2      	uxtb	r2, r2
 800513e:	701a      	strb	r2, [r3, #0]
 8005140:	e011      	b.n	8005166 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	1c5a      	adds	r2, r3, #1
 8005146:	60fa      	str	r2, [r7, #12]
 8005148:	22ff      	movs	r2, #255	; 0xff
 800514a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	1c5a      	adds	r2, r3, #1
 8005150:	60fa      	str	r2, [r7, #12]
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	b2d2      	uxtb	r2, r2
 8005156:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	0a19      	lsrs	r1, r3, #8
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	60fa      	str	r2, [r7, #12]
 8005162:	b2ca      	uxtb	r2, r1
 8005164:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005166:	2300      	movs	r3, #0
 8005168:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800516a:	e00a      	b.n	8005182 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	1c53      	adds	r3, r2, #1
 8005170:	60bb      	str	r3, [r7, #8]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	1c59      	adds	r1, r3, #1
 8005176:	60f9      	str	r1, [r7, #12]
 8005178:	7812      	ldrb	r2, [r2, #0]
 800517a:	701a      	strb	r2, [r3, #0]
    n++;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	3301      	adds	r3, #1
 8005180:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	429a      	cmp	r2, r3
 8005188:	d3f0      	bcc.n	800516c <_EncodeStr+0x74>
  }
  return pPayload;
 800518a:	68fb      	ldr	r3, [r7, #12]
}
 800518c:	4618      	mov	r0, r3
 800518e:	371c      	adds	r7, #28
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	3304      	adds	r3, #4
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80051b6:	4b36      	ldr	r3, [pc, #216]	; (8005290 <_HandleIncomingPacket+0xe0>)
 80051b8:	7e1b      	ldrb	r3, [r3, #24]
 80051ba:	4618      	mov	r0, r3
 80051bc:	1cfb      	adds	r3, r7, #3
 80051be:	2201      	movs	r2, #1
 80051c0:	4619      	mov	r1, r3
 80051c2:	f7ff ff13 	bl	8004fec <SEGGER_RTT_ReadNoLock>
 80051c6:	4603      	mov	r3, r0
 80051c8:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	dd54      	ble.n	800527a <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80051d0:	78fb      	ldrb	r3, [r7, #3]
 80051d2:	2b80      	cmp	r3, #128	; 0x80
 80051d4:	d032      	beq.n	800523c <_HandleIncomingPacket+0x8c>
 80051d6:	2b80      	cmp	r3, #128	; 0x80
 80051d8:	dc42      	bgt.n	8005260 <_HandleIncomingPacket+0xb0>
 80051da:	2b07      	cmp	r3, #7
 80051dc:	dc16      	bgt.n	800520c <_HandleIncomingPacket+0x5c>
 80051de:	2b00      	cmp	r3, #0
 80051e0:	dd3e      	ble.n	8005260 <_HandleIncomingPacket+0xb0>
 80051e2:	3b01      	subs	r3, #1
 80051e4:	2b06      	cmp	r3, #6
 80051e6:	d83b      	bhi.n	8005260 <_HandleIncomingPacket+0xb0>
 80051e8:	a201      	add	r2, pc, #4	; (adr r2, 80051f0 <_HandleIncomingPacket+0x40>)
 80051ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ee:	bf00      	nop
 80051f0:	08005213 	.word	0x08005213
 80051f4:	08005219 	.word	0x08005219
 80051f8:	0800521f 	.word	0x0800521f
 80051fc:	08005225 	.word	0x08005225
 8005200:	0800522b 	.word	0x0800522b
 8005204:	08005231 	.word	0x08005231
 8005208:	08005237 	.word	0x08005237
 800520c:	2b7f      	cmp	r3, #127	; 0x7f
 800520e:	d036      	beq.n	800527e <_HandleIncomingPacket+0xce>
 8005210:	e026      	b.n	8005260 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005212:	f000 fb53 	bl	80058bc <SEGGER_SYSVIEW_Start>
      break;
 8005216:	e037      	b.n	8005288 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005218:	f000 fc0a 	bl	8005a30 <SEGGER_SYSVIEW_Stop>
      break;
 800521c:	e034      	b.n	8005288 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800521e:	f000 fdbf 	bl	8005da0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005222:	e031      	b.n	8005288 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005224:	f000 fda8 	bl	8005d78 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005228:	e02e      	b.n	8005288 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800522a:	f000 fc27 	bl	8005a7c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800522e:	e02b      	b.n	8005288 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005230:	f001 f852 	bl	80062d8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005234:	e028      	b.n	8005288 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005236:	f001 f831 	bl	800629c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800523a:	e025      	b.n	8005288 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800523c:	4b14      	ldr	r3, [pc, #80]	; (8005290 <_HandleIncomingPacket+0xe0>)
 800523e:	7e1b      	ldrb	r3, [r3, #24]
 8005240:	4618      	mov	r0, r3
 8005242:	1cfb      	adds	r3, r7, #3
 8005244:	2201      	movs	r2, #1
 8005246:	4619      	mov	r1, r3
 8005248:	f7ff fed0 	bl	8004fec <SEGGER_RTT_ReadNoLock>
 800524c:	4603      	mov	r3, r0
 800524e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	dd15      	ble.n	8005282 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005256:	78fb      	ldrb	r3, [r7, #3]
 8005258:	4618      	mov	r0, r3
 800525a:	f000 ff9f 	bl	800619c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800525e:	e010      	b.n	8005282 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005260:	78fb      	ldrb	r3, [r7, #3]
 8005262:	b25b      	sxtb	r3, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	da0e      	bge.n	8005286 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005268:	4b09      	ldr	r3, [pc, #36]	; (8005290 <_HandleIncomingPacket+0xe0>)
 800526a:	7e1b      	ldrb	r3, [r3, #24]
 800526c:	4618      	mov	r0, r3
 800526e:	1cfb      	adds	r3, r7, #3
 8005270:	2201      	movs	r2, #1
 8005272:	4619      	mov	r1, r3
 8005274:	f7ff feba 	bl	8004fec <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005278:	e005      	b.n	8005286 <_HandleIncomingPacket+0xd6>
    }
  }
 800527a:	bf00      	nop
 800527c:	e004      	b.n	8005288 <_HandleIncomingPacket+0xd8>
      break;
 800527e:	bf00      	nop
 8005280:	e002      	b.n	8005288 <_HandleIncomingPacket+0xd8>
      break;
 8005282:	bf00      	nop
 8005284:	e000      	b.n	8005288 <_HandleIncomingPacket+0xd8>
      break;
 8005286:	bf00      	nop
}
 8005288:	bf00      	nop
 800528a:	3708      	adds	r7, #8
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	20002e4c 	.word	0x20002e4c

08005294 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005294:	b580      	push	{r7, lr}
 8005296:	b08c      	sub	sp, #48	; 0x30
 8005298:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800529a:	2301      	movs	r3, #1
 800529c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800529e:	1d3b      	adds	r3, r7, #4
 80052a0:	3301      	adds	r3, #1
 80052a2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052a8:	4b31      	ldr	r3, [pc, #196]	; (8005370 <_TrySendOverflowPacket+0xdc>)
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80052ae:	e00b      	b.n	80052c8 <_TrySendOverflowPacket+0x34>
 80052b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b2:	b2da      	uxtb	r2, r3
 80052b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b6:	1c59      	adds	r1, r3, #1
 80052b8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80052ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052be:	b2d2      	uxtb	r2, r2
 80052c0:	701a      	strb	r2, [r3, #0]
 80052c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c4:	09db      	lsrs	r3, r3, #7
 80052c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80052c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ca:	2b7f      	cmp	r3, #127	; 0x7f
 80052cc:	d8f0      	bhi.n	80052b0 <_TrySendOverflowPacket+0x1c>
 80052ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052d6:	b2d2      	uxtb	r2, r2
 80052d8:	701a      	strb	r2, [r3, #0]
 80052da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052dc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80052de:	4b25      	ldr	r3, [pc, #148]	; (8005374 <_TrySendOverflowPacket+0xe0>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80052e4:	4b22      	ldr	r3, [pc, #136]	; (8005370 <_TrySendOverflowPacket+0xdc>)
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	627b      	str	r3, [r7, #36]	; 0x24
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	623b      	str	r3, [r7, #32]
 80052f6:	e00b      	b.n	8005310 <_TrySendOverflowPacket+0x7c>
 80052f8:	6a3b      	ldr	r3, [r7, #32]
 80052fa:	b2da      	uxtb	r2, r3
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	1c59      	adds	r1, r3, #1
 8005300:	6279      	str	r1, [r7, #36]	; 0x24
 8005302:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005306:	b2d2      	uxtb	r2, r2
 8005308:	701a      	strb	r2, [r3, #0]
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	09db      	lsrs	r3, r3, #7
 800530e:	623b      	str	r3, [r7, #32]
 8005310:	6a3b      	ldr	r3, [r7, #32]
 8005312:	2b7f      	cmp	r3, #127	; 0x7f
 8005314:	d8f0      	bhi.n	80052f8 <_TrySendOverflowPacket+0x64>
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	1c5a      	adds	r2, r3, #1
 800531a:	627a      	str	r2, [r7, #36]	; 0x24
 800531c:	6a3a      	ldr	r2, [r7, #32]
 800531e:	b2d2      	uxtb	r2, r2
 8005320:	701a      	strb	r2, [r3, #0]
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005326:	4b12      	ldr	r3, [pc, #72]	; (8005370 <_TrySendOverflowPacket+0xdc>)
 8005328:	785b      	ldrb	r3, [r3, #1]
 800532a:	4618      	mov	r0, r3
 800532c:	1d3b      	adds	r3, r7, #4
 800532e:	69fa      	ldr	r2, [r7, #28]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	461a      	mov	r2, r3
 8005334:	1d3b      	adds	r3, r7, #4
 8005336:	4619      	mov	r1, r3
 8005338:	f7fa ff4a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800533c:	4603      	mov	r3, r0
 800533e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d009      	beq.n	800535a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005346:	4a0a      	ldr	r2, [pc, #40]	; (8005370 <_TrySendOverflowPacket+0xdc>)
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800534c:	4b08      	ldr	r3, [pc, #32]	; (8005370 <_TrySendOverflowPacket+0xdc>)
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	3b01      	subs	r3, #1
 8005352:	b2da      	uxtb	r2, r3
 8005354:	4b06      	ldr	r3, [pc, #24]	; (8005370 <_TrySendOverflowPacket+0xdc>)
 8005356:	701a      	strb	r2, [r3, #0]
 8005358:	e004      	b.n	8005364 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800535a:	4b05      	ldr	r3, [pc, #20]	; (8005370 <_TrySendOverflowPacket+0xdc>)
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	3301      	adds	r3, #1
 8005360:	4a03      	ldr	r2, [pc, #12]	; (8005370 <_TrySendOverflowPacket+0xdc>)
 8005362:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005364:	693b      	ldr	r3, [r7, #16]
}
 8005366:	4618      	mov	r0, r3
 8005368:	3730      	adds	r7, #48	; 0x30
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	20002e4c 	.word	0x20002e4c
 8005374:	e0001004 	.word	0xe0001004

08005378 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005378:	b580      	push	{r7, lr}
 800537a:	b08a      	sub	sp, #40	; 0x28
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005384:	4b6c      	ldr	r3, [pc, #432]	; (8005538 <_SendPacket+0x1c0>)
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d010      	beq.n	80053ae <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800538c:	4b6a      	ldr	r3, [pc, #424]	; (8005538 <_SendPacket+0x1c0>)
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 80a3 	beq.w	80054dc <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005396:	4b68      	ldr	r3, [pc, #416]	; (8005538 <_SendPacket+0x1c0>)
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	2b02      	cmp	r3, #2
 800539c:	d109      	bne.n	80053b2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800539e:	f7ff ff79 	bl	8005294 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80053a2:	4b65      	ldr	r3, [pc, #404]	; (8005538 <_SendPacket+0x1c0>)
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	f040 809a 	bne.w	80054e0 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80053ac:	e001      	b.n	80053b2 <_SendPacket+0x3a>
    goto Send;
 80053ae:	bf00      	nop
 80053b0:	e000      	b.n	80053b4 <_SendPacket+0x3c>
Send:
 80053b2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b1f      	cmp	r3, #31
 80053b8:	d809      	bhi.n	80053ce <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80053ba:	4b5f      	ldr	r3, [pc, #380]	; (8005538 <_SendPacket+0x1c0>)
 80053bc:	69da      	ldr	r2, [r3, #28]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	fa22 f303 	lsr.w	r3, r2, r3
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f040 808b 	bne.w	80054e4 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2b17      	cmp	r3, #23
 80053d2:	d807      	bhi.n	80053e4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	3b01      	subs	r3, #1
 80053d8:	60fb      	str	r3, [r7, #12]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	b2da      	uxtb	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	701a      	strb	r2, [r3, #0]
 80053e2:	e03d      	b.n	8005460 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80053e4:	68ba      	ldr	r2, [r7, #8]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	2b7f      	cmp	r3, #127	; 0x7f
 80053f0:	d912      	bls.n	8005418 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	09da      	lsrs	r2, r3, #7
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	3b01      	subs	r3, #1
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	b2d2      	uxtb	r2, r2
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	b2db      	uxtb	r3, r3
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	3a01      	subs	r2, #1
 800540a:	60fa      	str	r2, [r7, #12]
 800540c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005410:	b2da      	uxtb	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	701a      	strb	r2, [r3, #0]
 8005416:	e006      	b.n	8005426 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	3b01      	subs	r3, #1
 800541c:	60fb      	str	r3, [r7, #12]
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	b2da      	uxtb	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b7f      	cmp	r3, #127	; 0x7f
 800542a:	d912      	bls.n	8005452 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	09da      	lsrs	r2, r3, #7
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	3b01      	subs	r3, #1
 8005434:	60fb      	str	r3, [r7, #12]
 8005436:	b2d2      	uxtb	r2, r2
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	b2db      	uxtb	r3, r3
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	3a01      	subs	r2, #1
 8005444:	60fa      	str	r2, [r7, #12]
 8005446:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800544a:	b2da      	uxtb	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	701a      	strb	r2, [r3, #0]
 8005450:	e006      	b.n	8005460 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	3b01      	subs	r3, #1
 8005456:	60fb      	str	r3, [r7, #12]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	b2da      	uxtb	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005460:	4b36      	ldr	r3, [pc, #216]	; (800553c <_SendPacket+0x1c4>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005466:	4b34      	ldr	r3, [pc, #208]	; (8005538 <_SendPacket+0x1c0>)
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	69ba      	ldr	r2, [r7, #24]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	627b      	str	r3, [r7, #36]	; 0x24
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	623b      	str	r3, [r7, #32]
 8005478:	e00b      	b.n	8005492 <_SendPacket+0x11a>
 800547a:	6a3b      	ldr	r3, [r7, #32]
 800547c:	b2da      	uxtb	r2, r3
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	1c59      	adds	r1, r3, #1
 8005482:	6279      	str	r1, [r7, #36]	; 0x24
 8005484:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005488:	b2d2      	uxtb	r2, r2
 800548a:	701a      	strb	r2, [r3, #0]
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	09db      	lsrs	r3, r3, #7
 8005490:	623b      	str	r3, [r7, #32]
 8005492:	6a3b      	ldr	r3, [r7, #32]
 8005494:	2b7f      	cmp	r3, #127	; 0x7f
 8005496:	d8f0      	bhi.n	800547a <_SendPacket+0x102>
 8005498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549a:	1c5a      	adds	r2, r3, #1
 800549c:	627a      	str	r2, [r7, #36]	; 0x24
 800549e:	6a3a      	ldr	r2, [r7, #32]
 80054a0:	b2d2      	uxtb	r2, r2
 80054a2:	701a      	strb	r2, [r3, #0]
 80054a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80054a8:	4b23      	ldr	r3, [pc, #140]	; (8005538 <_SendPacket+0x1c0>)
 80054aa:	785b      	ldrb	r3, [r3, #1]
 80054ac:	4618      	mov	r0, r3
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	461a      	mov	r2, r3
 80054b6:	68f9      	ldr	r1, [r7, #12]
 80054b8:	f7fa fe8a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80054bc:	4603      	mov	r3, r0
 80054be:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80054c6:	4a1c      	ldr	r2, [pc, #112]	; (8005538 <_SendPacket+0x1c0>)
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	60d3      	str	r3, [r2, #12]
 80054cc:	e00b      	b.n	80054e6 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80054ce:	4b1a      	ldr	r3, [pc, #104]	; (8005538 <_SendPacket+0x1c0>)
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	3301      	adds	r3, #1
 80054d4:	b2da      	uxtb	r2, r3
 80054d6:	4b18      	ldr	r3, [pc, #96]	; (8005538 <_SendPacket+0x1c0>)
 80054d8:	701a      	strb	r2, [r3, #0]
 80054da:	e004      	b.n	80054e6 <_SendPacket+0x16e>
    goto SendDone;
 80054dc:	bf00      	nop
 80054de:	e002      	b.n	80054e6 <_SendPacket+0x16e>
      goto SendDone;
 80054e0:	bf00      	nop
 80054e2:	e000      	b.n	80054e6 <_SendPacket+0x16e>
      goto SendDone;
 80054e4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80054e6:	4b14      	ldr	r3, [pc, #80]	; (8005538 <_SendPacket+0x1c0>)
 80054e8:	7e1b      	ldrb	r3, [r3, #24]
 80054ea:	4619      	mov	r1, r3
 80054ec:	4a14      	ldr	r2, [pc, #80]	; (8005540 <_SendPacket+0x1c8>)
 80054ee:	460b      	mov	r3, r1
 80054f0:	005b      	lsls	r3, r3, #1
 80054f2:	440b      	add	r3, r1
 80054f4:	00db      	lsls	r3, r3, #3
 80054f6:	4413      	add	r3, r2
 80054f8:	336c      	adds	r3, #108	; 0x6c
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	4b0e      	ldr	r3, [pc, #56]	; (8005538 <_SendPacket+0x1c0>)
 80054fe:	7e1b      	ldrb	r3, [r3, #24]
 8005500:	4618      	mov	r0, r3
 8005502:	490f      	ldr	r1, [pc, #60]	; (8005540 <_SendPacket+0x1c8>)
 8005504:	4603      	mov	r3, r0
 8005506:	005b      	lsls	r3, r3, #1
 8005508:	4403      	add	r3, r0
 800550a:	00db      	lsls	r3, r3, #3
 800550c:	440b      	add	r3, r1
 800550e:	3370      	adds	r3, #112	; 0x70
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	429a      	cmp	r2, r3
 8005514:	d00b      	beq.n	800552e <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005516:	4b08      	ldr	r3, [pc, #32]	; (8005538 <_SendPacket+0x1c0>)
 8005518:	789b      	ldrb	r3, [r3, #2]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d107      	bne.n	800552e <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800551e:	4b06      	ldr	r3, [pc, #24]	; (8005538 <_SendPacket+0x1c0>)
 8005520:	2201      	movs	r2, #1
 8005522:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005524:	f7ff fe44 	bl	80051b0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005528:	4b03      	ldr	r3, [pc, #12]	; (8005538 <_SendPacket+0x1c0>)
 800552a:	2200      	movs	r2, #0
 800552c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800552e:	bf00      	nop
 8005530:	3728      	adds	r7, #40	; 0x28
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	20002e4c 	.word	0x20002e4c
 800553c:	e0001004 	.word	0xe0001004
 8005540:	20002ff0 	.word	0x20002ff0

08005544 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800554c:	f3ef 8311 	mrs	r3, BASEPRI
 8005550:	f04f 0120 	mov.w	r1, #32
 8005554:	f381 8811 	msr	BASEPRI, r1
 8005558:	60fb      	str	r3, [r7, #12]
 800555a:	4808      	ldr	r0, [pc, #32]	; (800557c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800555c:	f7ff fe1c 	bl	8005198 <_PreparePacket>
 8005560:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	68b9      	ldr	r1, [r7, #8]
 8005566:	68b8      	ldr	r0, [r7, #8]
 8005568:	f7ff ff06 	bl	8005378 <_SendPacket>
  RECORD_END();
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f383 8811 	msr	BASEPRI, r3
}
 8005572:	bf00      	nop
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	20002e7c 	.word	0x20002e7c

08005580 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005580:	b580      	push	{r7, lr}
 8005582:	b088      	sub	sp, #32
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800558a:	f3ef 8311 	mrs	r3, BASEPRI
 800558e:	f04f 0120 	mov.w	r1, #32
 8005592:	f381 8811 	msr	BASEPRI, r1
 8005596:	617b      	str	r3, [r7, #20]
 8005598:	4816      	ldr	r0, [pc, #88]	; (80055f4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800559a:	f7ff fdfd 	bl	8005198 <_PreparePacket>
 800559e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	61fb      	str	r3, [r7, #28]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	61bb      	str	r3, [r7, #24]
 80055ac:	e00b      	b.n	80055c6 <SEGGER_SYSVIEW_RecordU32+0x46>
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	1c59      	adds	r1, r3, #1
 80055b6:	61f9      	str	r1, [r7, #28]
 80055b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055bc:	b2d2      	uxtb	r2, r2
 80055be:	701a      	strb	r2, [r3, #0]
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	09db      	lsrs	r3, r3, #7
 80055c4:	61bb      	str	r3, [r7, #24]
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	2b7f      	cmp	r3, #127	; 0x7f
 80055ca:	d8f0      	bhi.n	80055ae <SEGGER_SYSVIEW_RecordU32+0x2e>
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	1c5a      	adds	r2, r3, #1
 80055d0:	61fa      	str	r2, [r7, #28]
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	b2d2      	uxtb	r2, r2
 80055d6:	701a      	strb	r2, [r3, #0]
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	68f9      	ldr	r1, [r7, #12]
 80055e0:	6938      	ldr	r0, [r7, #16]
 80055e2:	f7ff fec9 	bl	8005378 <_SendPacket>
  RECORD_END();
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f383 8811 	msr	BASEPRI, r3
}
 80055ec:	bf00      	nop
 80055ee:	3720      	adds	r7, #32
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	20002e7c 	.word	0x20002e7c

080055f8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b08c      	sub	sp, #48	; 0x30
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005604:	f3ef 8311 	mrs	r3, BASEPRI
 8005608:	f04f 0120 	mov.w	r1, #32
 800560c:	f381 8811 	msr	BASEPRI, r1
 8005610:	61fb      	str	r3, [r7, #28]
 8005612:	4825      	ldr	r0, [pc, #148]	; (80056a8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005614:	f7ff fdc0 	bl	8005198 <_PreparePacket>
 8005618:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	62bb      	str	r3, [r7, #40]	; 0x28
 8005626:	e00b      	b.n	8005640 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562a:	b2da      	uxtb	r2, r3
 800562c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562e:	1c59      	adds	r1, r3, #1
 8005630:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005632:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005636:	b2d2      	uxtb	r2, r2
 8005638:	701a      	strb	r2, [r3, #0]
 800563a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563c:	09db      	lsrs	r3, r3, #7
 800563e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005642:	2b7f      	cmp	r3, #127	; 0x7f
 8005644:	d8f0      	bhi.n	8005628 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005648:	1c5a      	adds	r2, r3, #1
 800564a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800564c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800564e:	b2d2      	uxtb	r2, r2
 8005650:	701a      	strb	r2, [r3, #0]
 8005652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005654:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	627b      	str	r3, [r7, #36]	; 0x24
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	623b      	str	r3, [r7, #32]
 800565e:	e00b      	b.n	8005678 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005660:	6a3b      	ldr	r3, [r7, #32]
 8005662:	b2da      	uxtb	r2, r3
 8005664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005666:	1c59      	adds	r1, r3, #1
 8005668:	6279      	str	r1, [r7, #36]	; 0x24
 800566a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800566e:	b2d2      	uxtb	r2, r2
 8005670:	701a      	strb	r2, [r3, #0]
 8005672:	6a3b      	ldr	r3, [r7, #32]
 8005674:	09db      	lsrs	r3, r3, #7
 8005676:	623b      	str	r3, [r7, #32]
 8005678:	6a3b      	ldr	r3, [r7, #32]
 800567a:	2b7f      	cmp	r3, #127	; 0x7f
 800567c:	d8f0      	bhi.n	8005660 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005680:	1c5a      	adds	r2, r3, #1
 8005682:	627a      	str	r2, [r7, #36]	; 0x24
 8005684:	6a3a      	ldr	r2, [r7, #32]
 8005686:	b2d2      	uxtb	r2, r2
 8005688:	701a      	strb	r2, [r3, #0]
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	6979      	ldr	r1, [r7, #20]
 8005692:	69b8      	ldr	r0, [r7, #24]
 8005694:	f7ff fe70 	bl	8005378 <_SendPacket>
  RECORD_END();
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	f383 8811 	msr	BASEPRI, r3
}
 800569e:	bf00      	nop
 80056a0:	3730      	adds	r7, #48	; 0x30
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	20002e7c 	.word	0x20002e7c

080056ac <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b08e      	sub	sp, #56	; 0x38
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
 80056b8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80056ba:	f3ef 8311 	mrs	r3, BASEPRI
 80056be:	f04f 0120 	mov.w	r1, #32
 80056c2:	f381 8811 	msr	BASEPRI, r1
 80056c6:	61fb      	str	r3, [r7, #28]
 80056c8:	4832      	ldr	r0, [pc, #200]	; (8005794 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80056ca:	f7ff fd65 	bl	8005198 <_PreparePacket>
 80056ce:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	637b      	str	r3, [r7, #52]	; 0x34
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	633b      	str	r3, [r7, #48]	; 0x30
 80056dc:	e00b      	b.n	80056f6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80056de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e0:	b2da      	uxtb	r2, r3
 80056e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e4:	1c59      	adds	r1, r3, #1
 80056e6:	6379      	str	r1, [r7, #52]	; 0x34
 80056e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056ec:	b2d2      	uxtb	r2, r2
 80056ee:	701a      	strb	r2, [r3, #0]
 80056f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f2:	09db      	lsrs	r3, r3, #7
 80056f4:	633b      	str	r3, [r7, #48]	; 0x30
 80056f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f8:	2b7f      	cmp	r3, #127	; 0x7f
 80056fa:	d8f0      	bhi.n	80056de <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80056fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056fe:	1c5a      	adds	r2, r3, #1
 8005700:	637a      	str	r2, [r7, #52]	; 0x34
 8005702:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005704:	b2d2      	uxtb	r2, r2
 8005706:	701a      	strb	r2, [r3, #0]
 8005708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800570a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	62bb      	str	r3, [r7, #40]	; 0x28
 8005714:	e00b      	b.n	800572e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005718:	b2da      	uxtb	r2, r3
 800571a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571c:	1c59      	adds	r1, r3, #1
 800571e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005720:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005724:	b2d2      	uxtb	r2, r2
 8005726:	701a      	strb	r2, [r3, #0]
 8005728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572a:	09db      	lsrs	r3, r3, #7
 800572c:	62bb      	str	r3, [r7, #40]	; 0x28
 800572e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005730:	2b7f      	cmp	r3, #127	; 0x7f
 8005732:	d8f0      	bhi.n	8005716 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005736:	1c5a      	adds	r2, r3, #1
 8005738:	62fa      	str	r2, [r7, #44]	; 0x2c
 800573a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800573c:	b2d2      	uxtb	r2, r2
 800573e:	701a      	strb	r2, [r3, #0]
 8005740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005742:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	627b      	str	r3, [r7, #36]	; 0x24
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	623b      	str	r3, [r7, #32]
 800574c:	e00b      	b.n	8005766 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800574e:	6a3b      	ldr	r3, [r7, #32]
 8005750:	b2da      	uxtb	r2, r3
 8005752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005754:	1c59      	adds	r1, r3, #1
 8005756:	6279      	str	r1, [r7, #36]	; 0x24
 8005758:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800575c:	b2d2      	uxtb	r2, r2
 800575e:	701a      	strb	r2, [r3, #0]
 8005760:	6a3b      	ldr	r3, [r7, #32]
 8005762:	09db      	lsrs	r3, r3, #7
 8005764:	623b      	str	r3, [r7, #32]
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	2b7f      	cmp	r3, #127	; 0x7f
 800576a:	d8f0      	bhi.n	800574e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576e:	1c5a      	adds	r2, r3, #1
 8005770:	627a      	str	r2, [r7, #36]	; 0x24
 8005772:	6a3a      	ldr	r2, [r7, #32]
 8005774:	b2d2      	uxtb	r2, r2
 8005776:	701a      	strb	r2, [r3, #0]
 8005778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	6979      	ldr	r1, [r7, #20]
 8005780:	69b8      	ldr	r0, [r7, #24]
 8005782:	f7ff fdf9 	bl	8005378 <_SendPacket>
  RECORD_END();
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	f383 8811 	msr	BASEPRI, r3
}
 800578c:	bf00      	nop
 800578e:	3738      	adds	r7, #56	; 0x38
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	20002e7c 	.word	0x20002e7c

08005798 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005798:	b580      	push	{r7, lr}
 800579a:	b090      	sub	sp, #64	; 0x40
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
 80057a4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80057a6:	f3ef 8311 	mrs	r3, BASEPRI
 80057aa:	f04f 0120 	mov.w	r1, #32
 80057ae:	f381 8811 	msr	BASEPRI, r1
 80057b2:	61fb      	str	r3, [r7, #28]
 80057b4:	4840      	ldr	r0, [pc, #256]	; (80058b8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80057b6:	f7ff fcef 	bl	8005198 <_PreparePacket>
 80057ba:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80057c8:	e00b      	b.n	80057e2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80057ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057d0:	1c59      	adds	r1, r3, #1
 80057d2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80057d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057d8:	b2d2      	uxtb	r2, r2
 80057da:	701a      	strb	r2, [r3, #0]
 80057dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057de:	09db      	lsrs	r3, r3, #7
 80057e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80057e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e4:	2b7f      	cmp	r3, #127	; 0x7f
 80057e6:	d8f0      	bhi.n	80057ca <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80057e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ea:	1c5a      	adds	r2, r3, #1
 80057ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80057ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057f0:	b2d2      	uxtb	r2, r2
 80057f2:	701a      	strb	r2, [r3, #0]
 80057f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057f6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	637b      	str	r3, [r7, #52]	; 0x34
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	633b      	str	r3, [r7, #48]	; 0x30
 8005800:	e00b      	b.n	800581a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005804:	b2da      	uxtb	r2, r3
 8005806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005808:	1c59      	adds	r1, r3, #1
 800580a:	6379      	str	r1, [r7, #52]	; 0x34
 800580c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005810:	b2d2      	uxtb	r2, r2
 8005812:	701a      	strb	r2, [r3, #0]
 8005814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005816:	09db      	lsrs	r3, r3, #7
 8005818:	633b      	str	r3, [r7, #48]	; 0x30
 800581a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581c:	2b7f      	cmp	r3, #127	; 0x7f
 800581e:	d8f0      	bhi.n	8005802 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005822:	1c5a      	adds	r2, r3, #1
 8005824:	637a      	str	r2, [r7, #52]	; 0x34
 8005826:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005828:	b2d2      	uxtb	r2, r2
 800582a:	701a      	strb	r2, [r3, #0]
 800582c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800582e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	62bb      	str	r3, [r7, #40]	; 0x28
 8005838:	e00b      	b.n	8005852 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800583a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583c:	b2da      	uxtb	r2, r3
 800583e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005840:	1c59      	adds	r1, r3, #1
 8005842:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005844:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005848:	b2d2      	uxtb	r2, r2
 800584a:	701a      	strb	r2, [r3, #0]
 800584c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584e:	09db      	lsrs	r3, r3, #7
 8005850:	62bb      	str	r3, [r7, #40]	; 0x28
 8005852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005854:	2b7f      	cmp	r3, #127	; 0x7f
 8005856:	d8f0      	bhi.n	800583a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585a:	1c5a      	adds	r2, r3, #1
 800585c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800585e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005860:	b2d2      	uxtb	r2, r2
 8005862:	701a      	strb	r2, [r3, #0]
 8005864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005866:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	627b      	str	r3, [r7, #36]	; 0x24
 800586c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800586e:	623b      	str	r3, [r7, #32]
 8005870:	e00b      	b.n	800588a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005872:	6a3b      	ldr	r3, [r7, #32]
 8005874:	b2da      	uxtb	r2, r3
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	1c59      	adds	r1, r3, #1
 800587a:	6279      	str	r1, [r7, #36]	; 0x24
 800587c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005880:	b2d2      	uxtb	r2, r2
 8005882:	701a      	strb	r2, [r3, #0]
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	09db      	lsrs	r3, r3, #7
 8005888:	623b      	str	r3, [r7, #32]
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	2b7f      	cmp	r3, #127	; 0x7f
 800588e:	d8f0      	bhi.n	8005872 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	627a      	str	r2, [r7, #36]	; 0x24
 8005896:	6a3a      	ldr	r2, [r7, #32]
 8005898:	b2d2      	uxtb	r2, r2
 800589a:	701a      	strb	r2, [r3, #0]
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	6979      	ldr	r1, [r7, #20]
 80058a4:	69b8      	ldr	r0, [r7, #24]
 80058a6:	f7ff fd67 	bl	8005378 <_SendPacket>
  RECORD_END();
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	f383 8811 	msr	BASEPRI, r3
}
 80058b0:	bf00      	nop
 80058b2:	3740      	adds	r7, #64	; 0x40
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	20002e7c 	.word	0x20002e7c

080058bc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80058bc:	b580      	push	{r7, lr}
 80058be:	b08c      	sub	sp, #48	; 0x30
 80058c0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80058c2:	4b58      	ldr	r3, [pc, #352]	; (8005a24 <SEGGER_SYSVIEW_Start+0x168>)
 80058c4:	2201      	movs	r2, #1
 80058c6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80058c8:	f3ef 8311 	mrs	r3, BASEPRI
 80058cc:	f04f 0120 	mov.w	r1, #32
 80058d0:	f381 8811 	msr	BASEPRI, r1
 80058d4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80058d6:	4b53      	ldr	r3, [pc, #332]	; (8005a24 <SEGGER_SYSVIEW_Start+0x168>)
 80058d8:	785b      	ldrb	r3, [r3, #1]
 80058da:	220a      	movs	r2, #10
 80058dc:	4952      	ldr	r1, [pc, #328]	; (8005a28 <SEGGER_SYSVIEW_Start+0x16c>)
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fa fc76 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80058ea:	200a      	movs	r0, #10
 80058ec:	f7ff fe2a 	bl	8005544 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80058f0:	f3ef 8311 	mrs	r3, BASEPRI
 80058f4:	f04f 0120 	mov.w	r1, #32
 80058f8:	f381 8811 	msr	BASEPRI, r1
 80058fc:	60bb      	str	r3, [r7, #8]
 80058fe:	484b      	ldr	r0, [pc, #300]	; (8005a2c <SEGGER_SYSVIEW_Start+0x170>)
 8005900:	f7ff fc4a 	bl	8005198 <_PreparePacket>
 8005904:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800590e:	4b45      	ldr	r3, [pc, #276]	; (8005a24 <SEGGER_SYSVIEW_Start+0x168>)
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	62bb      	str	r3, [r7, #40]	; 0x28
 8005914:	e00b      	b.n	800592e <SEGGER_SYSVIEW_Start+0x72>
 8005916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005918:	b2da      	uxtb	r2, r3
 800591a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591c:	1c59      	adds	r1, r3, #1
 800591e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005920:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005924:	b2d2      	uxtb	r2, r2
 8005926:	701a      	strb	r2, [r3, #0]
 8005928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592a:	09db      	lsrs	r3, r3, #7
 800592c:	62bb      	str	r3, [r7, #40]	; 0x28
 800592e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005930:	2b7f      	cmp	r3, #127	; 0x7f
 8005932:	d8f0      	bhi.n	8005916 <SEGGER_SYSVIEW_Start+0x5a>
 8005934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005936:	1c5a      	adds	r2, r3, #1
 8005938:	62fa      	str	r2, [r7, #44]	; 0x2c
 800593a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800593c:	b2d2      	uxtb	r2, r2
 800593e:	701a      	strb	r2, [r3, #0]
 8005940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005942:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	627b      	str	r3, [r7, #36]	; 0x24
 8005948:	4b36      	ldr	r3, [pc, #216]	; (8005a24 <SEGGER_SYSVIEW_Start+0x168>)
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	623b      	str	r3, [r7, #32]
 800594e:	e00b      	b.n	8005968 <SEGGER_SYSVIEW_Start+0xac>
 8005950:	6a3b      	ldr	r3, [r7, #32]
 8005952:	b2da      	uxtb	r2, r3
 8005954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005956:	1c59      	adds	r1, r3, #1
 8005958:	6279      	str	r1, [r7, #36]	; 0x24
 800595a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800595e:	b2d2      	uxtb	r2, r2
 8005960:	701a      	strb	r2, [r3, #0]
 8005962:	6a3b      	ldr	r3, [r7, #32]
 8005964:	09db      	lsrs	r3, r3, #7
 8005966:	623b      	str	r3, [r7, #32]
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	2b7f      	cmp	r3, #127	; 0x7f
 800596c:	d8f0      	bhi.n	8005950 <SEGGER_SYSVIEW_Start+0x94>
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	1c5a      	adds	r2, r3, #1
 8005972:	627a      	str	r2, [r7, #36]	; 0x24
 8005974:	6a3a      	ldr	r2, [r7, #32]
 8005976:	b2d2      	uxtb	r2, r2
 8005978:	701a      	strb	r2, [r3, #0]
 800597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	61fb      	str	r3, [r7, #28]
 8005982:	4b28      	ldr	r3, [pc, #160]	; (8005a24 <SEGGER_SYSVIEW_Start+0x168>)
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	61bb      	str	r3, [r7, #24]
 8005988:	e00b      	b.n	80059a2 <SEGGER_SYSVIEW_Start+0xe6>
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	b2da      	uxtb	r2, r3
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	1c59      	adds	r1, r3, #1
 8005992:	61f9      	str	r1, [r7, #28]
 8005994:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005998:	b2d2      	uxtb	r2, r2
 800599a:	701a      	strb	r2, [r3, #0]
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	09db      	lsrs	r3, r3, #7
 80059a0:	61bb      	str	r3, [r7, #24]
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	2b7f      	cmp	r3, #127	; 0x7f
 80059a6:	d8f0      	bhi.n	800598a <SEGGER_SYSVIEW_Start+0xce>
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	1c5a      	adds	r2, r3, #1
 80059ac:	61fa      	str	r2, [r7, #28]
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	b2d2      	uxtb	r2, r2
 80059b2:	701a      	strb	r2, [r3, #0]
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	617b      	str	r3, [r7, #20]
 80059bc:	2300      	movs	r3, #0
 80059be:	613b      	str	r3, [r7, #16]
 80059c0:	e00b      	b.n	80059da <SEGGER_SYSVIEW_Start+0x11e>
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	b2da      	uxtb	r2, r3
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	1c59      	adds	r1, r3, #1
 80059ca:	6179      	str	r1, [r7, #20]
 80059cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059d0:	b2d2      	uxtb	r2, r2
 80059d2:	701a      	strb	r2, [r3, #0]
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	09db      	lsrs	r3, r3, #7
 80059d8:	613b      	str	r3, [r7, #16]
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	2b7f      	cmp	r3, #127	; 0x7f
 80059de:	d8f0      	bhi.n	80059c2 <SEGGER_SYSVIEW_Start+0x106>
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	1c5a      	adds	r2, r3, #1
 80059e4:	617a      	str	r2, [r7, #20]
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	b2d2      	uxtb	r2, r2
 80059ea:	701a      	strb	r2, [r3, #0]
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80059f0:	2218      	movs	r2, #24
 80059f2:	6839      	ldr	r1, [r7, #0]
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f7ff fcbf 	bl	8005378 <_SendPacket>
      RECORD_END();
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005a00:	4b08      	ldr	r3, [pc, #32]	; (8005a24 <SEGGER_SYSVIEW_Start+0x168>)
 8005a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d002      	beq.n	8005a0e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005a08:	4b06      	ldr	r3, [pc, #24]	; (8005a24 <SEGGER_SYSVIEW_Start+0x168>)
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005a0e:	f000 f9c7 	bl	8005da0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005a12:	f000 f9b1 	bl	8005d78 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005a16:	f000 fc5f 	bl	80062d8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005a1a:	bf00      	nop
 8005a1c:	3730      	adds	r7, #48	; 0x30
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	20002e4c 	.word	0x20002e4c
 8005a28:	0800658c 	.word	0x0800658c
 8005a2c:	20002e7c 	.word	0x20002e7c

08005a30 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005a36:	f3ef 8311 	mrs	r3, BASEPRI
 8005a3a:	f04f 0120 	mov.w	r1, #32
 8005a3e:	f381 8811 	msr	BASEPRI, r1
 8005a42:	607b      	str	r3, [r7, #4]
 8005a44:	480b      	ldr	r0, [pc, #44]	; (8005a74 <SEGGER_SYSVIEW_Stop+0x44>)
 8005a46:	f7ff fba7 	bl	8005198 <_PreparePacket>
 8005a4a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005a4c:	4b0a      	ldr	r3, [pc, #40]	; (8005a78 <SEGGER_SYSVIEW_Stop+0x48>)
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d007      	beq.n	8005a64 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005a54:	220b      	movs	r2, #11
 8005a56:	6839      	ldr	r1, [r7, #0]
 8005a58:	6838      	ldr	r0, [r7, #0]
 8005a5a:	f7ff fc8d 	bl	8005378 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005a5e:	4b06      	ldr	r3, [pc, #24]	; (8005a78 <SEGGER_SYSVIEW_Stop+0x48>)
 8005a60:	2200      	movs	r2, #0
 8005a62:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f383 8811 	msr	BASEPRI, r3
}
 8005a6a:	bf00      	nop
 8005a6c:	3708      	adds	r7, #8
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	20002e7c 	.word	0x20002e7c
 8005a78:	20002e4c 	.word	0x20002e4c

08005a7c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b08c      	sub	sp, #48	; 0x30
 8005a80:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005a82:	f3ef 8311 	mrs	r3, BASEPRI
 8005a86:	f04f 0120 	mov.w	r1, #32
 8005a8a:	f381 8811 	msr	BASEPRI, r1
 8005a8e:	60fb      	str	r3, [r7, #12]
 8005a90:	4845      	ldr	r0, [pc, #276]	; (8005ba8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005a92:	f7ff fb81 	bl	8005198 <_PreparePacket>
 8005a96:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aa0:	4b42      	ldr	r3, [pc, #264]	; (8005bac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aa6:	e00b      	b.n	8005ac0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aae:	1c59      	adds	r1, r3, #1
 8005ab0:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005ab2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ab6:	b2d2      	uxtb	r2, r2
 8005ab8:	701a      	strb	r2, [r3, #0]
 8005aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abc:	09db      	lsrs	r3, r3, #7
 8005abe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ac4:	d8f0      	bhi.n	8005aa8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac8:	1c5a      	adds	r2, r3, #1
 8005aca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005acc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ace:	b2d2      	uxtb	r2, r2
 8005ad0:	701a      	strb	r2, [r3, #0]
 8005ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8005ada:	4b34      	ldr	r3, [pc, #208]	; (8005bac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	623b      	str	r3, [r7, #32]
 8005ae0:	e00b      	b.n	8005afa <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005ae2:	6a3b      	ldr	r3, [r7, #32]
 8005ae4:	b2da      	uxtb	r2, r3
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	1c59      	adds	r1, r3, #1
 8005aea:	6279      	str	r1, [r7, #36]	; 0x24
 8005aec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005af0:	b2d2      	uxtb	r2, r2
 8005af2:	701a      	strb	r2, [r3, #0]
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	09db      	lsrs	r3, r3, #7
 8005af8:	623b      	str	r3, [r7, #32]
 8005afa:	6a3b      	ldr	r3, [r7, #32]
 8005afc:	2b7f      	cmp	r3, #127	; 0x7f
 8005afe:	d8f0      	bhi.n	8005ae2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	1c5a      	adds	r2, r3, #1
 8005b04:	627a      	str	r2, [r7, #36]	; 0x24
 8005b06:	6a3a      	ldr	r2, [r7, #32]
 8005b08:	b2d2      	uxtb	r2, r2
 8005b0a:	701a      	strb	r2, [r3, #0]
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	61fb      	str	r3, [r7, #28]
 8005b14:	4b25      	ldr	r3, [pc, #148]	; (8005bac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	61bb      	str	r3, [r7, #24]
 8005b1a:	e00b      	b.n	8005b34 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	b2da      	uxtb	r2, r3
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	1c59      	adds	r1, r3, #1
 8005b24:	61f9      	str	r1, [r7, #28]
 8005b26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b2a:	b2d2      	uxtb	r2, r2
 8005b2c:	701a      	strb	r2, [r3, #0]
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	09db      	lsrs	r3, r3, #7
 8005b32:	61bb      	str	r3, [r7, #24]
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	2b7f      	cmp	r3, #127	; 0x7f
 8005b38:	d8f0      	bhi.n	8005b1c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	1c5a      	adds	r2, r3, #1
 8005b3e:	61fa      	str	r2, [r7, #28]
 8005b40:	69ba      	ldr	r2, [r7, #24]
 8005b42:	b2d2      	uxtb	r2, r2
 8005b44:	701a      	strb	r2, [r3, #0]
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	617b      	str	r3, [r7, #20]
 8005b4e:	2300      	movs	r3, #0
 8005b50:	613b      	str	r3, [r7, #16]
 8005b52:	e00b      	b.n	8005b6c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	1c59      	adds	r1, r3, #1
 8005b5c:	6179      	str	r1, [r7, #20]
 8005b5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b62:	b2d2      	uxtb	r2, r2
 8005b64:	701a      	strb	r2, [r3, #0]
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	09db      	lsrs	r3, r3, #7
 8005b6a:	613b      	str	r3, [r7, #16]
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	2b7f      	cmp	r3, #127	; 0x7f
 8005b70:	d8f0      	bhi.n	8005b54 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	1c5a      	adds	r2, r3, #1
 8005b76:	617a      	str	r2, [r7, #20]
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	b2d2      	uxtb	r2, r2
 8005b7c:	701a      	strb	r2, [r3, #0]
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005b82:	2218      	movs	r2, #24
 8005b84:	6879      	ldr	r1, [r7, #4]
 8005b86:	68b8      	ldr	r0, [r7, #8]
 8005b88:	f7ff fbf6 	bl	8005378 <_SendPacket>
  RECORD_END();
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005b92:	4b06      	ldr	r3, [pc, #24]	; (8005bac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d002      	beq.n	8005ba0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005b9a:	4b04      	ldr	r3, [pc, #16]	; (8005bac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9e:	4798      	blx	r3
  }
}
 8005ba0:	bf00      	nop
 8005ba2:	3730      	adds	r7, #48	; 0x30
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	20002e7c 	.word	0x20002e7c
 8005bac:	20002e4c 	.word	0x20002e4c

08005bb0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b092      	sub	sp, #72	; 0x48
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005bb8:	f3ef 8311 	mrs	r3, BASEPRI
 8005bbc:	f04f 0120 	mov.w	r1, #32
 8005bc0:	f381 8811 	msr	BASEPRI, r1
 8005bc4:	617b      	str	r3, [r7, #20]
 8005bc6:	486a      	ldr	r0, [pc, #424]	; (8005d70 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005bc8:	f7ff fae6 	bl	8005198 <_PreparePacket>
 8005bcc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	647b      	str	r3, [r7, #68]	; 0x44
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	4b66      	ldr	r3, [pc, #408]	; (8005d74 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	643b      	str	r3, [r7, #64]	; 0x40
 8005be2:	e00b      	b.n	8005bfc <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bea:	1c59      	adds	r1, r3, #1
 8005bec:	6479      	str	r1, [r7, #68]	; 0x44
 8005bee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bf2:	b2d2      	uxtb	r2, r2
 8005bf4:	701a      	strb	r2, [r3, #0]
 8005bf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bf8:	09db      	lsrs	r3, r3, #7
 8005bfa:	643b      	str	r3, [r7, #64]	; 0x40
 8005bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bfe:	2b7f      	cmp	r3, #127	; 0x7f
 8005c00:	d8f0      	bhi.n	8005be4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005c02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c04:	1c5a      	adds	r2, r3, #1
 8005c06:	647a      	str	r2, [r7, #68]	; 0x44
 8005c08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c0a:	b2d2      	uxtb	r2, r2
 8005c0c:	701a      	strb	r2, [r3, #0]
 8005c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c10:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c1c:	e00b      	b.n	8005c36 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c24:	1c59      	adds	r1, r3, #1
 8005c26:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005c28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c2c:	b2d2      	uxtb	r2, r2
 8005c2e:	701a      	strb	r2, [r3, #0]
 8005c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c32:	09db      	lsrs	r3, r3, #7
 8005c34:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c38:	2b7f      	cmp	r3, #127	; 0x7f
 8005c3a:	d8f0      	bhi.n	8005c1e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c3e:	1c5a      	adds	r2, r3, #1
 8005c40:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005c42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c44:	b2d2      	uxtb	r2, r2
 8005c46:	701a      	strb	r2, [r3, #0]
 8005c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c4a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	2220      	movs	r2, #32
 8005c52:	4619      	mov	r1, r3
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f7ff fa4f 	bl	80050f8 <_EncodeStr>
 8005c5a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005c5c:	2209      	movs	r2, #9
 8005c5e:	68f9      	ldr	r1, [r7, #12]
 8005c60:	6938      	ldr	r0, [r7, #16]
 8005c62:	f7ff fb89 	bl	8005378 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	4b40      	ldr	r3, [pc, #256]	; (8005d74 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	633b      	str	r3, [r7, #48]	; 0x30
 8005c7a:	e00b      	b.n	8005c94 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7e:	b2da      	uxtb	r2, r3
 8005c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c82:	1c59      	adds	r1, r3, #1
 8005c84:	6379      	str	r1, [r7, #52]	; 0x34
 8005c86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c8a:	b2d2      	uxtb	r2, r2
 8005c8c:	701a      	strb	r2, [r3, #0]
 8005c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c90:	09db      	lsrs	r3, r3, #7
 8005c92:	633b      	str	r3, [r7, #48]	; 0x30
 8005c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c96:	2b7f      	cmp	r3, #127	; 0x7f
 8005c98:	d8f0      	bhi.n	8005c7c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c9c:	1c5a      	adds	r2, r3, #1
 8005c9e:	637a      	str	r2, [r7, #52]	; 0x34
 8005ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ca2:	b2d2      	uxtb	r2, r2
 8005ca4:	701a      	strb	r2, [r3, #0]
 8005ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cb4:	e00b      	b.n	8005cce <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb8:	b2da      	uxtb	r2, r3
 8005cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cbc:	1c59      	adds	r1, r3, #1
 8005cbe:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005cc0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cc4:	b2d2      	uxtb	r2, r2
 8005cc6:	701a      	strb	r2, [r3, #0]
 8005cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cca:	09db      	lsrs	r3, r3, #7
 8005ccc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd0:	2b7f      	cmp	r3, #127	; 0x7f
 8005cd2:	d8f0      	bhi.n	8005cb6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd6:	1c5a      	adds	r2, r3, #1
 8005cd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cdc:	b2d2      	uxtb	r2, r2
 8005cde:	701a      	strb	r2, [r3, #0]
 8005ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	623b      	str	r3, [r7, #32]
 8005cee:	e00b      	b.n	8005d08 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005cf0:	6a3b      	ldr	r3, [r7, #32]
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	1c59      	adds	r1, r3, #1
 8005cf8:	6279      	str	r1, [r7, #36]	; 0x24
 8005cfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cfe:	b2d2      	uxtb	r2, r2
 8005d00:	701a      	strb	r2, [r3, #0]
 8005d02:	6a3b      	ldr	r3, [r7, #32]
 8005d04:	09db      	lsrs	r3, r3, #7
 8005d06:	623b      	str	r3, [r7, #32]
 8005d08:	6a3b      	ldr	r3, [r7, #32]
 8005d0a:	2b7f      	cmp	r3, #127	; 0x7f
 8005d0c:	d8f0      	bhi.n	8005cf0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d10:	1c5a      	adds	r2, r3, #1
 8005d12:	627a      	str	r2, [r7, #36]	; 0x24
 8005d14:	6a3a      	ldr	r2, [r7, #32]
 8005d16:	b2d2      	uxtb	r2, r2
 8005d18:	701a      	strb	r2, [r3, #0]
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	61fb      	str	r3, [r7, #28]
 8005d22:	2300      	movs	r3, #0
 8005d24:	61bb      	str	r3, [r7, #24]
 8005d26:	e00b      	b.n	8005d40 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	1c59      	adds	r1, r3, #1
 8005d30:	61f9      	str	r1, [r7, #28]
 8005d32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d36:	b2d2      	uxtb	r2, r2
 8005d38:	701a      	strb	r2, [r3, #0]
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	09db      	lsrs	r3, r3, #7
 8005d3e:	61bb      	str	r3, [r7, #24]
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	2b7f      	cmp	r3, #127	; 0x7f
 8005d44:	d8f0      	bhi.n	8005d28 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	1c5a      	adds	r2, r3, #1
 8005d4a:	61fa      	str	r2, [r7, #28]
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	b2d2      	uxtb	r2, r2
 8005d50:	701a      	strb	r2, [r3, #0]
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005d56:	2215      	movs	r2, #21
 8005d58:	68f9      	ldr	r1, [r7, #12]
 8005d5a:	6938      	ldr	r0, [r7, #16]
 8005d5c:	f7ff fb0c 	bl	8005378 <_SendPacket>
  RECORD_END();
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	f383 8811 	msr	BASEPRI, r3
}
 8005d66:	bf00      	nop
 8005d68:	3748      	adds	r7, #72	; 0x48
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	20002e7c 	.word	0x20002e7c
 8005d74:	20002e4c 	.word	0x20002e4c

08005d78 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005d7c:	4b07      	ldr	r3, [pc, #28]	; (8005d9c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005d7e:	6a1b      	ldr	r3, [r3, #32]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d008      	beq.n	8005d96 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005d84:	4b05      	ldr	r3, [pc, #20]	; (8005d9c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005d86:	6a1b      	ldr	r3, [r3, #32]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d003      	beq.n	8005d96 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005d8e:	4b03      	ldr	r3, [pc, #12]	; (8005d9c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	4798      	blx	r3
  }
}
 8005d96:	bf00      	nop
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	20002e4c 	.word	0x20002e4c

08005da0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005da0:	b590      	push	{r4, r7, lr}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005da6:	4b15      	ldr	r3, [pc, #84]	; (8005dfc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d01a      	beq.n	8005de4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005dae:	4b13      	ldr	r3, [pc, #76]	; (8005dfc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d015      	beq.n	8005de4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005db8:	4b10      	ldr	r3, [pc, #64]	; (8005dfc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005dba:	6a1b      	ldr	r3, [r3, #32]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4798      	blx	r3
 8005dc0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005dc4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005dc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dca:	f04f 0200 	mov.w	r2, #0
 8005dce:	f04f 0300 	mov.w	r3, #0
 8005dd2:	000a      	movs	r2, r1
 8005dd4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	461a      	mov	r2, r3
 8005dda:	4621      	mov	r1, r4
 8005ddc:	200d      	movs	r0, #13
 8005dde:	f7ff fc0b 	bl	80055f8 <SEGGER_SYSVIEW_RecordU32x2>
 8005de2:	e006      	b.n	8005df2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005de4:	4b06      	ldr	r3, [pc, #24]	; (8005e00 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4619      	mov	r1, r3
 8005dea:	200c      	movs	r0, #12
 8005dec:	f7ff fbc8 	bl	8005580 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005df0:	bf00      	nop
 8005df2:	bf00      	nop
 8005df4:	370c      	adds	r7, #12
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd90      	pop	{r4, r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	20002e4c 	.word	0x20002e4c
 8005e00:	e0001004 	.word	0xe0001004

08005e04 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b086      	sub	sp, #24
 8005e08:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005e0a:	f3ef 8311 	mrs	r3, BASEPRI
 8005e0e:	f04f 0120 	mov.w	r1, #32
 8005e12:	f381 8811 	msr	BASEPRI, r1
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	4819      	ldr	r0, [pc, #100]	; (8005e80 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005e1a:	f7ff f9bd 	bl	8005198 <_PreparePacket>
 8005e1e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005e24:	4b17      	ldr	r3, [pc, #92]	; (8005e84 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e2c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	617b      	str	r3, [r7, #20]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	613b      	str	r3, [r7, #16]
 8005e36:	e00b      	b.n	8005e50 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	b2da      	uxtb	r2, r3
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	1c59      	adds	r1, r3, #1
 8005e40:	6179      	str	r1, [r7, #20]
 8005e42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e46:	b2d2      	uxtb	r2, r2
 8005e48:	701a      	strb	r2, [r3, #0]
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	09db      	lsrs	r3, r3, #7
 8005e4e:	613b      	str	r3, [r7, #16]
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	2b7f      	cmp	r3, #127	; 0x7f
 8005e54:	d8f0      	bhi.n	8005e38 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	1c5a      	adds	r2, r3, #1
 8005e5a:	617a      	str	r2, [r7, #20]
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	b2d2      	uxtb	r2, r2
 8005e60:	701a      	strb	r2, [r3, #0]
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005e66:	2202      	movs	r2, #2
 8005e68:	6879      	ldr	r1, [r7, #4]
 8005e6a:	68b8      	ldr	r0, [r7, #8]
 8005e6c:	f7ff fa84 	bl	8005378 <_SendPacket>
  RECORD_END();
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f383 8811 	msr	BASEPRI, r3
}
 8005e76:	bf00      	nop
 8005e78:	3718      	adds	r7, #24
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	20002e7c 	.word	0x20002e7c
 8005e84:	e000ed04 	.word	0xe000ed04

08005e88 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005e8e:	f3ef 8311 	mrs	r3, BASEPRI
 8005e92:	f04f 0120 	mov.w	r1, #32
 8005e96:	f381 8811 	msr	BASEPRI, r1
 8005e9a:	607b      	str	r3, [r7, #4]
 8005e9c:	4807      	ldr	r0, [pc, #28]	; (8005ebc <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005e9e:	f7ff f97b 	bl	8005198 <_PreparePacket>
 8005ea2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005ea4:	2203      	movs	r2, #3
 8005ea6:	6839      	ldr	r1, [r7, #0]
 8005ea8:	6838      	ldr	r0, [r7, #0]
 8005eaa:	f7ff fa65 	bl	8005378 <_SendPacket>
  RECORD_END();
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f383 8811 	msr	BASEPRI, r3
}
 8005eb4:	bf00      	nop
 8005eb6:	3708      	adds	r7, #8
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	20002e7c 	.word	0x20002e7c

08005ec0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005ec6:	f3ef 8311 	mrs	r3, BASEPRI
 8005eca:	f04f 0120 	mov.w	r1, #32
 8005ece:	f381 8811 	msr	BASEPRI, r1
 8005ed2:	607b      	str	r3, [r7, #4]
 8005ed4:	4807      	ldr	r0, [pc, #28]	; (8005ef4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005ed6:	f7ff f95f 	bl	8005198 <_PreparePacket>
 8005eda:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005edc:	2212      	movs	r2, #18
 8005ede:	6839      	ldr	r1, [r7, #0]
 8005ee0:	6838      	ldr	r0, [r7, #0]
 8005ee2:	f7ff fa49 	bl	8005378 <_SendPacket>
  RECORD_END();
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f383 8811 	msr	BASEPRI, r3
}
 8005eec:	bf00      	nop
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	20002e7c 	.word	0x20002e7c

08005ef8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005efe:	f3ef 8311 	mrs	r3, BASEPRI
 8005f02:	f04f 0120 	mov.w	r1, #32
 8005f06:	f381 8811 	msr	BASEPRI, r1
 8005f0a:	607b      	str	r3, [r7, #4]
 8005f0c:	4807      	ldr	r0, [pc, #28]	; (8005f2c <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005f0e:	f7ff f943 	bl	8005198 <_PreparePacket>
 8005f12:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005f14:	2211      	movs	r2, #17
 8005f16:	6839      	ldr	r1, [r7, #0]
 8005f18:	6838      	ldr	r0, [r7, #0]
 8005f1a:	f7ff fa2d 	bl	8005378 <_SendPacket>
  RECORD_END();
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f383 8811 	msr	BASEPRI, r3
}
 8005f24:	bf00      	nop
 8005f26:	3708      	adds	r7, #8
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	20002e7c 	.word	0x20002e7c

08005f30 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b088      	sub	sp, #32
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005f38:	f3ef 8311 	mrs	r3, BASEPRI
 8005f3c:	f04f 0120 	mov.w	r1, #32
 8005f40:	f381 8811 	msr	BASEPRI, r1
 8005f44:	617b      	str	r3, [r7, #20]
 8005f46:	4819      	ldr	r0, [pc, #100]	; (8005fac <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005f48:	f7ff f926 	bl	8005198 <_PreparePacket>
 8005f4c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005f52:	4b17      	ldr	r3, [pc, #92]	; (8005fb0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	61fb      	str	r3, [r7, #28]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	61bb      	str	r3, [r7, #24]
 8005f64:	e00b      	b.n	8005f7e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	b2da      	uxtb	r2, r3
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	1c59      	adds	r1, r3, #1
 8005f6e:	61f9      	str	r1, [r7, #28]
 8005f70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f74:	b2d2      	uxtb	r2, r2
 8005f76:	701a      	strb	r2, [r3, #0]
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	09db      	lsrs	r3, r3, #7
 8005f7c:	61bb      	str	r3, [r7, #24]
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	2b7f      	cmp	r3, #127	; 0x7f
 8005f82:	d8f0      	bhi.n	8005f66 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	1c5a      	adds	r2, r3, #1
 8005f88:	61fa      	str	r2, [r7, #28]
 8005f8a:	69ba      	ldr	r2, [r7, #24]
 8005f8c:	b2d2      	uxtb	r2, r2
 8005f8e:	701a      	strb	r2, [r3, #0]
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005f94:	2208      	movs	r2, #8
 8005f96:	68f9      	ldr	r1, [r7, #12]
 8005f98:	6938      	ldr	r0, [r7, #16]
 8005f9a:	f7ff f9ed 	bl	8005378 <_SendPacket>
  RECORD_END();
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f383 8811 	msr	BASEPRI, r3
}
 8005fa4:	bf00      	nop
 8005fa6:	3720      	adds	r7, #32
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	20002e7c 	.word	0x20002e7c
 8005fb0:	20002e4c 	.word	0x20002e4c

08005fb4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b088      	sub	sp, #32
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005fbc:	f3ef 8311 	mrs	r3, BASEPRI
 8005fc0:	f04f 0120 	mov.w	r1, #32
 8005fc4:	f381 8811 	msr	BASEPRI, r1
 8005fc8:	617b      	str	r3, [r7, #20]
 8005fca:	4819      	ldr	r0, [pc, #100]	; (8006030 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005fcc:	f7ff f8e4 	bl	8005198 <_PreparePacket>
 8005fd0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005fd6:	4b17      	ldr	r3, [pc, #92]	; (8006034 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	61fb      	str	r3, [r7, #28]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	61bb      	str	r3, [r7, #24]
 8005fe8:	e00b      	b.n	8006002 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	b2da      	uxtb	r2, r3
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	1c59      	adds	r1, r3, #1
 8005ff2:	61f9      	str	r1, [r7, #28]
 8005ff4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ff8:	b2d2      	uxtb	r2, r2
 8005ffa:	701a      	strb	r2, [r3, #0]
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	09db      	lsrs	r3, r3, #7
 8006000:	61bb      	str	r3, [r7, #24]
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	2b7f      	cmp	r3, #127	; 0x7f
 8006006:	d8f0      	bhi.n	8005fea <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	1c5a      	adds	r2, r3, #1
 800600c:	61fa      	str	r2, [r7, #28]
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	b2d2      	uxtb	r2, r2
 8006012:	701a      	strb	r2, [r3, #0]
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006018:	2204      	movs	r2, #4
 800601a:	68f9      	ldr	r1, [r7, #12]
 800601c:	6938      	ldr	r0, [r7, #16]
 800601e:	f7ff f9ab 	bl	8005378 <_SendPacket>
  RECORD_END();
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f383 8811 	msr	BASEPRI, r3
}
 8006028:	bf00      	nop
 800602a:	3720      	adds	r7, #32
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	20002e7c 	.word	0x20002e7c
 8006034:	20002e4c 	.word	0x20002e4c

08006038 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006038:	b580      	push	{r7, lr}
 800603a:	b088      	sub	sp, #32
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006040:	f3ef 8311 	mrs	r3, BASEPRI
 8006044:	f04f 0120 	mov.w	r1, #32
 8006048:	f381 8811 	msr	BASEPRI, r1
 800604c:	617b      	str	r3, [r7, #20]
 800604e:	4819      	ldr	r0, [pc, #100]	; (80060b4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006050:	f7ff f8a2 	bl	8005198 <_PreparePacket>
 8006054:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800605a:	4b17      	ldr	r3, [pc, #92]	; (80060b8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	61fb      	str	r3, [r7, #28]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	61bb      	str	r3, [r7, #24]
 800606c:	e00b      	b.n	8006086 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	b2da      	uxtb	r2, r3
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	1c59      	adds	r1, r3, #1
 8006076:	61f9      	str	r1, [r7, #28]
 8006078:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800607c:	b2d2      	uxtb	r2, r2
 800607e:	701a      	strb	r2, [r3, #0]
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	09db      	lsrs	r3, r3, #7
 8006084:	61bb      	str	r3, [r7, #24]
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	2b7f      	cmp	r3, #127	; 0x7f
 800608a:	d8f0      	bhi.n	800606e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	1c5a      	adds	r2, r3, #1
 8006090:	61fa      	str	r2, [r7, #28]
 8006092:	69ba      	ldr	r2, [r7, #24]
 8006094:	b2d2      	uxtb	r2, r2
 8006096:	701a      	strb	r2, [r3, #0]
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800609c:	2206      	movs	r2, #6
 800609e:	68f9      	ldr	r1, [r7, #12]
 80060a0:	6938      	ldr	r0, [r7, #16]
 80060a2:	f7ff f969 	bl	8005378 <_SendPacket>
  RECORD_END();
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	f383 8811 	msr	BASEPRI, r3
}
 80060ac:	bf00      	nop
 80060ae:	3720      	adds	r7, #32
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	20002e7c 	.word	0x20002e7c
 80060b8:	20002e4c 	.word	0x20002e4c

080060bc <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80060bc:	b580      	push	{r7, lr}
 80060be:	b08a      	sub	sp, #40	; 0x28
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80060c6:	f3ef 8311 	mrs	r3, BASEPRI
 80060ca:	f04f 0120 	mov.w	r1, #32
 80060ce:	f381 8811 	msr	BASEPRI, r1
 80060d2:	617b      	str	r3, [r7, #20]
 80060d4:	4827      	ldr	r0, [pc, #156]	; (8006174 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80060d6:	f7ff f85f 	bl	8005198 <_PreparePacket>
 80060da:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80060e0:	4b25      	ldr	r3, [pc, #148]	; (8006178 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	627b      	str	r3, [r7, #36]	; 0x24
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	623b      	str	r3, [r7, #32]
 80060f2:	e00b      	b.n	800610c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80060f4:	6a3b      	ldr	r3, [r7, #32]
 80060f6:	b2da      	uxtb	r2, r3
 80060f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fa:	1c59      	adds	r1, r3, #1
 80060fc:	6279      	str	r1, [r7, #36]	; 0x24
 80060fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006102:	b2d2      	uxtb	r2, r2
 8006104:	701a      	strb	r2, [r3, #0]
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	09db      	lsrs	r3, r3, #7
 800610a:	623b      	str	r3, [r7, #32]
 800610c:	6a3b      	ldr	r3, [r7, #32]
 800610e:	2b7f      	cmp	r3, #127	; 0x7f
 8006110:	d8f0      	bhi.n	80060f4 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006114:	1c5a      	adds	r2, r3, #1
 8006116:	627a      	str	r2, [r7, #36]	; 0x24
 8006118:	6a3a      	ldr	r2, [r7, #32]
 800611a:	b2d2      	uxtb	r2, r2
 800611c:	701a      	strb	r2, [r3, #0]
 800611e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006120:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	61fb      	str	r3, [r7, #28]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	61bb      	str	r3, [r7, #24]
 800612a:	e00b      	b.n	8006144 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	b2da      	uxtb	r2, r3
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	1c59      	adds	r1, r3, #1
 8006134:	61f9      	str	r1, [r7, #28]
 8006136:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800613a:	b2d2      	uxtb	r2, r2
 800613c:	701a      	strb	r2, [r3, #0]
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	09db      	lsrs	r3, r3, #7
 8006142:	61bb      	str	r3, [r7, #24]
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	2b7f      	cmp	r3, #127	; 0x7f
 8006148:	d8f0      	bhi.n	800612c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	1c5a      	adds	r2, r3, #1
 800614e:	61fa      	str	r2, [r7, #28]
 8006150:	69ba      	ldr	r2, [r7, #24]
 8006152:	b2d2      	uxtb	r2, r2
 8006154:	701a      	strb	r2, [r3, #0]
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800615a:	2207      	movs	r2, #7
 800615c:	68f9      	ldr	r1, [r7, #12]
 800615e:	6938      	ldr	r0, [r7, #16]
 8006160:	f7ff f90a 	bl	8005378 <_SendPacket>
  RECORD_END();
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	f383 8811 	msr	BASEPRI, r3
}
 800616a:	bf00      	nop
 800616c:	3728      	adds	r7, #40	; 0x28
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	20002e7c 	.word	0x20002e7c
 8006178:	20002e4c 	.word	0x20002e4c

0800617c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006184:	4b04      	ldr	r3, [pc, #16]	; (8006198 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	1ad3      	subs	r3, r2, r3
}
 800618c:	4618      	mov	r0, r3
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr
 8006198:	20002e4c 	.word	0x20002e4c

0800619c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800619c:	b580      	push	{r7, lr}
 800619e:	b08c      	sub	sp, #48	; 0x30
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	4603      	mov	r3, r0
 80061a4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80061a6:	4b3b      	ldr	r3, [pc, #236]	; (8006294 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d06d      	beq.n	800628a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80061ae:	4b39      	ldr	r3, [pc, #228]	; (8006294 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80061b4:	2300      	movs	r3, #0
 80061b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80061b8:	e008      	b.n	80061cc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80061ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80061c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d007      	beq.n	80061d6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80061c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c8:	3301      	adds	r3, #1
 80061ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80061cc:	79fb      	ldrb	r3, [r7, #7]
 80061ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d3f2      	bcc.n	80061ba <SEGGER_SYSVIEW_SendModule+0x1e>
 80061d4:	e000      	b.n	80061d8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80061d6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80061d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d055      	beq.n	800628a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80061de:	f3ef 8311 	mrs	r3, BASEPRI
 80061e2:	f04f 0120 	mov.w	r1, #32
 80061e6:	f381 8811 	msr	BASEPRI, r1
 80061ea:	617b      	str	r3, [r7, #20]
 80061ec:	482a      	ldr	r0, [pc, #168]	; (8006298 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80061ee:	f7fe ffd3 	bl	8005198 <_PreparePacket>
 80061f2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	627b      	str	r3, [r7, #36]	; 0x24
 80061fc:	79fb      	ldrb	r3, [r7, #7]
 80061fe:	623b      	str	r3, [r7, #32]
 8006200:	e00b      	b.n	800621a <SEGGER_SYSVIEW_SendModule+0x7e>
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	b2da      	uxtb	r2, r3
 8006206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006208:	1c59      	adds	r1, r3, #1
 800620a:	6279      	str	r1, [r7, #36]	; 0x24
 800620c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006210:	b2d2      	uxtb	r2, r2
 8006212:	701a      	strb	r2, [r3, #0]
 8006214:	6a3b      	ldr	r3, [r7, #32]
 8006216:	09db      	lsrs	r3, r3, #7
 8006218:	623b      	str	r3, [r7, #32]
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	2b7f      	cmp	r3, #127	; 0x7f
 800621e:	d8f0      	bhi.n	8006202 <SEGGER_SYSVIEW_SendModule+0x66>
 8006220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006222:	1c5a      	adds	r2, r3, #1
 8006224:	627a      	str	r2, [r7, #36]	; 0x24
 8006226:	6a3a      	ldr	r2, [r7, #32]
 8006228:	b2d2      	uxtb	r2, r2
 800622a:	701a      	strb	r2, [r3, #0]
 800622c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	61fb      	str	r3, [r7, #28]
 8006234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	61bb      	str	r3, [r7, #24]
 800623a:	e00b      	b.n	8006254 <SEGGER_SYSVIEW_SendModule+0xb8>
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	b2da      	uxtb	r2, r3
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	1c59      	adds	r1, r3, #1
 8006244:	61f9      	str	r1, [r7, #28]
 8006246:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800624a:	b2d2      	uxtb	r2, r2
 800624c:	701a      	strb	r2, [r3, #0]
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	09db      	lsrs	r3, r3, #7
 8006252:	61bb      	str	r3, [r7, #24]
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	2b7f      	cmp	r3, #127	; 0x7f
 8006258:	d8f0      	bhi.n	800623c <SEGGER_SYSVIEW_SendModule+0xa0>
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	1c5a      	adds	r2, r3, #1
 800625e:	61fa      	str	r2, [r7, #28]
 8006260:	69ba      	ldr	r2, [r7, #24]
 8006262:	b2d2      	uxtb	r2, r2
 8006264:	701a      	strb	r2, [r3, #0]
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800626a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2280      	movs	r2, #128	; 0x80
 8006270:	4619      	mov	r1, r3
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f7fe ff40 	bl	80050f8 <_EncodeStr>
 8006278:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800627a:	2216      	movs	r2, #22
 800627c:	68f9      	ldr	r1, [r7, #12]
 800627e:	6938      	ldr	r0, [r7, #16]
 8006280:	f7ff f87a 	bl	8005378 <_SendPacket>
      RECORD_END();
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800628a:	bf00      	nop
 800628c:	3730      	adds	r7, #48	; 0x30
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	20002e74 	.word	0x20002e74
 8006298:	20002e7c 	.word	0x20002e7c

0800629c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80062a2:	4b0c      	ldr	r3, [pc, #48]	; (80062d4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00f      	beq.n	80062ca <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80062aa:	4b0a      	ldr	r3, [pc, #40]	; (80062d4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1f2      	bne.n	80062b0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80062ca:	bf00      	nop
 80062cc:	3708      	adds	r7, #8
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	20002e74 	.word	0x20002e74

080062d8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80062d8:	b580      	push	{r7, lr}
 80062da:	b086      	sub	sp, #24
 80062dc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80062de:	f3ef 8311 	mrs	r3, BASEPRI
 80062e2:	f04f 0120 	mov.w	r1, #32
 80062e6:	f381 8811 	msr	BASEPRI, r1
 80062ea:	60fb      	str	r3, [r7, #12]
 80062ec:	4817      	ldr	r0, [pc, #92]	; (800634c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80062ee:	f7fe ff53 	bl	8005198 <_PreparePacket>
 80062f2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	617b      	str	r3, [r7, #20]
 80062fc:	4b14      	ldr	r3, [pc, #80]	; (8006350 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	613b      	str	r3, [r7, #16]
 8006302:	e00b      	b.n	800631c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	b2da      	uxtb	r2, r3
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	1c59      	adds	r1, r3, #1
 800630c:	6179      	str	r1, [r7, #20]
 800630e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006312:	b2d2      	uxtb	r2, r2
 8006314:	701a      	strb	r2, [r3, #0]
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	09db      	lsrs	r3, r3, #7
 800631a:	613b      	str	r3, [r7, #16]
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	2b7f      	cmp	r3, #127	; 0x7f
 8006320:	d8f0      	bhi.n	8006304 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	1c5a      	adds	r2, r3, #1
 8006326:	617a      	str	r2, [r7, #20]
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	b2d2      	uxtb	r2, r2
 800632c:	701a      	strb	r2, [r3, #0]
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006332:	221b      	movs	r2, #27
 8006334:	6879      	ldr	r1, [r7, #4]
 8006336:	68b8      	ldr	r0, [r7, #8]
 8006338:	f7ff f81e 	bl	8005378 <_SendPacket>
  RECORD_END();
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f383 8811 	msr	BASEPRI, r3
}
 8006342:	bf00      	nop
 8006344:	3718      	adds	r7, #24
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	20002e7c 	.word	0x20002e7c
 8006350:	20002e78 	.word	0x20002e78

08006354 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006354:	b580      	push	{r7, lr}
 8006356:	b08a      	sub	sp, #40	; 0x28
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800635c:	f3ef 8311 	mrs	r3, BASEPRI
 8006360:	f04f 0120 	mov.w	r1, #32
 8006364:	f381 8811 	msr	BASEPRI, r1
 8006368:	617b      	str	r3, [r7, #20]
 800636a:	4827      	ldr	r0, [pc, #156]	; (8006408 <SEGGER_SYSVIEW_Warn+0xb4>)
 800636c:	f7fe ff14 	bl	8005198 <_PreparePacket>
 8006370:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006372:	2280      	movs	r2, #128	; 0x80
 8006374:	6879      	ldr	r1, [r7, #4]
 8006376:	6938      	ldr	r0, [r7, #16]
 8006378:	f7fe febe 	bl	80050f8 <_EncodeStr>
 800637c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	627b      	str	r3, [r7, #36]	; 0x24
 8006382:	2301      	movs	r3, #1
 8006384:	623b      	str	r3, [r7, #32]
 8006386:	e00b      	b.n	80063a0 <SEGGER_SYSVIEW_Warn+0x4c>
 8006388:	6a3b      	ldr	r3, [r7, #32]
 800638a:	b2da      	uxtb	r2, r3
 800638c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638e:	1c59      	adds	r1, r3, #1
 8006390:	6279      	str	r1, [r7, #36]	; 0x24
 8006392:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006396:	b2d2      	uxtb	r2, r2
 8006398:	701a      	strb	r2, [r3, #0]
 800639a:	6a3b      	ldr	r3, [r7, #32]
 800639c:	09db      	lsrs	r3, r3, #7
 800639e:	623b      	str	r3, [r7, #32]
 80063a0:	6a3b      	ldr	r3, [r7, #32]
 80063a2:	2b7f      	cmp	r3, #127	; 0x7f
 80063a4:	d8f0      	bhi.n	8006388 <SEGGER_SYSVIEW_Warn+0x34>
 80063a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a8:	1c5a      	adds	r2, r3, #1
 80063aa:	627a      	str	r2, [r7, #36]	; 0x24
 80063ac:	6a3a      	ldr	r2, [r7, #32]
 80063ae:	b2d2      	uxtb	r2, r2
 80063b0:	701a      	strb	r2, [r3, #0]
 80063b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	61fb      	str	r3, [r7, #28]
 80063ba:	2300      	movs	r3, #0
 80063bc:	61bb      	str	r3, [r7, #24]
 80063be:	e00b      	b.n	80063d8 <SEGGER_SYSVIEW_Warn+0x84>
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	b2da      	uxtb	r2, r3
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	1c59      	adds	r1, r3, #1
 80063c8:	61f9      	str	r1, [r7, #28]
 80063ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063ce:	b2d2      	uxtb	r2, r2
 80063d0:	701a      	strb	r2, [r3, #0]
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	09db      	lsrs	r3, r3, #7
 80063d6:	61bb      	str	r3, [r7, #24]
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	2b7f      	cmp	r3, #127	; 0x7f
 80063dc:	d8f0      	bhi.n	80063c0 <SEGGER_SYSVIEW_Warn+0x6c>
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	1c5a      	adds	r2, r3, #1
 80063e2:	61fa      	str	r2, [r7, #28]
 80063e4:	69ba      	ldr	r2, [r7, #24]
 80063e6:	b2d2      	uxtb	r2, r2
 80063e8:	701a      	strb	r2, [r3, #0]
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80063ee:	221a      	movs	r2, #26
 80063f0:	68f9      	ldr	r1, [r7, #12]
 80063f2:	6938      	ldr	r0, [r7, #16]
 80063f4:	f7fe ffc0 	bl	8005378 <_SendPacket>
  RECORD_END();
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	f383 8811 	msr	BASEPRI, r3
}
 80063fe:	bf00      	nop
 8006400:	3728      	adds	r7, #40	; 0x28
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	20002e7c 	.word	0x20002e7c

0800640c <__libc_init_array>:
 800640c:	b570      	push	{r4, r5, r6, lr}
 800640e:	4d0d      	ldr	r5, [pc, #52]	; (8006444 <__libc_init_array+0x38>)
 8006410:	4c0d      	ldr	r4, [pc, #52]	; (8006448 <__libc_init_array+0x3c>)
 8006412:	1b64      	subs	r4, r4, r5
 8006414:	10a4      	asrs	r4, r4, #2
 8006416:	2600      	movs	r6, #0
 8006418:	42a6      	cmp	r6, r4
 800641a:	d109      	bne.n	8006430 <__libc_init_array+0x24>
 800641c:	4d0b      	ldr	r5, [pc, #44]	; (800644c <__libc_init_array+0x40>)
 800641e:	4c0c      	ldr	r4, [pc, #48]	; (8006450 <__libc_init_array+0x44>)
 8006420:	f000 f83c 	bl	800649c <_init>
 8006424:	1b64      	subs	r4, r4, r5
 8006426:	10a4      	asrs	r4, r4, #2
 8006428:	2600      	movs	r6, #0
 800642a:	42a6      	cmp	r6, r4
 800642c:	d105      	bne.n	800643a <__libc_init_array+0x2e>
 800642e:	bd70      	pop	{r4, r5, r6, pc}
 8006430:	f855 3b04 	ldr.w	r3, [r5], #4
 8006434:	4798      	blx	r3
 8006436:	3601      	adds	r6, #1
 8006438:	e7ee      	b.n	8006418 <__libc_init_array+0xc>
 800643a:	f855 3b04 	ldr.w	r3, [r5], #4
 800643e:	4798      	blx	r3
 8006440:	3601      	adds	r6, #1
 8006442:	e7f2      	b.n	800642a <__libc_init_array+0x1e>
 8006444:	08006598 	.word	0x08006598
 8006448:	08006598 	.word	0x08006598
 800644c:	08006598 	.word	0x08006598
 8006450:	0800659c 	.word	0x0800659c

08006454 <memcmp>:
 8006454:	b530      	push	{r4, r5, lr}
 8006456:	3901      	subs	r1, #1
 8006458:	2400      	movs	r4, #0
 800645a:	42a2      	cmp	r2, r4
 800645c:	d101      	bne.n	8006462 <memcmp+0xe>
 800645e:	2000      	movs	r0, #0
 8006460:	e005      	b.n	800646e <memcmp+0x1a>
 8006462:	5d03      	ldrb	r3, [r0, r4]
 8006464:	3401      	adds	r4, #1
 8006466:	5d0d      	ldrb	r5, [r1, r4]
 8006468:	42ab      	cmp	r3, r5
 800646a:	d0f6      	beq.n	800645a <memcmp+0x6>
 800646c:	1b58      	subs	r0, r3, r5
 800646e:	bd30      	pop	{r4, r5, pc}

08006470 <memcpy>:
 8006470:	440a      	add	r2, r1
 8006472:	4291      	cmp	r1, r2
 8006474:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006478:	d100      	bne.n	800647c <memcpy+0xc>
 800647a:	4770      	bx	lr
 800647c:	b510      	push	{r4, lr}
 800647e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006482:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006486:	4291      	cmp	r1, r2
 8006488:	d1f9      	bne.n	800647e <memcpy+0xe>
 800648a:	bd10      	pop	{r4, pc}

0800648c <memset>:
 800648c:	4402      	add	r2, r0
 800648e:	4603      	mov	r3, r0
 8006490:	4293      	cmp	r3, r2
 8006492:	d100      	bne.n	8006496 <memset+0xa>
 8006494:	4770      	bx	lr
 8006496:	f803 1b01 	strb.w	r1, [r3], #1
 800649a:	e7f9      	b.n	8006490 <memset+0x4>

0800649c <_init>:
 800649c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800649e:	bf00      	nop
 80064a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064a2:	bc08      	pop	{r3}
 80064a4:	469e      	mov	lr, r3
 80064a6:	4770      	bx	lr

080064a8 <_fini>:
 80064a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064aa:	bf00      	nop
 80064ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ae:	bc08      	pop	{r3}
 80064b0:	469e      	mov	lr, r3
 80064b2:	4770      	bx	lr
