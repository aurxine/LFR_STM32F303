
LFR_STM32F303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  0800aa38  0800aa38  0001aa38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acd8  0800acd8  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  0800acd8  0800acd8  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800acd8  0800acd8  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acd8  0800acd8  0001acd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acdc  0800acdc  0001acdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800ace0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003198  20000098  0800ad78  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003230  0800ad78  00023230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bd62  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003929  00000000  00000000  0003be2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001430  00000000  00000000  0003f758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001298  00000000  00000000  00040b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021421  00000000  00000000  00041e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001726a  00000000  00000000  00063241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c36da  00000000  00000000  0007a4ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013db85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000614c  00000000  00000000  0013dbd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aa20 	.word	0x0800aa20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800aa20 	.word	0x0800aa20

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20003178 	.word	0x20003178
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	; 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_dmul>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800068e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000692:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000696:	bf1d      	ittte	ne
 8000698:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800069c:	ea94 0f0c 	teqne	r4, ip
 80006a0:	ea95 0f0c 	teqne	r5, ip
 80006a4:	f000 f8de 	bleq	8000864 <__aeabi_dmul+0x1dc>
 80006a8:	442c      	add	r4, r5
 80006aa:	ea81 0603 	eor.w	r6, r1, r3
 80006ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ba:	bf18      	it	ne
 80006bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006c8:	d038      	beq.n	800073c <__aeabi_dmul+0xb4>
 80006ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ce:	f04f 0500 	mov.w	r5, #0
 80006d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006de:	f04f 0600 	mov.w	r6, #0
 80006e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006e6:	f09c 0f00 	teq	ip, #0
 80006ea:	bf18      	it	ne
 80006ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80006f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006fc:	d204      	bcs.n	8000708 <__aeabi_dmul+0x80>
 80006fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000702:	416d      	adcs	r5, r5
 8000704:	eb46 0606 	adc.w	r6, r6, r6
 8000708:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800070c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000710:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000714:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000718:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800071c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000720:	bf88      	it	hi
 8000722:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000726:	d81e      	bhi.n	8000766 <__aeabi_dmul+0xde>
 8000728:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800072c:	bf08      	it	eq
 800072e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000732:	f150 0000 	adcs.w	r0, r0, #0
 8000736:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000740:	ea46 0101 	orr.w	r1, r6, r1
 8000744:	ea40 0002 	orr.w	r0, r0, r2
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000750:	bfc2      	ittt	gt
 8000752:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000756:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800075a:	bd70      	popgt	{r4, r5, r6, pc}
 800075c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000760:	f04f 0e00 	mov.w	lr, #0
 8000764:	3c01      	subs	r4, #1
 8000766:	f300 80ab 	bgt.w	80008c0 <__aeabi_dmul+0x238>
 800076a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800076e:	bfde      	ittt	le
 8000770:	2000      	movle	r0, #0
 8000772:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000776:	bd70      	pople	{r4, r5, r6, pc}
 8000778:	f1c4 0400 	rsb	r4, r4, #0
 800077c:	3c20      	subs	r4, #32
 800077e:	da35      	bge.n	80007ec <__aeabi_dmul+0x164>
 8000780:	340c      	adds	r4, #12
 8000782:	dc1b      	bgt.n	80007bc <__aeabi_dmul+0x134>
 8000784:	f104 0414 	add.w	r4, r4, #20
 8000788:	f1c4 0520 	rsb	r5, r4, #32
 800078c:	fa00 f305 	lsl.w	r3, r0, r5
 8000790:	fa20 f004 	lsr.w	r0, r0, r4
 8000794:	fa01 f205 	lsl.w	r2, r1, r5
 8000798:	ea40 0002 	orr.w	r0, r0, r2
 800079c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a8:	fa21 f604 	lsr.w	r6, r1, r4
 80007ac:	eb42 0106 	adc.w	r1, r2, r6
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 040c 	rsb	r4, r4, #12
 80007c0:	f1c4 0520 	rsb	r5, r4, #32
 80007c4:	fa00 f304 	lsl.w	r3, r0, r4
 80007c8:	fa20 f005 	lsr.w	r0, r0, r5
 80007cc:	fa01 f204 	lsl.w	r2, r1, r4
 80007d0:	ea40 0002 	orr.w	r0, r0, r2
 80007d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007dc:	f141 0100 	adc.w	r1, r1, #0
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f1c4 0520 	rsb	r5, r4, #32
 80007f0:	fa00 f205 	lsl.w	r2, r0, r5
 80007f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007f8:	fa20 f304 	lsr.w	r3, r0, r4
 80007fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000800:	ea43 0302 	orr.w	r3, r3, r2
 8000804:	fa21 f004 	lsr.w	r0, r1, r4
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	fa21 f204 	lsr.w	r2, r1, r4
 8000810:	ea20 0002 	bic.w	r0, r0, r2
 8000814:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000818:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800081c:	bf08      	it	eq
 800081e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000822:	bd70      	pop	{r4, r5, r6, pc}
 8000824:	f094 0f00 	teq	r4, #0
 8000828:	d10f      	bne.n	800084a <__aeabi_dmul+0x1c2>
 800082a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800082e:	0040      	lsls	r0, r0, #1
 8000830:	eb41 0101 	adc.w	r1, r1, r1
 8000834:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3c01      	subeq	r4, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1a6>
 800083e:	ea41 0106 	orr.w	r1, r1, r6
 8000842:	f095 0f00 	teq	r5, #0
 8000846:	bf18      	it	ne
 8000848:	4770      	bxne	lr
 800084a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800084e:	0052      	lsls	r2, r2, #1
 8000850:	eb43 0303 	adc.w	r3, r3, r3
 8000854:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000858:	bf08      	it	eq
 800085a:	3d01      	subeq	r5, #1
 800085c:	d0f7      	beq.n	800084e <__aeabi_dmul+0x1c6>
 800085e:	ea43 0306 	orr.w	r3, r3, r6
 8000862:	4770      	bx	lr
 8000864:	ea94 0f0c 	teq	r4, ip
 8000868:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800086c:	bf18      	it	ne
 800086e:	ea95 0f0c 	teqne	r5, ip
 8000872:	d00c      	beq.n	800088e <__aeabi_dmul+0x206>
 8000874:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000878:	bf18      	it	ne
 800087a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087e:	d1d1      	bne.n	8000824 <__aeabi_dmul+0x19c>
 8000880:	ea81 0103 	eor.w	r1, r1, r3
 8000884:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000888:	f04f 0000 	mov.w	r0, #0
 800088c:	bd70      	pop	{r4, r5, r6, pc}
 800088e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000892:	bf06      	itte	eq
 8000894:	4610      	moveq	r0, r2
 8000896:	4619      	moveq	r1, r3
 8000898:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800089c:	d019      	beq.n	80008d2 <__aeabi_dmul+0x24a>
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	d102      	bne.n	80008aa <__aeabi_dmul+0x222>
 80008a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008a8:	d113      	bne.n	80008d2 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	d105      	bne.n	80008bc <__aeabi_dmul+0x234>
 80008b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008b4:	bf1c      	itt	ne
 80008b6:	4610      	movne	r0, r2
 80008b8:	4619      	movne	r1, r3
 80008ba:	d10a      	bne.n	80008d2 <__aeabi_dmul+0x24a>
 80008bc:	ea81 0103 	eor.w	r1, r1, r3
 80008c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008cc:	f04f 0000 	mov.w	r0, #0
 80008d0:	bd70      	pop	{r4, r5, r6, pc}
 80008d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008da:	bd70      	pop	{r4, r5, r6, pc}

080008dc <__aeabi_ddiv>:
 80008dc:	b570      	push	{r4, r5, r6, lr}
 80008de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ea:	bf1d      	ittte	ne
 80008ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008f0:	ea94 0f0c 	teqne	r4, ip
 80008f4:	ea95 0f0c 	teqne	r5, ip
 80008f8:	f000 f8a7 	bleq	8000a4a <__aeabi_ddiv+0x16e>
 80008fc:	eba4 0405 	sub.w	r4, r4, r5
 8000900:	ea81 0e03 	eor.w	lr, r1, r3
 8000904:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000908:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800090c:	f000 8088 	beq.w	8000a20 <__aeabi_ddiv+0x144>
 8000910:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000914:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000918:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800091c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000920:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000924:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000928:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800092c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000930:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000934:	429d      	cmp	r5, r3
 8000936:	bf08      	it	eq
 8000938:	4296      	cmpeq	r6, r2
 800093a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800093e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000942:	d202      	bcs.n	800094a <__aeabi_ddiv+0x6e>
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	1ab6      	subs	r6, r6, r2
 800094c:	eb65 0503 	sbc.w	r5, r5, r3
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800095a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000988:	085b      	lsrs	r3, r3, #1
 800098a:	ea4f 0232 	mov.w	r2, r2, rrx
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ae:	bf22      	ittt	cs
 80009b0:	1ab6      	subcs	r6, r6, r2
 80009b2:	4675      	movcs	r5, lr
 80009b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009bc:	d018      	beq.n	80009f0 <__aeabi_ddiv+0x114>
 80009be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009da:	d1c0      	bne.n	800095e <__aeabi_ddiv+0x82>
 80009dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009e0:	d10b      	bne.n	80009fa <__aeabi_ddiv+0x11e>
 80009e2:	ea41 0100 	orr.w	r1, r1, r0
 80009e6:	f04f 0000 	mov.w	r0, #0
 80009ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ee:	e7b6      	b.n	800095e <__aeabi_ddiv+0x82>
 80009f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009f4:	bf04      	itt	eq
 80009f6:	4301      	orreq	r1, r0
 80009f8:	2000      	moveq	r0, #0
 80009fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009fe:	bf88      	it	hi
 8000a00:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a04:	f63f aeaf 	bhi.w	8000766 <__aeabi_dmul+0xde>
 8000a08:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a0c:	bf04      	itt	eq
 8000a0e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a12:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a16:	f150 0000 	adcs.w	r0, r0, #0
 8000a1a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a1e:	bd70      	pop	{r4, r5, r6, pc}
 8000a20:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a24:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a28:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a2c:	bfc2      	ittt	gt
 8000a2e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a32:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a36:	bd70      	popgt	{r4, r5, r6, pc}
 8000a38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a3c:	f04f 0e00 	mov.w	lr, #0
 8000a40:	3c01      	subs	r4, #1
 8000a42:	e690      	b.n	8000766 <__aeabi_dmul+0xde>
 8000a44:	ea45 0e06 	orr.w	lr, r5, r6
 8000a48:	e68d      	b.n	8000766 <__aeabi_dmul+0xde>
 8000a4a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a4e:	ea94 0f0c 	teq	r4, ip
 8000a52:	bf08      	it	eq
 8000a54:	ea95 0f0c 	teqeq	r5, ip
 8000a58:	f43f af3b 	beq.w	80008d2 <__aeabi_dmul+0x24a>
 8000a5c:	ea94 0f0c 	teq	r4, ip
 8000a60:	d10a      	bne.n	8000a78 <__aeabi_ddiv+0x19c>
 8000a62:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a66:	f47f af34 	bne.w	80008d2 <__aeabi_dmul+0x24a>
 8000a6a:	ea95 0f0c 	teq	r5, ip
 8000a6e:	f47f af25 	bne.w	80008bc <__aeabi_dmul+0x234>
 8000a72:	4610      	mov	r0, r2
 8000a74:	4619      	mov	r1, r3
 8000a76:	e72c      	b.n	80008d2 <__aeabi_dmul+0x24a>
 8000a78:	ea95 0f0c 	teq	r5, ip
 8000a7c:	d106      	bne.n	8000a8c <__aeabi_ddiv+0x1b0>
 8000a7e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a82:	f43f aefd 	beq.w	8000880 <__aeabi_dmul+0x1f8>
 8000a86:	4610      	mov	r0, r2
 8000a88:	4619      	mov	r1, r3
 8000a8a:	e722      	b.n	80008d2 <__aeabi_dmul+0x24a>
 8000a8c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a96:	f47f aec5 	bne.w	8000824 <__aeabi_dmul+0x19c>
 8000a9a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a9e:	f47f af0d 	bne.w	80008bc <__aeabi_dmul+0x234>
 8000aa2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000aa6:	f47f aeeb 	bne.w	8000880 <__aeabi_dmul+0x1f8>
 8000aaa:	e712      	b.n	80008d2 <__aeabi_dmul+0x24a>

08000aac <__gedf2>:
 8000aac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000ab0:	e006      	b.n	8000ac0 <__cmpdf2+0x4>
 8000ab2:	bf00      	nop

08000ab4 <__ledf2>:
 8000ab4:	f04f 0c01 	mov.w	ip, #1
 8000ab8:	e002      	b.n	8000ac0 <__cmpdf2+0x4>
 8000aba:	bf00      	nop

08000abc <__cmpdf2>:
 8000abc:	f04f 0c01 	mov.w	ip, #1
 8000ac0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad0:	bf18      	it	ne
 8000ad2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ad6:	d01b      	beq.n	8000b10 <__cmpdf2+0x54>
 8000ad8:	b001      	add	sp, #4
 8000ada:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ade:	bf0c      	ite	eq
 8000ae0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ae4:	ea91 0f03 	teqne	r1, r3
 8000ae8:	bf02      	ittt	eq
 8000aea:	ea90 0f02 	teqeq	r0, r2
 8000aee:	2000      	moveq	r0, #0
 8000af0:	4770      	bxeq	lr
 8000af2:	f110 0f00 	cmn.w	r0, #0
 8000af6:	ea91 0f03 	teq	r1, r3
 8000afa:	bf58      	it	pl
 8000afc:	4299      	cmppl	r1, r3
 8000afe:	bf08      	it	eq
 8000b00:	4290      	cmpeq	r0, r2
 8000b02:	bf2c      	ite	cs
 8000b04:	17d8      	asrcs	r0, r3, #31
 8000b06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b0a:	f040 0001 	orr.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__cmpdf2+0x64>
 8000b1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b1e:	d107      	bne.n	8000b30 <__cmpdf2+0x74>
 8000b20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d1d6      	bne.n	8000ad8 <__cmpdf2+0x1c>
 8000b2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b2e:	d0d3      	beq.n	8000ad8 <__cmpdf2+0x1c>
 8000b30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <__aeabi_cdrcmple>:
 8000b38:	4684      	mov	ip, r0
 8000b3a:	4610      	mov	r0, r2
 8000b3c:	4662      	mov	r2, ip
 8000b3e:	468c      	mov	ip, r1
 8000b40:	4619      	mov	r1, r3
 8000b42:	4663      	mov	r3, ip
 8000b44:	e000      	b.n	8000b48 <__aeabi_cdcmpeq>
 8000b46:	bf00      	nop

08000b48 <__aeabi_cdcmpeq>:
 8000b48:	b501      	push	{r0, lr}
 8000b4a:	f7ff ffb7 	bl	8000abc <__cmpdf2>
 8000b4e:	2800      	cmp	r0, #0
 8000b50:	bf48      	it	mi
 8000b52:	f110 0f00 	cmnmi.w	r0, #0
 8000b56:	bd01      	pop	{r0, pc}

08000b58 <__aeabi_dcmpeq>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff fff4 	bl	8000b48 <__aeabi_cdcmpeq>
 8000b60:	bf0c      	ite	eq
 8000b62:	2001      	moveq	r0, #1
 8000b64:	2000      	movne	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmplt>:
 8000b6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b70:	f7ff ffea 	bl	8000b48 <__aeabi_cdcmpeq>
 8000b74:	bf34      	ite	cc
 8000b76:	2001      	movcc	r0, #1
 8000b78:	2000      	movcs	r0, #0
 8000b7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7e:	bf00      	nop

08000b80 <__aeabi_dcmple>:
 8000b80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b84:	f7ff ffe0 	bl	8000b48 <__aeabi_cdcmpeq>
 8000b88:	bf94      	ite	ls
 8000b8a:	2001      	movls	r0, #1
 8000b8c:	2000      	movhi	r0, #0
 8000b8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b92:	bf00      	nop

08000b94 <__aeabi_dcmpge>:
 8000b94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b98:	f7ff ffce 	bl	8000b38 <__aeabi_cdrcmple>
 8000b9c:	bf94      	ite	ls
 8000b9e:	2001      	movls	r0, #1
 8000ba0:	2000      	movhi	r0, #0
 8000ba2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_dcmpgt>:
 8000ba8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bac:	f7ff ffc4 	bl	8000b38 <__aeabi_cdrcmple>
 8000bb0:	bf34      	ite	cc
 8000bb2:	2001      	movcc	r0, #1
 8000bb4:	2000      	movcs	r0, #0
 8000bb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bba:	bf00      	nop

08000bbc <__aeabi_dcmpun>:
 8000bbc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bc4:	d102      	bne.n	8000bcc <__aeabi_dcmpun+0x10>
 8000bc6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bca:	d10a      	bne.n	8000be2 <__aeabi_dcmpun+0x26>
 8000bcc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bd4:	d102      	bne.n	8000bdc <__aeabi_dcmpun+0x20>
 8000bd6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_dcmpun+0x26>
 8000bdc:	f04f 0000 	mov.w	r0, #0
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0001 	mov.w	r0, #1
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2iz>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d215      	bcs.n	8000c1e <__aeabi_d2iz+0x36>
 8000bf2:	d511      	bpl.n	8000c18 <__aeabi_d2iz+0x30>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d912      	bls.n	8000c24 <__aeabi_d2iz+0x3c>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c12:	bf18      	it	ne
 8000c14:	4240      	negne	r0, r0
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d105      	bne.n	8000c30 <__aeabi_d2iz+0x48>
 8000c24:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	bf08      	it	eq
 8000c2a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c3e:	f000 fe91 	bl	8001964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c42:	f000 f855 	bl	8000cf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c46:	f000 f9cb 	bl	8000fe0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000c4a:	f000 f8a9 	bl	8000da0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000c4e:	f000 f8fb 	bl	8000e48 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000c52:	f000 f95f 	bl	8000f14 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL |= (1 << 0);
 8000c56:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <main+0xa0>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a1f      	ldr	r2, [pc, #124]	; (8000cd8 <main+0xa0>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6013      	str	r3, [r2, #0]

//  SEGGER_SYSVIEW_Conf();
//
//  SEGGER_SYSVIEW_Start();
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // Starting PWM
 8000c62:	2104      	movs	r1, #4
 8000c64:	481d      	ldr	r0, [pc, #116]	; (8000cdc <main+0xa4>)
 8000c66:	f002 fd57 	bl	8003718 <HAL_TIM_PWM_Start>

  status = xTaskCreate(svIRSensorReadTask, "IR_Sensor_Reading_Task", 200, NULL, 3, &IR_sensor_task_handle);
 8000c6a:	f107 0308 	add.w	r3, r7, #8
 8000c6e:	9301      	str	r3, [sp, #4]
 8000c70:	2303      	movs	r3, #3
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	2300      	movs	r3, #0
 8000c76:	22c8      	movs	r2, #200	; 0xc8
 8000c78:	4919      	ldr	r1, [pc, #100]	; (8000ce0 <main+0xa8>)
 8000c7a:	481a      	ldr	r0, [pc, #104]	; (8000ce4 <main+0xac>)
 8000c7c:	f004 fc3c 	bl	80054f8 <xTaskCreate>
 8000c80:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d00a      	beq.n	8000c9e <main+0x66>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c8c:	f383 8811 	msr	BASEPRI, r3
 8000c90:	f3bf 8f6f 	isb	sy
 8000c94:	f3bf 8f4f 	dsb	sy
 8000c98:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000c9a:	bf00      	nop
 8000c9c:	e7fe      	b.n	8000c9c <main+0x64>

  status = xTaskCreate(svMotorRunTask, "Motor_Run_Task", 400, NULL, 4, &motor_run_task_handle);
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	9301      	str	r3, [sp, #4]
 8000ca2:	2304      	movs	r3, #4
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000cac:	490e      	ldr	r1, [pc, #56]	; (8000ce8 <main+0xb0>)
 8000cae:	480f      	ldr	r0, [pc, #60]	; (8000cec <main+0xb4>)
 8000cb0:	f004 fc22 	bl	80054f8 <xTaskCreate>
 8000cb4:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d00a      	beq.n	8000cd2 <main+0x9a>
        __asm volatile
 8000cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cc0:	f383 8811 	msr	BASEPRI, r3
 8000cc4:	f3bf 8f6f 	isb	sy
 8000cc8:	f3bf 8f4f 	dsb	sy
 8000ccc:	60fb      	str	r3, [r7, #12]
    }
 8000cce:	bf00      	nop
 8000cd0:	e7fe      	b.n	8000cd0 <main+0x98>

  vTaskStartScheduler();
 8000cd2:	f004 fd75 	bl	80057c0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <main+0x9e>
 8000cd8:	e0001000 	.word	0xe0001000
 8000cdc:	20003090 	.word	0x20003090
 8000ce0:	0800aa38 	.word	0x0800aa38
 8000ce4:	08001161 	.word	0x08001161
 8000ce8:	0800aa50 	.word	0x0800aa50
 8000cec:	0800134d 	.word	0x0800134d

08000cf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b09e      	sub	sp, #120	; 0x78
 8000cf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cf6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000cfa:	2228      	movs	r2, #40	; 0x28
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f007 ff4a 	bl	8008b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d04:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d14:	463b      	mov	r3, r7
 8000d16:	223c      	movs	r2, #60	; 0x3c
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f007 ff3c 	bl	8008b98 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d20:	2302      	movs	r3, #2
 8000d22:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d24:	2301      	movs	r3, #1
 8000d26:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d28:	2310      	movs	r3, #16
 8000d2a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d30:	2300      	movs	r3, #0
 8000d32:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000d34:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8000d38:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d3a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f001 f8d2 	bl	8001ee8 <HAL_RCC_OscConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000d4a:	f000 fc07 	bl	800155c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d4e:	230f      	movs	r3, #15
 8000d50:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d52:	2302      	movs	r3, #2
 8000d54:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d56:	2300      	movs	r3, #0
 8000d58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d68:	2101      	movs	r1, #1
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f001 ffc4 	bl	8002cf8 <HAL_RCC_ClockConfig>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000d76:	f000 fbf1 	bl	800155c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000d7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000d80:	2300      	movs	r3, #0
 8000d82:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d84:	463b      	mov	r3, r7
 8000d86:	4618      	mov	r0, r3
 8000d88:	f002 f9fc 	bl	8003184 <HAL_RCCEx_PeriphCLKConfig>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000d92:	f000 fbe3 	bl	800155c <Error_Handler>
  }
}
 8000d96:	bf00      	nop
 8000d98:	3778      	adds	r7, #120	; 0x78
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000da6:	f107 0310 	add.w	r3, r7, #16
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dbe:	4b20      	ldr	r3, [pc, #128]	; (8000e40 <MX_TIM1_Init+0xa0>)
 8000dc0:	4a20      	ldr	r2, [pc, #128]	; (8000e44 <MX_TIM1_Init+0xa4>)
 8000dc2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000dc4:	4b1e      	ldr	r3, [pc, #120]	; (8000e40 <MX_TIM1_Init+0xa0>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dca:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <MX_TIM1_Init+0xa0>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000dd0:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <MX_TIM1_Init+0xa0>)
 8000dd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dd6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd8:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <MX_TIM1_Init+0xa0>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dde:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <MX_TIM1_Init+0xa0>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de4:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <MX_TIM1_Init+0xa0>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dea:	4815      	ldr	r0, [pc, #84]	; (8000e40 <MX_TIM1_Init+0xa0>)
 8000dec:	f002 fb7a 	bl	80034e4 <HAL_TIM_Base_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000df6:	f000 fbb1 	bl	800155c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dfe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	4619      	mov	r1, r3
 8000e06:	480e      	ldr	r0, [pc, #56]	; (8000e40 <MX_TIM1_Init+0xa0>)
 8000e08:	f002 ffb6 	bl	8003d78 <HAL_TIM_ConfigClockSource>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000e12:	f000 fba3 	bl	800155c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e16:	2300      	movs	r3, #0
 8000e18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	4619      	mov	r1, r3
 8000e26:	4806      	ldr	r0, [pc, #24]	; (8000e40 <MX_TIM1_Init+0xa0>)
 8000e28:	f003 fcba 	bl	80047a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000e32:	f000 fb93 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	3720      	adds	r7, #32
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20003090 	.word	0x20003090
 8000e44:	40012c00 	.word	0x40012c00

08000e48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e4e:	f107 031c 	add.w	r3, r7, #28
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
 8000e68:	615a      	str	r2, [r3, #20]
 8000e6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e6c:	4b27      	ldr	r3, [pc, #156]	; (8000f0c <MX_TIM3_Init+0xc4>)
 8000e6e:	4a28      	ldr	r2, [pc, #160]	; (8000f10 <MX_TIM3_Init+0xc8>)
 8000e70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 8000e72:	4b26      	ldr	r3, [pc, #152]	; (8000f0c <MX_TIM3_Init+0xc4>)
 8000e74:	222f      	movs	r2, #47	; 0x2f
 8000e76:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e78:	4b24      	ldr	r3, [pc, #144]	; (8000f0c <MX_TIM3_Init+0xc4>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000e7e:	4b23      	ldr	r3, [pc, #140]	; (8000f0c <MX_TIM3_Init+0xc4>)
 8000e80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e84:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e86:	4b21      	ldr	r3, [pc, #132]	; (8000f0c <MX_TIM3_Init+0xc4>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8c:	4b1f      	ldr	r3, [pc, #124]	; (8000f0c <MX_TIM3_Init+0xc4>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e92:	481e      	ldr	r0, [pc, #120]	; (8000f0c <MX_TIM3_Init+0xc4>)
 8000e94:	f002 fbe8 	bl	8003668 <HAL_TIM_PWM_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000e9e:	f000 fb5d 	bl	800155c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000eaa:	f107 031c 	add.w	r3, r7, #28
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4816      	ldr	r0, [pc, #88]	; (8000f0c <MX_TIM3_Init+0xc4>)
 8000eb2:	f003 fc75 	bl	80047a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000ebc:	f000 fb4e 	bl	800155c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ec0:	2360      	movs	r3, #96	; 0x60
 8000ec2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	480d      	ldr	r0, [pc, #52]	; (8000f0c <MX_TIM3_Init+0xc4>)
 8000ed8:	f002 fe3e 	bl	8003b58 <HAL_TIM_PWM_ConfigChannel>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000ee2:	f000 fb3b 	bl	800155c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	2204      	movs	r2, #4
 8000eea:	4619      	mov	r1, r3
 8000eec:	4807      	ldr	r0, [pc, #28]	; (8000f0c <MX_TIM3_Init+0xc4>)
 8000eee:	f002 fe33 	bl	8003b58 <HAL_TIM_PWM_ConfigChannel>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000ef8:	f000 fb30 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000efc:	4803      	ldr	r0, [pc, #12]	; (8000f0c <MX_TIM3_Init+0xc4>)
 8000efe:	f000 fbab 	bl	8001658 <HAL_TIM_MspPostInit>

}
 8000f02:	bf00      	nop
 8000f04:	3728      	adds	r7, #40	; 0x28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20003044 	.word	0x20003044
 8000f10:	40000400 	.word	0x40000400

08000f14 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	; 0x28
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f1a:	f107 031c 	add.w	r3, r7, #28
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f26:	463b      	mov	r3, r7
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
 8000f34:	615a      	str	r2, [r3, #20]
 8000f36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f38:	4b27      	ldr	r3, [pc, #156]	; (8000fd8 <MX_TIM4_Init+0xc4>)
 8000f3a:	4a28      	ldr	r2, [pc, #160]	; (8000fdc <MX_TIM4_Init+0xc8>)
 8000f3c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 47;
 8000f3e:	4b26      	ldr	r3, [pc, #152]	; (8000fd8 <MX_TIM4_Init+0xc4>)
 8000f40:	222f      	movs	r2, #47	; 0x2f
 8000f42:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f44:	4b24      	ldr	r3, [pc, #144]	; (8000fd8 <MX_TIM4_Init+0xc4>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000f4a:	4b23      	ldr	r3, [pc, #140]	; (8000fd8 <MX_TIM4_Init+0xc4>)
 8000f4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f50:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f52:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <MX_TIM4_Init+0xc4>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f58:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <MX_TIM4_Init+0xc4>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f5e:	481e      	ldr	r0, [pc, #120]	; (8000fd8 <MX_TIM4_Init+0xc4>)
 8000f60:	f002 fb82 	bl	8003668 <HAL_TIM_PWM_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000f6a:	f000 faf7 	bl	800155c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f72:	2300      	movs	r3, #0
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f76:	f107 031c 	add.w	r3, r7, #28
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4816      	ldr	r0, [pc, #88]	; (8000fd8 <MX_TIM4_Init+0xc4>)
 8000f7e:	f003 fc0f 	bl	80047a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000f88:	f000 fae8 	bl	800155c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f8c:	2360      	movs	r3, #96	; 0x60
 8000f8e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <MX_TIM4_Init+0xc4>)
 8000fa4:	f002 fdd8 	bl	8003b58 <HAL_TIM_PWM_ConfigChannel>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000fae:	f000 fad5 	bl	800155c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	2204      	movs	r2, #4
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4807      	ldr	r0, [pc, #28]	; (8000fd8 <MX_TIM4_Init+0xc4>)
 8000fba:	f002 fdcd 	bl	8003b58 <HAL_TIM_PWM_ConfigChannel>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000fc4:	f000 faca 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000fc8:	4803      	ldr	r0, [pc, #12]	; (8000fd8 <MX_TIM4_Init+0xc4>)
 8000fca:	f000 fb45 	bl	8001658 <HAL_TIM_MspPostInit>

}
 8000fce:	bf00      	nop
 8000fd0:	3728      	adds	r7, #40	; 0x28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20002ff8 	.word	0x20002ff8
 8000fdc:	40000800 	.word	0x40000800

08000fe0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08c      	sub	sp, #48	; 0x30
 8000fe4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe6:	f107 031c 	add.w	r3, r7, #28
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
 8000ff4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ff6:	4b56      	ldr	r3, [pc, #344]	; (8001150 <MX_GPIO_Init+0x170>)
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	4a55      	ldr	r2, [pc, #340]	; (8001150 <MX_GPIO_Init+0x170>)
 8000ffc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001000:	6153      	str	r3, [r2, #20]
 8001002:	4b53      	ldr	r3, [pc, #332]	; (8001150 <MX_GPIO_Init+0x170>)
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800100a:	61bb      	str	r3, [r7, #24]
 800100c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100e:	4b50      	ldr	r3, [pc, #320]	; (8001150 <MX_GPIO_Init+0x170>)
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	4a4f      	ldr	r2, [pc, #316]	; (8001150 <MX_GPIO_Init+0x170>)
 8001014:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001018:	6153      	str	r3, [r2, #20]
 800101a:	4b4d      	ldr	r3, [pc, #308]	; (8001150 <MX_GPIO_Init+0x170>)
 800101c:	695b      	ldr	r3, [r3, #20]
 800101e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001026:	4b4a      	ldr	r3, [pc, #296]	; (8001150 <MX_GPIO_Init+0x170>)
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	4a49      	ldr	r2, [pc, #292]	; (8001150 <MX_GPIO_Init+0x170>)
 800102c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001030:	6153      	str	r3, [r2, #20]
 8001032:	4b47      	ldr	r3, [pc, #284]	; (8001150 <MX_GPIO_Init+0x170>)
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	4b44      	ldr	r3, [pc, #272]	; (8001150 <MX_GPIO_Init+0x170>)
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	4a43      	ldr	r2, [pc, #268]	; (8001150 <MX_GPIO_Init+0x170>)
 8001044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001048:	6153      	str	r3, [r2, #20]
 800104a:	4b41      	ldr	r3, [pc, #260]	; (8001150 <MX_GPIO_Init+0x170>)
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001056:	4b3e      	ldr	r3, [pc, #248]	; (8001150 <MX_GPIO_Init+0x170>)
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	4a3d      	ldr	r2, [pc, #244]	; (8001150 <MX_GPIO_Init+0x170>)
 800105c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001060:	6153      	str	r3, [r2, #20]
 8001062:	4b3b      	ldr	r3, [pc, #236]	; (8001150 <MX_GPIO_Init+0x170>)
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106e:	4b38      	ldr	r3, [pc, #224]	; (8001150 <MX_GPIO_Init+0x170>)
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	4a37      	ldr	r2, [pc, #220]	; (8001150 <MX_GPIO_Init+0x170>)
 8001074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001078:	6153      	str	r3, [r2, #20]
 800107a:	4b35      	ldr	r3, [pc, #212]	; (8001150 <MX_GPIO_Init+0x170>)
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001086:	2200      	movs	r2, #0
 8001088:	f64f 7108 	movw	r1, #65288	; 0xff08
 800108c:	4831      	ldr	r0, [pc, #196]	; (8001154 <MX_GPIO_Init+0x174>)
 800108e:	f000 ff13 	bl	8001eb8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8001092:	2337      	movs	r3, #55	; 0x37
 8001094:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001096:	4b30      	ldr	r3, [pc, #192]	; (8001158 <MX_GPIO_Init+0x178>)
 8001098:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800109e:	f107 031c 	add.w	r3, r7, #28
 80010a2:	4619      	mov	r1, r3
 80010a4:	482b      	ldr	r0, [pc, #172]	; (8001154 <MX_GPIO_Init+0x174>)
 80010a6:	f000 fd75 	bl	8001b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           PE11 LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80010aa:	f64f 7308 	movw	r3, #65288	; 0xff08
 80010ae:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b0:	2301      	movs	r3, #1
 80010b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010bc:	f107 031c 	add.w	r3, r7, #28
 80010c0:	4619      	mov	r1, r3
 80010c2:	4824      	ldr	r0, [pc, #144]	; (8001154 <MX_GPIO_Init+0x174>)
 80010c4:	f000 fd66 	bl	8001b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010c8:	2301      	movs	r3, #1
 80010ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010cc:	2300      	movs	r3, #0
 80010ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010d4:	f107 031c 	add.w	r3, r7, #28
 80010d8:	4619      	mov	r1, r3
 80010da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010de:	f000 fd59 	bl	8001b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80010e2:	23e0      	movs	r3, #224	; 0xe0
 80010e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2300      	movs	r3, #0
 80010f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010f2:	2305      	movs	r3, #5
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f6:	f107 031c 	add.w	r3, r7, #28
 80010fa:	4619      	mov	r1, r3
 80010fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001100:	f000 fd48 	bl	8001b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001104:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001112:	2303      	movs	r3, #3
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001116:	230e      	movs	r3, #14
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111a:	f107 031c 	add.w	r3, r7, #28
 800111e:	4619      	mov	r1, r3
 8001120:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001124:	f000 fd36 	bl	8001b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001128:	23c0      	movs	r3, #192	; 0xc0
 800112a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800112c:	2312      	movs	r3, #18
 800112e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001130:	2301      	movs	r3, #1
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2300      	movs	r3, #0
 8001136:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001138:	2304      	movs	r3, #4
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	4619      	mov	r1, r3
 8001142:	4806      	ldr	r0, [pc, #24]	; (800115c <MX_GPIO_Init+0x17c>)
 8001144:	f000 fd26 	bl	8001b94 <HAL_GPIO_Init>

}
 8001148:	bf00      	nop
 800114a:	3730      	adds	r7, #48	; 0x30
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40021000 	.word	0x40021000
 8001154:	48001000 	.word	0x48001000
 8001158:	10120000 	.word	0x10120000
 800115c:	48000400 	.word	0x48000400

08001160 <svIRSensorReadTask>:

/* USER CODE BEGIN 4 */
static void svIRSensorReadTask(void* parameters)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	while(1)
	{
		uint8_t sensor_data = ucReadAllIRSensors();
 8001168:	f000 f80e 	bl	8001188 <ucReadAllIRSensors>
 800116c:	4603      	mov	r3, r0
 800116e:	73fb      	strb	r3, [r7, #15]
		error = iExponentialWeightedError(sensor_data, 2);
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	2102      	movs	r1, #2
 8001174:	4618      	mov	r0, r3
 8001176:	f000 f84d 	bl	8001214 <iExponentialWeightedError>
 800117a:	4603      	mov	r3, r0
 800117c:	4a01      	ldr	r2, [pc, #4]	; (8001184 <svIRSensorReadTask+0x24>)
 800117e:	6013      	str	r3, [r2, #0]
	{
 8001180:	e7f2      	b.n	8001168 <svIRSensorReadTask+0x8>
 8001182:	bf00      	nop
 8001184:	200030dc 	.word	0x200030dc

08001188 <ucReadAllIRSensors>:
	}
}

uint8_t ucReadAllIRSensors()
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
	uint8_t sensor_vals = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	71fb      	strb	r3, [r7, #7]

	for(int i = 0; i < TOTAL_IR_SENSORS; i++)
 8001192:	2300      	movs	r3, #0
 8001194:	603b      	str	r3, [r7, #0]
 8001196:	e033      	b.n	8001200 <ucReadAllIRSensors+0x78>
	{
		HAL_GPIO_WritePin(S0_PORT, S0, i & (1 << 0));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	461a      	mov	r2, r3
 80011a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011a8:	4819      	ldr	r0, [pc, #100]	; (8001210 <ucReadAllIRSensors+0x88>)
 80011aa:	f000 fe85 	bl	8001eb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S1_PORT, S1, i & (1 << 1));
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	461a      	mov	r2, r3
 80011ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011be:	4814      	ldr	r0, [pc, #80]	; (8001210 <ucReadAllIRSensors+0x88>)
 80011c0:	f000 fe7a 	bl	8001eb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S2_PORT, S2, i & (1 << 2));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	f003 0304 	and.w	r3, r3, #4
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	461a      	mov	r2, r3
 80011d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d4:	480e      	ldr	r0, [pc, #56]	; (8001210 <ucReadAllIRSensors+0x88>)
 80011d6:	f000 fe6f 	bl	8001eb8 <HAL_GPIO_WritePin>

		sensor_vals |= HAL_GPIO_ReadPin(IR_CHANNEL_PORT, IR_CHANNEL) << i;
 80011da:	2101      	movs	r1, #1
 80011dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e0:	f000 fe52 	bl	8001e88 <HAL_GPIO_ReadPin>
 80011e4:	4603      	mov	r3, r0
 80011e6:	461a      	mov	r2, r3
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	b25a      	sxtb	r2, r3
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	b25b      	sxtb	r3, r3
 80011f8:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < TOTAL_IR_SENSORS; i++)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	3301      	adds	r3, #1
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	2b07      	cmp	r3, #7
 8001204:	ddc8      	ble.n	8001198 <ucReadAllIRSensors+0x10>
	}

	return sensor_vals;
 8001206:	79fb      	ldrb	r3, [r7, #7]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	48001000 	.word	0x48001000

08001214 <iExponentialWeightedError>:
 * 			errors are exponentially increasing from the center
 *
 *
 * */
int iExponentialWeightedError(uint8_t sensor_data, int weight)
{
 8001214:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001218:	b086      	sub	sp, #24
 800121a:	af00      	add	r7, sp, #0
 800121c:	4603      	mov	r3, r0
 800121e:	6039      	str	r1, [r7, #0]
 8001220:	71fb      	strb	r3, [r7, #7]
	int error = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]

	for(int i = 1; i <= TOTAL_IR_SENSORS/2; i++)
 8001226:	2301      	movs	r3, #1
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	e03f      	b.n	80012ac <iExponentialWeightedError+0x98>
	{
		error += ((sensor_data & (1 << (TOTAL_IR_SENSORS/2 - i))) >> (TOTAL_IR_SENSORS/2 - i)) * pow(weight, i);
 800122c:	79fa      	ldrb	r2, [r7, #7]
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	f1c3 0304 	rsb	r3, r3, #4
 8001234:	2101      	movs	r1, #1
 8001236:	fa01 f303 	lsl.w	r3, r1, r3
 800123a:	401a      	ands	r2, r3
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	f1c3 0304 	rsb	r3, r3, #4
 8001242:	fa42 f303 	asr.w	r3, r2, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff f9b4 	bl	80005b4 <__aeabi_i2d>
 800124c:	4604      	mov	r4, r0
 800124e:	460d      	mov	r5, r1
 8001250:	6838      	ldr	r0, [r7, #0]
 8001252:	f7ff f9af 	bl	80005b4 <__aeabi_i2d>
 8001256:	4680      	mov	r8, r0
 8001258:	4689      	mov	r9, r1
 800125a:	6938      	ldr	r0, [r7, #16]
 800125c:	f7ff f9aa 	bl	80005b4 <__aeabi_i2d>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	ec43 2b11 	vmov	d1, r2, r3
 8001268:	ec49 8b10 	vmov	d0, r8, r9
 800126c:	f008 fc14 	bl	8009a98 <pow>
 8001270:	ec53 2b10 	vmov	r2, r3, d0
 8001274:	4620      	mov	r0, r4
 8001276:	4629      	mov	r1, r5
 8001278:	f7ff fa06 	bl	8000688 <__aeabi_dmul>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4614      	mov	r4, r2
 8001282:	461d      	mov	r5, r3
 8001284:	6978      	ldr	r0, [r7, #20]
 8001286:	f7ff f995 	bl	80005b4 <__aeabi_i2d>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4620      	mov	r0, r4
 8001290:	4629      	mov	r1, r5
 8001292:	f7ff f843 	bl	800031c <__adddf3>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4610      	mov	r0, r2
 800129c:	4619      	mov	r1, r3
 800129e:	f7ff fca3 	bl	8000be8 <__aeabi_d2iz>
 80012a2:	4603      	mov	r3, r0
 80012a4:	617b      	str	r3, [r7, #20]
	for(int i = 1; i <= TOTAL_IR_SENSORS/2; i++)
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	3301      	adds	r3, #1
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	ddbc      	ble.n	800122c <iExponentialWeightedError+0x18>
	}


	for(int i = 0; i < TOTAL_IR_SENSORS/2; i++)
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	e040      	b.n	800133a <iExponentialWeightedError+0x126>
	{
 		error += ((sensor_data & (1 << (TOTAL_IR_SENSORS/2 + i))) >> (TOTAL_IR_SENSORS/2 + i)) * -1* pow(weight, i + 1);
 80012b8:	79fa      	ldrb	r2, [r7, #7]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	3304      	adds	r3, #4
 80012be:	2101      	movs	r1, #1
 80012c0:	fa01 f303 	lsl.w	r3, r1, r3
 80012c4:	401a      	ands	r2, r3
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	3304      	adds	r3, #4
 80012ca:	fa42 f303 	asr.w	r3, r2, r3
 80012ce:	425b      	negs	r3, r3
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff f96f 	bl	80005b4 <__aeabi_i2d>
 80012d6:	4604      	mov	r4, r0
 80012d8:	460d      	mov	r5, r1
 80012da:	6838      	ldr	r0, [r7, #0]
 80012dc:	f7ff f96a 	bl	80005b4 <__aeabi_i2d>
 80012e0:	4680      	mov	r8, r0
 80012e2:	4689      	mov	r9, r1
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	3301      	adds	r3, #1
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff f963 	bl	80005b4 <__aeabi_i2d>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	ec43 2b11 	vmov	d1, r2, r3
 80012f6:	ec49 8b10 	vmov	d0, r8, r9
 80012fa:	f008 fbcd 	bl	8009a98 <pow>
 80012fe:	ec53 2b10 	vmov	r2, r3, d0
 8001302:	4620      	mov	r0, r4
 8001304:	4629      	mov	r1, r5
 8001306:	f7ff f9bf 	bl	8000688 <__aeabi_dmul>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4614      	mov	r4, r2
 8001310:	461d      	mov	r5, r3
 8001312:	6978      	ldr	r0, [r7, #20]
 8001314:	f7ff f94e 	bl	80005b4 <__aeabi_i2d>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4620      	mov	r0, r4
 800131e:	4629      	mov	r1, r5
 8001320:	f7fe fffc 	bl	800031c <__adddf3>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	f7ff fc5c 	bl	8000be8 <__aeabi_d2iz>
 8001330:	4603      	mov	r3, r0
 8001332:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < TOTAL_IR_SENSORS/2; i++)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	3301      	adds	r3, #1
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2b03      	cmp	r3, #3
 800133e:	ddbb      	ble.n	80012b8 <iExponentialWeightedError+0xa4>
	}

	return error;
 8001340:	697b      	ldr	r3, [r7, #20]
}
 8001342:	4618      	mov	r0, r3
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800134c <svMotorRunTask>:
	return error;
}


static void svMotorRunTask(void* parameters)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	while(1)
	{
		int pid_val = iPID();
 8001354:	f000 f89a 	bl	800148c <iPID>
 8001358:	6178      	str	r0, [r7, #20]
		int left_motor_speed = Kl*pid_val + left_motor_base_speed;
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	ee07 3a90 	vmov	s15, r3
 8001360:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001364:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <svMotorRunTask+0x68>)
 8001366:	edd3 7a00 	vldr	s15, [r3]
 800136a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800136e:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <svMotorRunTask+0x6c>)
 8001370:	edd3 7a00 	vldr	s15, [r3]
 8001374:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001378:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800137c:	ee17 3a90 	vmov	r3, s15
 8001380:	613b      	str	r3, [r7, #16]
		int right_motor_speed = Kr*pid_val + right_motor_base_speed;
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	ee07 3a90 	vmov	s15, r3
 8001388:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <svMotorRunTask+0x70>)
 800138e:	edd3 7a00 	vldr	s15, [r3]
 8001392:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <svMotorRunTask+0x74>)
 8001398:	edd3 7a00 	vldr	s15, [r3]
 800139c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013a4:	ee17 3a90 	vmov	r3, s15
 80013a8:	60fb      	str	r3, [r7, #12]

		vRunMotor(left_motor_speed, right_motor_speed);
 80013aa:	68f9      	ldr	r1, [r7, #12]
 80013ac:	6938      	ldr	r0, [r7, #16]
 80013ae:	f000 f809 	bl	80013c4 <vRunMotor>
	{
 80013b2:	e7cf      	b.n	8001354 <svMotorRunTask+0x8>
 80013b4:	2000000c 	.word	0x2000000c
 80013b8:	20000014 	.word	0x20000014
 80013bc:	20000010 	.word	0x20000010
 80013c0:	20000018 	.word	0x20000018

080013c4 <vRunMotor>:
	}
}

void vRunMotor(int left_speed, int right_speed)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
	assert(left_speed <= MAX_PWM_VAL && left_speed >= -1*MAX_PWM_VAL);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013d4:	dc03      	bgt.n	80013de <vRunMotor+0x1a>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80013dc:	da06      	bge.n	80013ec <vRunMotor+0x28>
 80013de:	4b25      	ldr	r3, [pc, #148]	; (8001474 <vRunMotor+0xb0>)
 80013e0:	4a25      	ldr	r2, [pc, #148]	; (8001478 <vRunMotor+0xb4>)
 80013e2:	f44f 7102 	mov.w	r1, #520	; 0x208
 80013e6:	4825      	ldr	r0, [pc, #148]	; (800147c <vRunMotor+0xb8>)
 80013e8:	f007 fb60 	bl	8008aac <__assert_func>
	assert(right_speed < MAX_PWM_VAL && right_speed >= -1*MAX_PWM_VAL);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013f2:	da03      	bge.n	80013fc <vRunMotor+0x38>
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80013fa:	da06      	bge.n	800140a <vRunMotor+0x46>
 80013fc:	4b20      	ldr	r3, [pc, #128]	; (8001480 <vRunMotor+0xbc>)
 80013fe:	4a1e      	ldr	r2, [pc, #120]	; (8001478 <vRunMotor+0xb4>)
 8001400:	f240 2109 	movw	r1, #521	; 0x209
 8001404:	481d      	ldr	r0, [pc, #116]	; (800147c <vRunMotor+0xb8>)
 8001406:	f007 fb51 	bl	8008aac <__assert_func>

	if(left_speed < 0)//roate backwards
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	da0c      	bge.n	800142a <vRunMotor+0x66>
	{
		__HAL_TIM_SetCompare(LEFT_MOTOR_TIM, LEFT_MOTOR_PIN_1_CH, abs(left_speed));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001416:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800141a:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <vRunMotor+0xc0>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(LEFT_MOTOR_TIM, LEFT_MOTOR_PIN_2_CH, 0);
 8001420:	4b18      	ldr	r3, [pc, #96]	; (8001484 <vRunMotor+0xc0>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2200      	movs	r2, #0
 8001426:	635a      	str	r2, [r3, #52]	; 0x34
 8001428:	e007      	b.n	800143a <vRunMotor+0x76>
	}
	else
	{
		__HAL_TIM_SetCompare(LEFT_MOTOR_TIM, LEFT_MOTOR_PIN_2_CH, left_speed);
 800142a:	4b16      	ldr	r3, [pc, #88]	; (8001484 <vRunMotor+0xc0>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(LEFT_MOTOR_TIM, LEFT_MOTOR_PIN_1_CH, 0);
 8001432:	4b14      	ldr	r3, [pc, #80]	; (8001484 <vRunMotor+0xc0>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2200      	movs	r2, #0
 8001438:	635a      	str	r2, [r3, #52]	; 0x34
	}

	if(right_speed < 0)//roate backwards
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	da0c      	bge.n	800145a <vRunMotor+0x96>
	{
		__HAL_TIM_SetCompare(RIGHT_MOTOR_TIM, RIGHT_MOTOR_PIN_1_CH, abs(right_speed));
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001446:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800144a:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <vRunMotor+0xc4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(RIGHT_MOTOR_TIM, RIGHT_MOTOR_PIN_2_CH, 0);
 8001450:	4b0d      	ldr	r3, [pc, #52]	; (8001488 <vRunMotor+0xc4>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2200      	movs	r2, #0
 8001456:	639a      	str	r2, [r3, #56]	; 0x38
	{
		__HAL_TIM_SetCompare(RIGHT_MOTOR_TIM, RIGHT_MOTOR_PIN_2_CH, right_speed);
		__HAL_TIM_SetCompare(RIGHT_MOTOR_TIM, RIGHT_MOTOR_PIN_1_CH, 0);
	}

}
 8001458:	e007      	b.n	800146a <vRunMotor+0xa6>
		__HAL_TIM_SetCompare(RIGHT_MOTOR_TIM, RIGHT_MOTOR_PIN_2_CH, right_speed);
 800145a:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <vRunMotor+0xc4>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SetCompare(RIGHT_MOTOR_TIM, RIGHT_MOTOR_PIN_1_CH, 0);
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <vRunMotor+0xc4>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2200      	movs	r2, #0
 8001468:	635a      	str	r2, [r3, #52]	; 0x34
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	0800aa60 	.word	0x0800aa60
 8001478:	0800ab74 	.word	0x0800ab74
 800147c:	0800aa9c 	.word	0x0800aa9c
 8001480:	0800aab0 	.word	0x0800aab0
 8001484:	20003044 	.word	0x20003044
 8001488:	20002ff8 	.word	0x20002ff8

0800148c <iPID>:

int iPID()
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
	P = error;
 8001490:	4b21      	ldr	r3, [pc, #132]	; (8001518 <iPID+0x8c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a21      	ldr	r2, [pc, #132]	; (800151c <iPID+0x90>)
 8001496:	6013      	str	r3, [r2, #0]
	I += error;
 8001498:	4b21      	ldr	r3, [pc, #132]	; (8001520 <iPID+0x94>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4b1e      	ldr	r3, [pc, #120]	; (8001518 <iPID+0x8c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4413      	add	r3, r2
 80014a2:	4a1f      	ldr	r2, [pc, #124]	; (8001520 <iPID+0x94>)
 80014a4:	6013      	str	r3, [r2, #0]
	D = error - prev_error;
 80014a6:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <iPID+0x8c>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	4b1e      	ldr	r3, [pc, #120]	; (8001524 <iPID+0x98>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	4a1d      	ldr	r2, [pc, #116]	; (8001528 <iPID+0x9c>)
 80014b2:	6013      	str	r3, [r2, #0]
	prev_error = error;
 80014b4:	4b18      	ldr	r3, [pc, #96]	; (8001518 <iPID+0x8c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a1a      	ldr	r2, [pc, #104]	; (8001524 <iPID+0x98>)
 80014ba:	6013      	str	r3, [r2, #0]

	return Kp*P + Ki*I + Kd*D;
 80014bc:	4b17      	ldr	r3, [pc, #92]	; (800151c <iPID+0x90>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	ee07 3a90 	vmov	s15, r3
 80014c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014c8:	4b18      	ldr	r3, [pc, #96]	; (800152c <iPID+0xa0>)
 80014ca:	edd3 7a00 	vldr	s15, [r3]
 80014ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014d2:	4b13      	ldr	r3, [pc, #76]	; (8001520 <iPID+0x94>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	ee07 3a90 	vmov	s15, r3
 80014da:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014de:	4b14      	ldr	r3, [pc, #80]	; (8001530 <iPID+0xa4>)
 80014e0:	edd3 7a00 	vldr	s15, [r3]
 80014e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014ec:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <iPID+0x9c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	ee07 3a90 	vmov	s15, r3
 80014f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014f8:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <iPID+0xa8>)
 80014fa:	edd3 7a00 	vldr	s15, [r3]
 80014fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001502:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001506:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800150a:	ee17 3a90 	vmov	r3, s15
}
 800150e:	4618      	mov	r0, r3
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	200030dc 	.word	0x200030dc
 800151c:	200030e4 	.word	0x200030e4
 8001520:	200030e0 	.word	0x200030e0
 8001524:	200000b4 	.word	0x200000b4
 8001528:	20002ff4 	.word	0x20002ff4
 800152c:	20000000 	.word	0x20000000
 8001530:	20000004 	.word	0x20000004
 8001534:	20000008 	.word	0x20000008

08001538 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a04      	ldr	r2, [pc, #16]	; (8001558 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d101      	bne.n	800154e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800154a:	f000 fa21 	bl	8001990 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40001000 	.word	0x40001000

0800155c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001560:	b672      	cpsid	i
}
 8001562:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001564:	e7fe      	b.n	8001564 <Error_Handler+0x8>
	...

08001568 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156e:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <HAL_MspInit+0x44>)
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	4a0e      	ldr	r2, [pc, #56]	; (80015ac <HAL_MspInit+0x44>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6193      	str	r3, [r2, #24]
 800157a:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <HAL_MspInit+0x44>)
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <HAL_MspInit+0x44>)
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	4a08      	ldr	r2, [pc, #32]	; (80015ac <HAL_MspInit+0x44>)
 800158c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001590:	61d3      	str	r3, [r2, #28]
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <HAL_MspInit+0x44>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159a:	603b      	str	r3, [r7, #0]
 800159c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 800159e:	f005 fa9b 	bl	8006ad8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40021000 	.word	0x40021000

080015b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <HAL_TIM_Base_MspInit+0x38>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d10b      	bne.n	80015da <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015c2:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <HAL_TIM_Base_MspInit+0x3c>)
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	4a09      	ldr	r2, [pc, #36]	; (80015ec <HAL_TIM_Base_MspInit+0x3c>)
 80015c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015cc:	6193      	str	r3, [r2, #24]
 80015ce:	4b07      	ldr	r3, [pc, #28]	; (80015ec <HAL_TIM_Base_MspInit+0x3c>)
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80015da:	bf00      	nop
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40012c00 	.word	0x40012c00
 80015ec:	40021000 	.word	0x40021000

080015f0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a13      	ldr	r2, [pc, #76]	; (800164c <HAL_TIM_PWM_MspInit+0x5c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d10c      	bne.n	800161c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001602:	4b13      	ldr	r3, [pc, #76]	; (8001650 <HAL_TIM_PWM_MspInit+0x60>)
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	4a12      	ldr	r2, [pc, #72]	; (8001650 <HAL_TIM_PWM_MspInit+0x60>)
 8001608:	f043 0302 	orr.w	r3, r3, #2
 800160c:	61d3      	str	r3, [r2, #28]
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <HAL_TIM_PWM_MspInit+0x60>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800161a:	e010      	b.n	800163e <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0c      	ldr	r2, [pc, #48]	; (8001654 <HAL_TIM_PWM_MspInit+0x64>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d10b      	bne.n	800163e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001626:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <HAL_TIM_PWM_MspInit+0x60>)
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	4a09      	ldr	r2, [pc, #36]	; (8001650 <HAL_TIM_PWM_MspInit+0x60>)
 800162c:	f043 0304 	orr.w	r3, r3, #4
 8001630:	61d3      	str	r3, [r2, #28]
 8001632:	4b07      	ldr	r3, [pc, #28]	; (8001650 <HAL_TIM_PWM_MspInit+0x60>)
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	f003 0304 	and.w	r3, r3, #4
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]
}
 800163e:	bf00      	nop
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40000400 	.word	0x40000400
 8001650:	40021000 	.word	0x40021000
 8001654:	40000800 	.word	0x40000800

08001658 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	; 0x28
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a22      	ldr	r2, [pc, #136]	; (8001700 <HAL_TIM_MspPostInit+0xa8>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d11c      	bne.n	80016b4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800167a:	4b22      	ldr	r3, [pc, #136]	; (8001704 <HAL_TIM_MspPostInit+0xac>)
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	4a21      	ldr	r2, [pc, #132]	; (8001704 <HAL_TIM_MspPostInit+0xac>)
 8001680:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001684:	6153      	str	r3, [r2, #20]
 8001686:	4b1f      	ldr	r3, [pc, #124]	; (8001704 <HAL_TIM_MspPostInit+0xac>)
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001692:	23c0      	movs	r3, #192	; 0xc0
 8001694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016a2:	2302      	movs	r3, #2
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4619      	mov	r1, r3
 80016ac:	4816      	ldr	r0, [pc, #88]	; (8001708 <HAL_TIM_MspPostInit+0xb0>)
 80016ae:	f000 fa71 	bl	8001b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80016b2:	e021      	b.n	80016f8 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM4)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a14      	ldr	r2, [pc, #80]	; (800170c <HAL_TIM_MspPostInit+0xb4>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d11c      	bne.n	80016f8 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <HAL_TIM_MspPostInit+0xac>)
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	4a10      	ldr	r2, [pc, #64]	; (8001704 <HAL_TIM_MspPostInit+0xac>)
 80016c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80016c8:	6153      	str	r3, [r2, #20]
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <HAL_TIM_MspPostInit+0xac>)
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80016d6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80016da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016dc:	2302      	movs	r3, #2
 80016de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2300      	movs	r3, #0
 80016e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016e8:	2302      	movs	r3, #2
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	4619      	mov	r1, r3
 80016f2:	4807      	ldr	r0, [pc, #28]	; (8001710 <HAL_TIM_MspPostInit+0xb8>)
 80016f4:	f000 fa4e 	bl	8001b94 <HAL_GPIO_Init>
}
 80016f8:	bf00      	nop
 80016fa:	3728      	adds	r7, #40	; 0x28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40000400 	.word	0x40000400
 8001704:	40021000 	.word	0x40021000
 8001708:	48000800 	.word	0x48000800
 800170c:	40000800 	.word	0x40000800
 8001710:	48000c00 	.word	0x48000c00

08001714 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08c      	sub	sp, #48	; 0x30
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001724:	2200      	movs	r2, #0
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	2036      	movs	r0, #54	; 0x36
 800172a:	f000 fa09 	bl	8001b40 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800172e:	2036      	movs	r0, #54	; 0x36
 8001730:	f000 fa22 	bl	8001b78 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001734:	4b1f      	ldr	r3, [pc, #124]	; (80017b4 <HAL_InitTick+0xa0>)
 8001736:	69db      	ldr	r3, [r3, #28]
 8001738:	4a1e      	ldr	r2, [pc, #120]	; (80017b4 <HAL_InitTick+0xa0>)
 800173a:	f043 0310 	orr.w	r3, r3, #16
 800173e:	61d3      	str	r3, [r2, #28]
 8001740:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <HAL_InitTick+0xa0>)
 8001742:	69db      	ldr	r3, [r3, #28]
 8001744:	f003 0310 	and.w	r3, r3, #16
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800174c:	f107 0210 	add.w	r2, r7, #16
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	4611      	mov	r1, r2
 8001756:	4618      	mov	r0, r3
 8001758:	f001 fce2 	bl	8003120 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800175c:	f001 fcbe 	bl	80030dc <HAL_RCC_GetPCLK1Freq>
 8001760:	4603      	mov	r3, r0
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001768:	4a13      	ldr	r2, [pc, #76]	; (80017b8 <HAL_InitTick+0xa4>)
 800176a:	fba2 2303 	umull	r2, r3, r2, r3
 800176e:	0c9b      	lsrs	r3, r3, #18
 8001770:	3b01      	subs	r3, #1
 8001772:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <HAL_InitTick+0xa8>)
 8001776:	4a12      	ldr	r2, [pc, #72]	; (80017c0 <HAL_InitTick+0xac>)
 8001778:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800177a:	4b10      	ldr	r3, [pc, #64]	; (80017bc <HAL_InitTick+0xa8>)
 800177c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001780:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001782:	4a0e      	ldr	r2, [pc, #56]	; (80017bc <HAL_InitTick+0xa8>)
 8001784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001786:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <HAL_InitTick+0xa8>)
 800178a:	2200      	movs	r2, #0
 800178c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178e:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <HAL_InitTick+0xa8>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001794:	4809      	ldr	r0, [pc, #36]	; (80017bc <HAL_InitTick+0xa8>)
 8001796:	f001 fea5 	bl	80034e4 <HAL_TIM_Base_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d104      	bne.n	80017aa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80017a0:	4806      	ldr	r0, [pc, #24]	; (80017bc <HAL_InitTick+0xa8>)
 80017a2:	f001 fef7 	bl	8003594 <HAL_TIM_Base_Start_IT>
 80017a6:	4603      	mov	r3, r0
 80017a8:	e000      	b.n	80017ac <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3730      	adds	r7, #48	; 0x30
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40021000 	.word	0x40021000
 80017b8:	431bde83 	.word	0x431bde83
 80017bc:	200030e8 	.word	0x200030e8
 80017c0:	40001000 	.word	0x40001000

080017c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <NMI_Handler+0x4>

080017ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ce:	e7fe      	b.n	80017ce <HardFault_Handler+0x4>

080017d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <MemManage_Handler+0x4>

080017d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017da:	e7fe      	b.n	80017da <BusFault_Handler+0x4>

080017dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <UsageFault_Handler+0x4>

080017e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <TIM6_DAC_IRQHandler+0x10>)
 80017f6:	f002 f88f 	bl	8003918 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	200030e8 	.word	0x200030e8

08001804 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
	return 1;
 8001808:	2301      	movs	r3, #1
}
 800180a:	4618      	mov	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <_kill>:

int _kill(int pid, int sig)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800181e:	f007 f963 	bl	8008ae8 <__errno>
 8001822:	4603      	mov	r3, r0
 8001824:	2216      	movs	r2, #22
 8001826:	601a      	str	r2, [r3, #0]
	return -1;
 8001828:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800182c:	4618      	mov	r0, r3
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <_exit>:

void _exit (int status)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800183c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff ffe7 	bl	8001814 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001846:	e7fe      	b.n	8001846 <_exit+0x12>

08001848 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	e00a      	b.n	8001870 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800185a:	f3af 8000 	nop.w
 800185e:	4601      	mov	r1, r0
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	1c5a      	adds	r2, r3, #1
 8001864:	60ba      	str	r2, [r7, #8]
 8001866:	b2ca      	uxtb	r2, r1
 8001868:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	3301      	adds	r3, #1
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	429a      	cmp	r2, r3
 8001876:	dbf0      	blt.n	800185a <_read+0x12>
	}

return len;
 8001878:	687b      	ldr	r3, [r7, #4]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
	return -1;
 800188a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800188e:	4618      	mov	r0, r3
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018aa:	605a      	str	r2, [r3, #4]
	return 0;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <_isatty>:

int _isatty(int file)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
	return 1;
 80018c2:	2301      	movs	r3, #1
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
	return 0;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <SystemInit+0x20>)
 80018f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018f6:	4a05      	ldr	r2, [pc, #20]	; (800190c <SystemInit+0x20>)
 80018f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001910:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001948 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001914:	480d      	ldr	r0, [pc, #52]	; (800194c <LoopForever+0x6>)
  ldr r1, =_edata
 8001916:	490e      	ldr	r1, [pc, #56]	; (8001950 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001918:	4a0e      	ldr	r2, [pc, #56]	; (8001954 <LoopForever+0xe>)
  movs r3, #0
 800191a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800191c:	e002      	b.n	8001924 <LoopCopyDataInit>

0800191e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800191e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001922:	3304      	adds	r3, #4

08001924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001928:	d3f9      	bcc.n	800191e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800192a:	4a0b      	ldr	r2, [pc, #44]	; (8001958 <LoopForever+0x12>)
  ldr r4, =_ebss
 800192c:	4c0b      	ldr	r4, [pc, #44]	; (800195c <LoopForever+0x16>)
  movs r3, #0
 800192e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001930:	e001      	b.n	8001936 <LoopFillZerobss>

08001932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001934:	3204      	adds	r2, #4

08001936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001938:	d3fb      	bcc.n	8001932 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800193a:	f7ff ffd7 	bl	80018ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800193e:	f007 f8eb 	bl	8008b18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001942:	f7ff f979 	bl	8000c38 <main>

08001946 <LoopForever>:

LoopForever:
    b LoopForever
 8001946:	e7fe      	b.n	8001946 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001948:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800194c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001950:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001954:	0800ace0 	.word	0x0800ace0
  ldr r2, =_sbss
 8001958:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 800195c:	20003230 	.word	0x20003230

08001960 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001960:	e7fe      	b.n	8001960 <ADC1_2_IRQHandler>
	...

08001964 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001968:	4b08      	ldr	r3, [pc, #32]	; (800198c <HAL_Init+0x28>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a07      	ldr	r2, [pc, #28]	; (800198c <HAL_Init+0x28>)
 800196e:	f043 0310 	orr.w	r3, r3, #16
 8001972:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001974:	2003      	movs	r0, #3
 8001976:	f000 f8d8 	bl	8001b2a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800197a:	2000      	movs	r0, #0
 800197c:	f7ff feca 	bl	8001714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001980:	f7ff fdf2 	bl	8001568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40022000 	.word	0x40022000

08001990 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <HAL_IncTick+0x20>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <HAL_IncTick+0x24>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4413      	add	r3, r2
 80019a0:	4a04      	ldr	r2, [pc, #16]	; (80019b4 <HAL_IncTick+0x24>)
 80019a2:	6013      	str	r3, [r2, #0]
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	20000024 	.word	0x20000024
 80019b4:	20003134 	.word	0x20003134

080019b8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return uwTick;  
 80019bc:	4b03      	ldr	r3, [pc, #12]	; (80019cc <HAL_GetTick+0x14>)
 80019be:	681b      	ldr	r3, [r3, #0]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	20003134 	.word	0x20003134

080019d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e0:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <__NVIC_SetPriorityGrouping+0x44>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019ec:	4013      	ands	r3, r2
 80019ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a02:	4a04      	ldr	r2, [pc, #16]	; (8001a14 <__NVIC_SetPriorityGrouping+0x44>)
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	60d3      	str	r3, [r2, #12]
}
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a1c:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <__NVIC_GetPriorityGrouping+0x18>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	0a1b      	lsrs	r3, r3, #8
 8001a22:	f003 0307 	and.w	r3, r3, #7
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	db0b      	blt.n	8001a5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	f003 021f 	and.w	r2, r3, #31
 8001a4c:	4907      	ldr	r1, [pc, #28]	; (8001a6c <__NVIC_EnableIRQ+0x38>)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	095b      	lsrs	r3, r3, #5
 8001a54:	2001      	movs	r0, #1
 8001a56:	fa00 f202 	lsl.w	r2, r0, r2
 8001a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	e000e100 	.word	0xe000e100

08001a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	6039      	str	r1, [r7, #0]
 8001a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	db0a      	blt.n	8001a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	490c      	ldr	r1, [pc, #48]	; (8001abc <__NVIC_SetPriority+0x4c>)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	0112      	lsls	r2, r2, #4
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	440b      	add	r3, r1
 8001a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a98:	e00a      	b.n	8001ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4908      	ldr	r1, [pc, #32]	; (8001ac0 <__NVIC_SetPriority+0x50>)
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	3b04      	subs	r3, #4
 8001aa8:	0112      	lsls	r2, r2, #4
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	440b      	add	r3, r1
 8001aae:	761a      	strb	r2, [r3, #24]
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000e100 	.word	0xe000e100
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b089      	sub	sp, #36	; 0x24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f1c3 0307 	rsb	r3, r3, #7
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	bf28      	it	cs
 8001ae2:	2304      	movcs	r3, #4
 8001ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	2b06      	cmp	r3, #6
 8001aec:	d902      	bls.n	8001af4 <NVIC_EncodePriority+0x30>
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3b03      	subs	r3, #3
 8001af2:	e000      	b.n	8001af6 <NVIC_EncodePriority+0x32>
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43da      	mvns	r2, r3
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	401a      	ands	r2, r3
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	fa01 f303 	lsl.w	r3, r1, r3
 8001b16:	43d9      	mvns	r1, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1c:	4313      	orrs	r3, r2
         );
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3724      	adds	r7, #36	; 0x24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff ff4c 	bl	80019d0 <__NVIC_SetPriorityGrouping>
}
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
 8001b4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b52:	f7ff ff61 	bl	8001a18 <__NVIC_GetPriorityGrouping>
 8001b56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	68b9      	ldr	r1, [r7, #8]
 8001b5c:	6978      	ldr	r0, [r7, #20]
 8001b5e:	f7ff ffb1 	bl	8001ac4 <NVIC_EncodePriority>
 8001b62:	4602      	mov	r2, r0
 8001b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b68:	4611      	mov	r1, r2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff ff80 	bl	8001a70 <__NVIC_SetPriority>
}
 8001b70:	bf00      	nop
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff ff54 	bl	8001a34 <__NVIC_EnableIRQ>
}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b087      	sub	sp, #28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba2:	e154      	b.n	8001e4e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	2101      	movs	r1, #1
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 8146 	beq.w	8001e48 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d00b      	beq.n	8001bdc <HAL_GPIO_Init+0x48>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d007      	beq.n	8001bdc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bd0:	2b11      	cmp	r3, #17
 8001bd2:	d003      	beq.n	8001bdc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b12      	cmp	r3, #18
 8001bda:	d130      	bne.n	8001c3e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	2203      	movs	r2, #3
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c12:	2201      	movs	r2, #1
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	091b      	lsrs	r3, r3, #4
 8001c28:	f003 0201 	and.w	r2, r3, #1
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	2203      	movs	r2, #3
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	4013      	ands	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_Init+0xea>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b12      	cmp	r3, #18
 8001c7c:	d123      	bne.n	8001cc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	08da      	lsrs	r2, r3, #3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	3208      	adds	r2, #8
 8001c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	220f      	movs	r2, #15
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	691a      	ldr	r2, [r3, #16]
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	08da      	lsrs	r2, r3, #3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3208      	adds	r2, #8
 8001cc0:	6939      	ldr	r1, [r7, #16]
 8001cc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 0203 	and.w	r2, r3, #3
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f000 80a0 	beq.w	8001e48 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d08:	4b58      	ldr	r3, [pc, #352]	; (8001e6c <HAL_GPIO_Init+0x2d8>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	4a57      	ldr	r2, [pc, #348]	; (8001e6c <HAL_GPIO_Init+0x2d8>)
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	6193      	str	r3, [r2, #24]
 8001d14:	4b55      	ldr	r3, [pc, #340]	; (8001e6c <HAL_GPIO_Init+0x2d8>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d20:	4a53      	ldr	r2, [pc, #332]	; (8001e70 <HAL_GPIO_Init+0x2dc>)
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	089b      	lsrs	r3, r3, #2
 8001d26:	3302      	adds	r3, #2
 8001d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	220f      	movs	r2, #15
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4013      	ands	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d4a:	d019      	beq.n	8001d80 <HAL_GPIO_Init+0x1ec>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a49      	ldr	r2, [pc, #292]	; (8001e74 <HAL_GPIO_Init+0x2e0>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d013      	beq.n	8001d7c <HAL_GPIO_Init+0x1e8>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a48      	ldr	r2, [pc, #288]	; (8001e78 <HAL_GPIO_Init+0x2e4>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d00d      	beq.n	8001d78 <HAL_GPIO_Init+0x1e4>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a47      	ldr	r2, [pc, #284]	; (8001e7c <HAL_GPIO_Init+0x2e8>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d007      	beq.n	8001d74 <HAL_GPIO_Init+0x1e0>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a46      	ldr	r2, [pc, #280]	; (8001e80 <HAL_GPIO_Init+0x2ec>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d101      	bne.n	8001d70 <HAL_GPIO_Init+0x1dc>
 8001d6c:	2304      	movs	r3, #4
 8001d6e:	e008      	b.n	8001d82 <HAL_GPIO_Init+0x1ee>
 8001d70:	2305      	movs	r3, #5
 8001d72:	e006      	b.n	8001d82 <HAL_GPIO_Init+0x1ee>
 8001d74:	2303      	movs	r3, #3
 8001d76:	e004      	b.n	8001d82 <HAL_GPIO_Init+0x1ee>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e002      	b.n	8001d82 <HAL_GPIO_Init+0x1ee>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <HAL_GPIO_Init+0x1ee>
 8001d80:	2300      	movs	r3, #0
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	f002 0203 	and.w	r2, r2, #3
 8001d88:	0092      	lsls	r2, r2, #2
 8001d8a:	4093      	lsls	r3, r2
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d92:	4937      	ldr	r1, [pc, #220]	; (8001e70 <HAL_GPIO_Init+0x2dc>)
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	089b      	lsrs	r3, r3, #2
 8001d98:	3302      	adds	r3, #2
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001da0:	4b38      	ldr	r3, [pc, #224]	; (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	43db      	mvns	r3, r3
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	4013      	ands	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001dc4:	4a2f      	ldr	r2, [pc, #188]	; (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001dca:	4b2e      	ldr	r3, [pc, #184]	; (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001dee:	4a25      	ldr	r2, [pc, #148]	; (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001df4:	4b23      	ldr	r3, [pc, #140]	; (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e18:	4a1a      	ldr	r2, [pc, #104]	; (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e1e:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	43db      	mvns	r3, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e42:	4a10      	ldr	r2, [pc, #64]	; (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	fa22 f303 	lsr.w	r3, r2, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f47f aea3 	bne.w	8001ba4 <HAL_GPIO_Init+0x10>
  }
}
 8001e5e:	bf00      	nop
 8001e60:	bf00      	nop
 8001e62:	371c      	adds	r7, #28
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40010000 	.word	0x40010000
 8001e74:	48000400 	.word	0x48000400
 8001e78:	48000800 	.word	0x48000800
 8001e7c:	48000c00 	.word	0x48000c00
 8001e80:	48001000 	.word	0x48001000
 8001e84:	40010400 	.word	0x40010400

08001e88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691a      	ldr	r2, [r3, #16]
 8001e98:	887b      	ldrh	r3, [r7, #2]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d002      	beq.n	8001ea6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	73fb      	strb	r3, [r7, #15]
 8001ea4:	e001      	b.n	8001eaa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	807b      	strh	r3, [r7, #2]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ec8:	787b      	ldrb	r3, [r7, #1]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ece:	887a      	ldrh	r2, [r7, #2]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ed4:	e002      	b.n	8001edc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ed6:	887a      	ldrh	r2, [r7, #2]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	1d3b      	adds	r3, r7, #4
 8001ef2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ef4:	1d3b      	adds	r3, r7, #4
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d102      	bne.n	8001f02 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	f000 bef4 	b.w	8002cea <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f02:	1d3b      	adds	r3, r7, #4
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f000 816a 	beq.w	80021e6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f12:	4bb3      	ldr	r3, [pc, #716]	; (80021e0 <HAL_RCC_OscConfig+0x2f8>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 030c 	and.w	r3, r3, #12
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	d00c      	beq.n	8001f38 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f1e:	4bb0      	ldr	r3, [pc, #704]	; (80021e0 <HAL_RCC_OscConfig+0x2f8>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f003 030c 	and.w	r3, r3, #12
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d159      	bne.n	8001fde <HAL_RCC_OscConfig+0xf6>
 8001f2a:	4bad      	ldr	r3, [pc, #692]	; (80021e0 <HAL_RCC_OscConfig+0x2f8>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f36:	d152      	bne.n	8001fde <HAL_RCC_OscConfig+0xf6>
 8001f38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f3c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f40:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001f44:	fa93 f3a3 	rbit	r3, r3
 8001f48:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f4c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f50:	fab3 f383 	clz	r3, r3
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	095b      	lsrs	r3, r3, #5
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d102      	bne.n	8001f6a <HAL_RCC_OscConfig+0x82>
 8001f64:	4b9e      	ldr	r3, [pc, #632]	; (80021e0 <HAL_RCC_OscConfig+0x2f8>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	e015      	b.n	8001f96 <HAL_RCC_OscConfig+0xae>
 8001f6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f6e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f72:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001f76:	fa93 f3a3 	rbit	r3, r3
 8001f7a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001f7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f82:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001f86:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001f8a:	fa93 f3a3 	rbit	r3, r3
 8001f8e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001f92:	4b93      	ldr	r3, [pc, #588]	; (80021e0 <HAL_RCC_OscConfig+0x2f8>)
 8001f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f9a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001f9e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001fa2:	fa92 f2a2 	rbit	r2, r2
 8001fa6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001faa:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001fae:	fab2 f282 	clz	r2, r2
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	f042 0220 	orr.w	r2, r2, #32
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	f002 021f 	and.w	r2, r2, #31
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 810c 	beq.w	80021e4 <HAL_RCC_OscConfig+0x2fc>
 8001fcc:	1d3b      	adds	r3, r7, #4
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f040 8106 	bne.w	80021e4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	f000 be86 	b.w	8002cea <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fde:	1d3b      	adds	r3, r7, #4
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fe8:	d106      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x110>
 8001fea:	4b7d      	ldr	r3, [pc, #500]	; (80021e0 <HAL_RCC_OscConfig+0x2f8>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a7c      	ldr	r2, [pc, #496]	; (80021e0 <HAL_RCC_OscConfig+0x2f8>)
 8001ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	e030      	b.n	800205a <HAL_RCC_OscConfig+0x172>
 8001ff8:	1d3b      	adds	r3, r7, #4
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10c      	bne.n	800201c <HAL_RCC_OscConfig+0x134>
 8002002:	4b77      	ldr	r3, [pc, #476]	; (80021e0 <HAL_RCC_OscConfig+0x2f8>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a76      	ldr	r2, [pc, #472]	; (80021e0 <HAL_RCC_OscConfig+0x2f8>)
 8002008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	4b74      	ldr	r3, [pc, #464]	; (80021e0 <HAL_RCC_OscConfig+0x2f8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a73      	ldr	r2, [pc, #460]	; (80021e0 <HAL_RCC_OscConfig+0x2f8>)
 8002014:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	e01e      	b.n	800205a <HAL_RCC_OscConfig+0x172>
 800201c:	1d3b      	adds	r3, r7, #4
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002026:	d10c      	bne.n	8002042 <HAL_RCC_OscConfig+0x15a>
 8002028:	4b6d      	ldr	r3, [pc, #436]	; (80021e0 <HAL_RCC_OscConfig+0x2f8>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a6c      	ldr	r2, [pc, #432]	; (80021e0 <HAL_RCC_OscConfig+0x2f8>)
 800202e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <HAL_RCC_OscConfig+0x2f8>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a69      	ldr	r2, [pc, #420]	; (80021e0 <HAL_RCC_OscConfig+0x2f8>)
 800203a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800203e:	6013      	str	r3, [r2, #0]
 8002040:	e00b      	b.n	800205a <HAL_RCC_OscConfig+0x172>
 8002042:	4b67      	ldr	r3, [pc, #412]	; (80021e0 <HAL_RCC_OscConfig+0x2f8>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a66      	ldr	r2, [pc, #408]	; (80021e0 <HAL_RCC_OscConfig+0x2f8>)
 8002048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	4b64      	ldr	r3, [pc, #400]	; (80021e0 <HAL_RCC_OscConfig+0x2f8>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a63      	ldr	r2, [pc, #396]	; (80021e0 <HAL_RCC_OscConfig+0x2f8>)
 8002054:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002058:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800205a:	4b61      	ldr	r3, [pc, #388]	; (80021e0 <HAL_RCC_OscConfig+0x2f8>)
 800205c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205e:	f023 020f 	bic.w	r2, r3, #15
 8002062:	1d3b      	adds	r3, r7, #4
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	495d      	ldr	r1, [pc, #372]	; (80021e0 <HAL_RCC_OscConfig+0x2f8>)
 800206a:	4313      	orrs	r3, r2
 800206c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800206e:	1d3b      	adds	r3, r7, #4
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d059      	beq.n	800212c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002078:	f7ff fc9e 	bl	80019b8 <HAL_GetTick>
 800207c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002080:	e00a      	b.n	8002098 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002082:	f7ff fc99 	bl	80019b8 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b64      	cmp	r3, #100	; 0x64
 8002090:	d902      	bls.n	8002098 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	f000 be29 	b.w	8002cea <HAL_RCC_OscConfig+0xe02>
 8002098:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800209c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80020a4:	fa93 f3a3 	rbit	r3, r3
 80020a8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80020ac:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b0:	fab3 f383 	clz	r3, r3
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	095b      	lsrs	r3, r3, #5
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	f043 0301 	orr.w	r3, r3, #1
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d102      	bne.n	80020ca <HAL_RCC_OscConfig+0x1e2>
 80020c4:	4b46      	ldr	r3, [pc, #280]	; (80021e0 <HAL_RCC_OscConfig+0x2f8>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	e015      	b.n	80020f6 <HAL_RCC_OscConfig+0x20e>
 80020ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020ce:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80020d6:	fa93 f3a3 	rbit	r3, r3
 80020da:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80020de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020e2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80020e6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80020ea:	fa93 f3a3 	rbit	r3, r3
 80020ee:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80020f2:	4b3b      	ldr	r3, [pc, #236]	; (80021e0 <HAL_RCC_OscConfig+0x2f8>)
 80020f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020fa:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80020fe:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002102:	fa92 f2a2 	rbit	r2, r2
 8002106:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800210a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800210e:	fab2 f282 	clz	r2, r2
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	f042 0220 	orr.w	r2, r2, #32
 8002118:	b2d2      	uxtb	r2, r2
 800211a:	f002 021f 	and.w	r2, r2, #31
 800211e:	2101      	movs	r1, #1
 8002120:	fa01 f202 	lsl.w	r2, r1, r2
 8002124:	4013      	ands	r3, r2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0ab      	beq.n	8002082 <HAL_RCC_OscConfig+0x19a>
 800212a:	e05c      	b.n	80021e6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212c:	f7ff fc44 	bl	80019b8 <HAL_GetTick>
 8002130:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002134:	e00a      	b.n	800214c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002136:	f7ff fc3f 	bl	80019b8 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b64      	cmp	r3, #100	; 0x64
 8002144:	d902      	bls.n	800214c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	f000 bdcf 	b.w	8002cea <HAL_RCC_OscConfig+0xe02>
 800214c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002150:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002154:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002158:	fa93 f3a3 	rbit	r3, r3
 800215c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002160:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002164:	fab3 f383 	clz	r3, r3
 8002168:	b2db      	uxtb	r3, r3
 800216a:	095b      	lsrs	r3, r3, #5
 800216c:	b2db      	uxtb	r3, r3
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b01      	cmp	r3, #1
 8002176:	d102      	bne.n	800217e <HAL_RCC_OscConfig+0x296>
 8002178:	4b19      	ldr	r3, [pc, #100]	; (80021e0 <HAL_RCC_OscConfig+0x2f8>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	e015      	b.n	80021aa <HAL_RCC_OscConfig+0x2c2>
 800217e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002182:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002186:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800218a:	fa93 f3a3 	rbit	r3, r3
 800218e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002192:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002196:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800219a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800219e:	fa93 f3a3 	rbit	r3, r3
 80021a2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80021a6:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <HAL_RCC_OscConfig+0x2f8>)
 80021a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021ae:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80021b2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80021b6:	fa92 f2a2 	rbit	r2, r2
 80021ba:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80021be:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80021c2:	fab2 f282 	clz	r2, r2
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	f042 0220 	orr.w	r2, r2, #32
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	f002 021f 	and.w	r2, r2, #31
 80021d2:	2101      	movs	r1, #1
 80021d4:	fa01 f202 	lsl.w	r2, r1, r2
 80021d8:	4013      	ands	r3, r2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1ab      	bne.n	8002136 <HAL_RCC_OscConfig+0x24e>
 80021de:	e002      	b.n	80021e6 <HAL_RCC_OscConfig+0x2fe>
 80021e0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021e6:	1d3b      	adds	r3, r7, #4
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 816f 	beq.w	80024d4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80021f6:	4bd0      	ldr	r3, [pc, #832]	; (8002538 <HAL_RCC_OscConfig+0x650>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00b      	beq.n	800221a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002202:	4bcd      	ldr	r3, [pc, #820]	; (8002538 <HAL_RCC_OscConfig+0x650>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f003 030c 	and.w	r3, r3, #12
 800220a:	2b08      	cmp	r3, #8
 800220c:	d16c      	bne.n	80022e8 <HAL_RCC_OscConfig+0x400>
 800220e:	4bca      	ldr	r3, [pc, #808]	; (8002538 <HAL_RCC_OscConfig+0x650>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d166      	bne.n	80022e8 <HAL_RCC_OscConfig+0x400>
 800221a:	2302      	movs	r3, #2
 800221c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002220:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002224:	fa93 f3a3 	rbit	r3, r3
 8002228:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800222c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002230:	fab3 f383 	clz	r3, r3
 8002234:	b2db      	uxtb	r3, r3
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	b2db      	uxtb	r3, r3
 800223a:	f043 0301 	orr.w	r3, r3, #1
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b01      	cmp	r3, #1
 8002242:	d102      	bne.n	800224a <HAL_RCC_OscConfig+0x362>
 8002244:	4bbc      	ldr	r3, [pc, #752]	; (8002538 <HAL_RCC_OscConfig+0x650>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	e013      	b.n	8002272 <HAL_RCC_OscConfig+0x38a>
 800224a:	2302      	movs	r3, #2
 800224c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002250:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002254:	fa93 f3a3 	rbit	r3, r3
 8002258:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800225c:	2302      	movs	r3, #2
 800225e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002262:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002266:	fa93 f3a3 	rbit	r3, r3
 800226a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800226e:	4bb2      	ldr	r3, [pc, #712]	; (8002538 <HAL_RCC_OscConfig+0x650>)
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	2202      	movs	r2, #2
 8002274:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002278:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800227c:	fa92 f2a2 	rbit	r2, r2
 8002280:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002284:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002288:	fab2 f282 	clz	r2, r2
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	f042 0220 	orr.w	r2, r2, #32
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	f002 021f 	and.w	r2, r2, #31
 8002298:	2101      	movs	r1, #1
 800229a:	fa01 f202 	lsl.w	r2, r1, r2
 800229e:	4013      	ands	r3, r2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d007      	beq.n	80022b4 <HAL_RCC_OscConfig+0x3cc>
 80022a4:	1d3b      	adds	r3, r7, #4
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d002      	beq.n	80022b4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	f000 bd1b 	b.w	8002cea <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b4:	4ba0      	ldr	r3, [pc, #640]	; (8002538 <HAL_RCC_OscConfig+0x650>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022bc:	1d3b      	adds	r3, r7, #4
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	21f8      	movs	r1, #248	; 0xf8
 80022c4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80022cc:	fa91 f1a1 	rbit	r1, r1
 80022d0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80022d4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80022d8:	fab1 f181 	clz	r1, r1
 80022dc:	b2c9      	uxtb	r1, r1
 80022de:	408b      	lsls	r3, r1
 80022e0:	4995      	ldr	r1, [pc, #596]	; (8002538 <HAL_RCC_OscConfig+0x650>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e6:	e0f5      	b.n	80024d4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022e8:	1d3b      	adds	r3, r7, #4
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 8085 	beq.w	80023fe <HAL_RCC_OscConfig+0x516>
 80022f4:	2301      	movs	r3, #1
 80022f6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80022fe:	fa93 f3a3 	rbit	r3, r3
 8002302:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002306:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800230a:	fab3 f383 	clz	r3, r3
 800230e:	b2db      	uxtb	r3, r3
 8002310:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002314:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	461a      	mov	r2, r3
 800231c:	2301      	movs	r3, #1
 800231e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002320:	f7ff fb4a 	bl	80019b8 <HAL_GetTick>
 8002324:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002328:	e00a      	b.n	8002340 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800232a:	f7ff fb45 	bl	80019b8 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d902      	bls.n	8002340 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	f000 bcd5 	b.w	8002cea <HAL_RCC_OscConfig+0xe02>
 8002340:	2302      	movs	r3, #2
 8002342:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002346:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800234a:	fa93 f3a3 	rbit	r3, r3
 800234e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002352:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002356:	fab3 f383 	clz	r3, r3
 800235a:	b2db      	uxtb	r3, r3
 800235c:	095b      	lsrs	r3, r3, #5
 800235e:	b2db      	uxtb	r3, r3
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b01      	cmp	r3, #1
 8002368:	d102      	bne.n	8002370 <HAL_RCC_OscConfig+0x488>
 800236a:	4b73      	ldr	r3, [pc, #460]	; (8002538 <HAL_RCC_OscConfig+0x650>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	e013      	b.n	8002398 <HAL_RCC_OscConfig+0x4b0>
 8002370:	2302      	movs	r3, #2
 8002372:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002376:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800237a:	fa93 f3a3 	rbit	r3, r3
 800237e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002382:	2302      	movs	r3, #2
 8002384:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002388:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800238c:	fa93 f3a3 	rbit	r3, r3
 8002390:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002394:	4b68      	ldr	r3, [pc, #416]	; (8002538 <HAL_RCC_OscConfig+0x650>)
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	2202      	movs	r2, #2
 800239a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800239e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80023a2:	fa92 f2a2 	rbit	r2, r2
 80023a6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80023aa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80023ae:	fab2 f282 	clz	r2, r2
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	f042 0220 	orr.w	r2, r2, #32
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	f002 021f 	and.w	r2, r2, #31
 80023be:	2101      	movs	r1, #1
 80023c0:	fa01 f202 	lsl.w	r2, r1, r2
 80023c4:	4013      	ands	r3, r2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0af      	beq.n	800232a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ca:	4b5b      	ldr	r3, [pc, #364]	; (8002538 <HAL_RCC_OscConfig+0x650>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023d2:	1d3b      	adds	r3, r7, #4
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	21f8      	movs	r1, #248	; 0xf8
 80023da:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023de:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80023e2:	fa91 f1a1 	rbit	r1, r1
 80023e6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80023ea:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80023ee:	fab1 f181 	clz	r1, r1
 80023f2:	b2c9      	uxtb	r1, r1
 80023f4:	408b      	lsls	r3, r1
 80023f6:	4950      	ldr	r1, [pc, #320]	; (8002538 <HAL_RCC_OscConfig+0x650>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	600b      	str	r3, [r1, #0]
 80023fc:	e06a      	b.n	80024d4 <HAL_RCC_OscConfig+0x5ec>
 80023fe:	2301      	movs	r3, #1
 8002400:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002404:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002408:	fa93 f3a3 	rbit	r3, r3
 800240c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002410:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002414:	fab3 f383 	clz	r3, r3
 8002418:	b2db      	uxtb	r3, r3
 800241a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800241e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	461a      	mov	r2, r3
 8002426:	2300      	movs	r3, #0
 8002428:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242a:	f7ff fac5 	bl	80019b8 <HAL_GetTick>
 800242e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002432:	e00a      	b.n	800244a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002434:	f7ff fac0 	bl	80019b8 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d902      	bls.n	800244a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	f000 bc50 	b.w	8002cea <HAL_RCC_OscConfig+0xe02>
 800244a:	2302      	movs	r3, #2
 800244c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002450:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002454:	fa93 f3a3 	rbit	r3, r3
 8002458:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800245c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002460:	fab3 f383 	clz	r3, r3
 8002464:	b2db      	uxtb	r3, r3
 8002466:	095b      	lsrs	r3, r3, #5
 8002468:	b2db      	uxtb	r3, r3
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b01      	cmp	r3, #1
 8002472:	d102      	bne.n	800247a <HAL_RCC_OscConfig+0x592>
 8002474:	4b30      	ldr	r3, [pc, #192]	; (8002538 <HAL_RCC_OscConfig+0x650>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	e013      	b.n	80024a2 <HAL_RCC_OscConfig+0x5ba>
 800247a:	2302      	movs	r3, #2
 800247c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002480:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002484:	fa93 f3a3 	rbit	r3, r3
 8002488:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800248c:	2302      	movs	r3, #2
 800248e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002492:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002496:	fa93 f3a3 	rbit	r3, r3
 800249a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800249e:	4b26      	ldr	r3, [pc, #152]	; (8002538 <HAL_RCC_OscConfig+0x650>)
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	2202      	movs	r2, #2
 80024a4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80024a8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80024ac:	fa92 f2a2 	rbit	r2, r2
 80024b0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80024b4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80024b8:	fab2 f282 	clz	r2, r2
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	f042 0220 	orr.w	r2, r2, #32
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	f002 021f 	and.w	r2, r2, #31
 80024c8:	2101      	movs	r1, #1
 80024ca:	fa01 f202 	lsl.w	r2, r1, r2
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1af      	bne.n	8002434 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024d4:	1d3b      	adds	r3, r7, #4
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f000 80da 	beq.w	8002698 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024e4:	1d3b      	adds	r3, r7, #4
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d069      	beq.n	80025c2 <HAL_RCC_OscConfig+0x6da>
 80024ee:	2301      	movs	r3, #1
 80024f0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80024f8:	fa93 f3a3 	rbit	r3, r3
 80024fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002500:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002504:	fab3 f383 	clz	r3, r3
 8002508:	b2db      	uxtb	r3, r3
 800250a:	461a      	mov	r2, r3
 800250c:	4b0b      	ldr	r3, [pc, #44]	; (800253c <HAL_RCC_OscConfig+0x654>)
 800250e:	4413      	add	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	461a      	mov	r2, r3
 8002514:	2301      	movs	r3, #1
 8002516:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002518:	f7ff fa4e 	bl	80019b8 <HAL_GetTick>
 800251c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002520:	e00e      	b.n	8002540 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002522:	f7ff fa49 	bl	80019b8 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d906      	bls.n	8002540 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e3d9      	b.n	8002cea <HAL_RCC_OscConfig+0xe02>
 8002536:	bf00      	nop
 8002538:	40021000 	.word	0x40021000
 800253c:	10908120 	.word	0x10908120
 8002540:	2302      	movs	r3, #2
 8002542:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002546:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800254a:	fa93 f3a3 	rbit	r3, r3
 800254e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002552:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002556:	2202      	movs	r2, #2
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	fa93 f2a3 	rbit	r2, r3
 8002564:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800256e:	2202      	movs	r2, #2
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	fa93 f2a3 	rbit	r2, r3
 800257c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002580:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002582:	4ba5      	ldr	r3, [pc, #660]	; (8002818 <HAL_RCC_OscConfig+0x930>)
 8002584:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002586:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800258a:	2102      	movs	r1, #2
 800258c:	6019      	str	r1, [r3, #0]
 800258e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	fa93 f1a3 	rbit	r1, r3
 8002598:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800259c:	6019      	str	r1, [r3, #0]
  return result;
 800259e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	fab3 f383 	clz	r3, r3
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	f003 031f 	and.w	r3, r3, #31
 80025b4:	2101      	movs	r1, #1
 80025b6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ba:	4013      	ands	r3, r2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0b0      	beq.n	8002522 <HAL_RCC_OscConfig+0x63a>
 80025c0:	e06a      	b.n	8002698 <HAL_RCC_OscConfig+0x7b0>
 80025c2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80025c6:	2201      	movs	r2, #1
 80025c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ca:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	fa93 f2a3 	rbit	r2, r3
 80025d4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80025d8:	601a      	str	r2, [r3, #0]
  return result;
 80025da:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80025de:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025e0:	fab3 f383 	clz	r3, r3
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	461a      	mov	r2, r3
 80025e8:	4b8c      	ldr	r3, [pc, #560]	; (800281c <HAL_RCC_OscConfig+0x934>)
 80025ea:	4413      	add	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	461a      	mov	r2, r3
 80025f0:	2300      	movs	r3, #0
 80025f2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f4:	f7ff f9e0 	bl	80019b8 <HAL_GetTick>
 80025f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025fc:	e009      	b.n	8002612 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025fe:	f7ff f9db 	bl	80019b8 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e36b      	b.n	8002cea <HAL_RCC_OscConfig+0xe02>
 8002612:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002616:	2202      	movs	r2, #2
 8002618:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	fa93 f2a3 	rbit	r2, r3
 8002624:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800262e:	2202      	movs	r2, #2
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	fa93 f2a3 	rbit	r2, r3
 800263c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002646:	2202      	movs	r2, #2
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	fa93 f2a3 	rbit	r2, r3
 8002654:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002658:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800265a:	4b6f      	ldr	r3, [pc, #444]	; (8002818 <HAL_RCC_OscConfig+0x930>)
 800265c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800265e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002662:	2102      	movs	r1, #2
 8002664:	6019      	str	r1, [r3, #0]
 8002666:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	fa93 f1a3 	rbit	r1, r3
 8002670:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002674:	6019      	str	r1, [r3, #0]
  return result;
 8002676:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	fab3 f383 	clz	r3, r3
 8002680:	b2db      	uxtb	r3, r3
 8002682:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002686:	b2db      	uxtb	r3, r3
 8002688:	f003 031f 	and.w	r3, r3, #31
 800268c:	2101      	movs	r1, #1
 800268e:	fa01 f303 	lsl.w	r3, r1, r3
 8002692:	4013      	ands	r3, r2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1b2      	bne.n	80025fe <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002698:	1d3b      	adds	r3, r7, #4
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0304 	and.w	r3, r3, #4
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 8158 	beq.w	8002958 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026a8:	2300      	movs	r3, #0
 80026aa:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ae:	4b5a      	ldr	r3, [pc, #360]	; (8002818 <HAL_RCC_OscConfig+0x930>)
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d112      	bne.n	80026e0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ba:	4b57      	ldr	r3, [pc, #348]	; (8002818 <HAL_RCC_OscConfig+0x930>)
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	4a56      	ldr	r2, [pc, #344]	; (8002818 <HAL_RCC_OscConfig+0x930>)
 80026c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c4:	61d3      	str	r3, [r2, #28]
 80026c6:	4b54      	ldr	r3, [pc, #336]	; (8002818 <HAL_RCC_OscConfig+0x930>)
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80026ce:	f107 0308 	add.w	r3, r7, #8
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	f107 0308 	add.w	r3, r7, #8
 80026d8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80026da:	2301      	movs	r3, #1
 80026dc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e0:	4b4f      	ldr	r3, [pc, #316]	; (8002820 <HAL_RCC_OscConfig+0x938>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d11a      	bne.n	8002722 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ec:	4b4c      	ldr	r3, [pc, #304]	; (8002820 <HAL_RCC_OscConfig+0x938>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a4b      	ldr	r2, [pc, #300]	; (8002820 <HAL_RCC_OscConfig+0x938>)
 80026f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026f8:	f7ff f95e 	bl	80019b8 <HAL_GetTick>
 80026fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002700:	e009      	b.n	8002716 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002702:	f7ff f959 	bl	80019b8 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b64      	cmp	r3, #100	; 0x64
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e2e9      	b.n	8002cea <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002716:	4b42      	ldr	r3, [pc, #264]	; (8002820 <HAL_RCC_OscConfig+0x938>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0ef      	beq.n	8002702 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002722:	1d3b      	adds	r3, r7, #4
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d106      	bne.n	800273a <HAL_RCC_OscConfig+0x852>
 800272c:	4b3a      	ldr	r3, [pc, #232]	; (8002818 <HAL_RCC_OscConfig+0x930>)
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	4a39      	ldr	r2, [pc, #228]	; (8002818 <HAL_RCC_OscConfig+0x930>)
 8002732:	f043 0301 	orr.w	r3, r3, #1
 8002736:	6213      	str	r3, [r2, #32]
 8002738:	e02f      	b.n	800279a <HAL_RCC_OscConfig+0x8b2>
 800273a:	1d3b      	adds	r3, r7, #4
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10c      	bne.n	800275e <HAL_RCC_OscConfig+0x876>
 8002744:	4b34      	ldr	r3, [pc, #208]	; (8002818 <HAL_RCC_OscConfig+0x930>)
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	4a33      	ldr	r2, [pc, #204]	; (8002818 <HAL_RCC_OscConfig+0x930>)
 800274a:	f023 0301 	bic.w	r3, r3, #1
 800274e:	6213      	str	r3, [r2, #32]
 8002750:	4b31      	ldr	r3, [pc, #196]	; (8002818 <HAL_RCC_OscConfig+0x930>)
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	4a30      	ldr	r2, [pc, #192]	; (8002818 <HAL_RCC_OscConfig+0x930>)
 8002756:	f023 0304 	bic.w	r3, r3, #4
 800275a:	6213      	str	r3, [r2, #32]
 800275c:	e01d      	b.n	800279a <HAL_RCC_OscConfig+0x8b2>
 800275e:	1d3b      	adds	r3, r7, #4
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	2b05      	cmp	r3, #5
 8002766:	d10c      	bne.n	8002782 <HAL_RCC_OscConfig+0x89a>
 8002768:	4b2b      	ldr	r3, [pc, #172]	; (8002818 <HAL_RCC_OscConfig+0x930>)
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	4a2a      	ldr	r2, [pc, #168]	; (8002818 <HAL_RCC_OscConfig+0x930>)
 800276e:	f043 0304 	orr.w	r3, r3, #4
 8002772:	6213      	str	r3, [r2, #32]
 8002774:	4b28      	ldr	r3, [pc, #160]	; (8002818 <HAL_RCC_OscConfig+0x930>)
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	4a27      	ldr	r2, [pc, #156]	; (8002818 <HAL_RCC_OscConfig+0x930>)
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	6213      	str	r3, [r2, #32]
 8002780:	e00b      	b.n	800279a <HAL_RCC_OscConfig+0x8b2>
 8002782:	4b25      	ldr	r3, [pc, #148]	; (8002818 <HAL_RCC_OscConfig+0x930>)
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	4a24      	ldr	r2, [pc, #144]	; (8002818 <HAL_RCC_OscConfig+0x930>)
 8002788:	f023 0301 	bic.w	r3, r3, #1
 800278c:	6213      	str	r3, [r2, #32]
 800278e:	4b22      	ldr	r3, [pc, #136]	; (8002818 <HAL_RCC_OscConfig+0x930>)
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	4a21      	ldr	r2, [pc, #132]	; (8002818 <HAL_RCC_OscConfig+0x930>)
 8002794:	f023 0304 	bic.w	r3, r3, #4
 8002798:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800279a:	1d3b      	adds	r3, r7, #4
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d06b      	beq.n	800287c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a4:	f7ff f908 	bl	80019b8 <HAL_GetTick>
 80027a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ac:	e00b      	b.n	80027c6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ae:	f7ff f903 	bl	80019b8 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80027be:	4293      	cmp	r3, r2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e291      	b.n	8002cea <HAL_RCC_OscConfig+0xe02>
 80027c6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80027ca:	2202      	movs	r2, #2
 80027cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ce:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	fa93 f2a3 	rbit	r2, r3
 80027d8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80027e2:	2202      	movs	r2, #2
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	fa93 f2a3 	rbit	r2, r3
 80027f0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80027f4:	601a      	str	r2, [r3, #0]
  return result;
 80027f6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80027fa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027fc:	fab3 f383 	clz	r3, r3
 8002800:	b2db      	uxtb	r3, r3
 8002802:	095b      	lsrs	r3, r3, #5
 8002804:	b2db      	uxtb	r3, r3
 8002806:	f043 0302 	orr.w	r3, r3, #2
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d109      	bne.n	8002824 <HAL_RCC_OscConfig+0x93c>
 8002810:	4b01      	ldr	r3, [pc, #4]	; (8002818 <HAL_RCC_OscConfig+0x930>)
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	e014      	b.n	8002840 <HAL_RCC_OscConfig+0x958>
 8002816:	bf00      	nop
 8002818:	40021000 	.word	0x40021000
 800281c:	10908120 	.word	0x10908120
 8002820:	40007000 	.word	0x40007000
 8002824:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002828:	2202      	movs	r2, #2
 800282a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	fa93 f2a3 	rbit	r2, r3
 8002836:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	4bbb      	ldr	r3, [pc, #748]	; (8002b2c <HAL_RCC_OscConfig+0xc44>)
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002844:	2102      	movs	r1, #2
 8002846:	6011      	str	r1, [r2, #0]
 8002848:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800284c:	6812      	ldr	r2, [r2, #0]
 800284e:	fa92 f1a2 	rbit	r1, r2
 8002852:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002856:	6011      	str	r1, [r2, #0]
  return result;
 8002858:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800285c:	6812      	ldr	r2, [r2, #0]
 800285e:	fab2 f282 	clz	r2, r2
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	f002 021f 	and.w	r2, r2, #31
 800286e:	2101      	movs	r1, #1
 8002870:	fa01 f202 	lsl.w	r2, r1, r2
 8002874:	4013      	ands	r3, r2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d099      	beq.n	80027ae <HAL_RCC_OscConfig+0x8c6>
 800287a:	e063      	b.n	8002944 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287c:	f7ff f89c 	bl	80019b8 <HAL_GetTick>
 8002880:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002884:	e00b      	b.n	800289e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002886:	f7ff f897 	bl	80019b8 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	f241 3288 	movw	r2, #5000	; 0x1388
 8002896:	4293      	cmp	r3, r2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e225      	b.n	8002cea <HAL_RCC_OscConfig+0xe02>
 800289e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80028a2:	2202      	movs	r2, #2
 80028a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	fa93 f2a3 	rbit	r2, r3
 80028b0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80028ba:	2202      	movs	r2, #2
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	fa93 f2a3 	rbit	r2, r3
 80028c8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80028cc:	601a      	str	r2, [r3, #0]
  return result;
 80028ce:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80028d2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028d4:	fab3 f383 	clz	r3, r3
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	095b      	lsrs	r3, r3, #5
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	f043 0302 	orr.w	r3, r3, #2
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d102      	bne.n	80028ee <HAL_RCC_OscConfig+0xa06>
 80028e8:	4b90      	ldr	r3, [pc, #576]	; (8002b2c <HAL_RCC_OscConfig+0xc44>)
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	e00d      	b.n	800290a <HAL_RCC_OscConfig+0xa22>
 80028ee:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80028f2:	2202      	movs	r2, #2
 80028f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	fa93 f2a3 	rbit	r2, r3
 8002900:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	4b89      	ldr	r3, [pc, #548]	; (8002b2c <HAL_RCC_OscConfig+0xc44>)
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800290e:	2102      	movs	r1, #2
 8002910:	6011      	str	r1, [r2, #0]
 8002912:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	fa92 f1a2 	rbit	r1, r2
 800291c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002920:	6011      	str	r1, [r2, #0]
  return result;
 8002922:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002926:	6812      	ldr	r2, [r2, #0]
 8002928:	fab2 f282 	clz	r2, r2
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	f002 021f 	and.w	r2, r2, #31
 8002938:	2101      	movs	r1, #1
 800293a:	fa01 f202 	lsl.w	r2, r1, r2
 800293e:	4013      	ands	r3, r2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1a0      	bne.n	8002886 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002944:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002948:	2b01      	cmp	r3, #1
 800294a:	d105      	bne.n	8002958 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800294c:	4b77      	ldr	r3, [pc, #476]	; (8002b2c <HAL_RCC_OscConfig+0xc44>)
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	4a76      	ldr	r2, [pc, #472]	; (8002b2c <HAL_RCC_OscConfig+0xc44>)
 8002952:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002956:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002958:	1d3b      	adds	r3, r7, #4
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 81c2 	beq.w	8002ce8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002964:	4b71      	ldr	r3, [pc, #452]	; (8002b2c <HAL_RCC_OscConfig+0xc44>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f003 030c 	and.w	r3, r3, #12
 800296c:	2b08      	cmp	r3, #8
 800296e:	f000 819c 	beq.w	8002caa <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002972:	1d3b      	adds	r3, r7, #4
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	2b02      	cmp	r3, #2
 800297a:	f040 8114 	bne.w	8002ba6 <HAL_RCC_OscConfig+0xcbe>
 800297e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002982:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002986:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002988:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	fa93 f2a3 	rbit	r2, r3
 8002992:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002996:	601a      	str	r2, [r3, #0]
  return result;
 8002998:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800299c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800299e:	fab3 f383 	clz	r3, r3
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	461a      	mov	r2, r3
 80029b0:	2300      	movs	r3, #0
 80029b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b4:	f7ff f800 	bl	80019b8 <HAL_GetTick>
 80029b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029bc:	e009      	b.n	80029d2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029be:	f7fe fffb 	bl	80019b8 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e18b      	b.n	8002cea <HAL_RCC_OscConfig+0xe02>
 80029d2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80029d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029dc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	fa93 f2a3 	rbit	r2, r3
 80029e6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80029ea:	601a      	str	r2, [r3, #0]
  return result;
 80029ec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80029f0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029f2:	fab3 f383 	clz	r3, r3
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	095b      	lsrs	r3, r3, #5
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d102      	bne.n	8002a0c <HAL_RCC_OscConfig+0xb24>
 8002a06:	4b49      	ldr	r3, [pc, #292]	; (8002b2c <HAL_RCC_OscConfig+0xc44>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	e01b      	b.n	8002a44 <HAL_RCC_OscConfig+0xb5c>
 8002a0c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002a10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a16:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	fa93 f2a3 	rbit	r2, r3
 8002a20:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002a2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	fa93 f2a3 	rbit	r2, r3
 8002a3a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	4b3a      	ldr	r3, [pc, #232]	; (8002b2c <HAL_RCC_OscConfig+0xc44>)
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002a48:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a4c:	6011      	str	r1, [r2, #0]
 8002a4e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002a52:	6812      	ldr	r2, [r2, #0]
 8002a54:	fa92 f1a2 	rbit	r1, r2
 8002a58:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002a5c:	6011      	str	r1, [r2, #0]
  return result;
 8002a5e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	fab2 f282 	clz	r2, r2
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	f042 0220 	orr.w	r2, r2, #32
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	f002 021f 	and.w	r2, r2, #31
 8002a74:	2101      	movs	r1, #1
 8002a76:	fa01 f202 	lsl.w	r2, r1, r2
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d19e      	bne.n	80029be <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a80:	4b2a      	ldr	r3, [pc, #168]	; (8002b2c <HAL_RCC_OscConfig+0xc44>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a88:	1d3b      	adds	r3, r7, #4
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002a8e:	1d3b      	adds	r3, r7, #4
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	430b      	orrs	r3, r1
 8002a96:	4925      	ldr	r1, [pc, #148]	; (8002b2c <HAL_RCC_OscConfig+0xc44>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	604b      	str	r3, [r1, #4]
 8002a9c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002aa0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002aa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	fa93 f2a3 	rbit	r2, r3
 8002ab0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ab4:	601a      	str	r2, [r3, #0]
  return result;
 8002ab6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002aba:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002abc:	fab3 f383 	clz	r3, r3
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ac6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	461a      	mov	r2, r3
 8002ace:	2301      	movs	r3, #1
 8002ad0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad2:	f7fe ff71 	bl	80019b8 <HAL_GetTick>
 8002ad6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ada:	e009      	b.n	8002af0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002adc:	f7fe ff6c 	bl	80019b8 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e0fc      	b.n	8002cea <HAL_RCC_OscConfig+0xe02>
 8002af0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002af4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002af8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	fa93 f2a3 	rbit	r2, r3
 8002b04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b08:	601a      	str	r2, [r3, #0]
  return result;
 8002b0a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b0e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b10:	fab3 f383 	clz	r3, r3
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	095b      	lsrs	r3, r3, #5
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	f043 0301 	orr.w	r3, r3, #1
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d105      	bne.n	8002b30 <HAL_RCC_OscConfig+0xc48>
 8002b24:	4b01      	ldr	r3, [pc, #4]	; (8002b2c <HAL_RCC_OscConfig+0xc44>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	e01e      	b.n	8002b68 <HAL_RCC_OscConfig+0xc80>
 8002b2a:	bf00      	nop
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	fa93 f2a3 	rbit	r2, r3
 8002b44:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	fa93 f2a3 	rbit	r2, r3
 8002b5e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	4b63      	ldr	r3, [pc, #396]	; (8002cf4 <HAL_RCC_OscConfig+0xe0c>)
 8002b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b68:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002b6c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b70:	6011      	str	r1, [r2, #0]
 8002b72:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002b76:	6812      	ldr	r2, [r2, #0]
 8002b78:	fa92 f1a2 	rbit	r1, r2
 8002b7c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002b80:	6011      	str	r1, [r2, #0]
  return result;
 8002b82:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002b86:	6812      	ldr	r2, [r2, #0]
 8002b88:	fab2 f282 	clz	r2, r2
 8002b8c:	b2d2      	uxtb	r2, r2
 8002b8e:	f042 0220 	orr.w	r2, r2, #32
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	f002 021f 	and.w	r2, r2, #31
 8002b98:	2101      	movs	r1, #1
 8002b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d09b      	beq.n	8002adc <HAL_RCC_OscConfig+0xbf4>
 8002ba4:	e0a0      	b.n	8002ce8 <HAL_RCC_OscConfig+0xe00>
 8002ba6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002baa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	fa93 f2a3 	rbit	r2, r3
 8002bba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bbe:	601a      	str	r2, [r3, #0]
  return result;
 8002bc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bc4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc6:	fab3 f383 	clz	r3, r3
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bd0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	2300      	movs	r3, #0
 8002bda:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bdc:	f7fe feec 	bl	80019b8 <HAL_GetTick>
 8002be0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002be4:	e009      	b.n	8002bfa <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002be6:	f7fe fee7 	bl	80019b8 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e077      	b.n	8002cea <HAL_RCC_OscConfig+0xe02>
 8002bfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bfe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	fa93 f2a3 	rbit	r2, r3
 8002c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c12:	601a      	str	r2, [r3, #0]
  return result;
 8002c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c18:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c1a:	fab3 f383 	clz	r3, r3
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	095b      	lsrs	r3, r3, #5
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	f043 0301 	orr.w	r3, r3, #1
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d102      	bne.n	8002c34 <HAL_RCC_OscConfig+0xd4c>
 8002c2e:	4b31      	ldr	r3, [pc, #196]	; (8002cf4 <HAL_RCC_OscConfig+0xe0c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	e01b      	b.n	8002c6c <HAL_RCC_OscConfig+0xd84>
 8002c34:	f107 0320 	add.w	r3, r7, #32
 8002c38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3e:	f107 0320 	add.w	r3, r7, #32
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	fa93 f2a3 	rbit	r2, r3
 8002c48:	f107 031c 	add.w	r3, r7, #28
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	f107 0318 	add.w	r3, r7, #24
 8002c52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	f107 0318 	add.w	r3, r7, #24
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	fa93 f2a3 	rbit	r2, r3
 8002c62:	f107 0314 	add.w	r3, r7, #20
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	4b22      	ldr	r3, [pc, #136]	; (8002cf4 <HAL_RCC_OscConfig+0xe0c>)
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	f107 0210 	add.w	r2, r7, #16
 8002c70:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c74:	6011      	str	r1, [r2, #0]
 8002c76:	f107 0210 	add.w	r2, r7, #16
 8002c7a:	6812      	ldr	r2, [r2, #0]
 8002c7c:	fa92 f1a2 	rbit	r1, r2
 8002c80:	f107 020c 	add.w	r2, r7, #12
 8002c84:	6011      	str	r1, [r2, #0]
  return result;
 8002c86:	f107 020c 	add.w	r2, r7, #12
 8002c8a:	6812      	ldr	r2, [r2, #0]
 8002c8c:	fab2 f282 	clz	r2, r2
 8002c90:	b2d2      	uxtb	r2, r2
 8002c92:	f042 0220 	orr.w	r2, r2, #32
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	f002 021f 	and.w	r2, r2, #31
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d19e      	bne.n	8002be6 <HAL_RCC_OscConfig+0xcfe>
 8002ca8:	e01e      	b.n	8002ce8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002caa:	1d3b      	adds	r3, r7, #4
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	69db      	ldr	r3, [r3, #28]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d101      	bne.n	8002cb8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e018      	b.n	8002cea <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cb8:	4b0e      	ldr	r3, [pc, #56]	; (8002cf4 <HAL_RCC_OscConfig+0xe0c>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002cc0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002cc4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cc8:	1d3b      	adds	r3, r7, #4
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d108      	bne.n	8002ce4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002cd2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002cd6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002cda:	1d3b      	adds	r3, r7, #4
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d001      	beq.n	8002ce8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e000      	b.n	8002cea <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40021000 	.word	0x40021000

08002cf8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b09e      	sub	sp, #120	; 0x78
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d02:	2300      	movs	r3, #0
 8002d04:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e162      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d10:	4b90      	ldr	r3, [pc, #576]	; (8002f54 <HAL_RCC_ClockConfig+0x25c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d910      	bls.n	8002d40 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1e:	4b8d      	ldr	r3, [pc, #564]	; (8002f54 <HAL_RCC_ClockConfig+0x25c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f023 0207 	bic.w	r2, r3, #7
 8002d26:	498b      	ldr	r1, [pc, #556]	; (8002f54 <HAL_RCC_ClockConfig+0x25c>)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2e:	4b89      	ldr	r3, [pc, #548]	; (8002f54 <HAL_RCC_ClockConfig+0x25c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d001      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e14a      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d008      	beq.n	8002d5e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d4c:	4b82      	ldr	r3, [pc, #520]	; (8002f58 <HAL_RCC_ClockConfig+0x260>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	497f      	ldr	r1, [pc, #508]	; (8002f58 <HAL_RCC_ClockConfig+0x260>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 80dc 	beq.w	8002f24 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d13c      	bne.n	8002dee <HAL_RCC_ClockConfig+0xf6>
 8002d74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d78:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d7c:	fa93 f3a3 	rbit	r3, r3
 8002d80:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d84:	fab3 f383 	clz	r3, r3
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	095b      	lsrs	r3, r3, #5
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d102      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xa6>
 8002d98:	4b6f      	ldr	r3, [pc, #444]	; (8002f58 <HAL_RCC_ClockConfig+0x260>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	e00f      	b.n	8002dbe <HAL_RCC_ClockConfig+0xc6>
 8002d9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002da2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002da6:	fa93 f3a3 	rbit	r3, r3
 8002daa:	667b      	str	r3, [r7, #100]	; 0x64
 8002dac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002db0:	663b      	str	r3, [r7, #96]	; 0x60
 8002db2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002db4:	fa93 f3a3 	rbit	r3, r3
 8002db8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002dba:	4b67      	ldr	r3, [pc, #412]	; (8002f58 <HAL_RCC_ClockConfig+0x260>)
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dc2:	65ba      	str	r2, [r7, #88]	; 0x58
 8002dc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002dc6:	fa92 f2a2 	rbit	r2, r2
 8002dca:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002dcc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002dce:	fab2 f282 	clz	r2, r2
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	f042 0220 	orr.w	r2, r2, #32
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	f002 021f 	and.w	r2, r2, #31
 8002dde:	2101      	movs	r1, #1
 8002de0:	fa01 f202 	lsl.w	r2, r1, r2
 8002de4:	4013      	ands	r3, r2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d17b      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e0f3      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d13c      	bne.n	8002e70 <HAL_RCC_ClockConfig+0x178>
 8002df6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dfa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dfe:	fa93 f3a3 	rbit	r3, r3
 8002e02:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e06:	fab3 f383 	clz	r3, r3
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	095b      	lsrs	r3, r3, #5
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d102      	bne.n	8002e20 <HAL_RCC_ClockConfig+0x128>
 8002e1a:	4b4f      	ldr	r3, [pc, #316]	; (8002f58 <HAL_RCC_ClockConfig+0x260>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	e00f      	b.n	8002e40 <HAL_RCC_ClockConfig+0x148>
 8002e20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e24:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e28:	fa93 f3a3 	rbit	r3, r3
 8002e2c:	647b      	str	r3, [r7, #68]	; 0x44
 8002e2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e32:	643b      	str	r3, [r7, #64]	; 0x40
 8002e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e36:	fa93 f3a3 	rbit	r3, r3
 8002e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e3c:	4b46      	ldr	r3, [pc, #280]	; (8002f58 <HAL_RCC_ClockConfig+0x260>)
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e44:	63ba      	str	r2, [r7, #56]	; 0x38
 8002e46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e48:	fa92 f2a2 	rbit	r2, r2
 8002e4c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002e4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e50:	fab2 f282 	clz	r2, r2
 8002e54:	b2d2      	uxtb	r2, r2
 8002e56:	f042 0220 	orr.w	r2, r2, #32
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	f002 021f 	and.w	r2, r2, #31
 8002e60:	2101      	movs	r1, #1
 8002e62:	fa01 f202 	lsl.w	r2, r1, r2
 8002e66:	4013      	ands	r3, r2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d13a      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e0b2      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x2de>
 8002e70:	2302      	movs	r3, #2
 8002e72:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e76:	fa93 f3a3 	rbit	r3, r3
 8002e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e7e:	fab3 f383 	clz	r3, r3
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	095b      	lsrs	r3, r3, #5
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	f043 0301 	orr.w	r3, r3, #1
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d102      	bne.n	8002e98 <HAL_RCC_ClockConfig+0x1a0>
 8002e92:	4b31      	ldr	r3, [pc, #196]	; (8002f58 <HAL_RCC_ClockConfig+0x260>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	e00d      	b.n	8002eb4 <HAL_RCC_ClockConfig+0x1bc>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9e:	fa93 f3a3 	rbit	r3, r3
 8002ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	623b      	str	r3, [r7, #32]
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	fa93 f3a3 	rbit	r3, r3
 8002eae:	61fb      	str	r3, [r7, #28]
 8002eb0:	4b29      	ldr	r3, [pc, #164]	; (8002f58 <HAL_RCC_ClockConfig+0x260>)
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb4:	2202      	movs	r2, #2
 8002eb6:	61ba      	str	r2, [r7, #24]
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	fa92 f2a2 	rbit	r2, r2
 8002ebe:	617a      	str	r2, [r7, #20]
  return result;
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	fab2 f282 	clz	r2, r2
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	f042 0220 	orr.w	r2, r2, #32
 8002ecc:	b2d2      	uxtb	r2, r2
 8002ece:	f002 021f 	and.w	r2, r2, #31
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed8:	4013      	ands	r3, r2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e079      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ee2:	4b1d      	ldr	r3, [pc, #116]	; (8002f58 <HAL_RCC_ClockConfig+0x260>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f023 0203 	bic.w	r2, r3, #3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	491a      	ldr	r1, [pc, #104]	; (8002f58 <HAL_RCC_ClockConfig+0x260>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ef4:	f7fe fd60 	bl	80019b8 <HAL_GetTick>
 8002ef8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002efa:	e00a      	b.n	8002f12 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002efc:	f7fe fd5c 	bl	80019b8 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e061      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f12:	4b11      	ldr	r3, [pc, #68]	; (8002f58 <HAL_RCC_ClockConfig+0x260>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f003 020c 	and.w	r2, r3, #12
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d1eb      	bne.n	8002efc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f24:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <HAL_RCC_ClockConfig+0x25c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d214      	bcs.n	8002f5c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f32:	4b08      	ldr	r3, [pc, #32]	; (8002f54 <HAL_RCC_ClockConfig+0x25c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f023 0207 	bic.w	r2, r3, #7
 8002f3a:	4906      	ldr	r1, [pc, #24]	; (8002f54 <HAL_RCC_ClockConfig+0x25c>)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f42:	4b04      	ldr	r3, [pc, #16]	; (8002f54 <HAL_RCC_ClockConfig+0x25c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0307 	and.w	r3, r3, #7
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d005      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e040      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x2de>
 8002f54:	40022000 	.word	0x40022000
 8002f58:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d008      	beq.n	8002f7a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f68:	4b1d      	ldr	r3, [pc, #116]	; (8002fe0 <HAL_RCC_ClockConfig+0x2e8>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	491a      	ldr	r1, [pc, #104]	; (8002fe0 <HAL_RCC_ClockConfig+0x2e8>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d009      	beq.n	8002f9a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f86:	4b16      	ldr	r3, [pc, #88]	; (8002fe0 <HAL_RCC_ClockConfig+0x2e8>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	4912      	ldr	r1, [pc, #72]	; (8002fe0 <HAL_RCC_ClockConfig+0x2e8>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f9a:	f000 f829 	bl	8002ff0 <HAL_RCC_GetSysClockFreq>
 8002f9e:	4601      	mov	r1, r0
 8002fa0:	4b0f      	ldr	r3, [pc, #60]	; (8002fe0 <HAL_RCC_ClockConfig+0x2e8>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fa8:	22f0      	movs	r2, #240	; 0xf0
 8002faa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	fa92 f2a2 	rbit	r2, r2
 8002fb2:	60fa      	str	r2, [r7, #12]
  return result;
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	fab2 f282 	clz	r2, r2
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	40d3      	lsrs	r3, r2
 8002fbe:	4a09      	ldr	r2, [pc, #36]	; (8002fe4 <HAL_RCC_ClockConfig+0x2ec>)
 8002fc0:	5cd3      	ldrb	r3, [r2, r3]
 8002fc2:	fa21 f303 	lsr.w	r3, r1, r3
 8002fc6:	4a08      	ldr	r2, [pc, #32]	; (8002fe8 <HAL_RCC_ClockConfig+0x2f0>)
 8002fc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002fca:	4b08      	ldr	r3, [pc, #32]	; (8002fec <HAL_RCC_ClockConfig+0x2f4>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fe fba0 	bl	8001714 <HAL_InitTick>
  
  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3778      	adds	r7, #120	; 0x78
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	0800ab80 	.word	0x0800ab80
 8002fe8:	2000001c 	.word	0x2000001c
 8002fec:	20000020 	.word	0x20000020

08002ff0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b08b      	sub	sp, #44	; 0x2c
 8002ff4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61fb      	str	r3, [r7, #28]
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61bb      	str	r3, [r7, #24]
 8002ffe:	2300      	movs	r3, #0
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
 8003002:	2300      	movs	r3, #0
 8003004:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003006:	2300      	movs	r3, #0
 8003008:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800300a:	4b29      	ldr	r3, [pc, #164]	; (80030b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	f003 030c 	and.w	r3, r3, #12
 8003016:	2b04      	cmp	r3, #4
 8003018:	d002      	beq.n	8003020 <HAL_RCC_GetSysClockFreq+0x30>
 800301a:	2b08      	cmp	r3, #8
 800301c:	d003      	beq.n	8003026 <HAL_RCC_GetSysClockFreq+0x36>
 800301e:	e03c      	b.n	800309a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003020:	4b24      	ldr	r3, [pc, #144]	; (80030b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003022:	623b      	str	r3, [r7, #32]
      break;
 8003024:	e03c      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800302c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003030:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	fa92 f2a2 	rbit	r2, r2
 8003038:	607a      	str	r2, [r7, #4]
  return result;
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	fab2 f282 	clz	r2, r2
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	40d3      	lsrs	r3, r2
 8003044:	4a1c      	ldr	r2, [pc, #112]	; (80030b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003046:	5cd3      	ldrb	r3, [r2, r3]
 8003048:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800304a:	4b19      	ldr	r3, [pc, #100]	; (80030b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800304c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	220f      	movs	r2, #15
 8003054:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	fa92 f2a2 	rbit	r2, r2
 800305c:	60fa      	str	r2, [r7, #12]
  return result;
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	fab2 f282 	clz	r2, r2
 8003064:	b2d2      	uxtb	r2, r2
 8003066:	40d3      	lsrs	r3, r2
 8003068:	4a14      	ldr	r2, [pc, #80]	; (80030bc <HAL_RCC_GetSysClockFreq+0xcc>)
 800306a:	5cd3      	ldrb	r3, [r2, r3]
 800306c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d008      	beq.n	800308a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003078:	4a0e      	ldr	r2, [pc, #56]	; (80030b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	fb02 f303 	mul.w	r3, r2, r3
 8003086:	627b      	str	r3, [r7, #36]	; 0x24
 8003088:	e004      	b.n	8003094 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	4a0c      	ldr	r2, [pc, #48]	; (80030c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800308e:	fb02 f303 	mul.w	r3, r2, r3
 8003092:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	623b      	str	r3, [r7, #32]
      break;
 8003098:	e002      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800309a:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800309c:	623b      	str	r3, [r7, #32]
      break;
 800309e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030a0:	6a3b      	ldr	r3, [r7, #32]
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	372c      	adds	r7, #44	; 0x2c
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40021000 	.word	0x40021000
 80030b4:	007a1200 	.word	0x007a1200
 80030b8:	0800ab98 	.word	0x0800ab98
 80030bc:	0800aba8 	.word	0x0800aba8
 80030c0:	003d0900 	.word	0x003d0900

080030c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c8:	4b03      	ldr	r3, [pc, #12]	; (80030d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80030ca:	681b      	ldr	r3, [r3, #0]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	2000001c 	.word	0x2000001c

080030dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80030e2:	f7ff ffef 	bl	80030c4 <HAL_RCC_GetHCLKFreq>
 80030e6:	4601      	mov	r1, r0
 80030e8:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030f0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80030f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	fa92 f2a2 	rbit	r2, r2
 80030fc:	603a      	str	r2, [r7, #0]
  return result;
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	fab2 f282 	clz	r2, r2
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	40d3      	lsrs	r3, r2
 8003108:	4a04      	ldr	r2, [pc, #16]	; (800311c <HAL_RCC_GetPCLK1Freq+0x40>)
 800310a:	5cd3      	ldrb	r3, [r2, r3]
 800310c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003110:	4618      	mov	r0, r3
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40021000 	.word	0x40021000
 800311c:	0800ab90 	.word	0x0800ab90

08003120 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	220f      	movs	r2, #15
 800312e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003130:	4b12      	ldr	r3, [pc, #72]	; (800317c <HAL_RCC_GetClockConfig+0x5c>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 0203 	and.w	r2, r3, #3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800313c:	4b0f      	ldr	r3, [pc, #60]	; (800317c <HAL_RCC_GetClockConfig+0x5c>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003148:	4b0c      	ldr	r3, [pc, #48]	; (800317c <HAL_RCC_GetClockConfig+0x5c>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003154:	4b09      	ldr	r3, [pc, #36]	; (800317c <HAL_RCC_GetClockConfig+0x5c>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	08db      	lsrs	r3, r3, #3
 800315a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003162:	4b07      	ldr	r3, [pc, #28]	; (8003180 <HAL_RCC_GetClockConfig+0x60>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0207 	and.w	r2, r3, #7
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	601a      	str	r2, [r3, #0]
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	40021000 	.word	0x40021000
 8003180:	40022000 	.word	0x40022000

08003184 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b092      	sub	sp, #72	; 0x48
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800318c:	2300      	movs	r3, #0
 800318e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003194:	2300      	movs	r3, #0
 8003196:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 80d4 	beq.w	8003350 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031a8:	4b4e      	ldr	r3, [pc, #312]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10e      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031b4:	4b4b      	ldr	r3, [pc, #300]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	4a4a      	ldr	r2, [pc, #296]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031be:	61d3      	str	r3, [r2, #28]
 80031c0:	4b48      	ldr	r3, [pc, #288]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c2:	69db      	ldr	r3, [r3, #28]
 80031c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c8:	60bb      	str	r3, [r7, #8]
 80031ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031cc:	2301      	movs	r3, #1
 80031ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d2:	4b45      	ldr	r3, [pc, #276]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d118      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031de:	4b42      	ldr	r3, [pc, #264]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a41      	ldr	r2, [pc, #260]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ea:	f7fe fbe5 	bl	80019b8 <HAL_GetTick>
 80031ee:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f0:	e008      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031f2:	f7fe fbe1 	bl	80019b8 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b64      	cmp	r3, #100	; 0x64
 80031fe:	d901      	bls.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e169      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003204:	4b38      	ldr	r3, [pc, #224]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0f0      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003210:	4b34      	ldr	r3, [pc, #208]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003218:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800321a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 8084 	beq.w	800332a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800322a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800322c:	429a      	cmp	r2, r3
 800322e:	d07c      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003230:	4b2c      	ldr	r3, [pc, #176]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003238:	63fb      	str	r3, [r7, #60]	; 0x3c
 800323a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800323e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003242:	fa93 f3a3 	rbit	r3, r3
 8003246:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800324a:	fab3 f383 	clz	r3, r3
 800324e:	b2db      	uxtb	r3, r3
 8003250:	461a      	mov	r2, r3
 8003252:	4b26      	ldr	r3, [pc, #152]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003254:	4413      	add	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	461a      	mov	r2, r3
 800325a:	2301      	movs	r3, #1
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003262:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003266:	fa93 f3a3 	rbit	r3, r3
 800326a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800326c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800326e:	fab3 f383 	clz	r3, r3
 8003272:	b2db      	uxtb	r3, r3
 8003274:	461a      	mov	r2, r3
 8003276:	4b1d      	ldr	r3, [pc, #116]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003278:	4413      	add	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	461a      	mov	r2, r3
 800327e:	2300      	movs	r3, #0
 8003280:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003282:	4a18      	ldr	r2, [pc, #96]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003286:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d04b      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003292:	f7fe fb91 	bl	80019b8 <HAL_GetTick>
 8003296:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003298:	e00a      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800329a:	f7fe fb8d 	bl	80019b8 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e113      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80032b0:	2302      	movs	r3, #2
 80032b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b6:	fa93 f3a3 	rbit	r3, r3
 80032ba:	627b      	str	r3, [r7, #36]	; 0x24
 80032bc:	2302      	movs	r3, #2
 80032be:	623b      	str	r3, [r7, #32]
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	fa93 f3a3 	rbit	r3, r3
 80032c6:	61fb      	str	r3, [r7, #28]
  return result;
 80032c8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ca:	fab3 f383 	clz	r3, r3
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	095b      	lsrs	r3, r3, #5
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	f043 0302 	orr.w	r3, r3, #2
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d108      	bne.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80032de:	4b01      	ldr	r3, [pc, #4]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	e00d      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80032e4:	40021000 	.word	0x40021000
 80032e8:	40007000 	.word	0x40007000
 80032ec:	10908100 	.word	0x10908100
 80032f0:	2302      	movs	r3, #2
 80032f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	fa93 f3a3 	rbit	r3, r3
 80032fa:	617b      	str	r3, [r7, #20]
 80032fc:	4b78      	ldr	r3, [pc, #480]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	2202      	movs	r2, #2
 8003302:	613a      	str	r2, [r7, #16]
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	fa92 f2a2 	rbit	r2, r2
 800330a:	60fa      	str	r2, [r7, #12]
  return result;
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	fab2 f282 	clz	r2, r2
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003318:	b2d2      	uxtb	r2, r2
 800331a:	f002 021f 	and.w	r2, r2, #31
 800331e:	2101      	movs	r1, #1
 8003320:	fa01 f202 	lsl.w	r2, r1, r2
 8003324:	4013      	ands	r3, r2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0b7      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800332a:	4b6d      	ldr	r3, [pc, #436]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	496a      	ldr	r1, [pc, #424]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003338:	4313      	orrs	r3, r2
 800333a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800333c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003340:	2b01      	cmp	r3, #1
 8003342:	d105      	bne.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003344:	4b66      	ldr	r3, [pc, #408]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003346:	69db      	ldr	r3, [r3, #28]
 8003348:	4a65      	ldr	r2, [pc, #404]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800334a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800334e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b00      	cmp	r3, #0
 800335a:	d008      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800335c:	4b60      	ldr	r3, [pc, #384]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800335e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003360:	f023 0203 	bic.w	r2, r3, #3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	495d      	ldr	r1, [pc, #372]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800336a:	4313      	orrs	r3, r2
 800336c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d008      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800337a:	4b59      	ldr	r3, [pc, #356]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	4956      	ldr	r1, [pc, #344]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003388:	4313      	orrs	r3, r2
 800338a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	d008      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003398:	4b51      	ldr	r3, [pc, #324]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800339a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	494e      	ldr	r1, [pc, #312]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0320 	and.w	r3, r3, #32
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d008      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033b6:	4b4a      	ldr	r3, [pc, #296]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	f023 0210 	bic.w	r2, r3, #16
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	4947      	ldr	r1, [pc, #284]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d008      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80033d4:	4b42      	ldr	r3, [pc, #264]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e0:	493f      	ldr	r1, [pc, #252]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d008      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033f2:	4b3b      	ldr	r3, [pc, #236]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	f023 0220 	bic.w	r2, r3, #32
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	4938      	ldr	r1, [pc, #224]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003400:	4313      	orrs	r3, r2
 8003402:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	2b00      	cmp	r3, #0
 800340e:	d008      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003410:	4b33      	ldr	r3, [pc, #204]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003414:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	4930      	ldr	r1, [pc, #192]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800341e:	4313      	orrs	r3, r2
 8003420:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0310 	and.w	r3, r3, #16
 800342a:	2b00      	cmp	r3, #0
 800342c:	d008      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800342e:	4b2c      	ldr	r3, [pc, #176]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	4929      	ldr	r1, [pc, #164]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800343c:	4313      	orrs	r3, r2
 800343e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003448:	2b00      	cmp	r3, #0
 800344a:	d008      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800344c:	4b24      	ldr	r3, [pc, #144]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003458:	4921      	ldr	r1, [pc, #132]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800345a:	4313      	orrs	r3, r2
 800345c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003466:	2b00      	cmp	r3, #0
 8003468:	d008      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800346a:	4b1d      	ldr	r3, [pc, #116]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800346c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	491a      	ldr	r1, [pc, #104]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003478:	4313      	orrs	r3, r2
 800347a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003484:	2b00      	cmp	r3, #0
 8003486:	d008      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003488:	4b15      	ldr	r3, [pc, #84]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800348a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003494:	4912      	ldr	r1, [pc, #72]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003496:	4313      	orrs	r3, r2
 8003498:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d008      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80034a6:	4b0e      	ldr	r3, [pc, #56]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	490b      	ldr	r1, [pc, #44]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d008      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80034c4:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d0:	4903      	ldr	r1, [pc, #12]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3748      	adds	r7, #72	; 0x48
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40021000 	.word	0x40021000

080034e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e049      	b.n	800358a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d106      	bne.n	8003510 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7fe f850 	bl	80015b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3304      	adds	r3, #4
 8003520:	4619      	mov	r1, r3
 8003522:	4610      	mov	r0, r2
 8003524:	f000 fd16 	bl	8003f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
	...

08003594 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d001      	beq.n	80035ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e04a      	b.n	8003642 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0201 	orr.w	r2, r2, #1
 80035c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a21      	ldr	r2, [pc, #132]	; (8003650 <HAL_TIM_Base_Start_IT+0xbc>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d018      	beq.n	8003600 <HAL_TIM_Base_Start_IT+0x6c>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d6:	d013      	beq.n	8003600 <HAL_TIM_Base_Start_IT+0x6c>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a1d      	ldr	r2, [pc, #116]	; (8003654 <HAL_TIM_Base_Start_IT+0xc0>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d00e      	beq.n	8003600 <HAL_TIM_Base_Start_IT+0x6c>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a1c      	ldr	r2, [pc, #112]	; (8003658 <HAL_TIM_Base_Start_IT+0xc4>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d009      	beq.n	8003600 <HAL_TIM_Base_Start_IT+0x6c>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a1a      	ldr	r2, [pc, #104]	; (800365c <HAL_TIM_Base_Start_IT+0xc8>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d004      	beq.n	8003600 <HAL_TIM_Base_Start_IT+0x6c>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a19      	ldr	r2, [pc, #100]	; (8003660 <HAL_TIM_Base_Start_IT+0xcc>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d115      	bne.n	800362c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689a      	ldr	r2, [r3, #8]
 8003606:	4b17      	ldr	r3, [pc, #92]	; (8003664 <HAL_TIM_Base_Start_IT+0xd0>)
 8003608:	4013      	ands	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2b06      	cmp	r3, #6
 8003610:	d015      	beq.n	800363e <HAL_TIM_Base_Start_IT+0xaa>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003618:	d011      	beq.n	800363e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f042 0201 	orr.w	r2, r2, #1
 8003628:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800362a:	e008      	b.n	800363e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 0201 	orr.w	r2, r2, #1
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	e000      	b.n	8003640 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800363e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	40012c00 	.word	0x40012c00
 8003654:	40000400 	.word	0x40000400
 8003658:	40000800 	.word	0x40000800
 800365c:	40013400 	.word	0x40013400
 8003660:	40014000 	.word	0x40014000
 8003664:	00010007 	.word	0x00010007

08003668 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e049      	b.n	800370e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d106      	bne.n	8003694 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7fd ffae 	bl	80015f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3304      	adds	r3, #4
 80036a4:	4619      	mov	r1, r3
 80036a6:	4610      	mov	r0, r2
 80036a8:	f000 fc54 	bl	8003f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
	...

08003718 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d109      	bne.n	800373c <HAL_TIM_PWM_Start+0x24>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b01      	cmp	r3, #1
 8003732:	bf14      	ite	ne
 8003734:	2301      	movne	r3, #1
 8003736:	2300      	moveq	r3, #0
 8003738:	b2db      	uxtb	r3, r3
 800373a:	e03c      	b.n	80037b6 <HAL_TIM_PWM_Start+0x9e>
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	2b04      	cmp	r3, #4
 8003740:	d109      	bne.n	8003756 <HAL_TIM_PWM_Start+0x3e>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b01      	cmp	r3, #1
 800374c:	bf14      	ite	ne
 800374e:	2301      	movne	r3, #1
 8003750:	2300      	moveq	r3, #0
 8003752:	b2db      	uxtb	r3, r3
 8003754:	e02f      	b.n	80037b6 <HAL_TIM_PWM_Start+0x9e>
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	2b08      	cmp	r3, #8
 800375a:	d109      	bne.n	8003770 <HAL_TIM_PWM_Start+0x58>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b01      	cmp	r3, #1
 8003766:	bf14      	ite	ne
 8003768:	2301      	movne	r3, #1
 800376a:	2300      	moveq	r3, #0
 800376c:	b2db      	uxtb	r3, r3
 800376e:	e022      	b.n	80037b6 <HAL_TIM_PWM_Start+0x9e>
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	2b0c      	cmp	r3, #12
 8003774:	d109      	bne.n	800378a <HAL_TIM_PWM_Start+0x72>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b01      	cmp	r3, #1
 8003780:	bf14      	ite	ne
 8003782:	2301      	movne	r3, #1
 8003784:	2300      	moveq	r3, #0
 8003786:	b2db      	uxtb	r3, r3
 8003788:	e015      	b.n	80037b6 <HAL_TIM_PWM_Start+0x9e>
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	2b10      	cmp	r3, #16
 800378e:	d109      	bne.n	80037a4 <HAL_TIM_PWM_Start+0x8c>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b01      	cmp	r3, #1
 800379a:	bf14      	ite	ne
 800379c:	2301      	movne	r3, #1
 800379e:	2300      	moveq	r3, #0
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	e008      	b.n	80037b6 <HAL_TIM_PWM_Start+0x9e>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	bf14      	ite	ne
 80037b0:	2301      	movne	r3, #1
 80037b2:	2300      	moveq	r3, #0
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e097      	b.n	80038ee <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d104      	bne.n	80037ce <HAL_TIM_PWM_Start+0xb6>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2202      	movs	r2, #2
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037cc:	e023      	b.n	8003816 <HAL_TIM_PWM_Start+0xfe>
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	2b04      	cmp	r3, #4
 80037d2:	d104      	bne.n	80037de <HAL_TIM_PWM_Start+0xc6>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2202      	movs	r2, #2
 80037d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037dc:	e01b      	b.n	8003816 <HAL_TIM_PWM_Start+0xfe>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d104      	bne.n	80037ee <HAL_TIM_PWM_Start+0xd6>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2202      	movs	r2, #2
 80037e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037ec:	e013      	b.n	8003816 <HAL_TIM_PWM_Start+0xfe>
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	2b0c      	cmp	r3, #12
 80037f2:	d104      	bne.n	80037fe <HAL_TIM_PWM_Start+0xe6>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2202      	movs	r2, #2
 80037f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037fc:	e00b      	b.n	8003816 <HAL_TIM_PWM_Start+0xfe>
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	2b10      	cmp	r3, #16
 8003802:	d104      	bne.n	800380e <HAL_TIM_PWM_Start+0xf6>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800380c:	e003      	b.n	8003816 <HAL_TIM_PWM_Start+0xfe>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2202      	movs	r2, #2
 8003812:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2201      	movs	r2, #1
 800381c:	6839      	ldr	r1, [r7, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f000 ff98 	bl	8004754 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a33      	ldr	r2, [pc, #204]	; (80038f8 <HAL_TIM_PWM_Start+0x1e0>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d013      	beq.n	8003856 <HAL_TIM_PWM_Start+0x13e>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a32      	ldr	r2, [pc, #200]	; (80038fc <HAL_TIM_PWM_Start+0x1e4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d00e      	beq.n	8003856 <HAL_TIM_PWM_Start+0x13e>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a30      	ldr	r2, [pc, #192]	; (8003900 <HAL_TIM_PWM_Start+0x1e8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d009      	beq.n	8003856 <HAL_TIM_PWM_Start+0x13e>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a2f      	ldr	r2, [pc, #188]	; (8003904 <HAL_TIM_PWM_Start+0x1ec>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d004      	beq.n	8003856 <HAL_TIM_PWM_Start+0x13e>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a2d      	ldr	r2, [pc, #180]	; (8003908 <HAL_TIM_PWM_Start+0x1f0>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d101      	bne.n	800385a <HAL_TIM_PWM_Start+0x142>
 8003856:	2301      	movs	r3, #1
 8003858:	e000      	b.n	800385c <HAL_TIM_PWM_Start+0x144>
 800385a:	2300      	movs	r3, #0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d007      	beq.n	8003870 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800386e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a20      	ldr	r2, [pc, #128]	; (80038f8 <HAL_TIM_PWM_Start+0x1e0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d018      	beq.n	80038ac <HAL_TIM_PWM_Start+0x194>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003882:	d013      	beq.n	80038ac <HAL_TIM_PWM_Start+0x194>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a20      	ldr	r2, [pc, #128]	; (800390c <HAL_TIM_PWM_Start+0x1f4>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d00e      	beq.n	80038ac <HAL_TIM_PWM_Start+0x194>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a1f      	ldr	r2, [pc, #124]	; (8003910 <HAL_TIM_PWM_Start+0x1f8>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d009      	beq.n	80038ac <HAL_TIM_PWM_Start+0x194>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a17      	ldr	r2, [pc, #92]	; (80038fc <HAL_TIM_PWM_Start+0x1e4>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d004      	beq.n	80038ac <HAL_TIM_PWM_Start+0x194>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a16      	ldr	r2, [pc, #88]	; (8003900 <HAL_TIM_PWM_Start+0x1e8>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d115      	bne.n	80038d8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	4b18      	ldr	r3, [pc, #96]	; (8003914 <HAL_TIM_PWM_Start+0x1fc>)
 80038b4:	4013      	ands	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2b06      	cmp	r3, #6
 80038bc:	d015      	beq.n	80038ea <HAL_TIM_PWM_Start+0x1d2>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038c4:	d011      	beq.n	80038ea <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f042 0201 	orr.w	r2, r2, #1
 80038d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d6:	e008      	b.n	80038ea <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f042 0201 	orr.w	r2, r2, #1
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	e000      	b.n	80038ec <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	40012c00 	.word	0x40012c00
 80038fc:	40013400 	.word	0x40013400
 8003900:	40014000 	.word	0x40014000
 8003904:	40014400 	.word	0x40014400
 8003908:	40014800 	.word	0x40014800
 800390c:	40000400 	.word	0x40000400
 8003910:	40000800 	.word	0x40000800
 8003914:	00010007 	.word	0x00010007

08003918 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b02      	cmp	r3, #2
 800392c:	d122      	bne.n	8003974 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b02      	cmp	r3, #2
 800393a:	d11b      	bne.n	8003974 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f06f 0202 	mvn.w	r2, #2
 8003944:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 fadc 	bl	8003f18 <HAL_TIM_IC_CaptureCallback>
 8003960:	e005      	b.n	800396e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 face 	bl	8003f04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 fadf 	bl	8003f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	f003 0304 	and.w	r3, r3, #4
 800397e:	2b04      	cmp	r3, #4
 8003980:	d122      	bne.n	80039c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b04      	cmp	r3, #4
 800398e:	d11b      	bne.n	80039c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f06f 0204 	mvn.w	r2, #4
 8003998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2202      	movs	r2, #2
 800399e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 fab2 	bl	8003f18 <HAL_TIM_IC_CaptureCallback>
 80039b4:	e005      	b.n	80039c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 faa4 	bl	8003f04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 fab5 	bl	8003f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d122      	bne.n	8003a1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f003 0308 	and.w	r3, r3, #8
 80039e0:	2b08      	cmp	r3, #8
 80039e2:	d11b      	bne.n	8003a1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f06f 0208 	mvn.w	r2, #8
 80039ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2204      	movs	r2, #4
 80039f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	f003 0303 	and.w	r3, r3, #3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 fa88 	bl	8003f18 <HAL_TIM_IC_CaptureCallback>
 8003a08:	e005      	b.n	8003a16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 fa7a 	bl	8003f04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 fa8b 	bl	8003f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	f003 0310 	and.w	r3, r3, #16
 8003a26:	2b10      	cmp	r3, #16
 8003a28:	d122      	bne.n	8003a70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f003 0310 	and.w	r3, r3, #16
 8003a34:	2b10      	cmp	r3, #16
 8003a36:	d11b      	bne.n	8003a70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f06f 0210 	mvn.w	r2, #16
 8003a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2208      	movs	r2, #8
 8003a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	69db      	ldr	r3, [r3, #28]
 8003a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 fa5e 	bl	8003f18 <HAL_TIM_IC_CaptureCallback>
 8003a5c:	e005      	b.n	8003a6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 fa50 	bl	8003f04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 fa61 	bl	8003f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d10e      	bne.n	8003a9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d107      	bne.n	8003a9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f06f 0201 	mvn.w	r2, #1
 8003a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7fd fd4e 	bl	8001538 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa6:	2b80      	cmp	r3, #128	; 0x80
 8003aa8:	d10e      	bne.n	8003ac8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab4:	2b80      	cmp	r3, #128	; 0x80
 8003ab6:	d107      	bne.n	8003ac8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 fef6 	bl	80048b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ad6:	d10e      	bne.n	8003af6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae2:	2b80      	cmp	r3, #128	; 0x80
 8003ae4:	d107      	bne.n	8003af6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 fee9 	bl	80048c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b00:	2b40      	cmp	r3, #64	; 0x40
 8003b02:	d10e      	bne.n	8003b22 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0e:	2b40      	cmp	r3, #64	; 0x40
 8003b10:	d107      	bne.n	8003b22 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 fa0f 	bl	8003f40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	f003 0320 	and.w	r3, r3, #32
 8003b2c:	2b20      	cmp	r3, #32
 8003b2e:	d10e      	bne.n	8003b4e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	f003 0320 	and.w	r3, r3, #32
 8003b3a:	2b20      	cmp	r3, #32
 8003b3c:	d107      	bne.n	8003b4e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f06f 0220 	mvn.w	r2, #32
 8003b46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 fea9 	bl	80048a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b4e:	bf00      	nop
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
	...

08003b58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d101      	bne.n	8003b72 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003b6e:	2302      	movs	r3, #2
 8003b70:	e0fd      	b.n	8003d6e <HAL_TIM_PWM_ConfigChannel+0x216>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b14      	cmp	r3, #20
 8003b7e:	f200 80f0 	bhi.w	8003d62 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8003b82:	a201      	add	r2, pc, #4	; (adr r2, 8003b88 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b88:	08003bdd 	.word	0x08003bdd
 8003b8c:	08003d63 	.word	0x08003d63
 8003b90:	08003d63 	.word	0x08003d63
 8003b94:	08003d63 	.word	0x08003d63
 8003b98:	08003c1d 	.word	0x08003c1d
 8003b9c:	08003d63 	.word	0x08003d63
 8003ba0:	08003d63 	.word	0x08003d63
 8003ba4:	08003d63 	.word	0x08003d63
 8003ba8:	08003c5f 	.word	0x08003c5f
 8003bac:	08003d63 	.word	0x08003d63
 8003bb0:	08003d63 	.word	0x08003d63
 8003bb4:	08003d63 	.word	0x08003d63
 8003bb8:	08003c9f 	.word	0x08003c9f
 8003bbc:	08003d63 	.word	0x08003d63
 8003bc0:	08003d63 	.word	0x08003d63
 8003bc4:	08003d63 	.word	0x08003d63
 8003bc8:	08003ce1 	.word	0x08003ce1
 8003bcc:	08003d63 	.word	0x08003d63
 8003bd0:	08003d63 	.word	0x08003d63
 8003bd4:	08003d63 	.word	0x08003d63
 8003bd8:	08003d21 	.word	0x08003d21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68b9      	ldr	r1, [r7, #8]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 fa46 	bl	8004074 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	699a      	ldr	r2, [r3, #24]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 0208 	orr.w	r2, r2, #8
 8003bf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	699a      	ldr	r2, [r3, #24]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0204 	bic.w	r2, r2, #4
 8003c06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6999      	ldr	r1, [r3, #24]
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	691a      	ldr	r2, [r3, #16]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	619a      	str	r2, [r3, #24]
      break;
 8003c1a:	e0a3      	b.n	8003d64 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68b9      	ldr	r1, [r7, #8]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 fab6 	bl	8004194 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699a      	ldr	r2, [r3, #24]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	699a      	ldr	r2, [r3, #24]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6999      	ldr	r1, [r3, #24]
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	021a      	lsls	r2, r3, #8
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	619a      	str	r2, [r3, #24]
      break;
 8003c5c:	e082      	b.n	8003d64 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68b9      	ldr	r1, [r7, #8]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f000 fb1f 	bl	80042a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	69da      	ldr	r2, [r3, #28]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f042 0208 	orr.w	r2, r2, #8
 8003c78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	69da      	ldr	r2, [r3, #28]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0204 	bic.w	r2, r2, #4
 8003c88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	69d9      	ldr	r1, [r3, #28]
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	61da      	str	r2, [r3, #28]
      break;
 8003c9c:	e062      	b.n	8003d64 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68b9      	ldr	r1, [r7, #8]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f000 fb87 	bl	80043b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	69da      	ldr	r2, [r3, #28]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	69da      	ldr	r2, [r3, #28]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	69d9      	ldr	r1, [r3, #28]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	021a      	lsls	r2, r3, #8
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	61da      	str	r2, [r3, #28]
      break;
 8003cde:	e041      	b.n	8003d64 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68b9      	ldr	r1, [r7, #8]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 fbd0 	bl	800448c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 0208 	orr.w	r2, r2, #8
 8003cfa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 0204 	bic.w	r2, r2, #4
 8003d0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	691a      	ldr	r2, [r3, #16]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003d1e:	e021      	b.n	8003d64 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68b9      	ldr	r1, [r7, #8]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 fc14 	bl	8004554 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	021a      	lsls	r2, r3, #8
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003d60:	e000      	b.n	8003d64 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8003d62:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop

08003d78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d101      	bne.n	8003d90 <HAL_TIM_ConfigClockSource+0x18>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	e0b5      	b.n	8003efc <HAL_TIM_ConfigClockSource+0x184>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003db2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dcc:	d03e      	beq.n	8003e4c <HAL_TIM_ConfigClockSource+0xd4>
 8003dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dd2:	f200 8087 	bhi.w	8003ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8003dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dda:	f000 8085 	beq.w	8003ee8 <HAL_TIM_ConfigClockSource+0x170>
 8003dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003de2:	d87f      	bhi.n	8003ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8003de4:	2b70      	cmp	r3, #112	; 0x70
 8003de6:	d01a      	beq.n	8003e1e <HAL_TIM_ConfigClockSource+0xa6>
 8003de8:	2b70      	cmp	r3, #112	; 0x70
 8003dea:	d87b      	bhi.n	8003ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8003dec:	2b60      	cmp	r3, #96	; 0x60
 8003dee:	d050      	beq.n	8003e92 <HAL_TIM_ConfigClockSource+0x11a>
 8003df0:	2b60      	cmp	r3, #96	; 0x60
 8003df2:	d877      	bhi.n	8003ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8003df4:	2b50      	cmp	r3, #80	; 0x50
 8003df6:	d03c      	beq.n	8003e72 <HAL_TIM_ConfigClockSource+0xfa>
 8003df8:	2b50      	cmp	r3, #80	; 0x50
 8003dfa:	d873      	bhi.n	8003ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8003dfc:	2b40      	cmp	r3, #64	; 0x40
 8003dfe:	d058      	beq.n	8003eb2 <HAL_TIM_ConfigClockSource+0x13a>
 8003e00:	2b40      	cmp	r3, #64	; 0x40
 8003e02:	d86f      	bhi.n	8003ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8003e04:	2b30      	cmp	r3, #48	; 0x30
 8003e06:	d064      	beq.n	8003ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8003e08:	2b30      	cmp	r3, #48	; 0x30
 8003e0a:	d86b      	bhi.n	8003ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8003e0c:	2b20      	cmp	r3, #32
 8003e0e:	d060      	beq.n	8003ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8003e10:	2b20      	cmp	r3, #32
 8003e12:	d867      	bhi.n	8003ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d05c      	beq.n	8003ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8003e18:	2b10      	cmp	r3, #16
 8003e1a:	d05a      	beq.n	8003ed2 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003e1c:	e062      	b.n	8003ee4 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6818      	ldr	r0, [r3, #0]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	6899      	ldr	r1, [r3, #8]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	f000 fc71 	bl	8004714 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e40:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	609a      	str	r2, [r3, #8]
      break;
 8003e4a:	e04e      	b.n	8003eea <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6818      	ldr	r0, [r3, #0]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	6899      	ldr	r1, [r3, #8]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f000 fc5a 	bl	8004714 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e6e:	609a      	str	r2, [r3, #8]
      break;
 8003e70:	e03b      	b.n	8003eea <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6818      	ldr	r0, [r3, #0]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	6859      	ldr	r1, [r3, #4]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	f000 fbce 	bl	8004620 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2150      	movs	r1, #80	; 0x50
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 fc27 	bl	80046de <TIM_ITRx_SetConfig>
      break;
 8003e90:	e02b      	b.n	8003eea <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6818      	ldr	r0, [r3, #0]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	6859      	ldr	r1, [r3, #4]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	f000 fbed 	bl	800467e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2160      	movs	r1, #96	; 0x60
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 fc17 	bl	80046de <TIM_ITRx_SetConfig>
      break;
 8003eb0:	e01b      	b.n	8003eea <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6818      	ldr	r0, [r3, #0]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	6859      	ldr	r1, [r3, #4]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	f000 fbae 	bl	8004620 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2140      	movs	r1, #64	; 0x40
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 fc07 	bl	80046de <TIM_ITRx_SetConfig>
      break;
 8003ed0:	e00b      	b.n	8003eea <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4619      	mov	r1, r3
 8003edc:	4610      	mov	r0, r2
 8003ede:	f000 fbfe 	bl	80046de <TIM_ITRx_SetConfig>
        break;
 8003ee2:	e002      	b.n	8003eea <HAL_TIM_ConfigClockSource+0x172>
      break;
 8003ee4:	bf00      	nop
 8003ee6:	e000      	b.n	8003eea <HAL_TIM_ConfigClockSource+0x172>
      break;
 8003ee8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a3c      	ldr	r2, [pc, #240]	; (8004058 <TIM_Base_SetConfig+0x104>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d00f      	beq.n	8003f8c <TIM_Base_SetConfig+0x38>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f72:	d00b      	beq.n	8003f8c <TIM_Base_SetConfig+0x38>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a39      	ldr	r2, [pc, #228]	; (800405c <TIM_Base_SetConfig+0x108>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d007      	beq.n	8003f8c <TIM_Base_SetConfig+0x38>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a38      	ldr	r2, [pc, #224]	; (8004060 <TIM_Base_SetConfig+0x10c>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d003      	beq.n	8003f8c <TIM_Base_SetConfig+0x38>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a37      	ldr	r2, [pc, #220]	; (8004064 <TIM_Base_SetConfig+0x110>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d108      	bne.n	8003f9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a2d      	ldr	r2, [pc, #180]	; (8004058 <TIM_Base_SetConfig+0x104>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d01b      	beq.n	8003fde <TIM_Base_SetConfig+0x8a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fac:	d017      	beq.n	8003fde <TIM_Base_SetConfig+0x8a>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a2a      	ldr	r2, [pc, #168]	; (800405c <TIM_Base_SetConfig+0x108>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d013      	beq.n	8003fde <TIM_Base_SetConfig+0x8a>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a29      	ldr	r2, [pc, #164]	; (8004060 <TIM_Base_SetConfig+0x10c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d00f      	beq.n	8003fde <TIM_Base_SetConfig+0x8a>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a28      	ldr	r2, [pc, #160]	; (8004064 <TIM_Base_SetConfig+0x110>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d00b      	beq.n	8003fde <TIM_Base_SetConfig+0x8a>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a27      	ldr	r2, [pc, #156]	; (8004068 <TIM_Base_SetConfig+0x114>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d007      	beq.n	8003fde <TIM_Base_SetConfig+0x8a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a26      	ldr	r2, [pc, #152]	; (800406c <TIM_Base_SetConfig+0x118>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d003      	beq.n	8003fde <TIM_Base_SetConfig+0x8a>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a25      	ldr	r2, [pc, #148]	; (8004070 <TIM_Base_SetConfig+0x11c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d108      	bne.n	8003ff0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a10      	ldr	r2, [pc, #64]	; (8004058 <TIM_Base_SetConfig+0x104>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d00f      	beq.n	800403c <TIM_Base_SetConfig+0xe8>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a11      	ldr	r2, [pc, #68]	; (8004064 <TIM_Base_SetConfig+0x110>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d00b      	beq.n	800403c <TIM_Base_SetConfig+0xe8>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a10      	ldr	r2, [pc, #64]	; (8004068 <TIM_Base_SetConfig+0x114>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d007      	beq.n	800403c <TIM_Base_SetConfig+0xe8>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a0f      	ldr	r2, [pc, #60]	; (800406c <TIM_Base_SetConfig+0x118>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d003      	beq.n	800403c <TIM_Base_SetConfig+0xe8>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a0e      	ldr	r2, [pc, #56]	; (8004070 <TIM_Base_SetConfig+0x11c>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d103      	bne.n	8004044 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	615a      	str	r2, [r3, #20]
}
 800404a:	bf00      	nop
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	40012c00 	.word	0x40012c00
 800405c:	40000400 	.word	0x40000400
 8004060:	40000800 	.word	0x40000800
 8004064:	40013400 	.word	0x40013400
 8004068:	40014000 	.word	0x40014000
 800406c:	40014400 	.word	0x40014400
 8004070:	40014800 	.word	0x40014800

08004074 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004074:	b480      	push	{r7}
 8004076:	b087      	sub	sp, #28
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	f023 0201 	bic.w	r2, r3, #1
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f023 0303 	bic.w	r3, r3, #3
 80040ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f023 0302 	bic.w	r3, r3, #2
 80040c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a2c      	ldr	r2, [pc, #176]	; (8004180 <TIM_OC1_SetConfig+0x10c>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d00f      	beq.n	80040f4 <TIM_OC1_SetConfig+0x80>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a2b      	ldr	r2, [pc, #172]	; (8004184 <TIM_OC1_SetConfig+0x110>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d00b      	beq.n	80040f4 <TIM_OC1_SetConfig+0x80>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a2a      	ldr	r2, [pc, #168]	; (8004188 <TIM_OC1_SetConfig+0x114>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d007      	beq.n	80040f4 <TIM_OC1_SetConfig+0x80>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a29      	ldr	r2, [pc, #164]	; (800418c <TIM_OC1_SetConfig+0x118>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d003      	beq.n	80040f4 <TIM_OC1_SetConfig+0x80>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a28      	ldr	r2, [pc, #160]	; (8004190 <TIM_OC1_SetConfig+0x11c>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d10c      	bne.n	800410e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f023 0308 	bic.w	r3, r3, #8
 80040fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	4313      	orrs	r3, r2
 8004104:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f023 0304 	bic.w	r3, r3, #4
 800410c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a1b      	ldr	r2, [pc, #108]	; (8004180 <TIM_OC1_SetConfig+0x10c>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d00f      	beq.n	8004136 <TIM_OC1_SetConfig+0xc2>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a1a      	ldr	r2, [pc, #104]	; (8004184 <TIM_OC1_SetConfig+0x110>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d00b      	beq.n	8004136 <TIM_OC1_SetConfig+0xc2>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a19      	ldr	r2, [pc, #100]	; (8004188 <TIM_OC1_SetConfig+0x114>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d007      	beq.n	8004136 <TIM_OC1_SetConfig+0xc2>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a18      	ldr	r2, [pc, #96]	; (800418c <TIM_OC1_SetConfig+0x118>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d003      	beq.n	8004136 <TIM_OC1_SetConfig+0xc2>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a17      	ldr	r2, [pc, #92]	; (8004190 <TIM_OC1_SetConfig+0x11c>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d111      	bne.n	800415a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800413c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	4313      	orrs	r3, r2
 800414e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	4313      	orrs	r3, r2
 8004158:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	621a      	str	r2, [r3, #32]
}
 8004174:	bf00      	nop
 8004176:	371c      	adds	r7, #28
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	40012c00 	.word	0x40012c00
 8004184:	40013400 	.word	0x40013400
 8004188:	40014000 	.word	0x40014000
 800418c:	40014400 	.word	0x40014400
 8004190:	40014800 	.word	0x40014800

08004194 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	f023 0210 	bic.w	r2, r3, #16
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	021b      	lsls	r3, r3, #8
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	4313      	orrs	r3, r2
 80041da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	f023 0320 	bic.w	r3, r3, #32
 80041e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	011b      	lsls	r3, r3, #4
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a28      	ldr	r2, [pc, #160]	; (8004294 <TIM_OC2_SetConfig+0x100>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d003      	beq.n	8004200 <TIM_OC2_SetConfig+0x6c>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a27      	ldr	r2, [pc, #156]	; (8004298 <TIM_OC2_SetConfig+0x104>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d10d      	bne.n	800421c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004206:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	011b      	lsls	r3, r3, #4
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	4313      	orrs	r3, r2
 8004212:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800421a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a1d      	ldr	r2, [pc, #116]	; (8004294 <TIM_OC2_SetConfig+0x100>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d00f      	beq.n	8004244 <TIM_OC2_SetConfig+0xb0>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a1c      	ldr	r2, [pc, #112]	; (8004298 <TIM_OC2_SetConfig+0x104>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00b      	beq.n	8004244 <TIM_OC2_SetConfig+0xb0>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a1b      	ldr	r2, [pc, #108]	; (800429c <TIM_OC2_SetConfig+0x108>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d007      	beq.n	8004244 <TIM_OC2_SetConfig+0xb0>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a1a      	ldr	r2, [pc, #104]	; (80042a0 <TIM_OC2_SetConfig+0x10c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d003      	beq.n	8004244 <TIM_OC2_SetConfig+0xb0>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a19      	ldr	r2, [pc, #100]	; (80042a4 <TIM_OC2_SetConfig+0x110>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d113      	bne.n	800426c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800424a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004252:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	4313      	orrs	r3, r2
 800425e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	4313      	orrs	r3, r2
 800426a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	621a      	str	r2, [r3, #32]
}
 8004286:	bf00      	nop
 8004288:	371c      	adds	r7, #28
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	40012c00 	.word	0x40012c00
 8004298:	40013400 	.word	0x40013400
 800429c:	40014000 	.word	0x40014000
 80042a0:	40014400 	.word	0x40014400
 80042a4:	40014800 	.word	0x40014800

080042a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f023 0303 	bic.w	r3, r3, #3
 80042e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	021b      	lsls	r3, r3, #8
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	4313      	orrs	r3, r2
 8004300:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a27      	ldr	r2, [pc, #156]	; (80043a4 <TIM_OC3_SetConfig+0xfc>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d003      	beq.n	8004312 <TIM_OC3_SetConfig+0x6a>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a26      	ldr	r2, [pc, #152]	; (80043a8 <TIM_OC3_SetConfig+0x100>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d10d      	bne.n	800432e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004318:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	021b      	lsls	r3, r3, #8
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	4313      	orrs	r3, r2
 8004324:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800432c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a1c      	ldr	r2, [pc, #112]	; (80043a4 <TIM_OC3_SetConfig+0xfc>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d00f      	beq.n	8004356 <TIM_OC3_SetConfig+0xae>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a1b      	ldr	r2, [pc, #108]	; (80043a8 <TIM_OC3_SetConfig+0x100>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d00b      	beq.n	8004356 <TIM_OC3_SetConfig+0xae>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a1a      	ldr	r2, [pc, #104]	; (80043ac <TIM_OC3_SetConfig+0x104>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d007      	beq.n	8004356 <TIM_OC3_SetConfig+0xae>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a19      	ldr	r2, [pc, #100]	; (80043b0 <TIM_OC3_SetConfig+0x108>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d003      	beq.n	8004356 <TIM_OC3_SetConfig+0xae>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a18      	ldr	r2, [pc, #96]	; (80043b4 <TIM_OC3_SetConfig+0x10c>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d113      	bne.n	800437e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800435c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004364:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	4313      	orrs	r3, r2
 8004370:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	011b      	lsls	r3, r3, #4
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	4313      	orrs	r3, r2
 800437c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	621a      	str	r2, [r3, #32]
}
 8004398:	bf00      	nop
 800439a:	371c      	adds	r7, #28
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr
 80043a4:	40012c00 	.word	0x40012c00
 80043a8:	40013400 	.word	0x40013400
 80043ac:	40014000 	.word	0x40014000
 80043b0:	40014400 	.word	0x40014400
 80043b4:	40014800 	.word	0x40014800

080043b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	69db      	ldr	r3, [r3, #28]
 80043de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	021b      	lsls	r3, r3, #8
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004406:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	031b      	lsls	r3, r3, #12
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	4313      	orrs	r3, r2
 8004412:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a18      	ldr	r2, [pc, #96]	; (8004478 <TIM_OC4_SetConfig+0xc0>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d00f      	beq.n	800443c <TIM_OC4_SetConfig+0x84>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a17      	ldr	r2, [pc, #92]	; (800447c <TIM_OC4_SetConfig+0xc4>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d00b      	beq.n	800443c <TIM_OC4_SetConfig+0x84>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a16      	ldr	r2, [pc, #88]	; (8004480 <TIM_OC4_SetConfig+0xc8>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d007      	beq.n	800443c <TIM_OC4_SetConfig+0x84>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a15      	ldr	r2, [pc, #84]	; (8004484 <TIM_OC4_SetConfig+0xcc>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d003      	beq.n	800443c <TIM_OC4_SetConfig+0x84>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a14      	ldr	r2, [pc, #80]	; (8004488 <TIM_OC4_SetConfig+0xd0>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d109      	bne.n	8004450 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004442:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	019b      	lsls	r3, r3, #6
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	4313      	orrs	r3, r2
 800444e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	621a      	str	r2, [r3, #32]
}
 800446a:	bf00      	nop
 800446c:	371c      	adds	r7, #28
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	40012c00 	.word	0x40012c00
 800447c:	40013400 	.word	0x40013400
 8004480:	40014000 	.word	0x40014000
 8004484:	40014400 	.word	0x40014400
 8004488:	40014800 	.word	0x40014800

0800448c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800448c:	b480      	push	{r7}
 800448e:	b087      	sub	sp, #28
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80044d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	041b      	lsls	r3, r3, #16
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	4313      	orrs	r3, r2
 80044dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a17      	ldr	r2, [pc, #92]	; (8004540 <TIM_OC5_SetConfig+0xb4>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00f      	beq.n	8004506 <TIM_OC5_SetConfig+0x7a>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a16      	ldr	r2, [pc, #88]	; (8004544 <TIM_OC5_SetConfig+0xb8>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d00b      	beq.n	8004506 <TIM_OC5_SetConfig+0x7a>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a15      	ldr	r2, [pc, #84]	; (8004548 <TIM_OC5_SetConfig+0xbc>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d007      	beq.n	8004506 <TIM_OC5_SetConfig+0x7a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a14      	ldr	r2, [pc, #80]	; (800454c <TIM_OC5_SetConfig+0xc0>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d003      	beq.n	8004506 <TIM_OC5_SetConfig+0x7a>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a13      	ldr	r2, [pc, #76]	; (8004550 <TIM_OC5_SetConfig+0xc4>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d109      	bne.n	800451a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800450c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	021b      	lsls	r3, r3, #8
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	4313      	orrs	r3, r2
 8004518:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	621a      	str	r2, [r3, #32]
}
 8004534:	bf00      	nop
 8004536:	371c      	adds	r7, #28
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	40012c00 	.word	0x40012c00
 8004544:	40013400 	.word	0x40013400
 8004548:	40014000 	.word	0x40014000
 800454c:	40014400 	.word	0x40014400
 8004550:	40014800 	.word	0x40014800

08004554 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	021b      	lsls	r3, r3, #8
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	4313      	orrs	r3, r2
 8004592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800459a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	051b      	lsls	r3, r3, #20
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a18      	ldr	r2, [pc, #96]	; (800460c <TIM_OC6_SetConfig+0xb8>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d00f      	beq.n	80045d0 <TIM_OC6_SetConfig+0x7c>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a17      	ldr	r2, [pc, #92]	; (8004610 <TIM_OC6_SetConfig+0xbc>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d00b      	beq.n	80045d0 <TIM_OC6_SetConfig+0x7c>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a16      	ldr	r2, [pc, #88]	; (8004614 <TIM_OC6_SetConfig+0xc0>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d007      	beq.n	80045d0 <TIM_OC6_SetConfig+0x7c>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a15      	ldr	r2, [pc, #84]	; (8004618 <TIM_OC6_SetConfig+0xc4>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d003      	beq.n	80045d0 <TIM_OC6_SetConfig+0x7c>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a14      	ldr	r2, [pc, #80]	; (800461c <TIM_OC6_SetConfig+0xc8>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d109      	bne.n	80045e4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	029b      	lsls	r3, r3, #10
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	621a      	str	r2, [r3, #32]
}
 80045fe:	bf00      	nop
 8004600:	371c      	adds	r7, #28
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	40012c00 	.word	0x40012c00
 8004610:	40013400 	.word	0x40013400
 8004614:	40014000 	.word	0x40014000
 8004618:	40014400 	.word	0x40014400
 800461c:	40014800 	.word	0x40014800

08004620 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004620:	b480      	push	{r7}
 8004622:	b087      	sub	sp, #28
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	f023 0201 	bic.w	r2, r3, #1
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800464a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	011b      	lsls	r3, r3, #4
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	4313      	orrs	r3, r2
 8004654:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f023 030a 	bic.w	r3, r3, #10
 800465c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	4313      	orrs	r3, r2
 8004664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	621a      	str	r2, [r3, #32]
}
 8004672:	bf00      	nop
 8004674:	371c      	adds	r7, #28
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800467e:	b480      	push	{r7}
 8004680:	b087      	sub	sp, #28
 8004682:	af00      	add	r7, sp, #0
 8004684:	60f8      	str	r0, [r7, #12]
 8004686:	60b9      	str	r1, [r7, #8]
 8004688:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	f023 0210 	bic.w	r2, r3, #16
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	031b      	lsls	r3, r3, #12
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	011b      	lsls	r3, r3, #4
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	621a      	str	r2, [r3, #32]
}
 80046d2:	bf00      	nop
 80046d4:	371c      	adds	r7, #28
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046de:	b480      	push	{r7}
 80046e0:	b085      	sub	sp, #20
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
 80046e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	f043 0307 	orr.w	r3, r3, #7
 8004700:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	609a      	str	r2, [r3, #8]
}
 8004708:	bf00      	nop
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004714:	b480      	push	{r7}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
 8004720:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800472e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	021a      	lsls	r2, r3, #8
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	431a      	orrs	r2, r3
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	4313      	orrs	r3, r2
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	4313      	orrs	r3, r2
 8004740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	609a      	str	r2, [r3, #8]
}
 8004748:	bf00      	nop
 800474a:	371c      	adds	r7, #28
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	f003 031f 	and.w	r3, r3, #31
 8004766:	2201      	movs	r2, #1
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6a1a      	ldr	r2, [r3, #32]
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	43db      	mvns	r3, r3
 8004776:	401a      	ands	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6a1a      	ldr	r2, [r3, #32]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f003 031f 	and.w	r3, r3, #31
 8004786:	6879      	ldr	r1, [r7, #4]
 8004788:	fa01 f303 	lsl.w	r3, r1, r3
 800478c:	431a      	orrs	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	621a      	str	r2, [r3, #32]
}
 8004792:	bf00      	nop
 8004794:	371c      	adds	r7, #28
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
	...

080047a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d101      	bne.n	80047b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047b4:	2302      	movs	r3, #2
 80047b6:	e063      	b.n	8004880 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2202      	movs	r2, #2
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a2b      	ldr	r2, [pc, #172]	; (800488c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d004      	beq.n	80047ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a2a      	ldr	r2, [pc, #168]	; (8004890 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d108      	bne.n	80047fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80047f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004804:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	4313      	orrs	r3, r2
 800480e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a1b      	ldr	r2, [pc, #108]	; (800488c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d018      	beq.n	8004854 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800482a:	d013      	beq.n	8004854 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a18      	ldr	r2, [pc, #96]	; (8004894 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d00e      	beq.n	8004854 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a17      	ldr	r2, [pc, #92]	; (8004898 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d009      	beq.n	8004854 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a12      	ldr	r2, [pc, #72]	; (8004890 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d004      	beq.n	8004854 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a13      	ldr	r2, [pc, #76]	; (800489c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d10c      	bne.n	800486e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800485a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	4313      	orrs	r3, r2
 8004864:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3714      	adds	r7, #20
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	40012c00 	.word	0x40012c00
 8004890:	40013400 	.word	0x40013400
 8004894:	40000400 	.word	0x40000400
 8004898:	40000800 	.word	0x40000800
 800489c:	40014000 	.word	0x40014000

080048a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f103 0208 	add.w	r2, r3, #8
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048f4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f103 0208 	add.w	r2, r3, #8
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f103 0208 	add.w	r2, r3, #8
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800492a:	bf00      	nop
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8004936:	b480      	push	{r7}
 8004938:	b085      	sub	sp, #20
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
 800493e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	1c5a      	adds	r2, r3, #1
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	601a      	str	r2, [r3, #0]
}
 8004972:	bf00      	nop
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800497e:	b480      	push	{r7}
 8004980:	b085      	sub	sp, #20
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
 8004986:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004994:	d103      	bne.n	800499e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	60fb      	str	r3, [r7, #12]
 800499c:	e00c      	b.n	80049b8 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	3308      	adds	r3, #8
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	e002      	b.n	80049ac <vListInsert+0x2e>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	60fb      	str	r3, [r7, #12]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d2f6      	bcs.n	80049a6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	1c5a      	adds	r2, r3, #1
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	601a      	str	r2, [r3, #0]
}
 80049e4:	bf00      	nop
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	6892      	ldr	r2, [r2, #8]
 8004a06:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	6852      	ldr	r2, [r2, #4]
 8004a10:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d103      	bne.n	8004a24 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	1e5a      	subs	r2, r3, #1
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10a      	bne.n	8004a6e <xQueueGenericReset+0x2a>
        __asm volatile
 8004a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5c:	f383 8811 	msr	BASEPRI, r3
 8004a60:	f3bf 8f6f 	isb	sy
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	60bb      	str	r3, [r7, #8]
    }
 8004a6a:	bf00      	nop
 8004a6c:	e7fe      	b.n	8004a6c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8004a6e:	f002 f8b1 	bl	8006bd4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7a:	68f9      	ldr	r1, [r7, #12]
 8004a7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a7e:	fb01 f303 	mul.w	r3, r1, r3
 8004a82:	441a      	add	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	68f9      	ldr	r1, [r7, #12]
 8004aa2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004aa4:	fb01 f303 	mul.w	r3, r1, r3
 8004aa8:	441a      	add	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	22ff      	movs	r2, #255	; 0xff
 8004ab2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	22ff      	movs	r2, #255	; 0xff
 8004aba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d114      	bne.n	8004aee <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d01a      	beq.n	8004b02 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	3310      	adds	r3, #16
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f001 f90d 	bl	8005cf0 <xTaskRemoveFromEventList>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d012      	beq.n	8004b02 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8004adc:	4b0c      	ldr	r3, [pc, #48]	; (8004b10 <xQueueGenericReset+0xcc>)
 8004ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ae2:	601a      	str	r2, [r3, #0]
 8004ae4:	f3bf 8f4f 	dsb	sy
 8004ae8:	f3bf 8f6f 	isb	sy
 8004aec:	e009      	b.n	8004b02 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	3310      	adds	r3, #16
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7ff fef2 	bl	80048dc <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	3324      	adds	r3, #36	; 0x24
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7ff feed 	bl	80048dc <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8004b02:	f002 f897 	bl	8006c34 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8004b06:	2301      	movs	r3, #1
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	e000ed04 	.word	0xe000ed04

08004b14 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b08c      	sub	sp, #48	; 0x30
 8004b18:	af02      	add	r7, sp, #8
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10a      	bne.n	8004b3e <xQueueGenericCreate+0x2a>
        __asm volatile
 8004b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2c:	f383 8811 	msr	BASEPRI, r3
 8004b30:	f3bf 8f6f 	isb	sy
 8004b34:	f3bf 8f4f 	dsb	sy
 8004b38:	61bb      	str	r3, [r7, #24]
    }
 8004b3a:	bf00      	nop
 8004b3c:	e7fe      	b.n	8004b3c <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	fb02 f303 	mul.w	r3, r2, r3
 8004b46:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d006      	beq.n	8004b5c <xQueueGenericCreate+0x48>
 8004b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d101      	bne.n	8004b60 <xQueueGenericCreate+0x4c>
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e000      	b.n	8004b62 <xQueueGenericCreate+0x4e>
 8004b60:	2300      	movs	r3, #0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10a      	bne.n	8004b7c <xQueueGenericCreate+0x68>
        __asm volatile
 8004b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6a:	f383 8811 	msr	BASEPRI, r3
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	f3bf 8f4f 	dsb	sy
 8004b76:	617b      	str	r3, [r7, #20]
    }
 8004b78:	bf00      	nop
 8004b7a:	e7fe      	b.n	8004b7a <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8004b82:	d90a      	bls.n	8004b9a <xQueueGenericCreate+0x86>
        __asm volatile
 8004b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b88:	f383 8811 	msr	BASEPRI, r3
 8004b8c:	f3bf 8f6f 	isb	sy
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	613b      	str	r3, [r7, #16]
    }
 8004b96:	bf00      	nop
 8004b98:	e7fe      	b.n	8004b98 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	3350      	adds	r3, #80	; 0x50
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f002 f944 	bl	8006e2c <pvPortMalloc>
 8004ba4:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00d      	beq.n	8004bc8 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	3350      	adds	r3, #80	; 0x50
 8004bb4:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004bb6:	79fa      	ldrb	r2, [r7, #7]
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	69fa      	ldr	r2, [r7, #28]
 8004bc0:	68b9      	ldr	r1, [r7, #8]
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f000 f805 	bl	8004bd2 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004bc8:	6a3b      	ldr	r3, [r7, #32]
    }
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3728      	adds	r7, #40	; 0x28
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b084      	sub	sp, #16
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	60f8      	str	r0, [r7, #12]
 8004bda:	60b9      	str	r1, [r7, #8]
 8004bdc:	607a      	str	r2, [r7, #4]
 8004bde:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d103      	bne.n	8004bee <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	601a      	str	r2, [r3, #0]
 8004bec:	e002      	b.n	8004bf4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c00:	2101      	movs	r1, #1
 8004c02:	69b8      	ldr	r0, [r7, #24]
 8004c04:	f7ff ff1e 	bl	8004a44 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	78fa      	ldrb	r2, [r7, #3]
 8004c0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8004c10:	78fb      	ldrb	r3, [r7, #3]
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	68f9      	ldr	r1, [r7, #12]
 8004c16:	2073      	movs	r0, #115	; 0x73
 8004c18:	f003 f886 	bl	8007d28 <SEGGER_SYSVIEW_RecordU32x3>
}
 8004c1c:	bf00      	nop
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b090      	sub	sp, #64	; 0x40
 8004c28:	af02      	add	r7, sp, #8
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
 8004c30:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c32:	2300      	movs	r3, #0
 8004c34:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8004c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10a      	bne.n	8004c56 <xQueueGenericSend+0x32>
        __asm volatile
 8004c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c44:	f383 8811 	msr	BASEPRI, r3
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004c52:	bf00      	nop
 8004c54:	e7fe      	b.n	8004c54 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d103      	bne.n	8004c64 <xQueueGenericSend+0x40>
 8004c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d101      	bne.n	8004c68 <xQueueGenericSend+0x44>
 8004c64:	2301      	movs	r3, #1
 8004c66:	e000      	b.n	8004c6a <xQueueGenericSend+0x46>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10a      	bne.n	8004c84 <xQueueGenericSend+0x60>
        __asm volatile
 8004c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c72:	f383 8811 	msr	BASEPRI, r3
 8004c76:	f3bf 8f6f 	isb	sy
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004c80:	bf00      	nop
 8004c82:	e7fe      	b.n	8004c82 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d103      	bne.n	8004c92 <xQueueGenericSend+0x6e>
 8004c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d101      	bne.n	8004c96 <xQueueGenericSend+0x72>
 8004c92:	2301      	movs	r3, #1
 8004c94:	e000      	b.n	8004c98 <xQueueGenericSend+0x74>
 8004c96:	2300      	movs	r3, #0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10a      	bne.n	8004cb2 <xQueueGenericSend+0x8e>
        __asm volatile
 8004c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca0:	f383 8811 	msr	BASEPRI, r3
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	623b      	str	r3, [r7, #32]
    }
 8004cae:	bf00      	nop
 8004cb0:	e7fe      	b.n	8004cb0 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cb2:	f001 f9bd 	bl	8006030 <xTaskGetSchedulerState>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d102      	bne.n	8004cc2 <xQueueGenericSend+0x9e>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <xQueueGenericSend+0xa2>
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e000      	b.n	8004cc8 <xQueueGenericSend+0xa4>
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d10a      	bne.n	8004ce2 <xQueueGenericSend+0xbe>
        __asm volatile
 8004ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd0:	f383 8811 	msr	BASEPRI, r3
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	f3bf 8f4f 	dsb	sy
 8004cdc:	61fb      	str	r3, [r7, #28]
    }
 8004cde:	bf00      	nop
 8004ce0:	e7fe      	b.n	8004ce0 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004ce2:	f001 ff77 	bl	8006bd4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d302      	bcc.n	8004cf8 <xQueueGenericSend+0xd4>
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d136      	bne.n	8004d66 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8004cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f003 fd7c 	bl	80087f8 <SEGGER_SYSVIEW_ShrinkId>
 8004d00:	68ba      	ldr	r2, [r7, #8]
 8004d02:	6879      	ldr	r1, [r7, #4]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	460b      	mov	r3, r1
 8004d0a:	4601      	mov	r1, r0
 8004d0c:	205a      	movs	r0, #90	; 0x5a
 8004d0e:	f003 f881 	bl	8007e14 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	68b9      	ldr	r1, [r7, #8]
 8004d16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d18:	f000 fa78 	bl	800520c <prvCopyDataToQueue>
 8004d1c:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d010      	beq.n	8004d48 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d28:	3324      	adds	r3, #36	; 0x24
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 ffe0 	bl	8005cf0 <xTaskRemoveFromEventList>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d013      	beq.n	8004d5e <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8004d36:	4b4d      	ldr	r3, [pc, #308]	; (8004e6c <xQueueGenericSend+0x248>)
 8004d38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d3c:	601a      	str	r2, [r3, #0]
 8004d3e:	f3bf 8f4f 	dsb	sy
 8004d42:	f3bf 8f6f 	isb	sy
 8004d46:	e00a      	b.n	8004d5e <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8004d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d007      	beq.n	8004d5e <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004d4e:	4b47      	ldr	r3, [pc, #284]	; (8004e6c <xQueueGenericSend+0x248>)
 8004d50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004d5e:	f001 ff69 	bl	8006c34 <vPortExitCritical>
                return pdPASS;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e07d      	b.n	8004e62 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d110      	bne.n	8004d8e <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004d6c:	f001 ff62 	bl	8006c34 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8004d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d72:	4618      	mov	r0, r3
 8004d74:	f003 fd40 	bl	80087f8 <SEGGER_SYSVIEW_ShrinkId>
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	6879      	ldr	r1, [r7, #4]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	460b      	mov	r3, r1
 8004d82:	4601      	mov	r1, r0
 8004d84:	205a      	movs	r0, #90	; 0x5a
 8004d86:	f003 f845 	bl	8007e14 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	e069      	b.n	8004e62 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d106      	bne.n	8004da2 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004d94:	f107 0314 	add.w	r3, r7, #20
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f001 f80f 	bl	8005dbc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004da2:	f001 ff47 	bl	8006c34 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004da6:	f000 fd6d 	bl	8005884 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004daa:	f001 ff13 	bl	8006bd4 <vPortEnterCritical>
 8004dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004db4:	b25b      	sxtb	r3, r3
 8004db6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dba:	d103      	bne.n	8004dc4 <xQueueGenericSend+0x1a0>
 8004dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004dca:	b25b      	sxtb	r3, r3
 8004dcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dd0:	d103      	bne.n	8004dda <xQueueGenericSend+0x1b6>
 8004dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dda:	f001 ff2b 	bl	8006c34 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004dde:	1d3a      	adds	r2, r7, #4
 8004de0:	f107 0314 	add.w	r3, r7, #20
 8004de4:	4611      	mov	r1, r2
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 fffe 	bl	8005de8 <xTaskCheckForTimeOut>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d124      	bne.n	8004e3c <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004df2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004df4:	f000 fb02 	bl	80053fc <prvIsQueueFull>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d018      	beq.n	8004e30 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e00:	3310      	adds	r3, #16
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	4611      	mov	r1, r2
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 ff20 	bl	8005c4c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004e0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e0e:	f000 fa8d 	bl	800532c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004e12:	f000 fd45 	bl	80058a0 <xTaskResumeAll>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f47f af62 	bne.w	8004ce2 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8004e1e:	4b13      	ldr	r3, [pc, #76]	; (8004e6c <xQueueGenericSend+0x248>)
 8004e20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e24:	601a      	str	r2, [r3, #0]
 8004e26:	f3bf 8f4f 	dsb	sy
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	e758      	b.n	8004ce2 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004e30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e32:	f000 fa7b 	bl	800532c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004e36:	f000 fd33 	bl	80058a0 <xTaskResumeAll>
 8004e3a:	e752      	b.n	8004ce2 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004e3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e3e:	f000 fa75 	bl	800532c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004e42:	f000 fd2d 	bl	80058a0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8004e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f003 fcd5 	bl	80087f8 <SEGGER_SYSVIEW_ShrinkId>
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	6879      	ldr	r1, [r7, #4]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	460b      	mov	r3, r1
 8004e58:	4601      	mov	r1, r0
 8004e5a:	205a      	movs	r0, #90	; 0x5a
 8004e5c:	f002 ffda 	bl	8007e14 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8004e60:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3738      	adds	r7, #56	; 0x38
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	e000ed04 	.word	0xe000ed04

08004e70 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b090      	sub	sp, #64	; 0x40
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
 8004e7c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8004e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10a      	bne.n	8004e9e <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8004e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8c:	f383 8811 	msr	BASEPRI, r3
 8004e90:	f3bf 8f6f 	isb	sy
 8004e94:	f3bf 8f4f 	dsb	sy
 8004e98:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004e9a:	bf00      	nop
 8004e9c:	e7fe      	b.n	8004e9c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d103      	bne.n	8004eac <xQueueGenericSendFromISR+0x3c>
 8004ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <xQueueGenericSendFromISR+0x40>
 8004eac:	2301      	movs	r3, #1
 8004eae:	e000      	b.n	8004eb2 <xQueueGenericSendFromISR+0x42>
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10a      	bne.n	8004ecc <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8004eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eba:	f383 8811 	msr	BASEPRI, r3
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004ec8:	bf00      	nop
 8004eca:	e7fe      	b.n	8004eca <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d103      	bne.n	8004eda <xQueueGenericSendFromISR+0x6a>
 8004ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d101      	bne.n	8004ede <xQueueGenericSendFromISR+0x6e>
 8004eda:	2301      	movs	r3, #1
 8004edc:	e000      	b.n	8004ee0 <xQueueGenericSendFromISR+0x70>
 8004ede:	2300      	movs	r3, #0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10a      	bne.n	8004efa <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8004ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee8:	f383 8811 	msr	BASEPRI, r3
 8004eec:	f3bf 8f6f 	isb	sy
 8004ef0:	f3bf 8f4f 	dsb	sy
 8004ef4:	623b      	str	r3, [r7, #32]
    }
 8004ef6:	bf00      	nop
 8004ef8:	e7fe      	b.n	8004ef8 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004efa:	f001 ff57 	bl	8006dac <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8004efe:	f3ef 8211 	mrs	r2, BASEPRI
 8004f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f06:	f383 8811 	msr	BASEPRI, r3
 8004f0a:	f3bf 8f6f 	isb	sy
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	61fa      	str	r2, [r7, #28]
 8004f14:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8004f16:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f18:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d302      	bcc.n	8004f2c <xQueueGenericSendFromISR+0xbc>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d148      	bne.n	8004fbe <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3a:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8004f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f003 fc5a 	bl	80087f8 <SEGGER_SYSVIEW_ShrinkId>
 8004f44:	4601      	mov	r1, r0
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	461a      	mov	r2, r3
 8004f4a:	2060      	movs	r0, #96	; 0x60
 8004f4c:	f002 fe92 	bl	8007c74 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f50:	683a      	ldr	r2, [r7, #0]
 8004f52:	68b9      	ldr	r1, [r7, #8]
 8004f54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004f56:	f000 f959 	bl	800520c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004f5a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004f5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f62:	d112      	bne.n	8004f8a <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d025      	beq.n	8004fb8 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6e:	3324      	adds	r3, #36	; 0x24
 8004f70:	4618      	mov	r0, r3
 8004f72:	f000 febd 	bl	8005cf0 <xTaskRemoveFromEventList>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d01d      	beq.n	8004fb8 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d01a      	beq.n	8004fb8 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2201      	movs	r2, #1
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	e016      	b.n	8004fb8 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8004f8a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004f8e:	2b7f      	cmp	r3, #127	; 0x7f
 8004f90:	d10a      	bne.n	8004fa8 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8004f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f96:	f383 8811 	msr	BASEPRI, r3
 8004f9a:	f3bf 8f6f 	isb	sy
 8004f9e:	f3bf 8f4f 	dsb	sy
 8004fa2:	617b      	str	r3, [r7, #20]
    }
 8004fa4:	bf00      	nop
 8004fa6:	e7fe      	b.n	8004fa6 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004fa8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004fac:	3301      	adds	r3, #1
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	b25a      	sxtb	r2, r3
 8004fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8004fbc:	e00b      	b.n	8004fd6 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8004fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f003 fc19 	bl	80087f8 <SEGGER_SYSVIEW_ShrinkId>
 8004fc6:	4601      	mov	r1, r0
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	2060      	movs	r0, #96	; 0x60
 8004fce:	f002 fe51 	bl	8007c74 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fd8:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004fe0:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3740      	adds	r7, #64	; 0x40
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004fec:	b590      	push	{r4, r7, lr}
 8004fee:	b08f      	sub	sp, #60	; 0x3c
 8004ff0:	af02      	add	r7, sp, #8
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10a      	bne.n	800501c <xQueueReceive+0x30>
        __asm volatile
 8005006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500a:	f383 8811 	msr	BASEPRI, r3
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	f3bf 8f4f 	dsb	sy
 8005016:	623b      	str	r3, [r7, #32]
    }
 8005018:	bf00      	nop
 800501a:	e7fe      	b.n	800501a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d103      	bne.n	800502a <xQueueReceive+0x3e>
 8005022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <xQueueReceive+0x42>
 800502a:	2301      	movs	r3, #1
 800502c:	e000      	b.n	8005030 <xQueueReceive+0x44>
 800502e:	2300      	movs	r3, #0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10a      	bne.n	800504a <xQueueReceive+0x5e>
        __asm volatile
 8005034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005038:	f383 8811 	msr	BASEPRI, r3
 800503c:	f3bf 8f6f 	isb	sy
 8005040:	f3bf 8f4f 	dsb	sy
 8005044:	61fb      	str	r3, [r7, #28]
    }
 8005046:	bf00      	nop
 8005048:	e7fe      	b.n	8005048 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800504a:	f000 fff1 	bl	8006030 <xTaskGetSchedulerState>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d102      	bne.n	800505a <xQueueReceive+0x6e>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <xQueueReceive+0x72>
 800505a:	2301      	movs	r3, #1
 800505c:	e000      	b.n	8005060 <xQueueReceive+0x74>
 800505e:	2300      	movs	r3, #0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10a      	bne.n	800507a <xQueueReceive+0x8e>
        __asm volatile
 8005064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005068:	f383 8811 	msr	BASEPRI, r3
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	61bb      	str	r3, [r7, #24]
    }
 8005076:	bf00      	nop
 8005078:	e7fe      	b.n	8005078 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800507a:	f001 fdab 	bl	8006bd4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800507e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005082:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	2b00      	cmp	r3, #0
 8005088:	d02f      	beq.n	80050ea <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800508a:	68b9      	ldr	r1, [r7, #8]
 800508c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800508e:	f000 f927 	bl	80052e0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8005092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005094:	4618      	mov	r0, r3
 8005096:	f003 fbaf 	bl	80087f8 <SEGGER_SYSVIEW_ShrinkId>
 800509a:	4604      	mov	r4, r0
 800509c:	2000      	movs	r0, #0
 800509e:	f003 fbab 	bl	80087f8 <SEGGER_SYSVIEW_ShrinkId>
 80050a2:	4602      	mov	r2, r0
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2101      	movs	r1, #1
 80050a8:	9100      	str	r1, [sp, #0]
 80050aa:	4621      	mov	r1, r4
 80050ac:	205c      	movs	r0, #92	; 0x5c
 80050ae:	f002 feb1 	bl	8007e14 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	1e5a      	subs	r2, r3, #1
 80050b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00f      	beq.n	80050e2 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c4:	3310      	adds	r3, #16
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 fe12 	bl	8005cf0 <xTaskRemoveFromEventList>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d007      	beq.n	80050e2 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80050d2:	4b4d      	ldr	r3, [pc, #308]	; (8005208 <xQueueReceive+0x21c>)
 80050d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	f3bf 8f4f 	dsb	sy
 80050de:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80050e2:	f001 fda7 	bl	8006c34 <vPortExitCritical>
                return pdPASS;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e08a      	b.n	8005200 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d113      	bne.n	8005118 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80050f0:	f001 fda0 	bl	8006c34 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80050f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f6:	4618      	mov	r0, r3
 80050f8:	f003 fb7e 	bl	80087f8 <SEGGER_SYSVIEW_ShrinkId>
 80050fc:	4604      	mov	r4, r0
 80050fe:	2000      	movs	r0, #0
 8005100:	f003 fb7a 	bl	80087f8 <SEGGER_SYSVIEW_ShrinkId>
 8005104:	4602      	mov	r2, r0
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2101      	movs	r1, #1
 800510a:	9100      	str	r1, [sp, #0]
 800510c:	4621      	mov	r1, r4
 800510e:	205c      	movs	r0, #92	; 0x5c
 8005110:	f002 fe80 	bl	8007e14 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8005114:	2300      	movs	r3, #0
 8005116:	e073      	b.n	8005200 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511a:	2b00      	cmp	r3, #0
 800511c:	d106      	bne.n	800512c <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800511e:	f107 0310 	add.w	r3, r7, #16
 8005122:	4618      	mov	r0, r3
 8005124:	f000 fe4a 	bl	8005dbc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005128:	2301      	movs	r3, #1
 800512a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800512c:	f001 fd82 	bl	8006c34 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005130:	f000 fba8 	bl	8005884 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005134:	f001 fd4e 	bl	8006bd4 <vPortEnterCritical>
 8005138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800513e:	b25b      	sxtb	r3, r3
 8005140:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005144:	d103      	bne.n	800514e <xQueueReceive+0x162>
 8005146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800514e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005150:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005154:	b25b      	sxtb	r3, r3
 8005156:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800515a:	d103      	bne.n	8005164 <xQueueReceive+0x178>
 800515c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515e:	2200      	movs	r2, #0
 8005160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005164:	f001 fd66 	bl	8006c34 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005168:	1d3a      	adds	r2, r7, #4
 800516a:	f107 0310 	add.w	r3, r7, #16
 800516e:	4611      	mov	r1, r2
 8005170:	4618      	mov	r0, r3
 8005172:	f000 fe39 	bl	8005de8 <xTaskCheckForTimeOut>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d124      	bne.n	80051c6 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800517c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800517e:	f000 f927 	bl	80053d0 <prvIsQueueEmpty>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d018      	beq.n	80051ba <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518a:	3324      	adds	r3, #36	; 0x24
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	4611      	mov	r1, r2
 8005190:	4618      	mov	r0, r3
 8005192:	f000 fd5b 	bl	8005c4c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8005196:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005198:	f000 f8c8 	bl	800532c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800519c:	f000 fb80 	bl	80058a0 <xTaskResumeAll>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f47f af69 	bne.w	800507a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80051a8:	4b17      	ldr	r3, [pc, #92]	; (8005208 <xQueueReceive+0x21c>)
 80051aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ae:	601a      	str	r2, [r3, #0]
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	f3bf 8f6f 	isb	sy
 80051b8:	e75f      	b.n	800507a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80051ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051bc:	f000 f8b6 	bl	800532c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80051c0:	f000 fb6e 	bl	80058a0 <xTaskResumeAll>
 80051c4:	e759      	b.n	800507a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80051c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051c8:	f000 f8b0 	bl	800532c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80051cc:	f000 fb68 	bl	80058a0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051d2:	f000 f8fd 	bl	80053d0 <prvIsQueueEmpty>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f43f af4e 	beq.w	800507a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80051de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e0:	4618      	mov	r0, r3
 80051e2:	f003 fb09 	bl	80087f8 <SEGGER_SYSVIEW_ShrinkId>
 80051e6:	4604      	mov	r4, r0
 80051e8:	2000      	movs	r0, #0
 80051ea:	f003 fb05 	bl	80087f8 <SEGGER_SYSVIEW_ShrinkId>
 80051ee:	4602      	mov	r2, r0
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2101      	movs	r1, #1
 80051f4:	9100      	str	r1, [sp, #0]
 80051f6:	4621      	mov	r1, r4
 80051f8:	205c      	movs	r0, #92	; 0x5c
 80051fa:	f002 fe0b 	bl	8007e14 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80051fe:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005200:	4618      	mov	r0, r3
 8005202:	3734      	adds	r7, #52	; 0x34
 8005204:	46bd      	mov	sp, r7
 8005206:	bd90      	pop	{r4, r7, pc}
 8005208:	e000ed04 	.word	0xe000ed04

0800520c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8005218:	2300      	movs	r3, #0
 800521a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005220:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10d      	bne.n	8005246 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d14d      	bne.n	80052ce <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	4618      	mov	r0, r3
 8005238:	f000 ff18 	bl	800606c <xTaskPriorityDisinherit>
 800523c:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	609a      	str	r2, [r3, #8]
 8005244:	e043      	b.n	80052ce <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d119      	bne.n	8005280 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6858      	ldr	r0, [r3, #4]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005254:	461a      	mov	r2, r3
 8005256:	68b9      	ldr	r1, [r7, #8]
 8005258:	f003 fc90 	bl	8008b7c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005264:	441a      	add	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	685a      	ldr	r2, [r3, #4]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	429a      	cmp	r2, r3
 8005274:	d32b      	bcc.n	80052ce <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	605a      	str	r2, [r3, #4]
 800527e:	e026      	b.n	80052ce <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	68d8      	ldr	r0, [r3, #12]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005288:	461a      	mov	r2, r3
 800528a:	68b9      	ldr	r1, [r7, #8]
 800528c:	f003 fc76 	bl	8008b7c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	68da      	ldr	r2, [r3, #12]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005298:	425b      	negs	r3, r3
 800529a:	441a      	add	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	68da      	ldr	r2, [r3, #12]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d207      	bcs.n	80052bc <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b4:	425b      	negs	r3, r3
 80052b6:	441a      	add	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d105      	bne.n	80052ce <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d002      	beq.n	80052ce <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	3b01      	subs	r3, #1
 80052cc:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80052d6:	697b      	ldr	r3, [r7, #20]
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3718      	adds	r7, #24
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d018      	beq.n	8005324 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68da      	ldr	r2, [r3, #12]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	441a      	add	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68da      	ldr	r2, [r3, #12]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	429a      	cmp	r2, r3
 800530a:	d303      	bcc.n	8005314 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68d9      	ldr	r1, [r3, #12]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531c:	461a      	mov	r2, r3
 800531e:	6838      	ldr	r0, [r7, #0]
 8005320:	f003 fc2c 	bl	8008b7c <memcpy>
    }
}
 8005324:	bf00      	nop
 8005326:	3708      	adds	r7, #8
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8005334:	f001 fc4e 	bl	8006bd4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800533e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005340:	e011      	b.n	8005366 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	2b00      	cmp	r3, #0
 8005348:	d012      	beq.n	8005370 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	3324      	adds	r3, #36	; 0x24
 800534e:	4618      	mov	r0, r3
 8005350:	f000 fcce 	bl	8005cf0 <xTaskRemoveFromEventList>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800535a:	f000 fdab 	bl	8005eb4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800535e:	7bfb      	ldrb	r3, [r7, #15]
 8005360:	3b01      	subs	r3, #1
 8005362:	b2db      	uxtb	r3, r3
 8005364:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800536a:	2b00      	cmp	r3, #0
 800536c:	dce9      	bgt.n	8005342 <prvUnlockQueue+0x16>
 800536e:	e000      	b.n	8005372 <prvUnlockQueue+0x46>
                        break;
 8005370:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	22ff      	movs	r2, #255	; 0xff
 8005376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800537a:	f001 fc5b 	bl	8006c34 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800537e:	f001 fc29 	bl	8006bd4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005388:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800538a:	e011      	b.n	80053b0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d012      	beq.n	80053ba <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	3310      	adds	r3, #16
 8005398:	4618      	mov	r0, r3
 800539a:	f000 fca9 	bl	8005cf0 <xTaskRemoveFromEventList>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d001      	beq.n	80053a8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80053a4:	f000 fd86 	bl	8005eb4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80053a8:	7bbb      	ldrb	r3, [r7, #14]
 80053aa:	3b01      	subs	r3, #1
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80053b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	dce9      	bgt.n	800538c <prvUnlockQueue+0x60>
 80053b8:	e000      	b.n	80053bc <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80053ba:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	22ff      	movs	r2, #255	; 0xff
 80053c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80053c4:	f001 fc36 	bl	8006c34 <vPortExitCritical>
}
 80053c8:	bf00      	nop
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80053d8:	f001 fbfc 	bl	8006bd4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d102      	bne.n	80053ea <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80053e4:	2301      	movs	r3, #1
 80053e6:	60fb      	str	r3, [r7, #12]
 80053e8:	e001      	b.n	80053ee <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80053ea:	2300      	movs	r3, #0
 80053ec:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80053ee:	f001 fc21 	bl	8006c34 <vPortExitCritical>

    return xReturn;
 80053f2:	68fb      	ldr	r3, [r7, #12]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005404:	f001 fbe6 	bl	8006bd4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005410:	429a      	cmp	r2, r3
 8005412:	d102      	bne.n	800541a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8005414:	2301      	movs	r3, #1
 8005416:	60fb      	str	r3, [r7, #12]
 8005418:	e001      	b.n	800541e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800541a:	2300      	movs	r3, #0
 800541c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800541e:	f001 fc09 	bl	8006c34 <vPortExitCritical>

    return xReturn;
 8005422:	68fb      	ldr	r3, [r7, #12]
}
 8005424:	4618      	mov	r0, r3
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005436:	2300      	movs	r3, #0
 8005438:	60fb      	str	r3, [r7, #12]
 800543a:	e01e      	b.n	800547a <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800543c:	4a13      	ldr	r2, [pc, #76]	; (800548c <vQueueAddToRegistry+0x60>)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d115      	bne.n	8005474 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005448:	4910      	ldr	r1, [pc, #64]	; (800548c <vQueueAddToRegistry+0x60>)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8005452:	4a0e      	ldr	r2, [pc, #56]	; (800548c <vQueueAddToRegistry+0x60>)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	00db      	lsls	r3, r3, #3
 8005458:	4413      	add	r3, r2
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4618      	mov	r0, r3
 8005462:	f003 f9c9 	bl	80087f8 <SEGGER_SYSVIEW_ShrinkId>
 8005466:	4601      	mov	r1, r0
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	461a      	mov	r2, r3
 800546c:	2071      	movs	r0, #113	; 0x71
 800546e:	f002 fc01 	bl	8007c74 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8005472:	e006      	b.n	8005482 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	3301      	adds	r3, #1
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2b07      	cmp	r3, #7
 800547e:	d9dd      	bls.n	800543c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8005480:	bf00      	nop
 8005482:	bf00      	nop
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	20003138 	.word	0x20003138

08005490 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80054a0:	f001 fb98 	bl	8006bd4 <vPortEnterCritical>
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054aa:	b25b      	sxtb	r3, r3
 80054ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054b0:	d103      	bne.n	80054ba <vQueueWaitForMessageRestricted+0x2a>
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054c0:	b25b      	sxtb	r3, r3
 80054c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054c6:	d103      	bne.n	80054d0 <vQueueWaitForMessageRestricted+0x40>
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054d0:	f001 fbb0 	bl	8006c34 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d106      	bne.n	80054ea <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	3324      	adds	r3, #36	; 0x24
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	68b9      	ldr	r1, [r7, #8]
 80054e4:	4618      	mov	r0, r3
 80054e6:	f000 fbd5 	bl	8005c94 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80054ea:	6978      	ldr	r0, [r7, #20]
 80054ec:	f7ff ff1e 	bl	800532c <prvUnlockQueue>
    }
 80054f0:	bf00      	nop
 80054f2:	3718      	adds	r7, #24
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b08c      	sub	sp, #48	; 0x30
 80054fc:	af04      	add	r7, sp, #16
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	603b      	str	r3, [r7, #0]
 8005504:	4613      	mov	r3, r2
 8005506:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005508:	88fb      	ldrh	r3, [r7, #6]
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4618      	mov	r0, r3
 800550e:	f001 fc8d 	bl	8006e2c <pvPortMalloc>
 8005512:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00e      	beq.n	8005538 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800551a:	2058      	movs	r0, #88	; 0x58
 800551c:	f001 fc86 	bl	8006e2c <pvPortMalloc>
 8005520:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d003      	beq.n	8005530 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	631a      	str	r2, [r3, #48]	; 0x30
 800552e:	e005      	b.n	800553c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8005530:	6978      	ldr	r0, [r7, #20]
 8005532:	f001 fd5b 	bl	8006fec <vPortFree>
 8005536:	e001      	b.n	800553c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8005538:	2300      	movs	r3, #0
 800553a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d013      	beq.n	800556a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005542:	88fa      	ldrh	r2, [r7, #6]
 8005544:	2300      	movs	r3, #0
 8005546:	9303      	str	r3, [sp, #12]
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	9302      	str	r3, [sp, #8]
 800554c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800554e:	9301      	str	r3, [sp, #4]
 8005550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	68b9      	ldr	r1, [r7, #8]
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f000 f80e 	bl	800557a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800555e:	69f8      	ldr	r0, [r7, #28]
 8005560:	f000 f8a2 	bl	80056a8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005564:	2301      	movs	r3, #1
 8005566:	61bb      	str	r3, [r7, #24]
 8005568:	e002      	b.n	8005570 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800556a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800556e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005570:	69bb      	ldr	r3, [r7, #24]
    }
 8005572:	4618      	mov	r0, r3
 8005574:	3720      	adds	r7, #32
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b088      	sub	sp, #32
 800557e:	af00      	add	r7, sp, #0
 8005580:	60f8      	str	r0, [r7, #12]
 8005582:	60b9      	str	r1, [r7, #8]
 8005584:	607a      	str	r2, [r7, #4]
 8005586:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	461a      	mov	r2, r3
 8005592:	21a5      	movs	r1, #165	; 0xa5
 8005594:	f003 fb00 	bl	8008b98 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80055a2:	3b01      	subs	r3, #1
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	4413      	add	r3, r2
 80055a8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	f023 0307 	bic.w	r3, r3, #7
 80055b0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	f003 0307 	and.w	r3, r3, #7
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00a      	beq.n	80055d2 <prvInitialiseNewTask+0x58>
        __asm volatile
 80055bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c0:	f383 8811 	msr	BASEPRI, r3
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	617b      	str	r3, [r7, #20]
    }
 80055ce:	bf00      	nop
 80055d0:	e7fe      	b.n	80055d0 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d01f      	beq.n	8005618 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055d8:	2300      	movs	r3, #0
 80055da:	61fb      	str	r3, [r7, #28]
 80055dc:	e012      	b.n	8005604 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	4413      	add	r3, r2
 80055e4:	7819      	ldrb	r1, [r3, #0]
 80055e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	4413      	add	r3, r2
 80055ec:	3334      	adds	r3, #52	; 0x34
 80055ee:	460a      	mov	r2, r1
 80055f0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	4413      	add	r3, r2
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d006      	beq.n	800560c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	3301      	adds	r3, #1
 8005602:	61fb      	str	r3, [r7, #28]
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	2b09      	cmp	r3, #9
 8005608:	d9e9      	bls.n	80055de <prvInitialiseNewTask+0x64>
 800560a:	e000      	b.n	800560e <prvInitialiseNewTask+0x94>
            {
                break;
 800560c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800560e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005610:	2200      	movs	r2, #0
 8005612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005616:	e003      	b.n	8005620 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005622:	2b04      	cmp	r3, #4
 8005624:	d901      	bls.n	800562a <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005626:	2304      	movs	r3, #4
 8005628:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800562a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800562e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8005630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005632:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005634:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8005636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005638:	2200      	movs	r2, #0
 800563a:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800563c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563e:	3304      	adds	r3, #4
 8005640:	4618      	mov	r0, r3
 8005642:	f7ff f96b 	bl	800491c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005648:	3318      	adds	r3, #24
 800564a:	4618      	mov	r0, r3
 800564c:	f7ff f966 	bl	800491c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005652:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005654:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005658:	f1c3 0205 	rsb	r2, r3, #5
 800565c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005664:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8005666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005668:	3350      	adds	r3, #80	; 0x50
 800566a:	2204      	movs	r2, #4
 800566c:	2100      	movs	r1, #0
 800566e:	4618      	mov	r0, r3
 8005670:	f003 fa92 	bl	8008b98 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8005674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005676:	3354      	adds	r3, #84	; 0x54
 8005678:	2201      	movs	r2, #1
 800567a:	2100      	movs	r1, #0
 800567c:	4618      	mov	r0, r3
 800567e:	f003 fa8b 	bl	8008b98 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	68f9      	ldr	r1, [r7, #12]
 8005686:	69b8      	ldr	r0, [r7, #24]
 8005688:	f001 f8fa 	bl	8006880 <pxPortInitialiseStack>
 800568c:	4602      	mov	r2, r0
 800568e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005690:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8005692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005694:	2b00      	cmp	r3, #0
 8005696:	d002      	beq.n	800569e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800569a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800569c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800569e:	bf00      	nop
 80056a0:	3720      	adds	r7, #32
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
	...

080056a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80056a8:	b5b0      	push	{r4, r5, r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af02      	add	r7, sp, #8
 80056ae:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80056b0:	f001 fa90 	bl	8006bd4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80056b4:	4b3b      	ldr	r3, [pc, #236]	; (80057a4 <prvAddNewTaskToReadyList+0xfc>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	3301      	adds	r3, #1
 80056ba:	4a3a      	ldr	r2, [pc, #232]	; (80057a4 <prvAddNewTaskToReadyList+0xfc>)
 80056bc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80056be:	4b3a      	ldr	r3, [pc, #232]	; (80057a8 <prvAddNewTaskToReadyList+0x100>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d109      	bne.n	80056da <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80056c6:	4a38      	ldr	r2, [pc, #224]	; (80057a8 <prvAddNewTaskToReadyList+0x100>)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80056cc:	4b35      	ldr	r3, [pc, #212]	; (80057a4 <prvAddNewTaskToReadyList+0xfc>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d110      	bne.n	80056f6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80056d4:	f000 fc12 	bl	8005efc <prvInitialiseTaskLists>
 80056d8:	e00d      	b.n	80056f6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80056da:	4b34      	ldr	r3, [pc, #208]	; (80057ac <prvAddNewTaskToReadyList+0x104>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d109      	bne.n	80056f6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80056e2:	4b31      	ldr	r3, [pc, #196]	; (80057a8 <prvAddNewTaskToReadyList+0x100>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d802      	bhi.n	80056f6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80056f0:	4a2d      	ldr	r2, [pc, #180]	; (80057a8 <prvAddNewTaskToReadyList+0x100>)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80056f6:	4b2e      	ldr	r3, [pc, #184]	; (80057b0 <prvAddNewTaskToReadyList+0x108>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	3301      	adds	r3, #1
 80056fc:	4a2c      	ldr	r2, [pc, #176]	; (80057b0 <prvAddNewTaskToReadyList+0x108>)
 80056fe:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005700:	4b2b      	ldr	r3, [pc, #172]	; (80057b0 <prvAddNewTaskToReadyList+0x108>)
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d016      	beq.n	800573c <prvAddNewTaskToReadyList+0x94>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4618      	mov	r0, r3
 8005712:	f002 ff4b 	bl	80085ac <SEGGER_SYSVIEW_OnTaskCreate>
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005726:	461d      	mov	r5, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	461c      	mov	r4, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005732:	1ae3      	subs	r3, r4, r3
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	462b      	mov	r3, r5
 8005738:	f001 fd76 	bl	8007228 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4618      	mov	r0, r3
 8005740:	f002 ffb8 	bl	80086b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005748:	2201      	movs	r2, #1
 800574a:	409a      	lsls	r2, r3
 800574c:	4b19      	ldr	r3, [pc, #100]	; (80057b4 <prvAddNewTaskToReadyList+0x10c>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4313      	orrs	r3, r2
 8005752:	4a18      	ldr	r2, [pc, #96]	; (80057b4 <prvAddNewTaskToReadyList+0x10c>)
 8005754:	6013      	str	r3, [r2, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800575a:	4613      	mov	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4413      	add	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	4a15      	ldr	r2, [pc, #84]	; (80057b8 <prvAddNewTaskToReadyList+0x110>)
 8005764:	441a      	add	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	3304      	adds	r3, #4
 800576a:	4619      	mov	r1, r3
 800576c:	4610      	mov	r0, r2
 800576e:	f7ff f8e2 	bl	8004936 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8005772:	f001 fa5f 	bl	8006c34 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8005776:	4b0d      	ldr	r3, [pc, #52]	; (80057ac <prvAddNewTaskToReadyList+0x104>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00e      	beq.n	800579c <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800577e:	4b0a      	ldr	r3, [pc, #40]	; (80057a8 <prvAddNewTaskToReadyList+0x100>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005788:	429a      	cmp	r2, r3
 800578a:	d207      	bcs.n	800579c <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800578c:	4b0b      	ldr	r3, [pc, #44]	; (80057bc <prvAddNewTaskToReadyList+0x114>)
 800578e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800579c:	bf00      	nop
 800579e:	3708      	adds	r7, #8
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bdb0      	pop	{r4, r5, r7, pc}
 80057a4:	20000190 	.word	0x20000190
 80057a8:	200000b8 	.word	0x200000b8
 80057ac:	2000019c 	.word	0x2000019c
 80057b0:	200001ac 	.word	0x200001ac
 80057b4:	20000198 	.word	0x20000198
 80057b8:	200000bc 	.word	0x200000bc
 80057bc:	e000ed04 	.word	0xe000ed04

080057c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80057c6:	4b27      	ldr	r3, [pc, #156]	; (8005864 <vTaskStartScheduler+0xa4>)
 80057c8:	9301      	str	r3, [sp, #4]
 80057ca:	2300      	movs	r3, #0
 80057cc:	9300      	str	r3, [sp, #0]
 80057ce:	2300      	movs	r3, #0
 80057d0:	2282      	movs	r2, #130	; 0x82
 80057d2:	4925      	ldr	r1, [pc, #148]	; (8005868 <vTaskStartScheduler+0xa8>)
 80057d4:	4825      	ldr	r0, [pc, #148]	; (800586c <vTaskStartScheduler+0xac>)
 80057d6:	f7ff fe8f 	bl	80054f8 <xTaskCreate>
 80057da:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d102      	bne.n	80057e8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80057e2:	f000 fd3b 	bl	800625c <xTimerCreateTimerTask>
 80057e6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d124      	bne.n	8005838 <vTaskStartScheduler+0x78>
        __asm volatile
 80057ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f2:	f383 8811 	msr	BASEPRI, r3
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	f3bf 8f4f 	dsb	sy
 80057fe:	60bb      	str	r3, [r7, #8]
    }
 8005800:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8005802:	4b1b      	ldr	r3, [pc, #108]	; (8005870 <vTaskStartScheduler+0xb0>)
 8005804:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005808:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800580a:	4b1a      	ldr	r3, [pc, #104]	; (8005874 <vTaskStartScheduler+0xb4>)
 800580c:	2201      	movs	r2, #1
 800580e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005810:	4b19      	ldr	r3, [pc, #100]	; (8005878 <vTaskStartScheduler+0xb8>)
 8005812:	2200      	movs	r2, #0
 8005814:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8005816:	4b19      	ldr	r3, [pc, #100]	; (800587c <vTaskStartScheduler+0xbc>)
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	4b12      	ldr	r3, [pc, #72]	; (8005864 <vTaskStartScheduler+0xa4>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	429a      	cmp	r2, r3
 8005820:	d102      	bne.n	8005828 <vTaskStartScheduler+0x68>
 8005822:	f002 fea7 	bl	8008574 <SEGGER_SYSVIEW_OnIdle>
 8005826:	e004      	b.n	8005832 <vTaskStartScheduler+0x72>
 8005828:	4b14      	ldr	r3, [pc, #80]	; (800587c <vTaskStartScheduler+0xbc>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4618      	mov	r0, r3
 800582e:	f002 feff 	bl	8008630 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8005832:	f001 f8af 	bl	8006994 <xPortStartScheduler>
 8005836:	e00e      	b.n	8005856 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800583e:	d10a      	bne.n	8005856 <vTaskStartScheduler+0x96>
        __asm volatile
 8005840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005844:	f383 8811 	msr	BASEPRI, r3
 8005848:	f3bf 8f6f 	isb	sy
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	607b      	str	r3, [r7, #4]
    }
 8005852:	bf00      	nop
 8005854:	e7fe      	b.n	8005854 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005856:	4b0a      	ldr	r3, [pc, #40]	; (8005880 <vTaskStartScheduler+0xc0>)
 8005858:	681b      	ldr	r3, [r3, #0]
}
 800585a:	bf00      	nop
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	200001b4 	.word	0x200001b4
 8005868:	0800aaec 	.word	0x0800aaec
 800586c:	08005ecd 	.word	0x08005ecd
 8005870:	200001b0 	.word	0x200001b0
 8005874:	2000019c 	.word	0x2000019c
 8005878:	20000194 	.word	0x20000194
 800587c:	200000b8 	.word	0x200000b8
 8005880:	20000028 	.word	0x20000028

08005884 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005884:	b480      	push	{r7}
 8005886:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005888:	4b04      	ldr	r3, [pc, #16]	; (800589c <vTaskSuspendAll+0x18>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	3301      	adds	r3, #1
 800588e:	4a03      	ldr	r2, [pc, #12]	; (800589c <vTaskSuspendAll+0x18>)
 8005890:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8005892:	bf00      	nop
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	200001b8 	.word	0x200001b8

080058a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80058a6:	2300      	movs	r3, #0
 80058a8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80058aa:	2300      	movs	r3, #0
 80058ac:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80058ae:	4b43      	ldr	r3, [pc, #268]	; (80059bc <xTaskResumeAll+0x11c>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10a      	bne.n	80058cc <xTaskResumeAll+0x2c>
        __asm volatile
 80058b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ba:	f383 8811 	msr	BASEPRI, r3
 80058be:	f3bf 8f6f 	isb	sy
 80058c2:	f3bf 8f4f 	dsb	sy
 80058c6:	603b      	str	r3, [r7, #0]
    }
 80058c8:	bf00      	nop
 80058ca:	e7fe      	b.n	80058ca <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80058cc:	f001 f982 	bl	8006bd4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80058d0:	4b3a      	ldr	r3, [pc, #232]	; (80059bc <xTaskResumeAll+0x11c>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3b01      	subs	r3, #1
 80058d6:	4a39      	ldr	r2, [pc, #228]	; (80059bc <xTaskResumeAll+0x11c>)
 80058d8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058da:	4b38      	ldr	r3, [pc, #224]	; (80059bc <xTaskResumeAll+0x11c>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d165      	bne.n	80059ae <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80058e2:	4b37      	ldr	r3, [pc, #220]	; (80059c0 <xTaskResumeAll+0x120>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d061      	beq.n	80059ae <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058ea:	e032      	b.n	8005952 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058ec:	4b35      	ldr	r3, [pc, #212]	; (80059c4 <xTaskResumeAll+0x124>)
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	3318      	adds	r3, #24
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7ff f879 	bl	80049f0 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	3304      	adds	r3, #4
 8005902:	4618      	mov	r0, r3
 8005904:	f7ff f874 	bl	80049f0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	4618      	mov	r0, r3
 800590c:	f002 fed2 	bl	80086b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005914:	2201      	movs	r2, #1
 8005916:	409a      	lsls	r2, r3
 8005918:	4b2b      	ldr	r3, [pc, #172]	; (80059c8 <xTaskResumeAll+0x128>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4313      	orrs	r3, r2
 800591e:	4a2a      	ldr	r2, [pc, #168]	; (80059c8 <xTaskResumeAll+0x128>)
 8005920:	6013      	str	r3, [r2, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005926:	4613      	mov	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4a27      	ldr	r2, [pc, #156]	; (80059cc <xTaskResumeAll+0x12c>)
 8005930:	441a      	add	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	3304      	adds	r3, #4
 8005936:	4619      	mov	r1, r3
 8005938:	4610      	mov	r0, r2
 800593a:	f7fe fffc 	bl	8004936 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005942:	4b23      	ldr	r3, [pc, #140]	; (80059d0 <xTaskResumeAll+0x130>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005948:	429a      	cmp	r2, r3
 800594a:	d302      	bcc.n	8005952 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 800594c:	4b21      	ldr	r3, [pc, #132]	; (80059d4 <xTaskResumeAll+0x134>)
 800594e:	2201      	movs	r2, #1
 8005950:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005952:	4b1c      	ldr	r3, [pc, #112]	; (80059c4 <xTaskResumeAll+0x124>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1c8      	bne.n	80058ec <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d001      	beq.n	8005964 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005960:	f000 fb4a 	bl	8005ff8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005964:	4b1c      	ldr	r3, [pc, #112]	; (80059d8 <xTaskResumeAll+0x138>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d010      	beq.n	8005992 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005970:	f000 f846 	bl	8005a00 <xTaskIncrementTick>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d002      	beq.n	8005980 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800597a:	4b16      	ldr	r3, [pc, #88]	; (80059d4 <xTaskResumeAll+0x134>)
 800597c:	2201      	movs	r2, #1
 800597e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	3b01      	subs	r3, #1
 8005984:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1f1      	bne.n	8005970 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 800598c:	4b12      	ldr	r3, [pc, #72]	; (80059d8 <xTaskResumeAll+0x138>)
 800598e:	2200      	movs	r2, #0
 8005990:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005992:	4b10      	ldr	r3, [pc, #64]	; (80059d4 <xTaskResumeAll+0x134>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d009      	beq.n	80059ae <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800599a:	2301      	movs	r3, #1
 800599c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800599e:	4b0f      	ldr	r3, [pc, #60]	; (80059dc <xTaskResumeAll+0x13c>)
 80059a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059a4:	601a      	str	r2, [r3, #0]
 80059a6:	f3bf 8f4f 	dsb	sy
 80059aa:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80059ae:	f001 f941 	bl	8006c34 <vPortExitCritical>

    return xAlreadyYielded;
 80059b2:	68bb      	ldr	r3, [r7, #8]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	200001b8 	.word	0x200001b8
 80059c0:	20000190 	.word	0x20000190
 80059c4:	20000150 	.word	0x20000150
 80059c8:	20000198 	.word	0x20000198
 80059cc:	200000bc 	.word	0x200000bc
 80059d0:	200000b8 	.word	0x200000b8
 80059d4:	200001a4 	.word	0x200001a4
 80059d8:	200001a0 	.word	0x200001a0
 80059dc:	e000ed04 	.word	0xe000ed04

080059e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80059e6:	4b05      	ldr	r3, [pc, #20]	; (80059fc <xTaskGetTickCount+0x1c>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80059ec:	687b      	ldr	r3, [r7, #4]
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	20000194 	.word	0x20000194

08005a00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005a06:	2300      	movs	r3, #0
 8005a08:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a0a:	4b50      	ldr	r3, [pc, #320]	; (8005b4c <xTaskIncrementTick+0x14c>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f040 8092 	bne.w	8005b38 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005a14:	4b4e      	ldr	r3, [pc, #312]	; (8005b50 <xTaskIncrementTick+0x150>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3301      	adds	r3, #1
 8005a1a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005a1c:	4a4c      	ldr	r2, [pc, #304]	; (8005b50 <xTaskIncrementTick+0x150>)
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d120      	bne.n	8005a6a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8005a28:	4b4a      	ldr	r3, [pc, #296]	; (8005b54 <xTaskIncrementTick+0x154>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00a      	beq.n	8005a48 <xTaskIncrementTick+0x48>
        __asm volatile
 8005a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a36:	f383 8811 	msr	BASEPRI, r3
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	603b      	str	r3, [r7, #0]
    }
 8005a44:	bf00      	nop
 8005a46:	e7fe      	b.n	8005a46 <xTaskIncrementTick+0x46>
 8005a48:	4b42      	ldr	r3, [pc, #264]	; (8005b54 <xTaskIncrementTick+0x154>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	60fb      	str	r3, [r7, #12]
 8005a4e:	4b42      	ldr	r3, [pc, #264]	; (8005b58 <xTaskIncrementTick+0x158>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a40      	ldr	r2, [pc, #256]	; (8005b54 <xTaskIncrementTick+0x154>)
 8005a54:	6013      	str	r3, [r2, #0]
 8005a56:	4a40      	ldr	r2, [pc, #256]	; (8005b58 <xTaskIncrementTick+0x158>)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6013      	str	r3, [r2, #0]
 8005a5c:	4b3f      	ldr	r3, [pc, #252]	; (8005b5c <xTaskIncrementTick+0x15c>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	3301      	adds	r3, #1
 8005a62:	4a3e      	ldr	r2, [pc, #248]	; (8005b5c <xTaskIncrementTick+0x15c>)
 8005a64:	6013      	str	r3, [r2, #0]
 8005a66:	f000 fac7 	bl	8005ff8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005a6a:	4b3d      	ldr	r3, [pc, #244]	; (8005b60 <xTaskIncrementTick+0x160>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d34c      	bcc.n	8005b0e <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a74:	4b37      	ldr	r3, [pc, #220]	; (8005b54 <xTaskIncrementTick+0x154>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d104      	bne.n	8005a88 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a7e:	4b38      	ldr	r3, [pc, #224]	; (8005b60 <xTaskIncrementTick+0x160>)
 8005a80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a84:	601a      	str	r2, [r3, #0]
                    break;
 8005a86:	e042      	b.n	8005b0e <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a88:	4b32      	ldr	r3, [pc, #200]	; (8005b54 <xTaskIncrementTick+0x154>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d203      	bcs.n	8005aa8 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005aa0:	4a2f      	ldr	r2, [pc, #188]	; (8005b60 <xTaskIncrementTick+0x160>)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005aa6:	e032      	b.n	8005b0e <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	3304      	adds	r3, #4
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7fe ff9f 	bl	80049f0 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d004      	beq.n	8005ac4 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	3318      	adds	r3, #24
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7fe ff96 	bl	80049f0 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f002 fdf4 	bl	80086b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	409a      	lsls	r2, r3
 8005ad4:	4b23      	ldr	r3, [pc, #140]	; (8005b64 <xTaskIncrementTick+0x164>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	4a22      	ldr	r2, [pc, #136]	; (8005b64 <xTaskIncrementTick+0x164>)
 8005adc:	6013      	str	r3, [r2, #0]
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	4413      	add	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	4a1f      	ldr	r2, [pc, #124]	; (8005b68 <xTaskIncrementTick+0x168>)
 8005aec:	441a      	add	r2, r3
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	3304      	adds	r3, #4
 8005af2:	4619      	mov	r1, r3
 8005af4:	4610      	mov	r0, r2
 8005af6:	f7fe ff1e 	bl	8004936 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005afe:	4b1b      	ldr	r3, [pc, #108]	; (8005b6c <xTaskIncrementTick+0x16c>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d3b5      	bcc.n	8005a74 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b0c:	e7b2      	b.n	8005a74 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b0e:	4b17      	ldr	r3, [pc, #92]	; (8005b6c <xTaskIncrementTick+0x16c>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b14:	4914      	ldr	r1, [pc, #80]	; (8005b68 <xTaskIncrementTick+0x168>)
 8005b16:	4613      	mov	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	440b      	add	r3, r1
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d901      	bls.n	8005b2a <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8005b26:	2301      	movs	r3, #1
 8005b28:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8005b2a:	4b11      	ldr	r3, [pc, #68]	; (8005b70 <xTaskIncrementTick+0x170>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d007      	beq.n	8005b42 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8005b32:	2301      	movs	r3, #1
 8005b34:	617b      	str	r3, [r7, #20]
 8005b36:	e004      	b.n	8005b42 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005b38:	4b0e      	ldr	r3, [pc, #56]	; (8005b74 <xTaskIncrementTick+0x174>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	4a0d      	ldr	r2, [pc, #52]	; (8005b74 <xTaskIncrementTick+0x174>)
 8005b40:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8005b42:	697b      	ldr	r3, [r7, #20]
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3718      	adds	r7, #24
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	200001b8 	.word	0x200001b8
 8005b50:	20000194 	.word	0x20000194
 8005b54:	20000148 	.word	0x20000148
 8005b58:	2000014c 	.word	0x2000014c
 8005b5c:	200001a8 	.word	0x200001a8
 8005b60:	200001b0 	.word	0x200001b0
 8005b64:	20000198 	.word	0x20000198
 8005b68:	200000bc 	.word	0x200000bc
 8005b6c:	200000b8 	.word	0x200000b8
 8005b70:	200001a4 	.word	0x200001a4
 8005b74:	200001a0 	.word	0x200001a0

08005b78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b7e:	4b2d      	ldr	r3, [pc, #180]	; (8005c34 <vTaskSwitchContext+0xbc>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d003      	beq.n	8005b8e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005b86:	4b2c      	ldr	r3, [pc, #176]	; (8005c38 <vTaskSwitchContext+0xc0>)
 8005b88:	2201      	movs	r2, #1
 8005b8a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8005b8c:	e04d      	b.n	8005c2a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8005b8e:	4b2a      	ldr	r3, [pc, #168]	; (8005c38 <vTaskSwitchContext+0xc0>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b94:	4b29      	ldr	r3, [pc, #164]	; (8005c3c <vTaskSwitchContext+0xc4>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	fab3 f383 	clz	r3, r3
 8005ba0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005ba2:	7afb      	ldrb	r3, [r7, #11]
 8005ba4:	f1c3 031f 	rsb	r3, r3, #31
 8005ba8:	617b      	str	r3, [r7, #20]
 8005baa:	4925      	ldr	r1, [pc, #148]	; (8005c40 <vTaskSwitchContext+0xc8>)
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4413      	add	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	440b      	add	r3, r1
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10a      	bne.n	8005bd4 <vTaskSwitchContext+0x5c>
        __asm volatile
 8005bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc2:	f383 8811 	msr	BASEPRI, r3
 8005bc6:	f3bf 8f6f 	isb	sy
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	607b      	str	r3, [r7, #4]
    }
 8005bd0:	bf00      	nop
 8005bd2:	e7fe      	b.n	8005bd2 <vTaskSwitchContext+0x5a>
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4a18      	ldr	r2, [pc, #96]	; (8005c40 <vTaskSwitchContext+0xc8>)
 8005be0:	4413      	add	r3, r2
 8005be2:	613b      	str	r3, [r7, #16]
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	685a      	ldr	r2, [r3, #4]
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	605a      	str	r2, [r3, #4]
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	3308      	adds	r3, #8
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d104      	bne.n	8005c04 <vTaskSwitchContext+0x8c>
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	605a      	str	r2, [r3, #4]
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	4a0e      	ldr	r2, [pc, #56]	; (8005c44 <vTaskSwitchContext+0xcc>)
 8005c0c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8005c0e:	4b0d      	ldr	r3, [pc, #52]	; (8005c44 <vTaskSwitchContext+0xcc>)
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	4b0d      	ldr	r3, [pc, #52]	; (8005c48 <vTaskSwitchContext+0xd0>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d102      	bne.n	8005c20 <vTaskSwitchContext+0xa8>
 8005c1a:	f002 fcab 	bl	8008574 <SEGGER_SYSVIEW_OnIdle>
}
 8005c1e:	e004      	b.n	8005c2a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8005c20:	4b08      	ldr	r3, [pc, #32]	; (8005c44 <vTaskSwitchContext+0xcc>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f002 fd03 	bl	8008630 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8005c2a:	bf00      	nop
 8005c2c:	3718      	adds	r7, #24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	200001b8 	.word	0x200001b8
 8005c38:	200001a4 	.word	0x200001a4
 8005c3c:	20000198 	.word	0x20000198
 8005c40:	200000bc 	.word	0x200000bc
 8005c44:	200000b8 	.word	0x200000b8
 8005c48:	200001b4 	.word	0x200001b4

08005c4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10a      	bne.n	8005c72 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8005c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c60:	f383 8811 	msr	BASEPRI, r3
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	60fb      	str	r3, [r7, #12]
    }
 8005c6e:	bf00      	nop
 8005c70:	e7fe      	b.n	8005c70 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c72:	4b07      	ldr	r3, [pc, #28]	; (8005c90 <vTaskPlaceOnEventList+0x44>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	3318      	adds	r3, #24
 8005c78:	4619      	mov	r1, r3
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f7fe fe7f 	bl	800497e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c80:	2101      	movs	r1, #1
 8005c82:	6838      	ldr	r0, [r7, #0]
 8005c84:	f000 fa72 	bl	800616c <prvAddCurrentTaskToDelayedList>
}
 8005c88:	bf00      	nop
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	200000b8 	.word	0x200000b8

08005c94 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10a      	bne.n	8005cbc <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8005ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005caa:	f383 8811 	msr	BASEPRI, r3
 8005cae:	f3bf 8f6f 	isb	sy
 8005cb2:	f3bf 8f4f 	dsb	sy
 8005cb6:	617b      	str	r3, [r7, #20]
    }
 8005cb8:	bf00      	nop
 8005cba:	e7fe      	b.n	8005cba <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005cbc:	4b0b      	ldr	r3, [pc, #44]	; (8005cec <vTaskPlaceOnEventListRestricted+0x58>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	3318      	adds	r3, #24
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f7fe fe36 	bl	8004936 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d002      	beq.n	8005cd6 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8005cd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cd4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8005cd6:	2024      	movs	r0, #36	; 0x24
 8005cd8:	f001 ff72 	bl	8007bc0 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005cdc:	6879      	ldr	r1, [r7, #4]
 8005cde:	68b8      	ldr	r0, [r7, #8]
 8005ce0:	f000 fa44 	bl	800616c <prvAddCurrentTaskToDelayedList>
    }
 8005ce4:	bf00      	nop
 8005ce6:	3718      	adds	r7, #24
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	200000b8 	.word	0x200000b8

08005cf0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10a      	bne.n	8005d1c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8005d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0a:	f383 8811 	msr	BASEPRI, r3
 8005d0e:	f3bf 8f6f 	isb	sy
 8005d12:	f3bf 8f4f 	dsb	sy
 8005d16:	60fb      	str	r3, [r7, #12]
    }
 8005d18:	bf00      	nop
 8005d1a:	e7fe      	b.n	8005d1a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	3318      	adds	r3, #24
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7fe fe65 	bl	80049f0 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d26:	4b1f      	ldr	r3, [pc, #124]	; (8005da4 <xTaskRemoveFromEventList+0xb4>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d120      	bne.n	8005d70 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	3304      	adds	r3, #4
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7fe fe5c 	bl	80049f0 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f002 fcba 	bl	80086b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d44:	2201      	movs	r2, #1
 8005d46:	409a      	lsls	r2, r3
 8005d48:	4b17      	ldr	r3, [pc, #92]	; (8005da8 <xTaskRemoveFromEventList+0xb8>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	4a16      	ldr	r2, [pc, #88]	; (8005da8 <xTaskRemoveFromEventList+0xb8>)
 8005d50:	6013      	str	r3, [r2, #0]
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d56:	4613      	mov	r3, r2
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4413      	add	r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	4a13      	ldr	r2, [pc, #76]	; (8005dac <xTaskRemoveFromEventList+0xbc>)
 8005d60:	441a      	add	r2, r3
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	3304      	adds	r3, #4
 8005d66:	4619      	mov	r1, r3
 8005d68:	4610      	mov	r0, r2
 8005d6a:	f7fe fde4 	bl	8004936 <vListInsertEnd>
 8005d6e:	e005      	b.n	8005d7c <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	3318      	adds	r3, #24
 8005d74:	4619      	mov	r1, r3
 8005d76:	480e      	ldr	r0, [pc, #56]	; (8005db0 <xTaskRemoveFromEventList+0xc0>)
 8005d78:	f7fe fddd 	bl	8004936 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d80:	4b0c      	ldr	r3, [pc, #48]	; (8005db4 <xTaskRemoveFromEventList+0xc4>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d905      	bls.n	8005d96 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005d8e:	4b0a      	ldr	r3, [pc, #40]	; (8005db8 <xTaskRemoveFromEventList+0xc8>)
 8005d90:	2201      	movs	r2, #1
 8005d92:	601a      	str	r2, [r3, #0]
 8005d94:	e001      	b.n	8005d9a <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8005d96:	2300      	movs	r3, #0
 8005d98:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005d9a:	697b      	ldr	r3, [r7, #20]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3718      	adds	r7, #24
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	200001b8 	.word	0x200001b8
 8005da8:	20000198 	.word	0x20000198
 8005dac:	200000bc 	.word	0x200000bc
 8005db0:	20000150 	.word	0x20000150
 8005db4:	200000b8 	.word	0x200000b8
 8005db8:	200001a4 	.word	0x200001a4

08005dbc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005dc4:	4b06      	ldr	r3, [pc, #24]	; (8005de0 <vTaskInternalSetTimeOutState+0x24>)
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005dcc:	4b05      	ldr	r3, [pc, #20]	; (8005de4 <vTaskInternalSetTimeOutState+0x28>)
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	605a      	str	r2, [r3, #4]
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	200001a8 	.word	0x200001a8
 8005de4:	20000194 	.word	0x20000194

08005de8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b088      	sub	sp, #32
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10a      	bne.n	8005e0e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8005df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfc:	f383 8811 	msr	BASEPRI, r3
 8005e00:	f3bf 8f6f 	isb	sy
 8005e04:	f3bf 8f4f 	dsb	sy
 8005e08:	613b      	str	r3, [r7, #16]
    }
 8005e0a:	bf00      	nop
 8005e0c:	e7fe      	b.n	8005e0c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10a      	bne.n	8005e2a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8005e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e18:	f383 8811 	msr	BASEPRI, r3
 8005e1c:	f3bf 8f6f 	isb	sy
 8005e20:	f3bf 8f4f 	dsb	sy
 8005e24:	60fb      	str	r3, [r7, #12]
    }
 8005e26:	bf00      	nop
 8005e28:	e7fe      	b.n	8005e28 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8005e2a:	f000 fed3 	bl	8006bd4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005e2e:	4b1f      	ldr	r3, [pc, #124]	; (8005eac <xTaskCheckForTimeOut+0xc4>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	69ba      	ldr	r2, [r7, #24]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e46:	d102      	bne.n	8005e4e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	61fb      	str	r3, [r7, #28]
 8005e4c:	e026      	b.n	8005e9c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	4b17      	ldr	r3, [pc, #92]	; (8005eb0 <xTaskCheckForTimeOut+0xc8>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d00a      	beq.n	8005e70 <xTaskCheckForTimeOut+0x88>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	69ba      	ldr	r2, [r7, #24]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d305      	bcc.n	8005e70 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005e64:	2301      	movs	r3, #1
 8005e66:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	601a      	str	r2, [r3, #0]
 8005e6e:	e015      	b.n	8005e9c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d20b      	bcs.n	8005e92 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	1ad2      	subs	r2, r2, r3
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7ff ff98 	bl	8005dbc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	61fb      	str	r3, [r7, #28]
 8005e90:	e004      	b.n	8005e9c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	2200      	movs	r2, #0
 8005e96:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005e9c:	f000 feca 	bl	8006c34 <vPortExitCritical>

    return xReturn;
 8005ea0:	69fb      	ldr	r3, [r7, #28]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3720      	adds	r7, #32
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	20000194 	.word	0x20000194
 8005eb0:	200001a8 	.word	0x200001a8

08005eb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005eb8:	4b03      	ldr	r3, [pc, #12]	; (8005ec8 <vTaskMissedYield+0x14>)
 8005eba:	2201      	movs	r2, #1
 8005ebc:	601a      	str	r2, [r3, #0]
}
 8005ebe:	bf00      	nop
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	200001a4 	.word	0x200001a4

08005ecc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005ed4:	f000 f852 	bl	8005f7c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ed8:	4b06      	ldr	r3, [pc, #24]	; (8005ef4 <prvIdleTask+0x28>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d9f9      	bls.n	8005ed4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8005ee0:	4b05      	ldr	r3, [pc, #20]	; (8005ef8 <prvIdleTask+0x2c>)
 8005ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ee6:	601a      	str	r2, [r3, #0]
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005ef0:	e7f0      	b.n	8005ed4 <prvIdleTask+0x8>
 8005ef2:	bf00      	nop
 8005ef4:	200000bc 	.word	0x200000bc
 8005ef8:	e000ed04 	.word	0xe000ed04

08005efc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f02:	2300      	movs	r3, #0
 8005f04:	607b      	str	r3, [r7, #4]
 8005f06:	e00c      	b.n	8005f22 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4413      	add	r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	4a12      	ldr	r2, [pc, #72]	; (8005f5c <prvInitialiseTaskLists+0x60>)
 8005f14:	4413      	add	r3, r2
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7fe fce0 	bl	80048dc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	607b      	str	r3, [r7, #4]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2b04      	cmp	r3, #4
 8005f26:	d9ef      	bls.n	8005f08 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005f28:	480d      	ldr	r0, [pc, #52]	; (8005f60 <prvInitialiseTaskLists+0x64>)
 8005f2a:	f7fe fcd7 	bl	80048dc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005f2e:	480d      	ldr	r0, [pc, #52]	; (8005f64 <prvInitialiseTaskLists+0x68>)
 8005f30:	f7fe fcd4 	bl	80048dc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005f34:	480c      	ldr	r0, [pc, #48]	; (8005f68 <prvInitialiseTaskLists+0x6c>)
 8005f36:	f7fe fcd1 	bl	80048dc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8005f3a:	480c      	ldr	r0, [pc, #48]	; (8005f6c <prvInitialiseTaskLists+0x70>)
 8005f3c:	f7fe fcce 	bl	80048dc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8005f40:	480b      	ldr	r0, [pc, #44]	; (8005f70 <prvInitialiseTaskLists+0x74>)
 8005f42:	f7fe fccb 	bl	80048dc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005f46:	4b0b      	ldr	r3, [pc, #44]	; (8005f74 <prvInitialiseTaskLists+0x78>)
 8005f48:	4a05      	ldr	r2, [pc, #20]	; (8005f60 <prvInitialiseTaskLists+0x64>)
 8005f4a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f4c:	4b0a      	ldr	r3, [pc, #40]	; (8005f78 <prvInitialiseTaskLists+0x7c>)
 8005f4e:	4a05      	ldr	r2, [pc, #20]	; (8005f64 <prvInitialiseTaskLists+0x68>)
 8005f50:	601a      	str	r2, [r3, #0]
}
 8005f52:	bf00      	nop
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	200000bc 	.word	0x200000bc
 8005f60:	20000120 	.word	0x20000120
 8005f64:	20000134 	.word	0x20000134
 8005f68:	20000150 	.word	0x20000150
 8005f6c:	20000164 	.word	0x20000164
 8005f70:	2000017c 	.word	0x2000017c
 8005f74:	20000148 	.word	0x20000148
 8005f78:	2000014c 	.word	0x2000014c

08005f7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f82:	e019      	b.n	8005fb8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8005f84:	f000 fe26 	bl	8006bd4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f88:	4b10      	ldr	r3, [pc, #64]	; (8005fcc <prvCheckTasksWaitingTermination+0x50>)
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	3304      	adds	r3, #4
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7fe fd2b 	bl	80049f0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8005f9a:	4b0d      	ldr	r3, [pc, #52]	; (8005fd0 <prvCheckTasksWaitingTermination+0x54>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	4a0b      	ldr	r2, [pc, #44]	; (8005fd0 <prvCheckTasksWaitingTermination+0x54>)
 8005fa2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8005fa4:	4b0b      	ldr	r3, [pc, #44]	; (8005fd4 <prvCheckTasksWaitingTermination+0x58>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	4a0a      	ldr	r2, [pc, #40]	; (8005fd4 <prvCheckTasksWaitingTermination+0x58>)
 8005fac:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8005fae:	f000 fe41 	bl	8006c34 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f810 	bl	8005fd8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fb8:	4b06      	ldr	r3, [pc, #24]	; (8005fd4 <prvCheckTasksWaitingTermination+0x58>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1e1      	bne.n	8005f84 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8005fc0:	bf00      	nop
 8005fc2:	bf00      	nop
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	20000164 	.word	0x20000164
 8005fd0:	20000190 	.word	0x20000190
 8005fd4:	20000178 	.word	0x20000178

08005fd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f001 f801 	bl	8006fec <vPortFree>
                vPortFree( pxTCB );
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 fffe 	bl	8006fec <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005ff0:	bf00      	nop
 8005ff2:	3708      	adds	r7, #8
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ffc:	4b0a      	ldr	r3, [pc, #40]	; (8006028 <prvResetNextTaskUnblockTime+0x30>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d104      	bne.n	8006010 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8006006:	4b09      	ldr	r3, [pc, #36]	; (800602c <prvResetNextTaskUnblockTime+0x34>)
 8006008:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800600c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800600e:	e005      	b.n	800601c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006010:	4b05      	ldr	r3, [pc, #20]	; (8006028 <prvResetNextTaskUnblockTime+0x30>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a04      	ldr	r2, [pc, #16]	; (800602c <prvResetNextTaskUnblockTime+0x34>)
 800601a:	6013      	str	r3, [r2, #0]
}
 800601c:	bf00      	nop
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	20000148 	.word	0x20000148
 800602c:	200001b0 	.word	0x200001b0

08006030 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8006036:	4b0b      	ldr	r3, [pc, #44]	; (8006064 <xTaskGetSchedulerState+0x34>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d102      	bne.n	8006044 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800603e:	2301      	movs	r3, #1
 8006040:	607b      	str	r3, [r7, #4]
 8006042:	e008      	b.n	8006056 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006044:	4b08      	ldr	r3, [pc, #32]	; (8006068 <xTaskGetSchedulerState+0x38>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d102      	bne.n	8006052 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800604c:	2302      	movs	r3, #2
 800604e:	607b      	str	r3, [r7, #4]
 8006050:	e001      	b.n	8006056 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8006052:	2300      	movs	r3, #0
 8006054:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8006056:	687b      	ldr	r3, [r7, #4]
    }
 8006058:	4618      	mov	r0, r3
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr
 8006064:	2000019c 	.word	0x2000019c
 8006068:	200001b8 	.word	0x200001b8

0800606c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8006078:	2300      	movs	r3, #0
 800607a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d068      	beq.n	8006154 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8006082:	4b37      	ldr	r3, [pc, #220]	; (8006160 <xTaskPriorityDisinherit+0xf4>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	429a      	cmp	r2, r3
 800608a:	d00a      	beq.n	80060a2 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 800608c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006090:	f383 8811 	msr	BASEPRI, r3
 8006094:	f3bf 8f6f 	isb	sy
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	60fb      	str	r3, [r7, #12]
    }
 800609e:	bf00      	nop
 80060a0:	e7fe      	b.n	80060a0 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10a      	bne.n	80060c0 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80060aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ae:	f383 8811 	msr	BASEPRI, r3
 80060b2:	f3bf 8f6f 	isb	sy
 80060b6:	f3bf 8f4f 	dsb	sy
 80060ba:	60bb      	str	r3, [r7, #8]
    }
 80060bc:	bf00      	nop
 80060be:	e7fe      	b.n	80060be <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060c4:	1e5a      	subs	r2, r3, #1
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d03e      	beq.n	8006154 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d13a      	bne.n	8006154 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	3304      	adds	r3, #4
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7fe fc84 	bl	80049f0 <uxListRemove>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10a      	bne.n	8006104 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f2:	2201      	movs	r2, #1
 80060f4:	fa02 f303 	lsl.w	r3, r2, r3
 80060f8:	43da      	mvns	r2, r3
 80060fa:	4b1a      	ldr	r3, [pc, #104]	; (8006164 <xTaskPriorityDisinherit+0xf8>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4013      	ands	r3, r2
 8006100:	4a18      	ldr	r2, [pc, #96]	; (8006164 <xTaskPriorityDisinherit+0xf8>)
 8006102:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4619      	mov	r1, r3
 8006108:	204a      	movs	r0, #74	; 0x4a
 800610a:	f001 fd77 	bl	8007bfc <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611a:	f1c3 0205 	rsb	r2, r3, #5
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006126:	2201      	movs	r2, #1
 8006128:	409a      	lsls	r2, r3
 800612a:	4b0e      	ldr	r3, [pc, #56]	; (8006164 <xTaskPriorityDisinherit+0xf8>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4313      	orrs	r3, r2
 8006130:	4a0c      	ldr	r2, [pc, #48]	; (8006164 <xTaskPriorityDisinherit+0xf8>)
 8006132:	6013      	str	r3, [r2, #0]
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006138:	4613      	mov	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4413      	add	r3, r2
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4a09      	ldr	r2, [pc, #36]	; (8006168 <xTaskPriorityDisinherit+0xfc>)
 8006142:	441a      	add	r2, r3
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	3304      	adds	r3, #4
 8006148:	4619      	mov	r1, r3
 800614a:	4610      	mov	r0, r2
 800614c:	f7fe fbf3 	bl	8004936 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8006150:	2301      	movs	r3, #1
 8006152:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006154:	697b      	ldr	r3, [r7, #20]
    }
 8006156:	4618      	mov	r0, r3
 8006158:	3718      	adds	r7, #24
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	200000b8 	.word	0x200000b8
 8006164:	20000198 	.word	0x20000198
 8006168:	200000bc 	.word	0x200000bc

0800616c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006176:	4b32      	ldr	r3, [pc, #200]	; (8006240 <prvAddCurrentTaskToDelayedList+0xd4>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800617c:	4b31      	ldr	r3, [pc, #196]	; (8006244 <prvAddCurrentTaskToDelayedList+0xd8>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	3304      	adds	r3, #4
 8006182:	4618      	mov	r0, r3
 8006184:	f7fe fc34 	bl	80049f0 <uxListRemove>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10b      	bne.n	80061a6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800618e:	4b2d      	ldr	r3, [pc, #180]	; (8006244 <prvAddCurrentTaskToDelayedList+0xd8>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006194:	2201      	movs	r2, #1
 8006196:	fa02 f303 	lsl.w	r3, r2, r3
 800619a:	43da      	mvns	r2, r3
 800619c:	4b2a      	ldr	r3, [pc, #168]	; (8006248 <prvAddCurrentTaskToDelayedList+0xdc>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4013      	ands	r3, r2
 80061a2:	4a29      	ldr	r2, [pc, #164]	; (8006248 <prvAddCurrentTaskToDelayedList+0xdc>)
 80061a4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061ac:	d110      	bne.n	80061d0 <prvAddCurrentTaskToDelayedList+0x64>
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00d      	beq.n	80061d0 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80061b4:	4b23      	ldr	r3, [pc, #140]	; (8006244 <prvAddCurrentTaskToDelayedList+0xd8>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	211b      	movs	r1, #27
 80061ba:	4618      	mov	r0, r3
 80061bc:	f002 fabc 	bl	8008738 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061c0:	4b20      	ldr	r3, [pc, #128]	; (8006244 <prvAddCurrentTaskToDelayedList+0xd8>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	3304      	adds	r3, #4
 80061c6:	4619      	mov	r1, r3
 80061c8:	4820      	ldr	r0, [pc, #128]	; (800624c <prvAddCurrentTaskToDelayedList+0xe0>)
 80061ca:	f7fe fbb4 	bl	8004936 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80061ce:	e032      	b.n	8006236 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4413      	add	r3, r2
 80061d6:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80061d8:	4b1a      	ldr	r3, [pc, #104]	; (8006244 <prvAddCurrentTaskToDelayedList+0xd8>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d20f      	bcs.n	8006208 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80061e8:	4b16      	ldr	r3, [pc, #88]	; (8006244 <prvAddCurrentTaskToDelayedList+0xd8>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2104      	movs	r1, #4
 80061ee:	4618      	mov	r0, r3
 80061f0:	f002 faa2 	bl	8008738 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061f4:	4b16      	ldr	r3, [pc, #88]	; (8006250 <prvAddCurrentTaskToDelayedList+0xe4>)
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	4b12      	ldr	r3, [pc, #72]	; (8006244 <prvAddCurrentTaskToDelayedList+0xd8>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	3304      	adds	r3, #4
 80061fe:	4619      	mov	r1, r3
 8006200:	4610      	mov	r0, r2
 8006202:	f7fe fbbc 	bl	800497e <vListInsert>
}
 8006206:	e016      	b.n	8006236 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8006208:	4b0e      	ldr	r3, [pc, #56]	; (8006244 <prvAddCurrentTaskToDelayedList+0xd8>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2104      	movs	r1, #4
 800620e:	4618      	mov	r0, r3
 8006210:	f002 fa92 	bl	8008738 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006214:	4b0f      	ldr	r3, [pc, #60]	; (8006254 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	4b0a      	ldr	r3, [pc, #40]	; (8006244 <prvAddCurrentTaskToDelayedList+0xd8>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	3304      	adds	r3, #4
 800621e:	4619      	mov	r1, r3
 8006220:	4610      	mov	r0, r2
 8006222:	f7fe fbac 	bl	800497e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8006226:	4b0c      	ldr	r3, [pc, #48]	; (8006258 <prvAddCurrentTaskToDelayedList+0xec>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	429a      	cmp	r2, r3
 800622e:	d202      	bcs.n	8006236 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8006230:	4a09      	ldr	r2, [pc, #36]	; (8006258 <prvAddCurrentTaskToDelayedList+0xec>)
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	6013      	str	r3, [r2, #0]
}
 8006236:	bf00      	nop
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	20000194 	.word	0x20000194
 8006244:	200000b8 	.word	0x200000b8
 8006248:	20000198 	.word	0x20000198
 800624c:	2000017c 	.word	0x2000017c
 8006250:	2000014c 	.word	0x2000014c
 8006254:	20000148 	.word	0x20000148
 8006258:	200001b0 	.word	0x200001b0

0800625c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8006262:	2300      	movs	r3, #0
 8006264:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8006266:	f000 fad5 	bl	8006814 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800626a:	4b11      	ldr	r3, [pc, #68]	; (80062b0 <xTimerCreateTimerTask+0x54>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00b      	beq.n	800628a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8006272:	4b10      	ldr	r3, [pc, #64]	; (80062b4 <xTimerCreateTimerTask+0x58>)
 8006274:	9301      	str	r3, [sp, #4]
 8006276:	2302      	movs	r3, #2
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	2300      	movs	r3, #0
 800627c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006280:	490d      	ldr	r1, [pc, #52]	; (80062b8 <xTimerCreateTimerTask+0x5c>)
 8006282:	480e      	ldr	r0, [pc, #56]	; (80062bc <xTimerCreateTimerTask+0x60>)
 8006284:	f7ff f938 	bl	80054f8 <xTaskCreate>
 8006288:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d10a      	bne.n	80062a6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8006290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006294:	f383 8811 	msr	BASEPRI, r3
 8006298:	f3bf 8f6f 	isb	sy
 800629c:	f3bf 8f4f 	dsb	sy
 80062a0:	603b      	str	r3, [r7, #0]
    }
 80062a2:	bf00      	nop
 80062a4:	e7fe      	b.n	80062a4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80062a6:	687b      	ldr	r3, [r7, #4]
    }
 80062a8:	4618      	mov	r0, r3
 80062aa:	3708      	adds	r7, #8
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	200001ec 	.word	0x200001ec
 80062b4:	200001f0 	.word	0x200001f0
 80062b8:	0800aaf4 	.word	0x0800aaf4
 80062bc:	080063f5 	.word	0x080063f5

080062c0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b08a      	sub	sp, #40	; 0x28
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
 80062cc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80062ce:	2300      	movs	r3, #0
 80062d0:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d10a      	bne.n	80062ee <xTimerGenericCommand+0x2e>
        __asm volatile
 80062d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062dc:	f383 8811 	msr	BASEPRI, r3
 80062e0:	f3bf 8f6f 	isb	sy
 80062e4:	f3bf 8f4f 	dsb	sy
 80062e8:	623b      	str	r3, [r7, #32]
    }
 80062ea:	bf00      	nop
 80062ec:	e7fe      	b.n	80062ec <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80062ee:	4b1a      	ldr	r3, [pc, #104]	; (8006358 <xTimerGenericCommand+0x98>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d02a      	beq.n	800634c <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	2b05      	cmp	r3, #5
 8006306:	dc18      	bgt.n	800633a <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006308:	f7ff fe92 	bl	8006030 <xTaskGetSchedulerState>
 800630c:	4603      	mov	r3, r0
 800630e:	2b02      	cmp	r3, #2
 8006310:	d109      	bne.n	8006326 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006312:	4b11      	ldr	r3, [pc, #68]	; (8006358 <xTimerGenericCommand+0x98>)
 8006314:	6818      	ldr	r0, [r3, #0]
 8006316:	f107 0114 	add.w	r1, r7, #20
 800631a:	2300      	movs	r3, #0
 800631c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800631e:	f7fe fc81 	bl	8004c24 <xQueueGenericSend>
 8006322:	6278      	str	r0, [r7, #36]	; 0x24
 8006324:	e012      	b.n	800634c <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006326:	4b0c      	ldr	r3, [pc, #48]	; (8006358 <xTimerGenericCommand+0x98>)
 8006328:	6818      	ldr	r0, [r3, #0]
 800632a:	f107 0114 	add.w	r1, r7, #20
 800632e:	2300      	movs	r3, #0
 8006330:	2200      	movs	r2, #0
 8006332:	f7fe fc77 	bl	8004c24 <xQueueGenericSend>
 8006336:	6278      	str	r0, [r7, #36]	; 0x24
 8006338:	e008      	b.n	800634c <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800633a:	4b07      	ldr	r3, [pc, #28]	; (8006358 <xTimerGenericCommand+0x98>)
 800633c:	6818      	ldr	r0, [r3, #0]
 800633e:	f107 0114 	add.w	r1, r7, #20
 8006342:	2300      	movs	r3, #0
 8006344:	683a      	ldr	r2, [r7, #0]
 8006346:	f7fe fd93 	bl	8004e70 <xQueueGenericSendFromISR>
 800634a:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800634c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800634e:	4618      	mov	r0, r3
 8006350:	3728      	adds	r7, #40	; 0x28
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	200001ec 	.word	0x200001ec

0800635c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800635c:	b580      	push	{r7, lr}
 800635e:	b088      	sub	sp, #32
 8006360:	af02      	add	r7, sp, #8
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006366:	4b22      	ldr	r3, [pc, #136]	; (80063f0 <prvProcessExpiredTimer+0x94>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	3304      	adds	r3, #4
 8006374:	4618      	mov	r0, r3
 8006376:	f7fe fb3b 	bl	80049f0 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006380:	f003 0304 	and.w	r3, r3, #4
 8006384:	2b00      	cmp	r3, #0
 8006386:	d022      	beq.n	80063ce <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	699a      	ldr	r2, [r3, #24]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	18d1      	adds	r1, r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	683a      	ldr	r2, [r7, #0]
 8006394:	6978      	ldr	r0, [r7, #20]
 8006396:	f000 f8d1 	bl	800653c <prvInsertTimerInActiveList>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d01f      	beq.n	80063e0 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063a0:	2300      	movs	r3, #0
 80063a2:	9300      	str	r3, [sp, #0]
 80063a4:	2300      	movs	r3, #0
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	2100      	movs	r1, #0
 80063aa:	6978      	ldr	r0, [r7, #20]
 80063ac:	f7ff ff88 	bl	80062c0 <xTimerGenericCommand>
 80063b0:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d113      	bne.n	80063e0 <prvProcessExpiredTimer+0x84>
        __asm volatile
 80063b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063bc:	f383 8811 	msr	BASEPRI, r3
 80063c0:	f3bf 8f6f 	isb	sy
 80063c4:	f3bf 8f4f 	dsb	sy
 80063c8:	60fb      	str	r3, [r7, #12]
    }
 80063ca:	bf00      	nop
 80063cc:	e7fe      	b.n	80063cc <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063d4:	f023 0301 	bic.w	r3, r3, #1
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	6a1b      	ldr	r3, [r3, #32]
 80063e4:	6978      	ldr	r0, [r7, #20]
 80063e6:	4798      	blx	r3
    }
 80063e8:	bf00      	nop
 80063ea:	3718      	adds	r7, #24
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	200001e4 	.word	0x200001e4

080063f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063fc:	f107 0308 	add.w	r3, r7, #8
 8006400:	4618      	mov	r0, r3
 8006402:	f000 f857 	bl	80064b4 <prvGetNextExpireTime>
 8006406:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	4619      	mov	r1, r3
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f000 f803 	bl	8006418 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006412:	f000 f8d5 	bl	80065c0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006416:	e7f1      	b.n	80063fc <prvTimerTask+0x8>

08006418 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006422:	f7ff fa2f 	bl	8005884 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006426:	f107 0308 	add.w	r3, r7, #8
 800642a:	4618      	mov	r0, r3
 800642c:	f000 f866 	bl	80064fc <prvSampleTimeNow>
 8006430:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d130      	bne.n	800649a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d10a      	bne.n	8006454 <prvProcessTimerOrBlockTask+0x3c>
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	429a      	cmp	r2, r3
 8006444:	d806      	bhi.n	8006454 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8006446:	f7ff fa2b 	bl	80058a0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800644a:	68f9      	ldr	r1, [r7, #12]
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f7ff ff85 	bl	800635c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006452:	e024      	b.n	800649e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d008      	beq.n	800646c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800645a:	4b13      	ldr	r3, [pc, #76]	; (80064a8 <prvProcessTimerOrBlockTask+0x90>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d101      	bne.n	8006468 <prvProcessTimerOrBlockTask+0x50>
 8006464:	2301      	movs	r3, #1
 8006466:	e000      	b.n	800646a <prvProcessTimerOrBlockTask+0x52>
 8006468:	2300      	movs	r3, #0
 800646a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800646c:	4b0f      	ldr	r3, [pc, #60]	; (80064ac <prvProcessTimerOrBlockTask+0x94>)
 800646e:	6818      	ldr	r0, [r3, #0]
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	683a      	ldr	r2, [r7, #0]
 8006478:	4619      	mov	r1, r3
 800647a:	f7ff f809 	bl	8005490 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800647e:	f7ff fa0f 	bl	80058a0 <xTaskResumeAll>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10a      	bne.n	800649e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006488:	4b09      	ldr	r3, [pc, #36]	; (80064b0 <prvProcessTimerOrBlockTask+0x98>)
 800648a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800648e:	601a      	str	r2, [r3, #0]
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	f3bf 8f6f 	isb	sy
    }
 8006498:	e001      	b.n	800649e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800649a:	f7ff fa01 	bl	80058a0 <xTaskResumeAll>
    }
 800649e:	bf00      	nop
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	200001e8 	.word	0x200001e8
 80064ac:	200001ec 	.word	0x200001ec
 80064b0:	e000ed04 	.word	0xe000ed04

080064b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80064bc:	4b0e      	ldr	r3, [pc, #56]	; (80064f8 <prvGetNextExpireTime+0x44>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d101      	bne.n	80064ca <prvGetNextExpireTime+0x16>
 80064c6:	2201      	movs	r2, #1
 80064c8:	e000      	b.n	80064cc <prvGetNextExpireTime+0x18>
 80064ca:	2200      	movs	r2, #0
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d105      	bne.n	80064e4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80064d8:	4b07      	ldr	r3, [pc, #28]	; (80064f8 <prvGetNextExpireTime+0x44>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	60fb      	str	r3, [r7, #12]
 80064e2:	e001      	b.n	80064e8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80064e4:	2300      	movs	r3, #0
 80064e6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80064e8:	68fb      	ldr	r3, [r7, #12]
    }
 80064ea:	4618      	mov	r0, r3
 80064ec:	3714      	adds	r7, #20
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	200001e4 	.word	0x200001e4

080064fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006504:	f7ff fa6c 	bl	80059e0 <xTaskGetTickCount>
 8006508:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800650a:	4b0b      	ldr	r3, [pc, #44]	; (8006538 <prvSampleTimeNow+0x3c>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	429a      	cmp	r2, r3
 8006512:	d205      	bcs.n	8006520 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006514:	f000 f91a 	bl	800674c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	601a      	str	r2, [r3, #0]
 800651e:	e002      	b.n	8006526 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006526:	4a04      	ldr	r2, [pc, #16]	; (8006538 <prvSampleTimeNow+0x3c>)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800652c:	68fb      	ldr	r3, [r7, #12]
    }
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	200001f4 	.word	0x200001f4

0800653c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
 8006548:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800654a:	2300      	movs	r3, #0
 800654c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	429a      	cmp	r2, r3
 8006560:	d812      	bhi.n	8006588 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	1ad2      	subs	r2, r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	429a      	cmp	r2, r3
 800656e:	d302      	bcc.n	8006576 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006570:	2301      	movs	r3, #1
 8006572:	617b      	str	r3, [r7, #20]
 8006574:	e01b      	b.n	80065ae <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006576:	4b10      	ldr	r3, [pc, #64]	; (80065b8 <prvInsertTimerInActiveList+0x7c>)
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	3304      	adds	r3, #4
 800657e:	4619      	mov	r1, r3
 8006580:	4610      	mov	r0, r2
 8006582:	f7fe f9fc 	bl	800497e <vListInsert>
 8006586:	e012      	b.n	80065ae <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	429a      	cmp	r2, r3
 800658e:	d206      	bcs.n	800659e <prvInsertTimerInActiveList+0x62>
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	429a      	cmp	r2, r3
 8006596:	d302      	bcc.n	800659e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006598:	2301      	movs	r3, #1
 800659a:	617b      	str	r3, [r7, #20]
 800659c:	e007      	b.n	80065ae <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800659e:	4b07      	ldr	r3, [pc, #28]	; (80065bc <prvInsertTimerInActiveList+0x80>)
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	3304      	adds	r3, #4
 80065a6:	4619      	mov	r1, r3
 80065a8:	4610      	mov	r0, r2
 80065aa:	f7fe f9e8 	bl	800497e <vListInsert>
            }
        }

        return xProcessTimerNow;
 80065ae:	697b      	ldr	r3, [r7, #20]
    }
 80065b0:	4618      	mov	r0, r3
 80065b2:	3718      	adds	r7, #24
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	200001e8 	.word	0x200001e8
 80065bc:	200001e4 	.word	0x200001e4

080065c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b08c      	sub	sp, #48	; 0x30
 80065c4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065c6:	e0ae      	b.n	8006726 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f2c0 80aa 	blt.w	8006724 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80065d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d6:	695b      	ldr	r3, [r3, #20]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d004      	beq.n	80065e6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065de:	3304      	adds	r3, #4
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7fe fa05 	bl	80049f0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80065e6:	1d3b      	adds	r3, r7, #4
 80065e8:	4618      	mov	r0, r3
 80065ea:	f7ff ff87 	bl	80064fc <prvSampleTimeNow>
 80065ee:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	2b09      	cmp	r3, #9
 80065f4:	f200 8097 	bhi.w	8006726 <prvProcessReceivedCommands+0x166>
 80065f8:	a201      	add	r2, pc, #4	; (adr r2, 8006600 <prvProcessReceivedCommands+0x40>)
 80065fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fe:	bf00      	nop
 8006600:	08006629 	.word	0x08006629
 8006604:	08006629 	.word	0x08006629
 8006608:	08006629 	.word	0x08006629
 800660c:	0800669d 	.word	0x0800669d
 8006610:	080066b1 	.word	0x080066b1
 8006614:	080066fb 	.word	0x080066fb
 8006618:	08006629 	.word	0x08006629
 800661c:	08006629 	.word	0x08006629
 8006620:	0800669d 	.word	0x0800669d
 8006624:	080066b1 	.word	0x080066b1
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800662e:	f043 0301 	orr.w	r3, r3, #1
 8006632:	b2da      	uxtb	r2, r3
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663e:	699b      	ldr	r3, [r3, #24]
 8006640:	18d1      	adds	r1, r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6a3a      	ldr	r2, [r7, #32]
 8006646:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006648:	f7ff ff78 	bl	800653c <prvInsertTimerInActiveList>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d069      	beq.n	8006726 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006658:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800665a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006660:	f003 0304 	and.w	r3, r3, #4
 8006664:	2b00      	cmp	r3, #0
 8006666:	d05e      	beq.n	8006726 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	441a      	add	r2, r3
 8006670:	2300      	movs	r3, #0
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	2300      	movs	r3, #0
 8006676:	2100      	movs	r1, #0
 8006678:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800667a:	f7ff fe21 	bl	80062c0 <xTimerGenericCommand>
 800667e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d14f      	bne.n	8006726 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8006686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668a:	f383 8811 	msr	BASEPRI, r3
 800668e:	f3bf 8f6f 	isb	sy
 8006692:	f3bf 8f4f 	dsb	sy
 8006696:	61bb      	str	r3, [r7, #24]
    }
 8006698:	bf00      	nop
 800669a:	e7fe      	b.n	800669a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066a2:	f023 0301 	bic.w	r3, r3, #1
 80066a6:	b2da      	uxtb	r2, r3
 80066a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80066ae:	e03a      	b.n	8006726 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80066b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066b6:	f043 0301 	orr.w	r3, r3, #1
 80066ba:	b2da      	uxtb	r2, r3
 80066bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80066c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10a      	bne.n	80066e6 <prvProcessReceivedCommands+0x126>
        __asm volatile
 80066d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	617b      	str	r3, [r7, #20]
    }
 80066e2:	bf00      	nop
 80066e4:	e7fe      	b.n	80066e4 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80066e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e8:	699a      	ldr	r2, [r3, #24]
 80066ea:	6a3b      	ldr	r3, [r7, #32]
 80066ec:	18d1      	adds	r1, r2, r3
 80066ee:	6a3b      	ldr	r3, [r7, #32]
 80066f0:	6a3a      	ldr	r2, [r7, #32]
 80066f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066f4:	f7ff ff22 	bl	800653c <prvInsertTimerInActiveList>
                        break;
 80066f8:	e015      	b.n	8006726 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80066fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b00      	cmp	r3, #0
 8006706:	d103      	bne.n	8006710 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8006708:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800670a:	f000 fc6f 	bl	8006fec <vPortFree>
 800670e:	e00a      	b.n	8006726 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006712:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006716:	f023 0301 	bic.w	r3, r3, #1
 800671a:	b2da      	uxtb	r2, r3
 800671c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006722:	e000      	b.n	8006726 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8006724:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006726:	4b08      	ldr	r3, [pc, #32]	; (8006748 <prvProcessReceivedCommands+0x188>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f107 0108 	add.w	r1, r7, #8
 800672e:	2200      	movs	r2, #0
 8006730:	4618      	mov	r0, r3
 8006732:	f7fe fc5b 	bl	8004fec <xQueueReceive>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	f47f af45 	bne.w	80065c8 <prvProcessReceivedCommands+0x8>
        }
    }
 800673e:	bf00      	nop
 8006740:	bf00      	nop
 8006742:	3728      	adds	r7, #40	; 0x28
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	200001ec 	.word	0x200001ec

0800674c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800674c:	b580      	push	{r7, lr}
 800674e:	b088      	sub	sp, #32
 8006750:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006752:	e048      	b.n	80067e6 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006754:	4b2d      	ldr	r3, [pc, #180]	; (800680c <prvSwitchTimerLists+0xc0>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800675e:	4b2b      	ldr	r3, [pc, #172]	; (800680c <prvSwitchTimerLists+0xc0>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	3304      	adds	r3, #4
 800676c:	4618      	mov	r0, r3
 800676e:	f7fe f93f 	bl	80049f0 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006780:	f003 0304 	and.w	r3, r3, #4
 8006784:	2b00      	cmp	r3, #0
 8006786:	d02e      	beq.n	80067e6 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	693a      	ldr	r2, [r7, #16]
 800678e:	4413      	add	r3, r2
 8006790:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8006792:	68ba      	ldr	r2, [r7, #8]
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	429a      	cmp	r2, r3
 8006798:	d90e      	bls.n	80067b8 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	68ba      	ldr	r2, [r7, #8]
 800679e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067a6:	4b19      	ldr	r3, [pc, #100]	; (800680c <prvSwitchTimerLists+0xc0>)
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	3304      	adds	r3, #4
 80067ae:	4619      	mov	r1, r3
 80067b0:	4610      	mov	r0, r2
 80067b2:	f7fe f8e4 	bl	800497e <vListInsert>
 80067b6:	e016      	b.n	80067e6 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80067b8:	2300      	movs	r3, #0
 80067ba:	9300      	str	r3, [sp, #0]
 80067bc:	2300      	movs	r3, #0
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	2100      	movs	r1, #0
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f7ff fd7c 	bl	80062c0 <xTimerGenericCommand>
 80067c8:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d10a      	bne.n	80067e6 <prvSwitchTimerLists+0x9a>
        __asm volatile
 80067d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d4:	f383 8811 	msr	BASEPRI, r3
 80067d8:	f3bf 8f6f 	isb	sy
 80067dc:	f3bf 8f4f 	dsb	sy
 80067e0:	603b      	str	r3, [r7, #0]
    }
 80067e2:	bf00      	nop
 80067e4:	e7fe      	b.n	80067e4 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067e6:	4b09      	ldr	r3, [pc, #36]	; (800680c <prvSwitchTimerLists+0xc0>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d1b1      	bne.n	8006754 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80067f0:	4b06      	ldr	r3, [pc, #24]	; (800680c <prvSwitchTimerLists+0xc0>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80067f6:	4b06      	ldr	r3, [pc, #24]	; (8006810 <prvSwitchTimerLists+0xc4>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a04      	ldr	r2, [pc, #16]	; (800680c <prvSwitchTimerLists+0xc0>)
 80067fc:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80067fe:	4a04      	ldr	r2, [pc, #16]	; (8006810 <prvSwitchTimerLists+0xc4>)
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	6013      	str	r3, [r2, #0]
    }
 8006804:	bf00      	nop
 8006806:	3718      	adds	r7, #24
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	200001e4 	.word	0x200001e4
 8006810:	200001e8 	.word	0x200001e8

08006814 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006814:	b580      	push	{r7, lr}
 8006816:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006818:	f000 f9dc 	bl	8006bd4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800681c:	4b12      	ldr	r3, [pc, #72]	; (8006868 <prvCheckForValidListAndQueue+0x54>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d11d      	bne.n	8006860 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006824:	4811      	ldr	r0, [pc, #68]	; (800686c <prvCheckForValidListAndQueue+0x58>)
 8006826:	f7fe f859 	bl	80048dc <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800682a:	4811      	ldr	r0, [pc, #68]	; (8006870 <prvCheckForValidListAndQueue+0x5c>)
 800682c:	f7fe f856 	bl	80048dc <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006830:	4b10      	ldr	r3, [pc, #64]	; (8006874 <prvCheckForValidListAndQueue+0x60>)
 8006832:	4a0e      	ldr	r2, [pc, #56]	; (800686c <prvCheckForValidListAndQueue+0x58>)
 8006834:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006836:	4b10      	ldr	r3, [pc, #64]	; (8006878 <prvCheckForValidListAndQueue+0x64>)
 8006838:	4a0d      	ldr	r2, [pc, #52]	; (8006870 <prvCheckForValidListAndQueue+0x5c>)
 800683a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800683c:	2200      	movs	r2, #0
 800683e:	210c      	movs	r1, #12
 8006840:	200a      	movs	r0, #10
 8006842:	f7fe f967 	bl	8004b14 <xQueueGenericCreate>
 8006846:	4603      	mov	r3, r0
 8006848:	4a07      	ldr	r2, [pc, #28]	; (8006868 <prvCheckForValidListAndQueue+0x54>)
 800684a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800684c:	4b06      	ldr	r3, [pc, #24]	; (8006868 <prvCheckForValidListAndQueue+0x54>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d005      	beq.n	8006860 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006854:	4b04      	ldr	r3, [pc, #16]	; (8006868 <prvCheckForValidListAndQueue+0x54>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4908      	ldr	r1, [pc, #32]	; (800687c <prvCheckForValidListAndQueue+0x68>)
 800685a:	4618      	mov	r0, r3
 800685c:	f7fe fde6 	bl	800542c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006860:	f000 f9e8 	bl	8006c34 <vPortExitCritical>
    }
 8006864:	bf00      	nop
 8006866:	bd80      	pop	{r7, pc}
 8006868:	200001ec 	.word	0x200001ec
 800686c:	200001bc 	.word	0x200001bc
 8006870:	200001d0 	.word	0x200001d0
 8006874:	200001e4 	.word	0x200001e4
 8006878:	200001e8 	.word	0x200001e8
 800687c:	0800aafc 	.word	0x0800aafc

08006880 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	3b04      	subs	r3, #4
 8006890:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006898:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	3b04      	subs	r3, #4
 800689e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	f023 0201 	bic.w	r2, r3, #1
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	3b04      	subs	r3, #4
 80068ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80068b0:	4a0c      	ldr	r2, [pc, #48]	; (80068e4 <pxPortInitialiseStack+0x64>)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	3b14      	subs	r3, #20
 80068ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	3b04      	subs	r3, #4
 80068c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f06f 0202 	mvn.w	r2, #2
 80068ce:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	3b20      	subs	r3, #32
 80068d4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80068d6:	68fb      	ldr	r3, [r7, #12]
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3714      	adds	r7, #20
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr
 80068e4:	080068e9 	.word	0x080068e9

080068e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80068ee:	2300      	movs	r3, #0
 80068f0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80068f2:	4b12      	ldr	r3, [pc, #72]	; (800693c <prvTaskExitError+0x54>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068fa:	d00a      	beq.n	8006912 <prvTaskExitError+0x2a>
        __asm volatile
 80068fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006900:	f383 8811 	msr	BASEPRI, r3
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	60fb      	str	r3, [r7, #12]
    }
 800690e:	bf00      	nop
 8006910:	e7fe      	b.n	8006910 <prvTaskExitError+0x28>
        __asm volatile
 8006912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006916:	f383 8811 	msr	BASEPRI, r3
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	f3bf 8f4f 	dsb	sy
 8006922:	60bb      	str	r3, [r7, #8]
    }
 8006924:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006926:	bf00      	nop
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d0fc      	beq.n	8006928 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800692e:	bf00      	nop
 8006930:	bf00      	nop
 8006932:	3714      	adds	r7, #20
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr
 800693c:	2000002c 	.word	0x2000002c

08006940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006940:	4b07      	ldr	r3, [pc, #28]	; (8006960 <pxCurrentTCBConst2>)
 8006942:	6819      	ldr	r1, [r3, #0]
 8006944:	6808      	ldr	r0, [r1, #0]
 8006946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800694a:	f380 8809 	msr	PSP, r0
 800694e:	f3bf 8f6f 	isb	sy
 8006952:	f04f 0000 	mov.w	r0, #0
 8006956:	f380 8811 	msr	BASEPRI, r0
 800695a:	4770      	bx	lr
 800695c:	f3af 8000 	nop.w

08006960 <pxCurrentTCBConst2>:
 8006960:	200000b8 	.word	0x200000b8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006964:	bf00      	nop
 8006966:	bf00      	nop

08006968 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006968:	4808      	ldr	r0, [pc, #32]	; (800698c <prvPortStartFirstTask+0x24>)
 800696a:	6800      	ldr	r0, [r0, #0]
 800696c:	6800      	ldr	r0, [r0, #0]
 800696e:	f380 8808 	msr	MSP, r0
 8006972:	f04f 0000 	mov.w	r0, #0
 8006976:	f380 8814 	msr	CONTROL, r0
 800697a:	b662      	cpsie	i
 800697c:	b661      	cpsie	f
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	f3bf 8f6f 	isb	sy
 8006986:	df00      	svc	0
 8006988:	bf00      	nop
 800698a:	0000      	.short	0x0000
 800698c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006990:	bf00      	nop
 8006992:	bf00      	nop

08006994 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b086      	sub	sp, #24
 8006998:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800699a:	4b46      	ldr	r3, [pc, #280]	; (8006ab4 <xPortStartScheduler+0x120>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a46      	ldr	r2, [pc, #280]	; (8006ab8 <xPortStartScheduler+0x124>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d10a      	bne.n	80069ba <xPortStartScheduler+0x26>
        __asm volatile
 80069a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a8:	f383 8811 	msr	BASEPRI, r3
 80069ac:	f3bf 8f6f 	isb	sy
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	613b      	str	r3, [r7, #16]
    }
 80069b6:	bf00      	nop
 80069b8:	e7fe      	b.n	80069b8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80069ba:	4b3e      	ldr	r3, [pc, #248]	; (8006ab4 <xPortStartScheduler+0x120>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a3f      	ldr	r2, [pc, #252]	; (8006abc <xPortStartScheduler+0x128>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d10a      	bne.n	80069da <xPortStartScheduler+0x46>
        __asm volatile
 80069c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c8:	f383 8811 	msr	BASEPRI, r3
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	60fb      	str	r3, [r7, #12]
    }
 80069d6:	bf00      	nop
 80069d8:	e7fe      	b.n	80069d8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80069da:	4b39      	ldr	r3, [pc, #228]	; (8006ac0 <xPortStartScheduler+0x12c>)
 80069dc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	22ff      	movs	r2, #255	; 0xff
 80069ea:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80069f4:	78fb      	ldrb	r3, [r7, #3]
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80069fc:	b2da      	uxtb	r2, r3
 80069fe:	4b31      	ldr	r3, [pc, #196]	; (8006ac4 <xPortStartScheduler+0x130>)
 8006a00:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006a02:	4b31      	ldr	r3, [pc, #196]	; (8006ac8 <xPortStartScheduler+0x134>)
 8006a04:	2207      	movs	r2, #7
 8006a06:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a08:	e009      	b.n	8006a1e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8006a0a:	4b2f      	ldr	r3, [pc, #188]	; (8006ac8 <xPortStartScheduler+0x134>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	4a2d      	ldr	r2, [pc, #180]	; (8006ac8 <xPortStartScheduler+0x134>)
 8006a12:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a14:	78fb      	ldrb	r3, [r7, #3]
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	005b      	lsls	r3, r3, #1
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a1e:	78fb      	ldrb	r3, [r7, #3]
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a26:	2b80      	cmp	r3, #128	; 0x80
 8006a28:	d0ef      	beq.n	8006a0a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a2a:	4b27      	ldr	r3, [pc, #156]	; (8006ac8 <xPortStartScheduler+0x134>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f1c3 0307 	rsb	r3, r3, #7
 8006a32:	2b04      	cmp	r3, #4
 8006a34:	d00a      	beq.n	8006a4c <xPortStartScheduler+0xb8>
        __asm volatile
 8006a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3a:	f383 8811 	msr	BASEPRI, r3
 8006a3e:	f3bf 8f6f 	isb	sy
 8006a42:	f3bf 8f4f 	dsb	sy
 8006a46:	60bb      	str	r3, [r7, #8]
    }
 8006a48:	bf00      	nop
 8006a4a:	e7fe      	b.n	8006a4a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a4c:	4b1e      	ldr	r3, [pc, #120]	; (8006ac8 <xPortStartScheduler+0x134>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	021b      	lsls	r3, r3, #8
 8006a52:	4a1d      	ldr	r2, [pc, #116]	; (8006ac8 <xPortStartScheduler+0x134>)
 8006a54:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a56:	4b1c      	ldr	r3, [pc, #112]	; (8006ac8 <xPortStartScheduler+0x134>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a5e:	4a1a      	ldr	r2, [pc, #104]	; (8006ac8 <xPortStartScheduler+0x134>)
 8006a60:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	b2da      	uxtb	r2, r3
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006a6a:	4b18      	ldr	r3, [pc, #96]	; (8006acc <xPortStartScheduler+0x138>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a17      	ldr	r2, [pc, #92]	; (8006acc <xPortStartScheduler+0x138>)
 8006a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a74:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006a76:	4b15      	ldr	r3, [pc, #84]	; (8006acc <xPortStartScheduler+0x138>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a14      	ldr	r2, [pc, #80]	; (8006acc <xPortStartScheduler+0x138>)
 8006a7c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006a80:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006a82:	f000 f963 	bl	8006d4c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006a86:	4b12      	ldr	r3, [pc, #72]	; (8006ad0 <xPortStartScheduler+0x13c>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8006a8c:	f000 f982 	bl	8006d94 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006a90:	4b10      	ldr	r3, [pc, #64]	; (8006ad4 <xPortStartScheduler+0x140>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a0f      	ldr	r2, [pc, #60]	; (8006ad4 <xPortStartScheduler+0x140>)
 8006a96:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006a9a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8006a9c:	f7ff ff64 	bl	8006968 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006aa0:	f7ff f86a 	bl	8005b78 <vTaskSwitchContext>
    prvTaskExitError();
 8006aa4:	f7ff ff20 	bl	80068e8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3718      	adds	r7, #24
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	e000ed00 	.word	0xe000ed00
 8006ab8:	410fc271 	.word	0x410fc271
 8006abc:	410fc270 	.word	0x410fc270
 8006ac0:	e000e400 	.word	0xe000e400
 8006ac4:	200001f8 	.word	0x200001f8
 8006ac8:	200001fc 	.word	0x200001fc
 8006acc:	e000ed20 	.word	0xe000ed20
 8006ad0:	2000002c 	.word	0x2000002c
 8006ad4:	e000ef34 	.word	0xe000ef34

08006ad8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b087      	sub	sp, #28
 8006adc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006ade:	4b37      	ldr	r3, [pc, #220]	; (8006bbc <vInitPrioGroupValue+0xe4>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a37      	ldr	r2, [pc, #220]	; (8006bc0 <vInitPrioGroupValue+0xe8>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d10a      	bne.n	8006afe <vInitPrioGroupValue+0x26>
        __asm volatile
 8006ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aec:	f383 8811 	msr	BASEPRI, r3
 8006af0:	f3bf 8f6f 	isb	sy
 8006af4:	f3bf 8f4f 	dsb	sy
 8006af8:	613b      	str	r3, [r7, #16]
    }
 8006afa:	bf00      	nop
 8006afc:	e7fe      	b.n	8006afc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006afe:	4b2f      	ldr	r3, [pc, #188]	; (8006bbc <vInitPrioGroupValue+0xe4>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a30      	ldr	r2, [pc, #192]	; (8006bc4 <vInitPrioGroupValue+0xec>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d10a      	bne.n	8006b1e <vInitPrioGroupValue+0x46>
        __asm volatile
 8006b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0c:	f383 8811 	msr	BASEPRI, r3
 8006b10:	f3bf 8f6f 	isb	sy
 8006b14:	f3bf 8f4f 	dsb	sy
 8006b18:	60fb      	str	r3, [r7, #12]
    }
 8006b1a:	bf00      	nop
 8006b1c:	e7fe      	b.n	8006b1c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006b1e:	4b2a      	ldr	r3, [pc, #168]	; (8006bc8 <vInitPrioGroupValue+0xf0>)
 8006b20:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	22ff      	movs	r2, #255	; 0xff
 8006b2e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b38:	78fb      	ldrb	r3, [r7, #3]
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006b40:	b2da      	uxtb	r2, r3
 8006b42:	4b22      	ldr	r3, [pc, #136]	; (8006bcc <vInitPrioGroupValue+0xf4>)
 8006b44:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b46:	4b22      	ldr	r3, [pc, #136]	; (8006bd0 <vInitPrioGroupValue+0xf8>)
 8006b48:	2207      	movs	r2, #7
 8006b4a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b4c:	e009      	b.n	8006b62 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8006b4e:	4b20      	ldr	r3, [pc, #128]	; (8006bd0 <vInitPrioGroupValue+0xf8>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	3b01      	subs	r3, #1
 8006b54:	4a1e      	ldr	r2, [pc, #120]	; (8006bd0 <vInitPrioGroupValue+0xf8>)
 8006b56:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b58:	78fb      	ldrb	r3, [r7, #3]
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	005b      	lsls	r3, r3, #1
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b62:	78fb      	ldrb	r3, [r7, #3]
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b6a:	2b80      	cmp	r3, #128	; 0x80
 8006b6c:	d0ef      	beq.n	8006b4e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b6e:	4b18      	ldr	r3, [pc, #96]	; (8006bd0 <vInitPrioGroupValue+0xf8>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f1c3 0307 	rsb	r3, r3, #7
 8006b76:	2b04      	cmp	r3, #4
 8006b78:	d00a      	beq.n	8006b90 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8006b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7e:	f383 8811 	msr	BASEPRI, r3
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	60bb      	str	r3, [r7, #8]
    }
 8006b8c:	bf00      	nop
 8006b8e:	e7fe      	b.n	8006b8e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b90:	4b0f      	ldr	r3, [pc, #60]	; (8006bd0 <vInitPrioGroupValue+0xf8>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	021b      	lsls	r3, r3, #8
 8006b96:	4a0e      	ldr	r2, [pc, #56]	; (8006bd0 <vInitPrioGroupValue+0xf8>)
 8006b98:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b9a:	4b0d      	ldr	r3, [pc, #52]	; (8006bd0 <vInitPrioGroupValue+0xf8>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ba2:	4a0b      	ldr	r2, [pc, #44]	; (8006bd0 <vInitPrioGroupValue+0xf8>)
 8006ba4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	b2da      	uxtb	r2, r3
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8006bae:	bf00      	nop
 8006bb0:	371c      	adds	r7, #28
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	e000ed00 	.word	0xe000ed00
 8006bc0:	410fc271 	.word	0x410fc271
 8006bc4:	410fc270 	.word	0x410fc270
 8006bc8:	e000e400 	.word	0xe000e400
 8006bcc:	200001f8 	.word	0x200001f8
 8006bd0:	200001fc 	.word	0x200001fc

08006bd4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
        __asm volatile
 8006bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bde:	f383 8811 	msr	BASEPRI, r3
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	f3bf 8f4f 	dsb	sy
 8006bea:	607b      	str	r3, [r7, #4]
    }
 8006bec:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006bee:	4b0f      	ldr	r3, [pc, #60]	; (8006c2c <vPortEnterCritical+0x58>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	4a0d      	ldr	r2, [pc, #52]	; (8006c2c <vPortEnterCritical+0x58>)
 8006bf6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006bf8:	4b0c      	ldr	r3, [pc, #48]	; (8006c2c <vPortEnterCritical+0x58>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d10f      	bne.n	8006c20 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c00:	4b0b      	ldr	r3, [pc, #44]	; (8006c30 <vPortEnterCritical+0x5c>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00a      	beq.n	8006c20 <vPortEnterCritical+0x4c>
        __asm volatile
 8006c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	603b      	str	r3, [r7, #0]
    }
 8006c1c:	bf00      	nop
 8006c1e:	e7fe      	b.n	8006c1e <vPortEnterCritical+0x4a>
    }
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr
 8006c2c:	2000002c 	.word	0x2000002c
 8006c30:	e000ed04 	.word	0xe000ed04

08006c34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8006c3a:	4b12      	ldr	r3, [pc, #72]	; (8006c84 <vPortExitCritical+0x50>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10a      	bne.n	8006c58 <vPortExitCritical+0x24>
        __asm volatile
 8006c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c46:	f383 8811 	msr	BASEPRI, r3
 8006c4a:	f3bf 8f6f 	isb	sy
 8006c4e:	f3bf 8f4f 	dsb	sy
 8006c52:	607b      	str	r3, [r7, #4]
    }
 8006c54:	bf00      	nop
 8006c56:	e7fe      	b.n	8006c56 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8006c58:	4b0a      	ldr	r3, [pc, #40]	; (8006c84 <vPortExitCritical+0x50>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	4a09      	ldr	r2, [pc, #36]	; (8006c84 <vPortExitCritical+0x50>)
 8006c60:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006c62:	4b08      	ldr	r3, [pc, #32]	; (8006c84 <vPortExitCritical+0x50>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d105      	bne.n	8006c76 <vPortExitCritical+0x42>
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	f383 8811 	msr	BASEPRI, r3
    }
 8006c74:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8006c76:	bf00      	nop
 8006c78:	370c      	adds	r7, #12
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	2000002c 	.word	0x2000002c
	...

08006c90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006c90:	f3ef 8009 	mrs	r0, PSP
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	4b15      	ldr	r3, [pc, #84]	; (8006cf0 <pxCurrentTCBConst>)
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	f01e 0f10 	tst.w	lr, #16
 8006ca0:	bf08      	it	eq
 8006ca2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ca6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006caa:	6010      	str	r0, [r2, #0]
 8006cac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006cb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006cb4:	f380 8811 	msr	BASEPRI, r0
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	f7fe ff5a 	bl	8005b78 <vTaskSwitchContext>
 8006cc4:	f04f 0000 	mov.w	r0, #0
 8006cc8:	f380 8811 	msr	BASEPRI, r0
 8006ccc:	bc09      	pop	{r0, r3}
 8006cce:	6819      	ldr	r1, [r3, #0]
 8006cd0:	6808      	ldr	r0, [r1, #0]
 8006cd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd6:	f01e 0f10 	tst.w	lr, #16
 8006cda:	bf08      	it	eq
 8006cdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ce0:	f380 8809 	msr	PSP, r0
 8006ce4:	f3bf 8f6f 	isb	sy
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	f3af 8000 	nop.w

08006cf0 <pxCurrentTCBConst>:
 8006cf0:	200000b8 	.word	0x200000b8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006cf4:	bf00      	nop
 8006cf6:	bf00      	nop

08006cf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
        __asm volatile
 8006cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d02:	f383 8811 	msr	BASEPRI, r3
 8006d06:	f3bf 8f6f 	isb	sy
 8006d0a:	f3bf 8f4f 	dsb	sy
 8006d0e:	607b      	str	r3, [r7, #4]
    }
 8006d10:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8006d12:	f001 fbb5 	bl	8008480 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006d16:	f7fe fe73 	bl	8005a00 <xTaskIncrementTick>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d006      	beq.n	8006d2e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8006d20:	f001 fc0c 	bl	800853c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d24:	4b08      	ldr	r3, [pc, #32]	; (8006d48 <SysTick_Handler+0x50>)
 8006d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d2a:	601a      	str	r2, [r3, #0]
 8006d2c:	e001      	b.n	8006d32 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8006d2e:	f001 fbe9 	bl	8008504 <SEGGER_SYSVIEW_RecordExitISR>
 8006d32:	2300      	movs	r3, #0
 8006d34:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	f383 8811 	msr	BASEPRI, r3
    }
 8006d3c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8006d3e:	bf00      	nop
 8006d40:	3708      	adds	r7, #8
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	e000ed04 	.word	0xe000ed04

08006d4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d50:	4b0b      	ldr	r3, [pc, #44]	; (8006d80 <vPortSetupTimerInterrupt+0x34>)
 8006d52:	2200      	movs	r2, #0
 8006d54:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d56:	4b0b      	ldr	r3, [pc, #44]	; (8006d84 <vPortSetupTimerInterrupt+0x38>)
 8006d58:	2200      	movs	r2, #0
 8006d5a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d5c:	4b0a      	ldr	r3, [pc, #40]	; (8006d88 <vPortSetupTimerInterrupt+0x3c>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a0a      	ldr	r2, [pc, #40]	; (8006d8c <vPortSetupTimerInterrupt+0x40>)
 8006d62:	fba2 2303 	umull	r2, r3, r2, r3
 8006d66:	099b      	lsrs	r3, r3, #6
 8006d68:	4a09      	ldr	r2, [pc, #36]	; (8006d90 <vPortSetupTimerInterrupt+0x44>)
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d6e:	4b04      	ldr	r3, [pc, #16]	; (8006d80 <vPortSetupTimerInterrupt+0x34>)
 8006d70:	2207      	movs	r2, #7
 8006d72:	601a      	str	r2, [r3, #0]
}
 8006d74:	bf00      	nop
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	e000e010 	.word	0xe000e010
 8006d84:	e000e018 	.word	0xe000e018
 8006d88:	2000001c 	.word	0x2000001c
 8006d8c:	10624dd3 	.word	0x10624dd3
 8006d90:	e000e014 	.word	0xe000e014

08006d94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006d94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006da4 <vPortEnableVFP+0x10>
 8006d98:	6801      	ldr	r1, [r0, #0]
 8006d9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006d9e:	6001      	str	r1, [r0, #0]
 8006da0:	4770      	bx	lr
 8006da2:	0000      	.short	0x0000
 8006da4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006da8:	bf00      	nop
 8006daa:	bf00      	nop

08006dac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006db2:	f3ef 8305 	mrs	r3, IPSR
 8006db6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2b0f      	cmp	r3, #15
 8006dbc:	d914      	bls.n	8006de8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006dbe:	4a17      	ldr	r2, [pc, #92]	; (8006e1c <vPortValidateInterruptPriority+0x70>)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006dc8:	4b15      	ldr	r3, [pc, #84]	; (8006e20 <vPortValidateInterruptPriority+0x74>)
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	7afa      	ldrb	r2, [r7, #11]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d20a      	bcs.n	8006de8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8006dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd6:	f383 8811 	msr	BASEPRI, r3
 8006dda:	f3bf 8f6f 	isb	sy
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	607b      	str	r3, [r7, #4]
    }
 8006de4:	bf00      	nop
 8006de6:	e7fe      	b.n	8006de6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006de8:	4b0e      	ldr	r3, [pc, #56]	; (8006e24 <vPortValidateInterruptPriority+0x78>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006df0:	4b0d      	ldr	r3, [pc, #52]	; (8006e28 <vPortValidateInterruptPriority+0x7c>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d90a      	bls.n	8006e0e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8006df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfc:	f383 8811 	msr	BASEPRI, r3
 8006e00:	f3bf 8f6f 	isb	sy
 8006e04:	f3bf 8f4f 	dsb	sy
 8006e08:	603b      	str	r3, [r7, #0]
    }
 8006e0a:	bf00      	nop
 8006e0c:	e7fe      	b.n	8006e0c <vPortValidateInterruptPriority+0x60>
    }
 8006e0e:	bf00      	nop
 8006e10:	3714      	adds	r7, #20
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	e000e3f0 	.word	0xe000e3f0
 8006e20:	200001f8 	.word	0x200001f8
 8006e24:	e000ed0c 	.word	0xe000ed0c
 8006e28:	200001fc 	.word	0x200001fc

08006e2c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b08a      	sub	sp, #40	; 0x28
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8006e34:	2300      	movs	r3, #0
 8006e36:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8006e38:	f7fe fd24 	bl	8005884 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8006e3c:	4b65      	ldr	r3, [pc, #404]	; (8006fd4 <pvPortMalloc+0x1a8>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d101      	bne.n	8006e48 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006e44:	f000 f934 	bl	80070b0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e48:	4b63      	ldr	r3, [pc, #396]	; (8006fd8 <pvPortMalloc+0x1ac>)
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4013      	ands	r3, r2
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f040 80a7 	bne.w	8006fa4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d02d      	beq.n	8006eb8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8006e5c:	2208      	movs	r2, #8
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d227      	bcs.n	8006eb8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8006e68:	2208      	movs	r2, #8
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f003 0307 	and.w	r3, r3, #7
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d021      	beq.n	8006ebe <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f023 0307 	bic.w	r3, r3, #7
 8006e80:	3308      	adds	r3, #8
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d214      	bcs.n	8006eb2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f023 0307 	bic.w	r3, r3, #7
 8006e8e:	3308      	adds	r3, #8
 8006e90:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f003 0307 	and.w	r3, r3, #7
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d010      	beq.n	8006ebe <pvPortMalloc+0x92>
        __asm volatile
 8006e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea0:	f383 8811 	msr	BASEPRI, r3
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	617b      	str	r3, [r7, #20]
    }
 8006eae:	bf00      	nop
 8006eb0:	e7fe      	b.n	8006eb0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006eb6:	e002      	b.n	8006ebe <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	607b      	str	r3, [r7, #4]
 8006ebc:	e000      	b.n	8006ec0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ebe:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d06e      	beq.n	8006fa4 <pvPortMalloc+0x178>
 8006ec6:	4b45      	ldr	r3, [pc, #276]	; (8006fdc <pvPortMalloc+0x1b0>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d869      	bhi.n	8006fa4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006ed0:	4b43      	ldr	r3, [pc, #268]	; (8006fe0 <pvPortMalloc+0x1b4>)
 8006ed2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8006ed4:	4b42      	ldr	r3, [pc, #264]	; (8006fe0 <pvPortMalloc+0x1b4>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006eda:	e004      	b.n	8006ee6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8006edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ede:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d903      	bls.n	8006ef8 <pvPortMalloc+0xcc>
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1f1      	bne.n	8006edc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006ef8:	4b36      	ldr	r3, [pc, #216]	; (8006fd4 <pvPortMalloc+0x1a8>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d050      	beq.n	8006fa4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f02:	6a3b      	ldr	r3, [r7, #32]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2208      	movs	r2, #8
 8006f08:	4413      	add	r3, r2
 8006f0a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	6a3b      	ldr	r3, [r7, #32]
 8006f12:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f16:	685a      	ldr	r2, [r3, #4]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	1ad2      	subs	r2, r2, r3
 8006f1c:	2308      	movs	r3, #8
 8006f1e:	005b      	lsls	r3, r3, #1
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d91f      	bls.n	8006f64 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4413      	add	r3, r2
 8006f2a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	f003 0307 	and.w	r3, r3, #7
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00a      	beq.n	8006f4c <pvPortMalloc+0x120>
        __asm volatile
 8006f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3a:	f383 8811 	msr	BASEPRI, r3
 8006f3e:	f3bf 8f6f 	isb	sy
 8006f42:	f3bf 8f4f 	dsb	sy
 8006f46:	613b      	str	r3, [r7, #16]
    }
 8006f48:	bf00      	nop
 8006f4a:	e7fe      	b.n	8006f4a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4e:	685a      	ldr	r2, [r3, #4]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	1ad2      	subs	r2, r2, r3
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f5e:	69b8      	ldr	r0, [r7, #24]
 8006f60:	f000 f908 	bl	8007174 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f64:	4b1d      	ldr	r3, [pc, #116]	; (8006fdc <pvPortMalloc+0x1b0>)
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	4a1b      	ldr	r2, [pc, #108]	; (8006fdc <pvPortMalloc+0x1b0>)
 8006f70:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f72:	4b1a      	ldr	r3, [pc, #104]	; (8006fdc <pvPortMalloc+0x1b0>)
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	4b1b      	ldr	r3, [pc, #108]	; (8006fe4 <pvPortMalloc+0x1b8>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d203      	bcs.n	8006f86 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f7e:	4b17      	ldr	r3, [pc, #92]	; (8006fdc <pvPortMalloc+0x1b0>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a18      	ldr	r2, [pc, #96]	; (8006fe4 <pvPortMalloc+0x1b8>)
 8006f84:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	4b13      	ldr	r3, [pc, #76]	; (8006fd8 <pvPortMalloc+0x1ac>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	431a      	orrs	r2, r3
 8006f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f92:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f96:	2200      	movs	r2, #0
 8006f98:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006f9a:	4b13      	ldr	r3, [pc, #76]	; (8006fe8 <pvPortMalloc+0x1bc>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	4a11      	ldr	r2, [pc, #68]	; (8006fe8 <pvPortMalloc+0x1bc>)
 8006fa2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006fa4:	f7fe fc7c 	bl	80058a0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	f003 0307 	and.w	r3, r3, #7
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00a      	beq.n	8006fc8 <pvPortMalloc+0x19c>
        __asm volatile
 8006fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb6:	f383 8811 	msr	BASEPRI, r3
 8006fba:	f3bf 8f6f 	isb	sy
 8006fbe:	f3bf 8f4f 	dsb	sy
 8006fc2:	60fb      	str	r3, [r7, #12]
    }
 8006fc4:	bf00      	nop
 8006fc6:	e7fe      	b.n	8006fc6 <pvPortMalloc+0x19a>
    return pvReturn;
 8006fc8:	69fb      	ldr	r3, [r7, #28]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3728      	adds	r7, #40	; 0x28
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	20002a08 	.word	0x20002a08
 8006fd8:	20002a1c 	.word	0x20002a1c
 8006fdc:	20002a0c 	.word	0x20002a0c
 8006fe0:	20002a00 	.word	0x20002a00
 8006fe4:	20002a10 	.word	0x20002a10
 8006fe8:	20002a14 	.word	0x20002a14

08006fec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b086      	sub	sp, #24
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d04d      	beq.n	800709a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8006ffe:	2308      	movs	r3, #8
 8007000:	425b      	negs	r3, r3
 8007002:	697a      	ldr	r2, [r7, #20]
 8007004:	4413      	add	r3, r2
 8007006:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	685a      	ldr	r2, [r3, #4]
 8007010:	4b24      	ldr	r3, [pc, #144]	; (80070a4 <vPortFree+0xb8>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4013      	ands	r3, r2
 8007016:	2b00      	cmp	r3, #0
 8007018:	d10a      	bne.n	8007030 <vPortFree+0x44>
        __asm volatile
 800701a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701e:	f383 8811 	msr	BASEPRI, r3
 8007022:	f3bf 8f6f 	isb	sy
 8007026:	f3bf 8f4f 	dsb	sy
 800702a:	60fb      	str	r3, [r7, #12]
    }
 800702c:	bf00      	nop
 800702e:	e7fe      	b.n	800702e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d00a      	beq.n	800704e <vPortFree+0x62>
        __asm volatile
 8007038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703c:	f383 8811 	msr	BASEPRI, r3
 8007040:	f3bf 8f6f 	isb	sy
 8007044:	f3bf 8f4f 	dsb	sy
 8007048:	60bb      	str	r3, [r7, #8]
    }
 800704a:	bf00      	nop
 800704c:	e7fe      	b.n	800704c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	685a      	ldr	r2, [r3, #4]
 8007052:	4b14      	ldr	r3, [pc, #80]	; (80070a4 <vPortFree+0xb8>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4013      	ands	r3, r2
 8007058:	2b00      	cmp	r3, #0
 800705a:	d01e      	beq.n	800709a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d11a      	bne.n	800709a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	685a      	ldr	r2, [r3, #4]
 8007068:	4b0e      	ldr	r3, [pc, #56]	; (80070a4 <vPortFree+0xb8>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	43db      	mvns	r3, r3
 800706e:	401a      	ands	r2, r3
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8007074:	f7fe fc06 	bl	8005884 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	685a      	ldr	r2, [r3, #4]
 800707c:	4b0a      	ldr	r3, [pc, #40]	; (80070a8 <vPortFree+0xbc>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4413      	add	r3, r2
 8007082:	4a09      	ldr	r2, [pc, #36]	; (80070a8 <vPortFree+0xbc>)
 8007084:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007086:	6938      	ldr	r0, [r7, #16]
 8007088:	f000 f874 	bl	8007174 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800708c:	4b07      	ldr	r3, [pc, #28]	; (80070ac <vPortFree+0xc0>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	3301      	adds	r3, #1
 8007092:	4a06      	ldr	r2, [pc, #24]	; (80070ac <vPortFree+0xc0>)
 8007094:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007096:	f7fe fc03 	bl	80058a0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800709a:	bf00      	nop
 800709c:	3718      	adds	r7, #24
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	20002a1c 	.word	0x20002a1c
 80070a8:	20002a0c 	.word	0x20002a0c
 80070ac:	20002a18 	.word	0x20002a18

080070b0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80070b6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80070ba:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80070bc:	4b27      	ldr	r3, [pc, #156]	; (800715c <prvHeapInit+0xac>)
 80070be:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f003 0307 	and.w	r3, r3, #7
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00c      	beq.n	80070e4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	3307      	adds	r3, #7
 80070ce:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f023 0307 	bic.w	r3, r3, #7
 80070d6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80070d8:	68ba      	ldr	r2, [r7, #8]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	1ad3      	subs	r3, r2, r3
 80070de:	4a1f      	ldr	r2, [pc, #124]	; (800715c <prvHeapInit+0xac>)
 80070e0:	4413      	add	r3, r2
 80070e2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80070e8:	4a1d      	ldr	r2, [pc, #116]	; (8007160 <prvHeapInit+0xb0>)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80070ee:	4b1c      	ldr	r3, [pc, #112]	; (8007160 <prvHeapInit+0xb0>)
 80070f0:	2200      	movs	r2, #0
 80070f2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	4413      	add	r3, r2
 80070fa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80070fc:	2208      	movs	r2, #8
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	1a9b      	subs	r3, r3, r2
 8007102:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f023 0307 	bic.w	r3, r3, #7
 800710a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	4a15      	ldr	r2, [pc, #84]	; (8007164 <prvHeapInit+0xb4>)
 8007110:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007112:	4b14      	ldr	r3, [pc, #80]	; (8007164 <prvHeapInit+0xb4>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2200      	movs	r2, #0
 8007118:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800711a:	4b12      	ldr	r3, [pc, #72]	; (8007164 <prvHeapInit+0xb4>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2200      	movs	r2, #0
 8007120:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	1ad2      	subs	r2, r2, r3
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007130:	4b0c      	ldr	r3, [pc, #48]	; (8007164 <prvHeapInit+0xb4>)
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	4a0a      	ldr	r2, [pc, #40]	; (8007168 <prvHeapInit+0xb8>)
 800713e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	4a09      	ldr	r2, [pc, #36]	; (800716c <prvHeapInit+0xbc>)
 8007146:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007148:	4b09      	ldr	r3, [pc, #36]	; (8007170 <prvHeapInit+0xc0>)
 800714a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800714e:	601a      	str	r2, [r3, #0]
}
 8007150:	bf00      	nop
 8007152:	3714      	adds	r7, #20
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr
 800715c:	20000200 	.word	0x20000200
 8007160:	20002a00 	.word	0x20002a00
 8007164:	20002a08 	.word	0x20002a08
 8007168:	20002a10 	.word	0x20002a10
 800716c:	20002a0c 	.word	0x20002a0c
 8007170:	20002a1c 	.word	0x20002a1c

08007174 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007174:	b480      	push	{r7}
 8007176:	b085      	sub	sp, #20
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800717c:	4b28      	ldr	r3, [pc, #160]	; (8007220 <prvInsertBlockIntoFreeList+0xac>)
 800717e:	60fb      	str	r3, [r7, #12]
 8007180:	e002      	b.n	8007188 <prvInsertBlockIntoFreeList+0x14>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	60fb      	str	r3, [r7, #12]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	429a      	cmp	r2, r3
 8007190:	d8f7      	bhi.n	8007182 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	68ba      	ldr	r2, [r7, #8]
 800719c:	4413      	add	r3, r2
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d108      	bne.n	80071b6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	685a      	ldr	r2, [r3, #4]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	441a      	add	r2, r3
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	68ba      	ldr	r2, [r7, #8]
 80071c0:	441a      	add	r2, r3
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d118      	bne.n	80071fc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	4b15      	ldr	r3, [pc, #84]	; (8007224 <prvInsertBlockIntoFreeList+0xb0>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d00d      	beq.n	80071f2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	685a      	ldr	r2, [r3, #4]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	441a      	add	r2, r3
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	601a      	str	r2, [r3, #0]
 80071f0:	e008      	b.n	8007204 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80071f2:	4b0c      	ldr	r3, [pc, #48]	; (8007224 <prvInsertBlockIntoFreeList+0xb0>)
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	601a      	str	r2, [r3, #0]
 80071fa:	e003      	b.n	8007204 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	429a      	cmp	r2, r3
 800720a:	d002      	beq.n	8007212 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007212:	bf00      	nop
 8007214:	3714      	adds	r7, #20
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	20002a00 	.word	0x20002a00
 8007224:	20002a08 	.word	0x20002a08

08007228 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8007228:	b580      	push	{r7, lr}
 800722a:	b086      	sub	sp, #24
 800722c:	af02      	add	r7, sp, #8
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
 8007234:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8007236:	2205      	movs	r2, #5
 8007238:	492b      	ldr	r1, [pc, #172]	; (80072e8 <SYSVIEW_AddTask+0xc0>)
 800723a:	68b8      	ldr	r0, [r7, #8]
 800723c:	f001 fc90 	bl	8008b60 <memcmp>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d04b      	beq.n	80072de <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8007246:	4b29      	ldr	r3, [pc, #164]	; (80072ec <SYSVIEW_AddTask+0xc4>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b07      	cmp	r3, #7
 800724c:	d903      	bls.n	8007256 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800724e:	4828      	ldr	r0, [pc, #160]	; (80072f0 <SYSVIEW_AddTask+0xc8>)
 8007250:	f001 fbbe 	bl	80089d0 <SEGGER_SYSVIEW_Warn>
    return;
 8007254:	e044      	b.n	80072e0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8007256:	4b25      	ldr	r3, [pc, #148]	; (80072ec <SYSVIEW_AddTask+0xc4>)
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	4926      	ldr	r1, [pc, #152]	; (80072f4 <SYSVIEW_AddTask+0xcc>)
 800725c:	4613      	mov	r3, r2
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	4413      	add	r3, r2
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	440b      	add	r3, r1
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800726a:	4b20      	ldr	r3, [pc, #128]	; (80072ec <SYSVIEW_AddTask+0xc4>)
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	4921      	ldr	r1, [pc, #132]	; (80072f4 <SYSVIEW_AddTask+0xcc>)
 8007270:	4613      	mov	r3, r2
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	4413      	add	r3, r2
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	440b      	add	r3, r1
 800727a:	3304      	adds	r3, #4
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8007280:	4b1a      	ldr	r3, [pc, #104]	; (80072ec <SYSVIEW_AddTask+0xc4>)
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	491b      	ldr	r1, [pc, #108]	; (80072f4 <SYSVIEW_AddTask+0xcc>)
 8007286:	4613      	mov	r3, r2
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	4413      	add	r3, r2
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	440b      	add	r3, r1
 8007290:	3308      	adds	r3, #8
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8007296:	4b15      	ldr	r3, [pc, #84]	; (80072ec <SYSVIEW_AddTask+0xc4>)
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	4916      	ldr	r1, [pc, #88]	; (80072f4 <SYSVIEW_AddTask+0xcc>)
 800729c:	4613      	mov	r3, r2
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	4413      	add	r3, r2
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	440b      	add	r3, r1
 80072a6:	330c      	adds	r3, #12
 80072a8:	683a      	ldr	r2, [r7, #0]
 80072aa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80072ac:	4b0f      	ldr	r3, [pc, #60]	; (80072ec <SYSVIEW_AddTask+0xc4>)
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	4910      	ldr	r1, [pc, #64]	; (80072f4 <SYSVIEW_AddTask+0xcc>)
 80072b2:	4613      	mov	r3, r2
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4413      	add	r3, r2
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	440b      	add	r3, r1
 80072bc:	3310      	adds	r3, #16
 80072be:	69ba      	ldr	r2, [r7, #24]
 80072c0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80072c2:	4b0a      	ldr	r3, [pc, #40]	; (80072ec <SYSVIEW_AddTask+0xc4>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	3301      	adds	r3, #1
 80072c8:	4a08      	ldr	r2, [pc, #32]	; (80072ec <SYSVIEW_AddTask+0xc4>)
 80072ca:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	9300      	str	r3, [sp, #0]
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	68b9      	ldr	r1, [r7, #8]
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f000 f80e 	bl	80072f8 <SYSVIEW_SendTaskInfo>
 80072dc:	e000      	b.n	80072e0 <SYSVIEW_AddTask+0xb8>
    return;
 80072de:	bf00      	nop

}
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	0800ab04 	.word	0x0800ab04
 80072ec:	20002ac0 	.word	0x20002ac0
 80072f0:	0800ab0c 	.word	0x0800ab0c
 80072f4:	20002a20 	.word	0x20002a20

080072f8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b08a      	sub	sp, #40	; 0x28
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	607a      	str	r2, [r7, #4]
 8007304:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8007306:	f107 0314 	add.w	r3, r7, #20
 800730a:	2214      	movs	r2, #20
 800730c:	2100      	movs	r1, #0
 800730e:	4618      	mov	r0, r3
 8007310:	f001 fc42 	bl	8008b98 <memset>
  TaskInfo.TaskID     = TaskID;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8007324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007326:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8007328:	f107 0314 	add.w	r3, r7, #20
 800732c:	4618      	mov	r0, r3
 800732e:	f000 ff7d 	bl	800822c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8007332:	bf00      	nop
 8007334:	3728      	adds	r7, #40	; 0x28
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
	...

0800733c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8007342:	4b24      	ldr	r3, [pc, #144]	; (80073d4 <_DoInit+0x98>)
 8007344:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2203      	movs	r2, #3
 800734a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2203      	movs	r2, #3
 8007350:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a20      	ldr	r2, [pc, #128]	; (80073d8 <_DoInit+0x9c>)
 8007356:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a20      	ldr	r2, [pc, #128]	; (80073dc <_DoInit+0xa0>)
 800735c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007364:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a17      	ldr	r2, [pc, #92]	; (80073d8 <_DoInit+0x9c>)
 800737c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a17      	ldr	r2, [pc, #92]	; (80073e0 <_DoInit+0xa4>)
 8007382:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2210      	movs	r2, #16
 8007388:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	3307      	adds	r3, #7
 80073a0:	4a10      	ldr	r2, [pc, #64]	; (80073e4 <_DoInit+0xa8>)
 80073a2:	6810      	ldr	r0, [r2, #0]
 80073a4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80073a6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4a0e      	ldr	r2, [pc, #56]	; (80073e8 <_DoInit+0xac>)
 80073ae:	6810      	ldr	r0, [r2, #0]
 80073b0:	6018      	str	r0, [r3, #0]
 80073b2:	8891      	ldrh	r1, [r2, #4]
 80073b4:	7992      	ldrb	r2, [r2, #6]
 80073b6:	8099      	strh	r1, [r3, #4]
 80073b8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80073ba:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2220      	movs	r2, #32
 80073c2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80073c4:	f3bf 8f5f 	dmb	sy
}
 80073c8:	bf00      	nop
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr
 80073d4:	20003178 	.word	0x20003178
 80073d8:	0800ab5c 	.word	0x0800ab5c
 80073dc:	20002ac4 	.word	0x20002ac4
 80073e0:	20002ec4 	.word	0x20002ec4
 80073e4:	0800ab68 	.word	0x0800ab68
 80073e8:	0800ab6c 	.word	0x0800ab6c

080073ec <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b08a      	sub	sp, #40	; 0x28
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80073f8:	2300      	movs	r3, #0
 80073fa:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8007408:	69ba      	ldr	r2, [r7, #24]
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	429a      	cmp	r2, r3
 800740e:	d905      	bls.n	800741c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8007410:	69ba      	ldr	r2, [r7, #24]
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	3b01      	subs	r3, #1
 8007418:	627b      	str	r3, [r7, #36]	; 0x24
 800741a:	e007      	b.n	800742c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	689a      	ldr	r2, [r3, #8]
 8007420:	69b9      	ldr	r1, [r7, #24]
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	1acb      	subs	r3, r1, r3
 8007426:	4413      	add	r3, r2
 8007428:	3b01      	subs	r3, #1
 800742a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	689a      	ldr	r2, [r3, #8]
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007436:	4293      	cmp	r3, r2
 8007438:	bf28      	it	cs
 800743a:	4613      	movcs	r3, r2
 800743c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800743e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4293      	cmp	r3, r2
 8007444:	bf28      	it	cs
 8007446:	4613      	movcs	r3, r2
 8007448:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	685a      	ldr	r2, [r3, #4]
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	4413      	add	r3, r2
 8007452:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8007454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007456:	68b9      	ldr	r1, [r7, #8]
 8007458:	6978      	ldr	r0, [r7, #20]
 800745a:	f001 fb8f 	bl	8008b7c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800745e:	6a3a      	ldr	r2, [r7, #32]
 8007460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007462:	4413      	add	r3, r2
 8007464:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8007466:	68ba      	ldr	r2, [r7, #8]
 8007468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746a:	4413      	add	r3, r2
 800746c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007472:	1ad3      	subs	r3, r2, r3
 8007474:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8007476:	69fa      	ldr	r2, [r7, #28]
 8007478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747a:	4413      	add	r3, r2
 800747c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	69fa      	ldr	r2, [r7, #28]
 8007484:	429a      	cmp	r2, r3
 8007486:	d101      	bne.n	800748c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8007488:	2300      	movs	r3, #0
 800748a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800748c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	69fa      	ldr	r2, [r7, #28]
 8007494:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1b2      	bne.n	8007402 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800749c:	6a3b      	ldr	r3, [r7, #32]
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3728      	adds	r7, #40	; 0x28
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b088      	sub	sp, #32
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	60f8      	str	r0, [r7, #12]
 80074ae:	60b9      	str	r1, [r7, #8]
 80074b0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	689a      	ldr	r2, [r3, #8]
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80074c2:	69ba      	ldr	r2, [r7, #24]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d911      	bls.n	80074ee <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	685a      	ldr	r2, [r3, #4]
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	4413      	add	r3, r2
 80074d2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	68b9      	ldr	r1, [r7, #8]
 80074d8:	6938      	ldr	r0, [r7, #16]
 80074da:	f001 fb4f 	bl	8008b7c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80074de:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80074e2:	69fa      	ldr	r2, [r7, #28]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	441a      	add	r2, r3
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80074ec:	e01f      	b.n	800752e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	685a      	ldr	r2, [r3, #4]
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	4413      	add	r3, r2
 80074fa:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80074fc:	697a      	ldr	r2, [r7, #20]
 80074fe:	68b9      	ldr	r1, [r7, #8]
 8007500:	6938      	ldr	r0, [r7, #16]
 8007502:	f001 fb3b 	bl	8008b7c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	1ad3      	subs	r3, r2, r3
 800750c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8007514:	68ba      	ldr	r2, [r7, #8]
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	4413      	add	r3, r2
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	4619      	mov	r1, r3
 800751e:	6938      	ldr	r0, [r7, #16]
 8007520:	f001 fb2c 	bl	8008b7c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8007524:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	697a      	ldr	r2, [r7, #20]
 800752c:	60da      	str	r2, [r3, #12]
}
 800752e:	bf00      	nop
 8007530:	3720      	adds	r7, #32
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8007536:	b480      	push	{r7}
 8007538:	b087      	sub	sp, #28
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800754a:	693a      	ldr	r2, [r7, #16]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	429a      	cmp	r2, r3
 8007550:	d808      	bhi.n	8007564 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	689a      	ldr	r2, [r3, #8]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	1ad2      	subs	r2, r2, r3
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	4413      	add	r3, r2
 800755e:	3b01      	subs	r3, #1
 8007560:	617b      	str	r3, [r7, #20]
 8007562:	e004      	b.n	800756e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8007564:	693a      	ldr	r2, [r7, #16]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	3b01      	subs	r3, #1
 800756c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800756e:	697b      	ldr	r3, [r7, #20]
}
 8007570:	4618      	mov	r0, r3
 8007572:	371c      	adds	r7, #28
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800757c:	b580      	push	{r7, lr}
 800757e:	b08c      	sub	sp, #48	; 0x30
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8007588:	4b3e      	ldr	r3, [pc, #248]	; (8007684 <SEGGER_RTT_ReadNoLock+0x108>)
 800758a:	623b      	str	r3, [r7, #32]
 800758c:	6a3b      	ldr	r3, [r7, #32]
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	b2db      	uxtb	r3, r3
 8007592:	2b00      	cmp	r3, #0
 8007594:	d101      	bne.n	800759a <SEGGER_RTT_ReadNoLock+0x1e>
 8007596:	f7ff fed1 	bl	800733c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	4613      	mov	r3, r2
 800759e:	005b      	lsls	r3, r3, #1
 80075a0:	4413      	add	r3, r2
 80075a2:	00db      	lsls	r3, r3, #3
 80075a4:	3360      	adds	r3, #96	; 0x60
 80075a6:	4a37      	ldr	r2, [pc, #220]	; (8007684 <SEGGER_RTT_ReadNoLock+0x108>)
 80075a8:	4413      	add	r3, r2
 80075aa:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80075bc:	2300      	movs	r3, #0
 80075be:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80075c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d92b      	bls.n	8007620 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	689a      	ldr	r2, [r3, #8]
 80075cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80075d2:	697a      	ldr	r2, [r7, #20]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4293      	cmp	r3, r2
 80075d8:	bf28      	it	cs
 80075da:	4613      	movcs	r3, r2
 80075dc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	685a      	ldr	r2, [r3, #4]
 80075e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e4:	4413      	add	r3, r2
 80075e6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80075e8:	697a      	ldr	r2, [r7, #20]
 80075ea:	6939      	ldr	r1, [r7, #16]
 80075ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80075ee:	f001 fac5 	bl	8008b7c <memcpy>
    NumBytesRead += NumBytesRem;
 80075f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	4413      	add	r3, r2
 80075f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80075fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	4413      	add	r3, r2
 8007600:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800760a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	4413      	add	r3, r2
 8007610:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007618:	429a      	cmp	r2, r3
 800761a:	d101      	bne.n	8007620 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800761c:	2300      	movs	r3, #0
 800761e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8007620:	69ba      	ldr	r2, [r7, #24]
 8007622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007628:	697a      	ldr	r2, [r7, #20]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4293      	cmp	r3, r2
 800762e:	bf28      	it	cs
 8007630:	4613      	movcs	r3, r2
 8007632:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d019      	beq.n	800766e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	685a      	ldr	r2, [r3, #4]
 800763e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007640:	4413      	add	r3, r2
 8007642:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	6939      	ldr	r1, [r7, #16]
 8007648:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800764a:	f001 fa97 	bl	8008b7c <memcpy>
    NumBytesRead += NumBytesRem;
 800764e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	4413      	add	r3, r2
 8007654:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8007656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	4413      	add	r3, r2
 800765c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8007666:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	4413      	add	r3, r2
 800766c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800766e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007670:	2b00      	cmp	r3, #0
 8007672:	d002      	beq.n	800767a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007678:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800767a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800767c:	4618      	mov	r0, r3
 800767e:	3730      	adds	r7, #48	; 0x30
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	20003178 	.word	0x20003178

08007688 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8007688:	b580      	push	{r7, lr}
 800768a:	b088      	sub	sp, #32
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	1c5a      	adds	r2, r3, #1
 800769c:	4613      	mov	r3, r2
 800769e:	005b      	lsls	r3, r3, #1
 80076a0:	4413      	add	r3, r2
 80076a2:	00db      	lsls	r3, r3, #3
 80076a4:	4a1f      	ldr	r2, [pc, #124]	; (8007724 <SEGGER_RTT_WriteNoLock+0x9c>)
 80076a6:	4413      	add	r3, r2
 80076a8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	695b      	ldr	r3, [r3, #20]
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d029      	beq.n	8007706 <SEGGER_RTT_WriteNoLock+0x7e>
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d82e      	bhi.n	8007714 <SEGGER_RTT_WriteNoLock+0x8c>
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d002      	beq.n	80076c0 <SEGGER_RTT_WriteNoLock+0x38>
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d013      	beq.n	80076e6 <SEGGER_RTT_WriteNoLock+0x5e>
 80076be:	e029      	b.n	8007714 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80076c0:	6978      	ldr	r0, [r7, #20]
 80076c2:	f7ff ff38 	bl	8007536 <_GetAvailWriteSpace>
 80076c6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80076c8:	693a      	ldr	r2, [r7, #16]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d202      	bcs.n	80076d6 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80076d0:	2300      	movs	r3, #0
 80076d2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80076d4:	e021      	b.n	800771a <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	69b9      	ldr	r1, [r7, #24]
 80076de:	6978      	ldr	r0, [r7, #20]
 80076e0:	f7ff fee1 	bl	80074a6 <_WriteNoCheck>
    break;
 80076e4:	e019      	b.n	800771a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80076e6:	6978      	ldr	r0, [r7, #20]
 80076e8:	f7ff ff25 	bl	8007536 <_GetAvailWriteSpace>
 80076ec:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	4293      	cmp	r3, r2
 80076f4:	bf28      	it	cs
 80076f6:	4613      	movcs	r3, r2
 80076f8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80076fa:	69fa      	ldr	r2, [r7, #28]
 80076fc:	69b9      	ldr	r1, [r7, #24]
 80076fe:	6978      	ldr	r0, [r7, #20]
 8007700:	f7ff fed1 	bl	80074a6 <_WriteNoCheck>
    break;
 8007704:	e009      	b.n	800771a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	69b9      	ldr	r1, [r7, #24]
 800770a:	6978      	ldr	r0, [r7, #20]
 800770c:	f7ff fe6e 	bl	80073ec <_WriteBlocking>
 8007710:	61f8      	str	r0, [r7, #28]
    break;
 8007712:	e002      	b.n	800771a <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8007714:	2300      	movs	r3, #0
 8007716:	61fb      	str	r3, [r7, #28]
    break;
 8007718:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800771a:	69fb      	ldr	r3, [r7, #28]
}
 800771c:	4618      	mov	r0, r3
 800771e:	3720      	adds	r7, #32
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	20003178 	.word	0x20003178

08007728 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8007728:	b580      	push	{r7, lr}
 800772a:	b088      	sub	sp, #32
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8007734:	4b0e      	ldr	r3, [pc, #56]	; (8007770 <SEGGER_RTT_Write+0x48>)
 8007736:	61fb      	str	r3, [r7, #28]
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	b2db      	uxtb	r3, r3
 800773e:	2b00      	cmp	r3, #0
 8007740:	d101      	bne.n	8007746 <SEGGER_RTT_Write+0x1e>
 8007742:	f7ff fdfb 	bl	800733c <_DoInit>
  SEGGER_RTT_LOCK();
 8007746:	f3ef 8311 	mrs	r3, BASEPRI
 800774a:	f04f 0120 	mov.w	r1, #32
 800774e:	f381 8811 	msr	BASEPRI, r1
 8007752:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	68b9      	ldr	r1, [r7, #8]
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f7ff ff95 	bl	8007688 <SEGGER_RTT_WriteNoLock>
 800775e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8007766:	697b      	ldr	r3, [r7, #20]
}
 8007768:	4618      	mov	r0, r3
 800776a:	3720      	adds	r7, #32
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	20003178 	.word	0x20003178

08007774 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8007774:	b480      	push	{r7}
 8007776:	b087      	sub	sp, #28
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8007780:	2300      	movs	r3, #0
 8007782:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00f      	beq.n	80077aa <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800778a:	e002      	b.n	8007792 <_EncodeStr+0x1e>
      Len++;
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	3301      	adds	r3, #1
 8007790:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8007792:	68ba      	ldr	r2, [r7, #8]
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	4413      	add	r3, r2
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1f6      	bne.n	800778c <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800779e:	693a      	ldr	r2, [r7, #16]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d901      	bls.n	80077aa <_EncodeStr+0x36>
      Len = Limit;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	2bfe      	cmp	r3, #254	; 0xfe
 80077ae:	d806      	bhi.n	80077be <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	1c5a      	adds	r2, r3, #1
 80077b4:	60fa      	str	r2, [r7, #12]
 80077b6:	693a      	ldr	r2, [r7, #16]
 80077b8:	b2d2      	uxtb	r2, r2
 80077ba:	701a      	strb	r2, [r3, #0]
 80077bc:	e011      	b.n	80077e2 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	1c5a      	adds	r2, r3, #1
 80077c2:	60fa      	str	r2, [r7, #12]
 80077c4:	22ff      	movs	r2, #255	; 0xff
 80077c6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	1c5a      	adds	r2, r3, #1
 80077cc:	60fa      	str	r2, [r7, #12]
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	b2d2      	uxtb	r2, r2
 80077d2:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	0a19      	lsrs	r1, r3, #8
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	1c5a      	adds	r2, r3, #1
 80077dc:	60fa      	str	r2, [r7, #12]
 80077de:	b2ca      	uxtb	r2, r1
 80077e0:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80077e2:	2300      	movs	r3, #0
 80077e4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80077e6:	e00a      	b.n	80077fe <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 80077e8:	68ba      	ldr	r2, [r7, #8]
 80077ea:	1c53      	adds	r3, r2, #1
 80077ec:	60bb      	str	r3, [r7, #8]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	1c59      	adds	r1, r3, #1
 80077f2:	60f9      	str	r1, [r7, #12]
 80077f4:	7812      	ldrb	r2, [r2, #0]
 80077f6:	701a      	strb	r2, [r3, #0]
    n++;
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	3301      	adds	r3, #1
 80077fc:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80077fe:	697a      	ldr	r2, [r7, #20]
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	429a      	cmp	r2, r3
 8007804:	d3f0      	bcc.n	80077e8 <_EncodeStr+0x74>
  }
  return pPayload;
 8007806:	68fb      	ldr	r3, [r7, #12]
}
 8007808:	4618      	mov	r0, r3
 800780a:	371c      	adds	r7, #28
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	3304      	adds	r3, #4
}
 8007820:	4618      	mov	r0, r3
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007832:	4b36      	ldr	r3, [pc, #216]	; (800790c <_HandleIncomingPacket+0xe0>)
 8007834:	7e1b      	ldrb	r3, [r3, #24]
 8007836:	4618      	mov	r0, r3
 8007838:	1cfb      	adds	r3, r7, #3
 800783a:	2201      	movs	r2, #1
 800783c:	4619      	mov	r1, r3
 800783e:	f7ff fe9d 	bl	800757c <SEGGER_RTT_ReadNoLock>
 8007842:	4603      	mov	r3, r0
 8007844:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2b00      	cmp	r3, #0
 800784a:	dd54      	ble.n	80078f6 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 800784c:	78fb      	ldrb	r3, [r7, #3]
 800784e:	2b80      	cmp	r3, #128	; 0x80
 8007850:	d032      	beq.n	80078b8 <_HandleIncomingPacket+0x8c>
 8007852:	2b80      	cmp	r3, #128	; 0x80
 8007854:	dc42      	bgt.n	80078dc <_HandleIncomingPacket+0xb0>
 8007856:	2b07      	cmp	r3, #7
 8007858:	dc16      	bgt.n	8007888 <_HandleIncomingPacket+0x5c>
 800785a:	2b00      	cmp	r3, #0
 800785c:	dd3e      	ble.n	80078dc <_HandleIncomingPacket+0xb0>
 800785e:	3b01      	subs	r3, #1
 8007860:	2b06      	cmp	r3, #6
 8007862:	d83b      	bhi.n	80078dc <_HandleIncomingPacket+0xb0>
 8007864:	a201      	add	r2, pc, #4	; (adr r2, 800786c <_HandleIncomingPacket+0x40>)
 8007866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786a:	bf00      	nop
 800786c:	0800788f 	.word	0x0800788f
 8007870:	08007895 	.word	0x08007895
 8007874:	0800789b 	.word	0x0800789b
 8007878:	080078a1 	.word	0x080078a1
 800787c:	080078a7 	.word	0x080078a7
 8007880:	080078ad 	.word	0x080078ad
 8007884:	080078b3 	.word	0x080078b3
 8007888:	2b7f      	cmp	r3, #127	; 0x7f
 800788a:	d036      	beq.n	80078fa <_HandleIncomingPacket+0xce>
 800788c:	e026      	b.n	80078dc <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800788e:	f000 fb53 	bl	8007f38 <SEGGER_SYSVIEW_Start>
      break;
 8007892:	e037      	b.n	8007904 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8007894:	f000 fc0a 	bl	80080ac <SEGGER_SYSVIEW_Stop>
      break;
 8007898:	e034      	b.n	8007904 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800789a:	f000 fdbf 	bl	800841c <SEGGER_SYSVIEW_RecordSystime>
      break;
 800789e:	e031      	b.n	8007904 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80078a0:	f000 fda8 	bl	80083f4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80078a4:	e02e      	b.n	8007904 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80078a6:	f000 fc27 	bl	80080f8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80078aa:	e02b      	b.n	8007904 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80078ac:	f001 f852 	bl	8008954 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80078b0:	e028      	b.n	8007904 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80078b2:	f001 f831 	bl	8008918 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80078b6:	e025      	b.n	8007904 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80078b8:	4b14      	ldr	r3, [pc, #80]	; (800790c <_HandleIncomingPacket+0xe0>)
 80078ba:	7e1b      	ldrb	r3, [r3, #24]
 80078bc:	4618      	mov	r0, r3
 80078be:	1cfb      	adds	r3, r7, #3
 80078c0:	2201      	movs	r2, #1
 80078c2:	4619      	mov	r1, r3
 80078c4:	f7ff fe5a 	bl	800757c <SEGGER_RTT_ReadNoLock>
 80078c8:	4603      	mov	r3, r0
 80078ca:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	dd15      	ble.n	80078fe <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80078d2:	78fb      	ldrb	r3, [r7, #3]
 80078d4:	4618      	mov	r0, r3
 80078d6:	f000 ff9f 	bl	8008818 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80078da:	e010      	b.n	80078fe <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80078dc:	78fb      	ldrb	r3, [r7, #3]
 80078de:	b25b      	sxtb	r3, r3
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	da0e      	bge.n	8007902 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80078e4:	4b09      	ldr	r3, [pc, #36]	; (800790c <_HandleIncomingPacket+0xe0>)
 80078e6:	7e1b      	ldrb	r3, [r3, #24]
 80078e8:	4618      	mov	r0, r3
 80078ea:	1cfb      	adds	r3, r7, #3
 80078ec:	2201      	movs	r2, #1
 80078ee:	4619      	mov	r1, r3
 80078f0:	f7ff fe44 	bl	800757c <SEGGER_RTT_ReadNoLock>
      }
      break;
 80078f4:	e005      	b.n	8007902 <_HandleIncomingPacket+0xd6>
    }
  }
 80078f6:	bf00      	nop
 80078f8:	e004      	b.n	8007904 <_HandleIncomingPacket+0xd8>
      break;
 80078fa:	bf00      	nop
 80078fc:	e002      	b.n	8007904 <_HandleIncomingPacket+0xd8>
      break;
 80078fe:	bf00      	nop
 8007900:	e000      	b.n	8007904 <_HandleIncomingPacket+0xd8>
      break;
 8007902:	bf00      	nop
}
 8007904:	bf00      	nop
 8007906:	3708      	adds	r7, #8
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}
 800790c:	20002ed4 	.word	0x20002ed4

08007910 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8007910:	b580      	push	{r7, lr}
 8007912:	b08c      	sub	sp, #48	; 0x30
 8007914:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8007916:	2301      	movs	r3, #1
 8007918:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800791a:	1d3b      	adds	r3, r7, #4
 800791c:	3301      	adds	r3, #1
 800791e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007924:	4b31      	ldr	r3, [pc, #196]	; (80079ec <_TrySendOverflowPacket+0xdc>)
 8007926:	695b      	ldr	r3, [r3, #20]
 8007928:	62bb      	str	r3, [r7, #40]	; 0x28
 800792a:	e00b      	b.n	8007944 <_TrySendOverflowPacket+0x34>
 800792c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792e:	b2da      	uxtb	r2, r3
 8007930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007932:	1c59      	adds	r1, r3, #1
 8007934:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007936:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800793a:	b2d2      	uxtb	r2, r2
 800793c:	701a      	strb	r2, [r3, #0]
 800793e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007940:	09db      	lsrs	r3, r3, #7
 8007942:	62bb      	str	r3, [r7, #40]	; 0x28
 8007944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007946:	2b7f      	cmp	r3, #127	; 0x7f
 8007948:	d8f0      	bhi.n	800792c <_TrySendOverflowPacket+0x1c>
 800794a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800794c:	1c5a      	adds	r2, r3, #1
 800794e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007950:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007952:	b2d2      	uxtb	r2, r2
 8007954:	701a      	strb	r2, [r3, #0]
 8007956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007958:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800795a:	4b25      	ldr	r3, [pc, #148]	; (80079f0 <_TrySendOverflowPacket+0xe0>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8007960:	4b22      	ldr	r3, [pc, #136]	; (80079ec <_TrySendOverflowPacket+0xdc>)
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	69ba      	ldr	r2, [r7, #24]
 8007966:	1ad3      	subs	r3, r2, r3
 8007968:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	627b      	str	r3, [r7, #36]	; 0x24
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	623b      	str	r3, [r7, #32]
 8007972:	e00b      	b.n	800798c <_TrySendOverflowPacket+0x7c>
 8007974:	6a3b      	ldr	r3, [r7, #32]
 8007976:	b2da      	uxtb	r2, r3
 8007978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797a:	1c59      	adds	r1, r3, #1
 800797c:	6279      	str	r1, [r7, #36]	; 0x24
 800797e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007982:	b2d2      	uxtb	r2, r2
 8007984:	701a      	strb	r2, [r3, #0]
 8007986:	6a3b      	ldr	r3, [r7, #32]
 8007988:	09db      	lsrs	r3, r3, #7
 800798a:	623b      	str	r3, [r7, #32]
 800798c:	6a3b      	ldr	r3, [r7, #32]
 800798e:	2b7f      	cmp	r3, #127	; 0x7f
 8007990:	d8f0      	bhi.n	8007974 <_TrySendOverflowPacket+0x64>
 8007992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007994:	1c5a      	adds	r2, r3, #1
 8007996:	627a      	str	r2, [r7, #36]	; 0x24
 8007998:	6a3a      	ldr	r2, [r7, #32]
 800799a:	b2d2      	uxtb	r2, r2
 800799c:	701a      	strb	r2, [r3, #0]
 800799e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80079a2:	4b12      	ldr	r3, [pc, #72]	; (80079ec <_TrySendOverflowPacket+0xdc>)
 80079a4:	785b      	ldrb	r3, [r3, #1]
 80079a6:	4618      	mov	r0, r3
 80079a8:	1d3b      	adds	r3, r7, #4
 80079aa:	69fa      	ldr	r2, [r7, #28]
 80079ac:	1ad3      	subs	r3, r2, r3
 80079ae:	461a      	mov	r2, r3
 80079b0:	1d3b      	adds	r3, r7, #4
 80079b2:	4619      	mov	r1, r3
 80079b4:	f7f8 fc0c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80079b8:	4603      	mov	r3, r0
 80079ba:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d009      	beq.n	80079d6 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80079c2:	4a0a      	ldr	r2, [pc, #40]	; (80079ec <_TrySendOverflowPacket+0xdc>)
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80079c8:	4b08      	ldr	r3, [pc, #32]	; (80079ec <_TrySendOverflowPacket+0xdc>)
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	3b01      	subs	r3, #1
 80079ce:	b2da      	uxtb	r2, r3
 80079d0:	4b06      	ldr	r3, [pc, #24]	; (80079ec <_TrySendOverflowPacket+0xdc>)
 80079d2:	701a      	strb	r2, [r3, #0]
 80079d4:	e004      	b.n	80079e0 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80079d6:	4b05      	ldr	r3, [pc, #20]	; (80079ec <_TrySendOverflowPacket+0xdc>)
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	3301      	adds	r3, #1
 80079dc:	4a03      	ldr	r2, [pc, #12]	; (80079ec <_TrySendOverflowPacket+0xdc>)
 80079de:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80079e0:	693b      	ldr	r3, [r7, #16]
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3730      	adds	r7, #48	; 0x30
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	20002ed4 	.word	0x20002ed4
 80079f0:	e0001004 	.word	0xe0001004

080079f4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b08a      	sub	sp, #40	; 0x28
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8007a00:	4b6c      	ldr	r3, [pc, #432]	; (8007bb4 <_SendPacket+0x1c0>)
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d010      	beq.n	8007a2a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8007a08:	4b6a      	ldr	r3, [pc, #424]	; (8007bb4 <_SendPacket+0x1c0>)
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f000 80a3 	beq.w	8007b58 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8007a12:	4b68      	ldr	r3, [pc, #416]	; (8007bb4 <_SendPacket+0x1c0>)
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	2b02      	cmp	r3, #2
 8007a18:	d109      	bne.n	8007a2e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8007a1a:	f7ff ff79 	bl	8007910 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8007a1e:	4b65      	ldr	r3, [pc, #404]	; (8007bb4 <_SendPacket+0x1c0>)
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	f040 809a 	bne.w	8007b5c <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8007a28:	e001      	b.n	8007a2e <_SendPacket+0x3a>
    goto Send;
 8007a2a:	bf00      	nop
 8007a2c:	e000      	b.n	8007a30 <_SendPacket+0x3c>
Send:
 8007a2e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2b1f      	cmp	r3, #31
 8007a34:	d809      	bhi.n	8007a4a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8007a36:	4b5f      	ldr	r3, [pc, #380]	; (8007bb4 <_SendPacket+0x1c0>)
 8007a38:	69da      	ldr	r2, [r3, #28]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a40:	f003 0301 	and.w	r3, r3, #1
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	f040 808b 	bne.w	8007b60 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2b17      	cmp	r3, #23
 8007a4e:	d807      	bhi.n	8007a60 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	3b01      	subs	r3, #1
 8007a54:	60fb      	str	r3, [r7, #12]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	b2da      	uxtb	r2, r3
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	701a      	strb	r2, [r3, #0]
 8007a5e:	e03d      	b.n	8007adc <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	2b7f      	cmp	r3, #127	; 0x7f
 8007a6c:	d912      	bls.n	8007a94 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	09da      	lsrs	r2, r3, #7
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	3b01      	subs	r3, #1
 8007a76:	60fb      	str	r3, [r7, #12]
 8007a78:	b2d2      	uxtb	r2, r2
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	3a01      	subs	r2, #1
 8007a86:	60fa      	str	r2, [r7, #12]
 8007a88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a8c:	b2da      	uxtb	r2, r3
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	701a      	strb	r2, [r3, #0]
 8007a92:	e006      	b.n	8007aa2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	3b01      	subs	r3, #1
 8007a98:	60fb      	str	r3, [r7, #12]
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	b2da      	uxtb	r2, r3
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2b7f      	cmp	r3, #127	; 0x7f
 8007aa6:	d912      	bls.n	8007ace <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	09da      	lsrs	r2, r3, #7
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	60fb      	str	r3, [r7, #12]
 8007ab2:	b2d2      	uxtb	r2, r2
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	3a01      	subs	r2, #1
 8007ac0:	60fa      	str	r2, [r7, #12]
 8007ac2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ac6:	b2da      	uxtb	r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	701a      	strb	r2, [r3, #0]
 8007acc:	e006      	b.n	8007adc <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	60fb      	str	r3, [r7, #12]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	b2da      	uxtb	r2, r3
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007adc:	4b36      	ldr	r3, [pc, #216]	; (8007bb8 <_SendPacket+0x1c4>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8007ae2:	4b34      	ldr	r3, [pc, #208]	; (8007bb4 <_SendPacket+0x1c0>)
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	69ba      	ldr	r2, [r7, #24]
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	627b      	str	r3, [r7, #36]	; 0x24
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	623b      	str	r3, [r7, #32]
 8007af4:	e00b      	b.n	8007b0e <_SendPacket+0x11a>
 8007af6:	6a3b      	ldr	r3, [r7, #32]
 8007af8:	b2da      	uxtb	r2, r3
 8007afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afc:	1c59      	adds	r1, r3, #1
 8007afe:	6279      	str	r1, [r7, #36]	; 0x24
 8007b00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007b04:	b2d2      	uxtb	r2, r2
 8007b06:	701a      	strb	r2, [r3, #0]
 8007b08:	6a3b      	ldr	r3, [r7, #32]
 8007b0a:	09db      	lsrs	r3, r3, #7
 8007b0c:	623b      	str	r3, [r7, #32]
 8007b0e:	6a3b      	ldr	r3, [r7, #32]
 8007b10:	2b7f      	cmp	r3, #127	; 0x7f
 8007b12:	d8f0      	bhi.n	8007af6 <_SendPacket+0x102>
 8007b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b16:	1c5a      	adds	r2, r3, #1
 8007b18:	627a      	str	r2, [r7, #36]	; 0x24
 8007b1a:	6a3a      	ldr	r2, [r7, #32]
 8007b1c:	b2d2      	uxtb	r2, r2
 8007b1e:	701a      	strb	r2, [r3, #0]
 8007b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b22:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8007b24:	4b23      	ldr	r3, [pc, #140]	; (8007bb4 <_SendPacket+0x1c0>)
 8007b26:	785b      	ldrb	r3, [r3, #1]
 8007b28:	4618      	mov	r0, r3
 8007b2a:	68ba      	ldr	r2, [r7, #8]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	461a      	mov	r2, r3
 8007b32:	68f9      	ldr	r1, [r7, #12]
 8007b34:	f7f8 fb4c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d003      	beq.n	8007b4a <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8007b42:	4a1c      	ldr	r2, [pc, #112]	; (8007bb4 <_SendPacket+0x1c0>)
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	60d3      	str	r3, [r2, #12]
 8007b48:	e00b      	b.n	8007b62 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8007b4a:	4b1a      	ldr	r3, [pc, #104]	; (8007bb4 <_SendPacket+0x1c0>)
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	b2da      	uxtb	r2, r3
 8007b52:	4b18      	ldr	r3, [pc, #96]	; (8007bb4 <_SendPacket+0x1c0>)
 8007b54:	701a      	strb	r2, [r3, #0]
 8007b56:	e004      	b.n	8007b62 <_SendPacket+0x16e>
    goto SendDone;
 8007b58:	bf00      	nop
 8007b5a:	e002      	b.n	8007b62 <_SendPacket+0x16e>
      goto SendDone;
 8007b5c:	bf00      	nop
 8007b5e:	e000      	b.n	8007b62 <_SendPacket+0x16e>
      goto SendDone;
 8007b60:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007b62:	4b14      	ldr	r3, [pc, #80]	; (8007bb4 <_SendPacket+0x1c0>)
 8007b64:	7e1b      	ldrb	r3, [r3, #24]
 8007b66:	4619      	mov	r1, r3
 8007b68:	4a14      	ldr	r2, [pc, #80]	; (8007bbc <_SendPacket+0x1c8>)
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	005b      	lsls	r3, r3, #1
 8007b6e:	440b      	add	r3, r1
 8007b70:	00db      	lsls	r3, r3, #3
 8007b72:	4413      	add	r3, r2
 8007b74:	336c      	adds	r3, #108	; 0x6c
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	4b0e      	ldr	r3, [pc, #56]	; (8007bb4 <_SendPacket+0x1c0>)
 8007b7a:	7e1b      	ldrb	r3, [r3, #24]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	490f      	ldr	r1, [pc, #60]	; (8007bbc <_SendPacket+0x1c8>)
 8007b80:	4603      	mov	r3, r0
 8007b82:	005b      	lsls	r3, r3, #1
 8007b84:	4403      	add	r3, r0
 8007b86:	00db      	lsls	r3, r3, #3
 8007b88:	440b      	add	r3, r1
 8007b8a:	3370      	adds	r3, #112	; 0x70
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d00b      	beq.n	8007baa <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007b92:	4b08      	ldr	r3, [pc, #32]	; (8007bb4 <_SendPacket+0x1c0>)
 8007b94:	789b      	ldrb	r3, [r3, #2]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d107      	bne.n	8007baa <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007b9a:	4b06      	ldr	r3, [pc, #24]	; (8007bb4 <_SendPacket+0x1c0>)
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007ba0:	f7ff fe44 	bl	800782c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007ba4:	4b03      	ldr	r3, [pc, #12]	; (8007bb4 <_SendPacket+0x1c0>)
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8007baa:	bf00      	nop
 8007bac:	3728      	adds	r7, #40	; 0x28
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	20002ed4 	.word	0x20002ed4
 8007bb8:	e0001004 	.word	0xe0001004
 8007bbc:	20003178 	.word	0x20003178

08007bc0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007bc8:	f3ef 8311 	mrs	r3, BASEPRI
 8007bcc:	f04f 0120 	mov.w	r1, #32
 8007bd0:	f381 8811 	msr	BASEPRI, r1
 8007bd4:	60fb      	str	r3, [r7, #12]
 8007bd6:	4808      	ldr	r0, [pc, #32]	; (8007bf8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8007bd8:	f7ff fe1c 	bl	8007814 <_PreparePacket>
 8007bdc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	68b9      	ldr	r1, [r7, #8]
 8007be2:	68b8      	ldr	r0, [r7, #8]
 8007be4:	f7ff ff06 	bl	80079f4 <_SendPacket>
  RECORD_END();
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f383 8811 	msr	BASEPRI, r3
}
 8007bee:	bf00      	nop
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	20002f04 	.word	0x20002f04

08007bfc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b088      	sub	sp, #32
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007c06:	f3ef 8311 	mrs	r3, BASEPRI
 8007c0a:	f04f 0120 	mov.w	r1, #32
 8007c0e:	f381 8811 	msr	BASEPRI, r1
 8007c12:	617b      	str	r3, [r7, #20]
 8007c14:	4816      	ldr	r0, [pc, #88]	; (8007c70 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8007c16:	f7ff fdfd 	bl	8007814 <_PreparePacket>
 8007c1a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	61fb      	str	r3, [r7, #28]
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	61bb      	str	r3, [r7, #24]
 8007c28:	e00b      	b.n	8007c42 <SEGGER_SYSVIEW_RecordU32+0x46>
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	b2da      	uxtb	r2, r3
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	1c59      	adds	r1, r3, #1
 8007c32:	61f9      	str	r1, [r7, #28]
 8007c34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c38:	b2d2      	uxtb	r2, r2
 8007c3a:	701a      	strb	r2, [r3, #0]
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	09db      	lsrs	r3, r3, #7
 8007c40:	61bb      	str	r3, [r7, #24]
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	2b7f      	cmp	r3, #127	; 0x7f
 8007c46:	d8f0      	bhi.n	8007c2a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	1c5a      	adds	r2, r3, #1
 8007c4c:	61fa      	str	r2, [r7, #28]
 8007c4e:	69ba      	ldr	r2, [r7, #24]
 8007c50:	b2d2      	uxtb	r2, r2
 8007c52:	701a      	strb	r2, [r3, #0]
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	68f9      	ldr	r1, [r7, #12]
 8007c5c:	6938      	ldr	r0, [r7, #16]
 8007c5e:	f7ff fec9 	bl	80079f4 <_SendPacket>
  RECORD_END();
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	f383 8811 	msr	BASEPRI, r3
}
 8007c68:	bf00      	nop
 8007c6a:	3720      	adds	r7, #32
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}
 8007c70:	20002f04 	.word	0x20002f04

08007c74 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b08c      	sub	sp, #48	; 0x30
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007c80:	f3ef 8311 	mrs	r3, BASEPRI
 8007c84:	f04f 0120 	mov.w	r1, #32
 8007c88:	f381 8811 	msr	BASEPRI, r1
 8007c8c:	61fb      	str	r3, [r7, #28]
 8007c8e:	4825      	ldr	r0, [pc, #148]	; (8007d24 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8007c90:	f7ff fdc0 	bl	8007814 <_PreparePacket>
 8007c94:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ca2:	e00b      	b.n	8007cbc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8007ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca6:	b2da      	uxtb	r2, r3
 8007ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007caa:	1c59      	adds	r1, r3, #1
 8007cac:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007cae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007cb2:	b2d2      	uxtb	r2, r2
 8007cb4:	701a      	strb	r2, [r3, #0]
 8007cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb8:	09db      	lsrs	r3, r3, #7
 8007cba:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbe:	2b7f      	cmp	r3, #127	; 0x7f
 8007cc0:	d8f0      	bhi.n	8007ca4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8007cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc4:	1c5a      	adds	r2, r3, #1
 8007cc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007cc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cca:	b2d2      	uxtb	r2, r2
 8007ccc:	701a      	strb	r2, [r3, #0]
 8007cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	623b      	str	r3, [r7, #32]
 8007cda:	e00b      	b.n	8007cf4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8007cdc:	6a3b      	ldr	r3, [r7, #32]
 8007cde:	b2da      	uxtb	r2, r3
 8007ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce2:	1c59      	adds	r1, r3, #1
 8007ce4:	6279      	str	r1, [r7, #36]	; 0x24
 8007ce6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007cea:	b2d2      	uxtb	r2, r2
 8007cec:	701a      	strb	r2, [r3, #0]
 8007cee:	6a3b      	ldr	r3, [r7, #32]
 8007cf0:	09db      	lsrs	r3, r3, #7
 8007cf2:	623b      	str	r3, [r7, #32]
 8007cf4:	6a3b      	ldr	r3, [r7, #32]
 8007cf6:	2b7f      	cmp	r3, #127	; 0x7f
 8007cf8:	d8f0      	bhi.n	8007cdc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfc:	1c5a      	adds	r2, r3, #1
 8007cfe:	627a      	str	r2, [r7, #36]	; 0x24
 8007d00:	6a3a      	ldr	r2, [r7, #32]
 8007d02:	b2d2      	uxtb	r2, r2
 8007d04:	701a      	strb	r2, [r3, #0]
 8007d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d08:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	6979      	ldr	r1, [r7, #20]
 8007d0e:	69b8      	ldr	r0, [r7, #24]
 8007d10:	f7ff fe70 	bl	80079f4 <_SendPacket>
  RECORD_END();
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	f383 8811 	msr	BASEPRI, r3
}
 8007d1a:	bf00      	nop
 8007d1c:	3730      	adds	r7, #48	; 0x30
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	20002f04 	.word	0x20002f04

08007d28 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b08e      	sub	sp, #56	; 0x38
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	607a      	str	r2, [r7, #4]
 8007d34:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8007d36:	f3ef 8311 	mrs	r3, BASEPRI
 8007d3a:	f04f 0120 	mov.w	r1, #32
 8007d3e:	f381 8811 	msr	BASEPRI, r1
 8007d42:	61fb      	str	r3, [r7, #28]
 8007d44:	4832      	ldr	r0, [pc, #200]	; (8007e10 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8007d46:	f7ff fd65 	bl	8007814 <_PreparePacket>
 8007d4a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	637b      	str	r3, [r7, #52]	; 0x34
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	633b      	str	r3, [r7, #48]	; 0x30
 8007d58:	e00b      	b.n	8007d72 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8007d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5c:	b2da      	uxtb	r2, r3
 8007d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d60:	1c59      	adds	r1, r3, #1
 8007d62:	6379      	str	r1, [r7, #52]	; 0x34
 8007d64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d68:	b2d2      	uxtb	r2, r2
 8007d6a:	701a      	strb	r2, [r3, #0]
 8007d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6e:	09db      	lsrs	r3, r3, #7
 8007d70:	633b      	str	r3, [r7, #48]	; 0x30
 8007d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d74:	2b7f      	cmp	r3, #127	; 0x7f
 8007d76:	d8f0      	bhi.n	8007d5a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8007d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d7a:	1c5a      	adds	r2, r3, #1
 8007d7c:	637a      	str	r2, [r7, #52]	; 0x34
 8007d7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d80:	b2d2      	uxtb	r2, r2
 8007d82:	701a      	strb	r2, [r3, #0]
 8007d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d86:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d90:	e00b      	b.n	8007daa <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8007d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d94:	b2da      	uxtb	r2, r3
 8007d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d98:	1c59      	adds	r1, r3, #1
 8007d9a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007d9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007da0:	b2d2      	uxtb	r2, r2
 8007da2:	701a      	strb	r2, [r3, #0]
 8007da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da6:	09db      	lsrs	r3, r3, #7
 8007da8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dac:	2b7f      	cmp	r3, #127	; 0x7f
 8007dae:	d8f0      	bhi.n	8007d92 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8007db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db2:	1c5a      	adds	r2, r3, #1
 8007db4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007db6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007db8:	b2d2      	uxtb	r2, r2
 8007dba:	701a      	strb	r2, [r3, #0]
 8007dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dbe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	623b      	str	r3, [r7, #32]
 8007dc8:	e00b      	b.n	8007de2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8007dca:	6a3b      	ldr	r3, [r7, #32]
 8007dcc:	b2da      	uxtb	r2, r3
 8007dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd0:	1c59      	adds	r1, r3, #1
 8007dd2:	6279      	str	r1, [r7, #36]	; 0x24
 8007dd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007dd8:	b2d2      	uxtb	r2, r2
 8007dda:	701a      	strb	r2, [r3, #0]
 8007ddc:	6a3b      	ldr	r3, [r7, #32]
 8007dde:	09db      	lsrs	r3, r3, #7
 8007de0:	623b      	str	r3, [r7, #32]
 8007de2:	6a3b      	ldr	r3, [r7, #32]
 8007de4:	2b7f      	cmp	r3, #127	; 0x7f
 8007de6:	d8f0      	bhi.n	8007dca <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8007de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dea:	1c5a      	adds	r2, r3, #1
 8007dec:	627a      	str	r2, [r7, #36]	; 0x24
 8007dee:	6a3a      	ldr	r2, [r7, #32]
 8007df0:	b2d2      	uxtb	r2, r2
 8007df2:	701a      	strb	r2, [r3, #0]
 8007df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	6979      	ldr	r1, [r7, #20]
 8007dfc:	69b8      	ldr	r0, [r7, #24]
 8007dfe:	f7ff fdf9 	bl	80079f4 <_SendPacket>
  RECORD_END();
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	f383 8811 	msr	BASEPRI, r3
}
 8007e08:	bf00      	nop
 8007e0a:	3738      	adds	r7, #56	; 0x38
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	20002f04 	.word	0x20002f04

08007e14 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b090      	sub	sp, #64	; 0x40
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	60b9      	str	r1, [r7, #8]
 8007e1e:	607a      	str	r2, [r7, #4]
 8007e20:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007e22:	f3ef 8311 	mrs	r3, BASEPRI
 8007e26:	f04f 0120 	mov.w	r1, #32
 8007e2a:	f381 8811 	msr	BASEPRI, r1
 8007e2e:	61fb      	str	r3, [r7, #28]
 8007e30:	4840      	ldr	r0, [pc, #256]	; (8007f34 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8007e32:	f7ff fcef 	bl	8007814 <_PreparePacket>
 8007e36:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e44:	e00b      	b.n	8007e5e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8007e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e48:	b2da      	uxtb	r2, r3
 8007e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e4c:	1c59      	adds	r1, r3, #1
 8007e4e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007e50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e54:	b2d2      	uxtb	r2, r2
 8007e56:	701a      	strb	r2, [r3, #0]
 8007e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5a:	09db      	lsrs	r3, r3, #7
 8007e5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e60:	2b7f      	cmp	r3, #127	; 0x7f
 8007e62:	d8f0      	bhi.n	8007e46 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8007e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e66:	1c5a      	adds	r2, r3, #1
 8007e68:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007e6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e6c:	b2d2      	uxtb	r2, r2
 8007e6e:	701a      	strb	r2, [r3, #0]
 8007e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e72:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	637b      	str	r3, [r7, #52]	; 0x34
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	633b      	str	r3, [r7, #48]	; 0x30
 8007e7c:	e00b      	b.n	8007e96 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8007e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e80:	b2da      	uxtb	r2, r3
 8007e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e84:	1c59      	adds	r1, r3, #1
 8007e86:	6379      	str	r1, [r7, #52]	; 0x34
 8007e88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e8c:	b2d2      	uxtb	r2, r2
 8007e8e:	701a      	strb	r2, [r3, #0]
 8007e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e92:	09db      	lsrs	r3, r3, #7
 8007e94:	633b      	str	r3, [r7, #48]	; 0x30
 8007e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e98:	2b7f      	cmp	r3, #127	; 0x7f
 8007e9a:	d8f0      	bhi.n	8007e7e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8007e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e9e:	1c5a      	adds	r2, r3, #1
 8007ea0:	637a      	str	r2, [r7, #52]	; 0x34
 8007ea2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ea4:	b2d2      	uxtb	r2, r2
 8007ea6:	701a      	strb	r2, [r3, #0]
 8007ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eaa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8007eb4:	e00b      	b.n	8007ece <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8007eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb8:	b2da      	uxtb	r2, r3
 8007eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ebc:	1c59      	adds	r1, r3, #1
 8007ebe:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007ec0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ec4:	b2d2      	uxtb	r2, r2
 8007ec6:	701a      	strb	r2, [r3, #0]
 8007ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eca:	09db      	lsrs	r3, r3, #7
 8007ecc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed0:	2b7f      	cmp	r3, #127	; 0x7f
 8007ed2:	d8f0      	bhi.n	8007eb6 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8007ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed6:	1c5a      	adds	r2, r3, #1
 8007ed8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007eda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007edc:	b2d2      	uxtb	r2, r2
 8007ede:	701a      	strb	r2, [r3, #0]
 8007ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007eea:	623b      	str	r3, [r7, #32]
 8007eec:	e00b      	b.n	8007f06 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8007eee:	6a3b      	ldr	r3, [r7, #32]
 8007ef0:	b2da      	uxtb	r2, r3
 8007ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef4:	1c59      	adds	r1, r3, #1
 8007ef6:	6279      	str	r1, [r7, #36]	; 0x24
 8007ef8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007efc:	b2d2      	uxtb	r2, r2
 8007efe:	701a      	strb	r2, [r3, #0]
 8007f00:	6a3b      	ldr	r3, [r7, #32]
 8007f02:	09db      	lsrs	r3, r3, #7
 8007f04:	623b      	str	r3, [r7, #32]
 8007f06:	6a3b      	ldr	r3, [r7, #32]
 8007f08:	2b7f      	cmp	r3, #127	; 0x7f
 8007f0a:	d8f0      	bhi.n	8007eee <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8007f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0e:	1c5a      	adds	r2, r3, #1
 8007f10:	627a      	str	r2, [r7, #36]	; 0x24
 8007f12:	6a3a      	ldr	r2, [r7, #32]
 8007f14:	b2d2      	uxtb	r2, r2
 8007f16:	701a      	strb	r2, [r3, #0]
 8007f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	6979      	ldr	r1, [r7, #20]
 8007f20:	69b8      	ldr	r0, [r7, #24]
 8007f22:	f7ff fd67 	bl	80079f4 <_SendPacket>
  RECORD_END();
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	f383 8811 	msr	BASEPRI, r3
}
 8007f2c:	bf00      	nop
 8007f2e:	3740      	adds	r7, #64	; 0x40
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	20002f04 	.word	0x20002f04

08007f38 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b08c      	sub	sp, #48	; 0x30
 8007f3c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8007f3e:	4b58      	ldr	r3, [pc, #352]	; (80080a0 <SEGGER_SYSVIEW_Start+0x168>)
 8007f40:	2201      	movs	r2, #1
 8007f42:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8007f44:	f3ef 8311 	mrs	r3, BASEPRI
 8007f48:	f04f 0120 	mov.w	r1, #32
 8007f4c:	f381 8811 	msr	BASEPRI, r1
 8007f50:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8007f52:	4b53      	ldr	r3, [pc, #332]	; (80080a0 <SEGGER_SYSVIEW_Start+0x168>)
 8007f54:	785b      	ldrb	r3, [r3, #1]
 8007f56:	220a      	movs	r2, #10
 8007f58:	4952      	ldr	r1, [pc, #328]	; (80080a4 <SEGGER_SYSVIEW_Start+0x16c>)
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7f8 f938 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8007f66:	200a      	movs	r0, #10
 8007f68:	f7ff fe2a 	bl	8007bc0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007f6c:	f3ef 8311 	mrs	r3, BASEPRI
 8007f70:	f04f 0120 	mov.w	r1, #32
 8007f74:	f381 8811 	msr	BASEPRI, r1
 8007f78:	60bb      	str	r3, [r7, #8]
 8007f7a:	484b      	ldr	r0, [pc, #300]	; (80080a8 <SEGGER_SYSVIEW_Start+0x170>)
 8007f7c:	f7ff fc4a 	bl	8007814 <_PreparePacket>
 8007f80:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f8a:	4b45      	ldr	r3, [pc, #276]	; (80080a0 <SEGGER_SYSVIEW_Start+0x168>)
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f90:	e00b      	b.n	8007faa <SEGGER_SYSVIEW_Start+0x72>
 8007f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f94:	b2da      	uxtb	r2, r3
 8007f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f98:	1c59      	adds	r1, r3, #1
 8007f9a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007f9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007fa0:	b2d2      	uxtb	r2, r2
 8007fa2:	701a      	strb	r2, [r3, #0]
 8007fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa6:	09db      	lsrs	r3, r3, #7
 8007fa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fac:	2b7f      	cmp	r3, #127	; 0x7f
 8007fae:	d8f0      	bhi.n	8007f92 <SEGGER_SYSVIEW_Start+0x5a>
 8007fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb2:	1c5a      	adds	r2, r3, #1
 8007fb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fb8:	b2d2      	uxtb	r2, r2
 8007fba:	701a      	strb	r2, [r3, #0]
 8007fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fbe:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8007fc4:	4b36      	ldr	r3, [pc, #216]	; (80080a0 <SEGGER_SYSVIEW_Start+0x168>)
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	623b      	str	r3, [r7, #32]
 8007fca:	e00b      	b.n	8007fe4 <SEGGER_SYSVIEW_Start+0xac>
 8007fcc:	6a3b      	ldr	r3, [r7, #32]
 8007fce:	b2da      	uxtb	r2, r3
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd2:	1c59      	adds	r1, r3, #1
 8007fd4:	6279      	str	r1, [r7, #36]	; 0x24
 8007fd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007fda:	b2d2      	uxtb	r2, r2
 8007fdc:	701a      	strb	r2, [r3, #0]
 8007fde:	6a3b      	ldr	r3, [r7, #32]
 8007fe0:	09db      	lsrs	r3, r3, #7
 8007fe2:	623b      	str	r3, [r7, #32]
 8007fe4:	6a3b      	ldr	r3, [r7, #32]
 8007fe6:	2b7f      	cmp	r3, #127	; 0x7f
 8007fe8:	d8f0      	bhi.n	8007fcc <SEGGER_SYSVIEW_Start+0x94>
 8007fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fec:	1c5a      	adds	r2, r3, #1
 8007fee:	627a      	str	r2, [r7, #36]	; 0x24
 8007ff0:	6a3a      	ldr	r2, [r7, #32]
 8007ff2:	b2d2      	uxtb	r2, r2
 8007ff4:	701a      	strb	r2, [r3, #0]
 8007ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	61fb      	str	r3, [r7, #28]
 8007ffe:	4b28      	ldr	r3, [pc, #160]	; (80080a0 <SEGGER_SYSVIEW_Start+0x168>)
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	61bb      	str	r3, [r7, #24]
 8008004:	e00b      	b.n	800801e <SEGGER_SYSVIEW_Start+0xe6>
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	b2da      	uxtb	r2, r3
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	1c59      	adds	r1, r3, #1
 800800e:	61f9      	str	r1, [r7, #28]
 8008010:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008014:	b2d2      	uxtb	r2, r2
 8008016:	701a      	strb	r2, [r3, #0]
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	09db      	lsrs	r3, r3, #7
 800801c:	61bb      	str	r3, [r7, #24]
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	2b7f      	cmp	r3, #127	; 0x7f
 8008022:	d8f0      	bhi.n	8008006 <SEGGER_SYSVIEW_Start+0xce>
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	1c5a      	adds	r2, r3, #1
 8008028:	61fa      	str	r2, [r7, #28]
 800802a:	69ba      	ldr	r2, [r7, #24]
 800802c:	b2d2      	uxtb	r2, r2
 800802e:	701a      	strb	r2, [r3, #0]
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	617b      	str	r3, [r7, #20]
 8008038:	2300      	movs	r3, #0
 800803a:	613b      	str	r3, [r7, #16]
 800803c:	e00b      	b.n	8008056 <SEGGER_SYSVIEW_Start+0x11e>
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	b2da      	uxtb	r2, r3
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	1c59      	adds	r1, r3, #1
 8008046:	6179      	str	r1, [r7, #20]
 8008048:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800804c:	b2d2      	uxtb	r2, r2
 800804e:	701a      	strb	r2, [r3, #0]
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	09db      	lsrs	r3, r3, #7
 8008054:	613b      	str	r3, [r7, #16]
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	2b7f      	cmp	r3, #127	; 0x7f
 800805a:	d8f0      	bhi.n	800803e <SEGGER_SYSVIEW_Start+0x106>
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	1c5a      	adds	r2, r3, #1
 8008060:	617a      	str	r2, [r7, #20]
 8008062:	693a      	ldr	r2, [r7, #16]
 8008064:	b2d2      	uxtb	r2, r2
 8008066:	701a      	strb	r2, [r3, #0]
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800806c:	2218      	movs	r2, #24
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f7ff fcbf 	bl	80079f4 <_SendPacket>
      RECORD_END();
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800807c:	4b08      	ldr	r3, [pc, #32]	; (80080a0 <SEGGER_SYSVIEW_Start+0x168>)
 800807e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008080:	2b00      	cmp	r3, #0
 8008082:	d002      	beq.n	800808a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8008084:	4b06      	ldr	r3, [pc, #24]	; (80080a0 <SEGGER_SYSVIEW_Start+0x168>)
 8008086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008088:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800808a:	f000 f9c7 	bl	800841c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800808e:	f000 f9b1 	bl	80083f4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8008092:	f000 fc5f 	bl	8008954 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8008096:	bf00      	nop
 8008098:	3730      	adds	r7, #48	; 0x30
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	20002ed4 	.word	0x20002ed4
 80080a4:	0800abb8 	.word	0x0800abb8
 80080a8:	20002f04 	.word	0x20002f04

080080ac <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80080b2:	f3ef 8311 	mrs	r3, BASEPRI
 80080b6:	f04f 0120 	mov.w	r1, #32
 80080ba:	f381 8811 	msr	BASEPRI, r1
 80080be:	607b      	str	r3, [r7, #4]
 80080c0:	480b      	ldr	r0, [pc, #44]	; (80080f0 <SEGGER_SYSVIEW_Stop+0x44>)
 80080c2:	f7ff fba7 	bl	8007814 <_PreparePacket>
 80080c6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80080c8:	4b0a      	ldr	r3, [pc, #40]	; (80080f4 <SEGGER_SYSVIEW_Stop+0x48>)
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d007      	beq.n	80080e0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80080d0:	220b      	movs	r2, #11
 80080d2:	6839      	ldr	r1, [r7, #0]
 80080d4:	6838      	ldr	r0, [r7, #0]
 80080d6:	f7ff fc8d 	bl	80079f4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80080da:	4b06      	ldr	r3, [pc, #24]	; (80080f4 <SEGGER_SYSVIEW_Stop+0x48>)
 80080dc:	2200      	movs	r2, #0
 80080de:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f383 8811 	msr	BASEPRI, r3
}
 80080e6:	bf00      	nop
 80080e8:	3708      	adds	r7, #8
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	20002f04 	.word	0x20002f04
 80080f4:	20002ed4 	.word	0x20002ed4

080080f8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b08c      	sub	sp, #48	; 0x30
 80080fc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80080fe:	f3ef 8311 	mrs	r3, BASEPRI
 8008102:	f04f 0120 	mov.w	r1, #32
 8008106:	f381 8811 	msr	BASEPRI, r1
 800810a:	60fb      	str	r3, [r7, #12]
 800810c:	4845      	ldr	r0, [pc, #276]	; (8008224 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800810e:	f7ff fb81 	bl	8007814 <_PreparePacket>
 8008112:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800811c:	4b42      	ldr	r3, [pc, #264]	; (8008228 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	62bb      	str	r3, [r7, #40]	; 0x28
 8008122:	e00b      	b.n	800813c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8008124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008126:	b2da      	uxtb	r2, r3
 8008128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800812a:	1c59      	adds	r1, r3, #1
 800812c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800812e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008132:	b2d2      	uxtb	r2, r2
 8008134:	701a      	strb	r2, [r3, #0]
 8008136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008138:	09db      	lsrs	r3, r3, #7
 800813a:	62bb      	str	r3, [r7, #40]	; 0x28
 800813c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813e:	2b7f      	cmp	r3, #127	; 0x7f
 8008140:	d8f0      	bhi.n	8008124 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8008142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008144:	1c5a      	adds	r2, r3, #1
 8008146:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008148:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800814a:	b2d2      	uxtb	r2, r2
 800814c:	701a      	strb	r2, [r3, #0]
 800814e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008150:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	627b      	str	r3, [r7, #36]	; 0x24
 8008156:	4b34      	ldr	r3, [pc, #208]	; (8008228 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	623b      	str	r3, [r7, #32]
 800815c:	e00b      	b.n	8008176 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800815e:	6a3b      	ldr	r3, [r7, #32]
 8008160:	b2da      	uxtb	r2, r3
 8008162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008164:	1c59      	adds	r1, r3, #1
 8008166:	6279      	str	r1, [r7, #36]	; 0x24
 8008168:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800816c:	b2d2      	uxtb	r2, r2
 800816e:	701a      	strb	r2, [r3, #0]
 8008170:	6a3b      	ldr	r3, [r7, #32]
 8008172:	09db      	lsrs	r3, r3, #7
 8008174:	623b      	str	r3, [r7, #32]
 8008176:	6a3b      	ldr	r3, [r7, #32]
 8008178:	2b7f      	cmp	r3, #127	; 0x7f
 800817a:	d8f0      	bhi.n	800815e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800817c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817e:	1c5a      	adds	r2, r3, #1
 8008180:	627a      	str	r2, [r7, #36]	; 0x24
 8008182:	6a3a      	ldr	r2, [r7, #32]
 8008184:	b2d2      	uxtb	r2, r2
 8008186:	701a      	strb	r2, [r3, #0]
 8008188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	61fb      	str	r3, [r7, #28]
 8008190:	4b25      	ldr	r3, [pc, #148]	; (8008228 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	61bb      	str	r3, [r7, #24]
 8008196:	e00b      	b.n	80081b0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	b2da      	uxtb	r2, r3
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	1c59      	adds	r1, r3, #1
 80081a0:	61f9      	str	r1, [r7, #28]
 80081a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80081a6:	b2d2      	uxtb	r2, r2
 80081a8:	701a      	strb	r2, [r3, #0]
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	09db      	lsrs	r3, r3, #7
 80081ae:	61bb      	str	r3, [r7, #24]
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	2b7f      	cmp	r3, #127	; 0x7f
 80081b4:	d8f0      	bhi.n	8008198 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	1c5a      	adds	r2, r3, #1
 80081ba:	61fa      	str	r2, [r7, #28]
 80081bc:	69ba      	ldr	r2, [r7, #24]
 80081be:	b2d2      	uxtb	r2, r2
 80081c0:	701a      	strb	r2, [r3, #0]
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	617b      	str	r3, [r7, #20]
 80081ca:	2300      	movs	r3, #0
 80081cc:	613b      	str	r3, [r7, #16]
 80081ce:	e00b      	b.n	80081e8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	b2da      	uxtb	r2, r3
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	1c59      	adds	r1, r3, #1
 80081d8:	6179      	str	r1, [r7, #20]
 80081da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80081de:	b2d2      	uxtb	r2, r2
 80081e0:	701a      	strb	r2, [r3, #0]
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	09db      	lsrs	r3, r3, #7
 80081e6:	613b      	str	r3, [r7, #16]
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	2b7f      	cmp	r3, #127	; 0x7f
 80081ec:	d8f0      	bhi.n	80081d0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	1c5a      	adds	r2, r3, #1
 80081f2:	617a      	str	r2, [r7, #20]
 80081f4:	693a      	ldr	r2, [r7, #16]
 80081f6:	b2d2      	uxtb	r2, r2
 80081f8:	701a      	strb	r2, [r3, #0]
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80081fe:	2218      	movs	r2, #24
 8008200:	6879      	ldr	r1, [r7, #4]
 8008202:	68b8      	ldr	r0, [r7, #8]
 8008204:	f7ff fbf6 	bl	80079f4 <_SendPacket>
  RECORD_END();
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800820e:	4b06      	ldr	r3, [pc, #24]	; (8008228 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008212:	2b00      	cmp	r3, #0
 8008214:	d002      	beq.n	800821c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8008216:	4b04      	ldr	r3, [pc, #16]	; (8008228 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821a:	4798      	blx	r3
  }
}
 800821c:	bf00      	nop
 800821e:	3730      	adds	r7, #48	; 0x30
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	20002f04 	.word	0x20002f04
 8008228:	20002ed4 	.word	0x20002ed4

0800822c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800822c:	b580      	push	{r7, lr}
 800822e:	b092      	sub	sp, #72	; 0x48
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8008234:	f3ef 8311 	mrs	r3, BASEPRI
 8008238:	f04f 0120 	mov.w	r1, #32
 800823c:	f381 8811 	msr	BASEPRI, r1
 8008240:	617b      	str	r3, [r7, #20]
 8008242:	486a      	ldr	r0, [pc, #424]	; (80083ec <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8008244:	f7ff fae6 	bl	8007814 <_PreparePacket>
 8008248:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	647b      	str	r3, [r7, #68]	; 0x44
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	4b66      	ldr	r3, [pc, #408]	; (80083f0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8008258:	691b      	ldr	r3, [r3, #16]
 800825a:	1ad3      	subs	r3, r2, r3
 800825c:	643b      	str	r3, [r7, #64]	; 0x40
 800825e:	e00b      	b.n	8008278 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8008260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008262:	b2da      	uxtb	r2, r3
 8008264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008266:	1c59      	adds	r1, r3, #1
 8008268:	6479      	str	r1, [r7, #68]	; 0x44
 800826a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800826e:	b2d2      	uxtb	r2, r2
 8008270:	701a      	strb	r2, [r3, #0]
 8008272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008274:	09db      	lsrs	r3, r3, #7
 8008276:	643b      	str	r3, [r7, #64]	; 0x40
 8008278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800827a:	2b7f      	cmp	r3, #127	; 0x7f
 800827c:	d8f0      	bhi.n	8008260 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800827e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008280:	1c5a      	adds	r2, r3, #1
 8008282:	647a      	str	r2, [r7, #68]	; 0x44
 8008284:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008286:	b2d2      	uxtb	r2, r2
 8008288:	701a      	strb	r2, [r3, #0]
 800828a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800828c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	63bb      	str	r3, [r7, #56]	; 0x38
 8008298:	e00b      	b.n	80082b2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800829a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800829c:	b2da      	uxtb	r2, r3
 800829e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082a0:	1c59      	adds	r1, r3, #1
 80082a2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80082a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80082a8:	b2d2      	uxtb	r2, r2
 80082aa:	701a      	strb	r2, [r3, #0]
 80082ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ae:	09db      	lsrs	r3, r3, #7
 80082b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80082b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b4:	2b7f      	cmp	r3, #127	; 0x7f
 80082b6:	d8f0      	bhi.n	800829a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80082b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082ba:	1c5a      	adds	r2, r3, #1
 80082bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80082be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082c0:	b2d2      	uxtb	r2, r2
 80082c2:	701a      	strb	r2, [r3, #0]
 80082c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082c6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	2220      	movs	r2, #32
 80082ce:	4619      	mov	r1, r3
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	f7ff fa4f 	bl	8007774 <_EncodeStr>
 80082d6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80082d8:	2209      	movs	r2, #9
 80082da:	68f9      	ldr	r1, [r7, #12]
 80082dc:	6938      	ldr	r0, [r7, #16]
 80082de:	f7ff fb89 	bl	80079f4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	637b      	str	r3, [r7, #52]	; 0x34
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	4b40      	ldr	r3, [pc, #256]	; (80083f0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80082f0:	691b      	ldr	r3, [r3, #16]
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	633b      	str	r3, [r7, #48]	; 0x30
 80082f6:	e00b      	b.n	8008310 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80082f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fa:	b2da      	uxtb	r2, r3
 80082fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082fe:	1c59      	adds	r1, r3, #1
 8008300:	6379      	str	r1, [r7, #52]	; 0x34
 8008302:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008306:	b2d2      	uxtb	r2, r2
 8008308:	701a      	strb	r2, [r3, #0]
 800830a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830c:	09db      	lsrs	r3, r3, #7
 800830e:	633b      	str	r3, [r7, #48]	; 0x30
 8008310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008312:	2b7f      	cmp	r3, #127	; 0x7f
 8008314:	d8f0      	bhi.n	80082f8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8008316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008318:	1c5a      	adds	r2, r3, #1
 800831a:	637a      	str	r2, [r7, #52]	; 0x34
 800831c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800831e:	b2d2      	uxtb	r2, r2
 8008320:	701a      	strb	r2, [r3, #0]
 8008322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008324:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	62fb      	str	r3, [r7, #44]	; 0x2c
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008330:	e00b      	b.n	800834a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8008332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008334:	b2da      	uxtb	r2, r3
 8008336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008338:	1c59      	adds	r1, r3, #1
 800833a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800833c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008340:	b2d2      	uxtb	r2, r2
 8008342:	701a      	strb	r2, [r3, #0]
 8008344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008346:	09db      	lsrs	r3, r3, #7
 8008348:	62bb      	str	r3, [r7, #40]	; 0x28
 800834a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834c:	2b7f      	cmp	r3, #127	; 0x7f
 800834e:	d8f0      	bhi.n	8008332 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8008350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008352:	1c5a      	adds	r2, r3, #1
 8008354:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008356:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008358:	b2d2      	uxtb	r2, r2
 800835a:	701a      	strb	r2, [r3, #0]
 800835c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	627b      	str	r3, [r7, #36]	; 0x24
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	691b      	ldr	r3, [r3, #16]
 8008368:	623b      	str	r3, [r7, #32]
 800836a:	e00b      	b.n	8008384 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800836c:	6a3b      	ldr	r3, [r7, #32]
 800836e:	b2da      	uxtb	r2, r3
 8008370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008372:	1c59      	adds	r1, r3, #1
 8008374:	6279      	str	r1, [r7, #36]	; 0x24
 8008376:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800837a:	b2d2      	uxtb	r2, r2
 800837c:	701a      	strb	r2, [r3, #0]
 800837e:	6a3b      	ldr	r3, [r7, #32]
 8008380:	09db      	lsrs	r3, r3, #7
 8008382:	623b      	str	r3, [r7, #32]
 8008384:	6a3b      	ldr	r3, [r7, #32]
 8008386:	2b7f      	cmp	r3, #127	; 0x7f
 8008388:	d8f0      	bhi.n	800836c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800838a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838c:	1c5a      	adds	r2, r3, #1
 800838e:	627a      	str	r2, [r7, #36]	; 0x24
 8008390:	6a3a      	ldr	r2, [r7, #32]
 8008392:	b2d2      	uxtb	r2, r2
 8008394:	701a      	strb	r2, [r3, #0]
 8008396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008398:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	61fb      	str	r3, [r7, #28]
 800839e:	2300      	movs	r3, #0
 80083a0:	61bb      	str	r3, [r7, #24]
 80083a2:	e00b      	b.n	80083bc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	b2da      	uxtb	r2, r3
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	1c59      	adds	r1, r3, #1
 80083ac:	61f9      	str	r1, [r7, #28]
 80083ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80083b2:	b2d2      	uxtb	r2, r2
 80083b4:	701a      	strb	r2, [r3, #0]
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	09db      	lsrs	r3, r3, #7
 80083ba:	61bb      	str	r3, [r7, #24]
 80083bc:	69bb      	ldr	r3, [r7, #24]
 80083be:	2b7f      	cmp	r3, #127	; 0x7f
 80083c0:	d8f0      	bhi.n	80083a4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	1c5a      	adds	r2, r3, #1
 80083c6:	61fa      	str	r2, [r7, #28]
 80083c8:	69ba      	ldr	r2, [r7, #24]
 80083ca:	b2d2      	uxtb	r2, r2
 80083cc:	701a      	strb	r2, [r3, #0]
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80083d2:	2215      	movs	r2, #21
 80083d4:	68f9      	ldr	r1, [r7, #12]
 80083d6:	6938      	ldr	r0, [r7, #16]
 80083d8:	f7ff fb0c 	bl	80079f4 <_SendPacket>
  RECORD_END();
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	f383 8811 	msr	BASEPRI, r3
}
 80083e2:	bf00      	nop
 80083e4:	3748      	adds	r7, #72	; 0x48
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	20002f04 	.word	0x20002f04
 80083f0:	20002ed4 	.word	0x20002ed4

080083f4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80083f4:	b580      	push	{r7, lr}
 80083f6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80083f8:	4b07      	ldr	r3, [pc, #28]	; (8008418 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80083fa:	6a1b      	ldr	r3, [r3, #32]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d008      	beq.n	8008412 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8008400:	4b05      	ldr	r3, [pc, #20]	; (8008418 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008402:	6a1b      	ldr	r3, [r3, #32]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d003      	beq.n	8008412 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800840a:	4b03      	ldr	r3, [pc, #12]	; (8008418 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800840c:	6a1b      	ldr	r3, [r3, #32]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	4798      	blx	r3
  }
}
 8008412:	bf00      	nop
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	20002ed4 	.word	0x20002ed4

0800841c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800841c:	b590      	push	{r4, r7, lr}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8008422:	4b15      	ldr	r3, [pc, #84]	; (8008478 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008424:	6a1b      	ldr	r3, [r3, #32]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d01a      	beq.n	8008460 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800842a:	4b13      	ldr	r3, [pc, #76]	; (8008478 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800842c:	6a1b      	ldr	r3, [r3, #32]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d015      	beq.n	8008460 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8008434:	4b10      	ldr	r3, [pc, #64]	; (8008478 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008436:	6a1b      	ldr	r3, [r3, #32]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4798      	blx	r3
 800843c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8008440:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8008442:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008446:	f04f 0200 	mov.w	r2, #0
 800844a:	f04f 0300 	mov.w	r3, #0
 800844e:	000a      	movs	r2, r1
 8008450:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8008452:	4613      	mov	r3, r2
 8008454:	461a      	mov	r2, r3
 8008456:	4621      	mov	r1, r4
 8008458:	200d      	movs	r0, #13
 800845a:	f7ff fc0b 	bl	8007c74 <SEGGER_SYSVIEW_RecordU32x2>
 800845e:	e006      	b.n	800846e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8008460:	4b06      	ldr	r3, [pc, #24]	; (800847c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4619      	mov	r1, r3
 8008466:	200c      	movs	r0, #12
 8008468:	f7ff fbc8 	bl	8007bfc <SEGGER_SYSVIEW_RecordU32>
  }
}
 800846c:	bf00      	nop
 800846e:	bf00      	nop
 8008470:	370c      	adds	r7, #12
 8008472:	46bd      	mov	sp, r7
 8008474:	bd90      	pop	{r4, r7, pc}
 8008476:	bf00      	nop
 8008478:	20002ed4 	.word	0x20002ed4
 800847c:	e0001004 	.word	0xe0001004

08008480 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8008480:	b580      	push	{r7, lr}
 8008482:	b086      	sub	sp, #24
 8008484:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008486:	f3ef 8311 	mrs	r3, BASEPRI
 800848a:	f04f 0120 	mov.w	r1, #32
 800848e:	f381 8811 	msr	BASEPRI, r1
 8008492:	60fb      	str	r3, [r7, #12]
 8008494:	4819      	ldr	r0, [pc, #100]	; (80084fc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8008496:	f7ff f9bd 	bl	8007814 <_PreparePacket>
 800849a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80084a0:	4b17      	ldr	r3, [pc, #92]	; (8008500 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084a8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	617b      	str	r3, [r7, #20]
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	613b      	str	r3, [r7, #16]
 80084b2:	e00b      	b.n	80084cc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	b2da      	uxtb	r2, r3
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	1c59      	adds	r1, r3, #1
 80084bc:	6179      	str	r1, [r7, #20]
 80084be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80084c2:	b2d2      	uxtb	r2, r2
 80084c4:	701a      	strb	r2, [r3, #0]
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	09db      	lsrs	r3, r3, #7
 80084ca:	613b      	str	r3, [r7, #16]
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	2b7f      	cmp	r3, #127	; 0x7f
 80084d0:	d8f0      	bhi.n	80084b4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	1c5a      	adds	r2, r3, #1
 80084d6:	617a      	str	r2, [r7, #20]
 80084d8:	693a      	ldr	r2, [r7, #16]
 80084da:	b2d2      	uxtb	r2, r2
 80084dc:	701a      	strb	r2, [r3, #0]
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80084e2:	2202      	movs	r2, #2
 80084e4:	6879      	ldr	r1, [r7, #4]
 80084e6:	68b8      	ldr	r0, [r7, #8]
 80084e8:	f7ff fa84 	bl	80079f4 <_SendPacket>
  RECORD_END();
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f383 8811 	msr	BASEPRI, r3
}
 80084f2:	bf00      	nop
 80084f4:	3718      	adds	r7, #24
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	20002f04 	.word	0x20002f04
 8008500:	e000ed04 	.word	0xe000ed04

08008504 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800850a:	f3ef 8311 	mrs	r3, BASEPRI
 800850e:	f04f 0120 	mov.w	r1, #32
 8008512:	f381 8811 	msr	BASEPRI, r1
 8008516:	607b      	str	r3, [r7, #4]
 8008518:	4807      	ldr	r0, [pc, #28]	; (8008538 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800851a:	f7ff f97b 	bl	8007814 <_PreparePacket>
 800851e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8008520:	2203      	movs	r2, #3
 8008522:	6839      	ldr	r1, [r7, #0]
 8008524:	6838      	ldr	r0, [r7, #0]
 8008526:	f7ff fa65 	bl	80079f4 <_SendPacket>
  RECORD_END();
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f383 8811 	msr	BASEPRI, r3
}
 8008530:	bf00      	nop
 8008532:	3708      	adds	r7, #8
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}
 8008538:	20002f04 	.word	0x20002f04

0800853c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008542:	f3ef 8311 	mrs	r3, BASEPRI
 8008546:	f04f 0120 	mov.w	r1, #32
 800854a:	f381 8811 	msr	BASEPRI, r1
 800854e:	607b      	str	r3, [r7, #4]
 8008550:	4807      	ldr	r0, [pc, #28]	; (8008570 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8008552:	f7ff f95f 	bl	8007814 <_PreparePacket>
 8008556:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8008558:	2212      	movs	r2, #18
 800855a:	6839      	ldr	r1, [r7, #0]
 800855c:	6838      	ldr	r0, [r7, #0]
 800855e:	f7ff fa49 	bl	80079f4 <_SendPacket>
  RECORD_END();
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f383 8811 	msr	BASEPRI, r3
}
 8008568:	bf00      	nop
 800856a:	3708      	adds	r7, #8
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}
 8008570:	20002f04 	.word	0x20002f04

08008574 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800857a:	f3ef 8311 	mrs	r3, BASEPRI
 800857e:	f04f 0120 	mov.w	r1, #32
 8008582:	f381 8811 	msr	BASEPRI, r1
 8008586:	607b      	str	r3, [r7, #4]
 8008588:	4807      	ldr	r0, [pc, #28]	; (80085a8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800858a:	f7ff f943 	bl	8007814 <_PreparePacket>
 800858e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8008590:	2211      	movs	r2, #17
 8008592:	6839      	ldr	r1, [r7, #0]
 8008594:	6838      	ldr	r0, [r7, #0]
 8008596:	f7ff fa2d 	bl	80079f4 <_SendPacket>
  RECORD_END();
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f383 8811 	msr	BASEPRI, r3
}
 80085a0:	bf00      	nop
 80085a2:	3708      	adds	r7, #8
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	20002f04 	.word	0x20002f04

080085ac <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b088      	sub	sp, #32
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80085b4:	f3ef 8311 	mrs	r3, BASEPRI
 80085b8:	f04f 0120 	mov.w	r1, #32
 80085bc:	f381 8811 	msr	BASEPRI, r1
 80085c0:	617b      	str	r3, [r7, #20]
 80085c2:	4819      	ldr	r0, [pc, #100]	; (8008628 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80085c4:	f7ff f926 	bl	8007814 <_PreparePacket>
 80085c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80085ce:	4b17      	ldr	r3, [pc, #92]	; (800862c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80085d0:	691b      	ldr	r3, [r3, #16]
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	1ad3      	subs	r3, r2, r3
 80085d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	61fb      	str	r3, [r7, #28]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	61bb      	str	r3, [r7, #24]
 80085e0:	e00b      	b.n	80085fa <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80085e2:	69bb      	ldr	r3, [r7, #24]
 80085e4:	b2da      	uxtb	r2, r3
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	1c59      	adds	r1, r3, #1
 80085ea:	61f9      	str	r1, [r7, #28]
 80085ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80085f0:	b2d2      	uxtb	r2, r2
 80085f2:	701a      	strb	r2, [r3, #0]
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	09db      	lsrs	r3, r3, #7
 80085f8:	61bb      	str	r3, [r7, #24]
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	2b7f      	cmp	r3, #127	; 0x7f
 80085fe:	d8f0      	bhi.n	80085e2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	1c5a      	adds	r2, r3, #1
 8008604:	61fa      	str	r2, [r7, #28]
 8008606:	69ba      	ldr	r2, [r7, #24]
 8008608:	b2d2      	uxtb	r2, r2
 800860a:	701a      	strb	r2, [r3, #0]
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8008610:	2208      	movs	r2, #8
 8008612:	68f9      	ldr	r1, [r7, #12]
 8008614:	6938      	ldr	r0, [r7, #16]
 8008616:	f7ff f9ed 	bl	80079f4 <_SendPacket>
  RECORD_END();
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	f383 8811 	msr	BASEPRI, r3
}
 8008620:	bf00      	nop
 8008622:	3720      	adds	r7, #32
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}
 8008628:	20002f04 	.word	0x20002f04
 800862c:	20002ed4 	.word	0x20002ed4

08008630 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8008630:	b580      	push	{r7, lr}
 8008632:	b088      	sub	sp, #32
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008638:	f3ef 8311 	mrs	r3, BASEPRI
 800863c:	f04f 0120 	mov.w	r1, #32
 8008640:	f381 8811 	msr	BASEPRI, r1
 8008644:	617b      	str	r3, [r7, #20]
 8008646:	4819      	ldr	r0, [pc, #100]	; (80086ac <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8008648:	f7ff f8e4 	bl	8007814 <_PreparePacket>
 800864c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008652:	4b17      	ldr	r3, [pc, #92]	; (80086b0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	61fb      	str	r3, [r7, #28]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	61bb      	str	r3, [r7, #24]
 8008664:	e00b      	b.n	800867e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	b2da      	uxtb	r2, r3
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	1c59      	adds	r1, r3, #1
 800866e:	61f9      	str	r1, [r7, #28]
 8008670:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008674:	b2d2      	uxtb	r2, r2
 8008676:	701a      	strb	r2, [r3, #0]
 8008678:	69bb      	ldr	r3, [r7, #24]
 800867a:	09db      	lsrs	r3, r3, #7
 800867c:	61bb      	str	r3, [r7, #24]
 800867e:	69bb      	ldr	r3, [r7, #24]
 8008680:	2b7f      	cmp	r3, #127	; 0x7f
 8008682:	d8f0      	bhi.n	8008666 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	1c5a      	adds	r2, r3, #1
 8008688:	61fa      	str	r2, [r7, #28]
 800868a:	69ba      	ldr	r2, [r7, #24]
 800868c:	b2d2      	uxtb	r2, r2
 800868e:	701a      	strb	r2, [r3, #0]
 8008690:	69fb      	ldr	r3, [r7, #28]
 8008692:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8008694:	2204      	movs	r2, #4
 8008696:	68f9      	ldr	r1, [r7, #12]
 8008698:	6938      	ldr	r0, [r7, #16]
 800869a:	f7ff f9ab 	bl	80079f4 <_SendPacket>
  RECORD_END();
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	f383 8811 	msr	BASEPRI, r3
}
 80086a4:	bf00      	nop
 80086a6:	3720      	adds	r7, #32
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	20002f04 	.word	0x20002f04
 80086b0:	20002ed4 	.word	0x20002ed4

080086b4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b088      	sub	sp, #32
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80086bc:	f3ef 8311 	mrs	r3, BASEPRI
 80086c0:	f04f 0120 	mov.w	r1, #32
 80086c4:	f381 8811 	msr	BASEPRI, r1
 80086c8:	617b      	str	r3, [r7, #20]
 80086ca:	4819      	ldr	r0, [pc, #100]	; (8008730 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80086cc:	f7ff f8a2 	bl	8007814 <_PreparePacket>
 80086d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80086d6:	4b17      	ldr	r3, [pc, #92]	; (8008734 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	1ad3      	subs	r3, r2, r3
 80086de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	61fb      	str	r3, [r7, #28]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	61bb      	str	r3, [r7, #24]
 80086e8:	e00b      	b.n	8008702 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	b2da      	uxtb	r2, r3
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	1c59      	adds	r1, r3, #1
 80086f2:	61f9      	str	r1, [r7, #28]
 80086f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80086f8:	b2d2      	uxtb	r2, r2
 80086fa:	701a      	strb	r2, [r3, #0]
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	09db      	lsrs	r3, r3, #7
 8008700:	61bb      	str	r3, [r7, #24]
 8008702:	69bb      	ldr	r3, [r7, #24]
 8008704:	2b7f      	cmp	r3, #127	; 0x7f
 8008706:	d8f0      	bhi.n	80086ea <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	1c5a      	adds	r2, r3, #1
 800870c:	61fa      	str	r2, [r7, #28]
 800870e:	69ba      	ldr	r2, [r7, #24]
 8008710:	b2d2      	uxtb	r2, r2
 8008712:	701a      	strb	r2, [r3, #0]
 8008714:	69fb      	ldr	r3, [r7, #28]
 8008716:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8008718:	2206      	movs	r2, #6
 800871a:	68f9      	ldr	r1, [r7, #12]
 800871c:	6938      	ldr	r0, [r7, #16]
 800871e:	f7ff f969 	bl	80079f4 <_SendPacket>
  RECORD_END();
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	f383 8811 	msr	BASEPRI, r3
}
 8008728:	bf00      	nop
 800872a:	3720      	adds	r7, #32
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}
 8008730:	20002f04 	.word	0x20002f04
 8008734:	20002ed4 	.word	0x20002ed4

08008738 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8008738:	b580      	push	{r7, lr}
 800873a:	b08a      	sub	sp, #40	; 0x28
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8008742:	f3ef 8311 	mrs	r3, BASEPRI
 8008746:	f04f 0120 	mov.w	r1, #32
 800874a:	f381 8811 	msr	BASEPRI, r1
 800874e:	617b      	str	r3, [r7, #20]
 8008750:	4827      	ldr	r0, [pc, #156]	; (80087f0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8008752:	f7ff f85f 	bl	8007814 <_PreparePacket>
 8008756:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800875c:	4b25      	ldr	r3, [pc, #148]	; (80087f4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800875e:	691b      	ldr	r3, [r3, #16]
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	1ad3      	subs	r3, r2, r3
 8008764:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	627b      	str	r3, [r7, #36]	; 0x24
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	623b      	str	r3, [r7, #32]
 800876e:	e00b      	b.n	8008788 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8008770:	6a3b      	ldr	r3, [r7, #32]
 8008772:	b2da      	uxtb	r2, r3
 8008774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008776:	1c59      	adds	r1, r3, #1
 8008778:	6279      	str	r1, [r7, #36]	; 0x24
 800877a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800877e:	b2d2      	uxtb	r2, r2
 8008780:	701a      	strb	r2, [r3, #0]
 8008782:	6a3b      	ldr	r3, [r7, #32]
 8008784:	09db      	lsrs	r3, r3, #7
 8008786:	623b      	str	r3, [r7, #32]
 8008788:	6a3b      	ldr	r3, [r7, #32]
 800878a:	2b7f      	cmp	r3, #127	; 0x7f
 800878c:	d8f0      	bhi.n	8008770 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800878e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008790:	1c5a      	adds	r2, r3, #1
 8008792:	627a      	str	r2, [r7, #36]	; 0x24
 8008794:	6a3a      	ldr	r2, [r7, #32]
 8008796:	b2d2      	uxtb	r2, r2
 8008798:	701a      	strb	r2, [r3, #0]
 800879a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	61fb      	str	r3, [r7, #28]
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	61bb      	str	r3, [r7, #24]
 80087a6:	e00b      	b.n	80087c0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	b2da      	uxtb	r2, r3
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	1c59      	adds	r1, r3, #1
 80087b0:	61f9      	str	r1, [r7, #28]
 80087b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80087b6:	b2d2      	uxtb	r2, r2
 80087b8:	701a      	strb	r2, [r3, #0]
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	09db      	lsrs	r3, r3, #7
 80087be:	61bb      	str	r3, [r7, #24]
 80087c0:	69bb      	ldr	r3, [r7, #24]
 80087c2:	2b7f      	cmp	r3, #127	; 0x7f
 80087c4:	d8f0      	bhi.n	80087a8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	1c5a      	adds	r2, r3, #1
 80087ca:	61fa      	str	r2, [r7, #28]
 80087cc:	69ba      	ldr	r2, [r7, #24]
 80087ce:	b2d2      	uxtb	r2, r2
 80087d0:	701a      	strb	r2, [r3, #0]
 80087d2:	69fb      	ldr	r3, [r7, #28]
 80087d4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80087d6:	2207      	movs	r2, #7
 80087d8:	68f9      	ldr	r1, [r7, #12]
 80087da:	6938      	ldr	r0, [r7, #16]
 80087dc:	f7ff f90a 	bl	80079f4 <_SendPacket>
  RECORD_END();
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	f383 8811 	msr	BASEPRI, r3
}
 80087e6:	bf00      	nop
 80087e8:	3728      	adds	r7, #40	; 0x28
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	20002f04 	.word	0x20002f04
 80087f4:	20002ed4 	.word	0x20002ed4

080087f8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80087f8:	b480      	push	{r7}
 80087fa:	b083      	sub	sp, #12
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8008800:	4b04      	ldr	r3, [pc, #16]	; (8008814 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	1ad3      	subs	r3, r2, r3
}
 8008808:	4618      	mov	r0, r3
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr
 8008814:	20002ed4 	.word	0x20002ed4

08008818 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8008818:	b580      	push	{r7, lr}
 800881a:	b08c      	sub	sp, #48	; 0x30
 800881c:	af00      	add	r7, sp, #0
 800881e:	4603      	mov	r3, r0
 8008820:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8008822:	4b3b      	ldr	r3, [pc, #236]	; (8008910 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d06d      	beq.n	8008906 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800882a:	4b39      	ldr	r3, [pc, #228]	; (8008910 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8008830:	2300      	movs	r3, #0
 8008832:	62bb      	str	r3, [r7, #40]	; 0x28
 8008834:	e008      	b.n	8008848 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8008836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008838:	691b      	ldr	r3, [r3, #16]
 800883a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800883c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800883e:	2b00      	cmp	r3, #0
 8008840:	d007      	beq.n	8008852 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8008842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008844:	3301      	adds	r3, #1
 8008846:	62bb      	str	r3, [r7, #40]	; 0x28
 8008848:	79fb      	ldrb	r3, [r7, #7]
 800884a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800884c:	429a      	cmp	r2, r3
 800884e:	d3f2      	bcc.n	8008836 <SEGGER_SYSVIEW_SendModule+0x1e>
 8008850:	e000      	b.n	8008854 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8008852:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8008854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008856:	2b00      	cmp	r3, #0
 8008858:	d055      	beq.n	8008906 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800885a:	f3ef 8311 	mrs	r3, BASEPRI
 800885e:	f04f 0120 	mov.w	r1, #32
 8008862:	f381 8811 	msr	BASEPRI, r1
 8008866:	617b      	str	r3, [r7, #20]
 8008868:	482a      	ldr	r0, [pc, #168]	; (8008914 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800886a:	f7fe ffd3 	bl	8007814 <_PreparePacket>
 800886e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	627b      	str	r3, [r7, #36]	; 0x24
 8008878:	79fb      	ldrb	r3, [r7, #7]
 800887a:	623b      	str	r3, [r7, #32]
 800887c:	e00b      	b.n	8008896 <SEGGER_SYSVIEW_SendModule+0x7e>
 800887e:	6a3b      	ldr	r3, [r7, #32]
 8008880:	b2da      	uxtb	r2, r3
 8008882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008884:	1c59      	adds	r1, r3, #1
 8008886:	6279      	str	r1, [r7, #36]	; 0x24
 8008888:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800888c:	b2d2      	uxtb	r2, r2
 800888e:	701a      	strb	r2, [r3, #0]
 8008890:	6a3b      	ldr	r3, [r7, #32]
 8008892:	09db      	lsrs	r3, r3, #7
 8008894:	623b      	str	r3, [r7, #32]
 8008896:	6a3b      	ldr	r3, [r7, #32]
 8008898:	2b7f      	cmp	r3, #127	; 0x7f
 800889a:	d8f0      	bhi.n	800887e <SEGGER_SYSVIEW_SendModule+0x66>
 800889c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889e:	1c5a      	adds	r2, r3, #1
 80088a0:	627a      	str	r2, [r7, #36]	; 0x24
 80088a2:	6a3a      	ldr	r2, [r7, #32]
 80088a4:	b2d2      	uxtb	r2, r2
 80088a6:	701a      	strb	r2, [r3, #0]
 80088a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088aa:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	61fb      	str	r3, [r7, #28]
 80088b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	61bb      	str	r3, [r7, #24]
 80088b6:	e00b      	b.n	80088d0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	b2da      	uxtb	r2, r3
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	1c59      	adds	r1, r3, #1
 80088c0:	61f9      	str	r1, [r7, #28]
 80088c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80088c6:	b2d2      	uxtb	r2, r2
 80088c8:	701a      	strb	r2, [r3, #0]
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	09db      	lsrs	r3, r3, #7
 80088ce:	61bb      	str	r3, [r7, #24]
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	2b7f      	cmp	r3, #127	; 0x7f
 80088d4:	d8f0      	bhi.n	80088b8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	1c5a      	adds	r2, r3, #1
 80088da:	61fa      	str	r2, [r7, #28]
 80088dc:	69ba      	ldr	r2, [r7, #24]
 80088de:	b2d2      	uxtb	r2, r2
 80088e0:	701a      	strb	r2, [r3, #0]
 80088e2:	69fb      	ldr	r3, [r7, #28]
 80088e4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80088e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2280      	movs	r2, #128	; 0x80
 80088ec:	4619      	mov	r1, r3
 80088ee:	68f8      	ldr	r0, [r7, #12]
 80088f0:	f7fe ff40 	bl	8007774 <_EncodeStr>
 80088f4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80088f6:	2216      	movs	r2, #22
 80088f8:	68f9      	ldr	r1, [r7, #12]
 80088fa:	6938      	ldr	r0, [r7, #16]
 80088fc:	f7ff f87a 	bl	80079f4 <_SendPacket>
      RECORD_END();
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8008906:	bf00      	nop
 8008908:	3730      	adds	r7, #48	; 0x30
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	20002efc 	.word	0x20002efc
 8008914:	20002f04 	.word	0x20002f04

08008918 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800891e:	4b0c      	ldr	r3, [pc, #48]	; (8008950 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d00f      	beq.n	8008946 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8008926:	4b0a      	ldr	r3, [pc, #40]	; (8008950 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	68db      	ldr	r3, [r3, #12]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d002      	beq.n	800893a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	691b      	ldr	r3, [r3, #16]
 800893e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d1f2      	bne.n	800892c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8008946:	bf00      	nop
 8008948:	3708      	adds	r7, #8
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	20002efc 	.word	0x20002efc

08008954 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8008954:	b580      	push	{r7, lr}
 8008956:	b086      	sub	sp, #24
 8008958:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800895a:	f3ef 8311 	mrs	r3, BASEPRI
 800895e:	f04f 0120 	mov.w	r1, #32
 8008962:	f381 8811 	msr	BASEPRI, r1
 8008966:	60fb      	str	r3, [r7, #12]
 8008968:	4817      	ldr	r0, [pc, #92]	; (80089c8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800896a:	f7fe ff53 	bl	8007814 <_PreparePacket>
 800896e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	617b      	str	r3, [r7, #20]
 8008978:	4b14      	ldr	r3, [pc, #80]	; (80089cc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	613b      	str	r3, [r7, #16]
 800897e:	e00b      	b.n	8008998 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	b2da      	uxtb	r2, r3
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	1c59      	adds	r1, r3, #1
 8008988:	6179      	str	r1, [r7, #20]
 800898a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800898e:	b2d2      	uxtb	r2, r2
 8008990:	701a      	strb	r2, [r3, #0]
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	09db      	lsrs	r3, r3, #7
 8008996:	613b      	str	r3, [r7, #16]
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	2b7f      	cmp	r3, #127	; 0x7f
 800899c:	d8f0      	bhi.n	8008980 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	1c5a      	adds	r2, r3, #1
 80089a2:	617a      	str	r2, [r7, #20]
 80089a4:	693a      	ldr	r2, [r7, #16]
 80089a6:	b2d2      	uxtb	r2, r2
 80089a8:	701a      	strb	r2, [r3, #0]
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80089ae:	221b      	movs	r2, #27
 80089b0:	6879      	ldr	r1, [r7, #4]
 80089b2:	68b8      	ldr	r0, [r7, #8]
 80089b4:	f7ff f81e 	bl	80079f4 <_SendPacket>
  RECORD_END();
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f383 8811 	msr	BASEPRI, r3
}
 80089be:	bf00      	nop
 80089c0:	3718      	adds	r7, #24
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	20002f04 	.word	0x20002f04
 80089cc:	20002f00 	.word	0x20002f00

080089d0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b08a      	sub	sp, #40	; 0x28
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80089d8:	f3ef 8311 	mrs	r3, BASEPRI
 80089dc:	f04f 0120 	mov.w	r1, #32
 80089e0:	f381 8811 	msr	BASEPRI, r1
 80089e4:	617b      	str	r3, [r7, #20]
 80089e6:	4827      	ldr	r0, [pc, #156]	; (8008a84 <SEGGER_SYSVIEW_Warn+0xb4>)
 80089e8:	f7fe ff14 	bl	8007814 <_PreparePacket>
 80089ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80089ee:	2280      	movs	r2, #128	; 0x80
 80089f0:	6879      	ldr	r1, [r7, #4]
 80089f2:	6938      	ldr	r0, [r7, #16]
 80089f4:	f7fe febe 	bl	8007774 <_EncodeStr>
 80089f8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	627b      	str	r3, [r7, #36]	; 0x24
 80089fe:	2301      	movs	r3, #1
 8008a00:	623b      	str	r3, [r7, #32]
 8008a02:	e00b      	b.n	8008a1c <SEGGER_SYSVIEW_Warn+0x4c>
 8008a04:	6a3b      	ldr	r3, [r7, #32]
 8008a06:	b2da      	uxtb	r2, r3
 8008a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0a:	1c59      	adds	r1, r3, #1
 8008a0c:	6279      	str	r1, [r7, #36]	; 0x24
 8008a0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a12:	b2d2      	uxtb	r2, r2
 8008a14:	701a      	strb	r2, [r3, #0]
 8008a16:	6a3b      	ldr	r3, [r7, #32]
 8008a18:	09db      	lsrs	r3, r3, #7
 8008a1a:	623b      	str	r3, [r7, #32]
 8008a1c:	6a3b      	ldr	r3, [r7, #32]
 8008a1e:	2b7f      	cmp	r3, #127	; 0x7f
 8008a20:	d8f0      	bhi.n	8008a04 <SEGGER_SYSVIEW_Warn+0x34>
 8008a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a24:	1c5a      	adds	r2, r3, #1
 8008a26:	627a      	str	r2, [r7, #36]	; 0x24
 8008a28:	6a3a      	ldr	r2, [r7, #32]
 8008a2a:	b2d2      	uxtb	r2, r2
 8008a2c:	701a      	strb	r2, [r3, #0]
 8008a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a30:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	61fb      	str	r3, [r7, #28]
 8008a36:	2300      	movs	r3, #0
 8008a38:	61bb      	str	r3, [r7, #24]
 8008a3a:	e00b      	b.n	8008a54 <SEGGER_SYSVIEW_Warn+0x84>
 8008a3c:	69bb      	ldr	r3, [r7, #24]
 8008a3e:	b2da      	uxtb	r2, r3
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	1c59      	adds	r1, r3, #1
 8008a44:	61f9      	str	r1, [r7, #28]
 8008a46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a4a:	b2d2      	uxtb	r2, r2
 8008a4c:	701a      	strb	r2, [r3, #0]
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	09db      	lsrs	r3, r3, #7
 8008a52:	61bb      	str	r3, [r7, #24]
 8008a54:	69bb      	ldr	r3, [r7, #24]
 8008a56:	2b7f      	cmp	r3, #127	; 0x7f
 8008a58:	d8f0      	bhi.n	8008a3c <SEGGER_SYSVIEW_Warn+0x6c>
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	1c5a      	adds	r2, r3, #1
 8008a5e:	61fa      	str	r2, [r7, #28]
 8008a60:	69ba      	ldr	r2, [r7, #24]
 8008a62:	b2d2      	uxtb	r2, r2
 8008a64:	701a      	strb	r2, [r3, #0]
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8008a6a:	221a      	movs	r2, #26
 8008a6c:	68f9      	ldr	r1, [r7, #12]
 8008a6e:	6938      	ldr	r0, [r7, #16]
 8008a70:	f7fe ffc0 	bl	80079f4 <_SendPacket>
  RECORD_END();
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	f383 8811 	msr	BASEPRI, r3
}
 8008a7a:	bf00      	nop
 8008a7c:	3728      	adds	r7, #40	; 0x28
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	20002f04 	.word	0x20002f04

08008a88 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	607a      	str	r2, [r7, #4]
 8008a94:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8008a96:	683a      	ldr	r2, [r7, #0]
 8008a98:	6879      	ldr	r1, [r7, #4]
 8008a9a:	2000      	movs	r0, #0
 8008a9c:	f7fe fe44 	bl	8007728 <SEGGER_RTT_Write>
  return len;
 8008aa0:	683b      	ldr	r3, [r7, #0]
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3710      	adds	r7, #16
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
	...

08008aac <__assert_func>:
 8008aac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008aae:	4614      	mov	r4, r2
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	4b09      	ldr	r3, [pc, #36]	; (8008ad8 <__assert_func+0x2c>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4605      	mov	r5, r0
 8008ab8:	68d8      	ldr	r0, [r3, #12]
 8008aba:	b14c      	cbz	r4, 8008ad0 <__assert_func+0x24>
 8008abc:	4b07      	ldr	r3, [pc, #28]	; (8008adc <__assert_func+0x30>)
 8008abe:	9100      	str	r1, [sp, #0]
 8008ac0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ac4:	4906      	ldr	r1, [pc, #24]	; (8008ae0 <__assert_func+0x34>)
 8008ac6:	462b      	mov	r3, r5
 8008ac8:	f000 f814 	bl	8008af4 <fiprintf>
 8008acc:	f000 fc1a 	bl	8009304 <abort>
 8008ad0:	4b04      	ldr	r3, [pc, #16]	; (8008ae4 <__assert_func+0x38>)
 8008ad2:	461c      	mov	r4, r3
 8008ad4:	e7f3      	b.n	8008abe <__assert_func+0x12>
 8008ad6:	bf00      	nop
 8008ad8:	20000030 	.word	0x20000030
 8008adc:	0800abc2 	.word	0x0800abc2
 8008ae0:	0800abcf 	.word	0x0800abcf
 8008ae4:	0800abfd 	.word	0x0800abfd

08008ae8 <__errno>:
 8008ae8:	4b01      	ldr	r3, [pc, #4]	; (8008af0 <__errno+0x8>)
 8008aea:	6818      	ldr	r0, [r3, #0]
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	20000030 	.word	0x20000030

08008af4 <fiprintf>:
 8008af4:	b40e      	push	{r1, r2, r3}
 8008af6:	b503      	push	{r0, r1, lr}
 8008af8:	4601      	mov	r1, r0
 8008afa:	ab03      	add	r3, sp, #12
 8008afc:	4805      	ldr	r0, [pc, #20]	; (8008b14 <fiprintf+0x20>)
 8008afe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b02:	6800      	ldr	r0, [r0, #0]
 8008b04:	9301      	str	r3, [sp, #4]
 8008b06:	f000 f879 	bl	8008bfc <_vfiprintf_r>
 8008b0a:	b002      	add	sp, #8
 8008b0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b10:	b003      	add	sp, #12
 8008b12:	4770      	bx	lr
 8008b14:	20000030 	.word	0x20000030

08008b18 <__libc_init_array>:
 8008b18:	b570      	push	{r4, r5, r6, lr}
 8008b1a:	4d0d      	ldr	r5, [pc, #52]	; (8008b50 <__libc_init_array+0x38>)
 8008b1c:	4c0d      	ldr	r4, [pc, #52]	; (8008b54 <__libc_init_array+0x3c>)
 8008b1e:	1b64      	subs	r4, r4, r5
 8008b20:	10a4      	asrs	r4, r4, #2
 8008b22:	2600      	movs	r6, #0
 8008b24:	42a6      	cmp	r6, r4
 8008b26:	d109      	bne.n	8008b3c <__libc_init_array+0x24>
 8008b28:	4d0b      	ldr	r5, [pc, #44]	; (8008b58 <__libc_init_array+0x40>)
 8008b2a:	4c0c      	ldr	r4, [pc, #48]	; (8008b5c <__libc_init_array+0x44>)
 8008b2c:	f001 ff78 	bl	800aa20 <_init>
 8008b30:	1b64      	subs	r4, r4, r5
 8008b32:	10a4      	asrs	r4, r4, #2
 8008b34:	2600      	movs	r6, #0
 8008b36:	42a6      	cmp	r6, r4
 8008b38:	d105      	bne.n	8008b46 <__libc_init_array+0x2e>
 8008b3a:	bd70      	pop	{r4, r5, r6, pc}
 8008b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b40:	4798      	blx	r3
 8008b42:	3601      	adds	r6, #1
 8008b44:	e7ee      	b.n	8008b24 <__libc_init_array+0xc>
 8008b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b4a:	4798      	blx	r3
 8008b4c:	3601      	adds	r6, #1
 8008b4e:	e7f2      	b.n	8008b36 <__libc_init_array+0x1e>
 8008b50:	0800acd8 	.word	0x0800acd8
 8008b54:	0800acd8 	.word	0x0800acd8
 8008b58:	0800acd8 	.word	0x0800acd8
 8008b5c:	0800acdc 	.word	0x0800acdc

08008b60 <memcmp>:
 8008b60:	b530      	push	{r4, r5, lr}
 8008b62:	3901      	subs	r1, #1
 8008b64:	2400      	movs	r4, #0
 8008b66:	42a2      	cmp	r2, r4
 8008b68:	d101      	bne.n	8008b6e <memcmp+0xe>
 8008b6a:	2000      	movs	r0, #0
 8008b6c:	e005      	b.n	8008b7a <memcmp+0x1a>
 8008b6e:	5d03      	ldrb	r3, [r0, r4]
 8008b70:	3401      	adds	r4, #1
 8008b72:	5d0d      	ldrb	r5, [r1, r4]
 8008b74:	42ab      	cmp	r3, r5
 8008b76:	d0f6      	beq.n	8008b66 <memcmp+0x6>
 8008b78:	1b58      	subs	r0, r3, r5
 8008b7a:	bd30      	pop	{r4, r5, pc}

08008b7c <memcpy>:
 8008b7c:	440a      	add	r2, r1
 8008b7e:	4291      	cmp	r1, r2
 8008b80:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008b84:	d100      	bne.n	8008b88 <memcpy+0xc>
 8008b86:	4770      	bx	lr
 8008b88:	b510      	push	{r4, lr}
 8008b8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b92:	4291      	cmp	r1, r2
 8008b94:	d1f9      	bne.n	8008b8a <memcpy+0xe>
 8008b96:	bd10      	pop	{r4, pc}

08008b98 <memset>:
 8008b98:	4402      	add	r2, r0
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d100      	bne.n	8008ba2 <memset+0xa>
 8008ba0:	4770      	bx	lr
 8008ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ba6:	e7f9      	b.n	8008b9c <memset+0x4>

08008ba8 <__sfputc_r>:
 8008ba8:	6893      	ldr	r3, [r2, #8]
 8008baa:	3b01      	subs	r3, #1
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	b410      	push	{r4}
 8008bb0:	6093      	str	r3, [r2, #8]
 8008bb2:	da08      	bge.n	8008bc6 <__sfputc_r+0x1e>
 8008bb4:	6994      	ldr	r4, [r2, #24]
 8008bb6:	42a3      	cmp	r3, r4
 8008bb8:	db01      	blt.n	8008bbe <__sfputc_r+0x16>
 8008bba:	290a      	cmp	r1, #10
 8008bbc:	d103      	bne.n	8008bc6 <__sfputc_r+0x1e>
 8008bbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bc2:	f000 badf 	b.w	8009184 <__swbuf_r>
 8008bc6:	6813      	ldr	r3, [r2, #0]
 8008bc8:	1c58      	adds	r0, r3, #1
 8008bca:	6010      	str	r0, [r2, #0]
 8008bcc:	7019      	strb	r1, [r3, #0]
 8008bce:	4608      	mov	r0, r1
 8008bd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bd4:	4770      	bx	lr

08008bd6 <__sfputs_r>:
 8008bd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd8:	4606      	mov	r6, r0
 8008bda:	460f      	mov	r7, r1
 8008bdc:	4614      	mov	r4, r2
 8008bde:	18d5      	adds	r5, r2, r3
 8008be0:	42ac      	cmp	r4, r5
 8008be2:	d101      	bne.n	8008be8 <__sfputs_r+0x12>
 8008be4:	2000      	movs	r0, #0
 8008be6:	e007      	b.n	8008bf8 <__sfputs_r+0x22>
 8008be8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bec:	463a      	mov	r2, r7
 8008bee:	4630      	mov	r0, r6
 8008bf0:	f7ff ffda 	bl	8008ba8 <__sfputc_r>
 8008bf4:	1c43      	adds	r3, r0, #1
 8008bf6:	d1f3      	bne.n	8008be0 <__sfputs_r+0xa>
 8008bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008bfc <_vfiprintf_r>:
 8008bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c00:	460d      	mov	r5, r1
 8008c02:	b09d      	sub	sp, #116	; 0x74
 8008c04:	4614      	mov	r4, r2
 8008c06:	4698      	mov	r8, r3
 8008c08:	4606      	mov	r6, r0
 8008c0a:	b118      	cbz	r0, 8008c14 <_vfiprintf_r+0x18>
 8008c0c:	6983      	ldr	r3, [r0, #24]
 8008c0e:	b90b      	cbnz	r3, 8008c14 <_vfiprintf_r+0x18>
 8008c10:	f000 fc9a 	bl	8009548 <__sinit>
 8008c14:	4b89      	ldr	r3, [pc, #548]	; (8008e3c <_vfiprintf_r+0x240>)
 8008c16:	429d      	cmp	r5, r3
 8008c18:	d11b      	bne.n	8008c52 <_vfiprintf_r+0x56>
 8008c1a:	6875      	ldr	r5, [r6, #4]
 8008c1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c1e:	07d9      	lsls	r1, r3, #31
 8008c20:	d405      	bmi.n	8008c2e <_vfiprintf_r+0x32>
 8008c22:	89ab      	ldrh	r3, [r5, #12]
 8008c24:	059a      	lsls	r2, r3, #22
 8008c26:	d402      	bmi.n	8008c2e <_vfiprintf_r+0x32>
 8008c28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c2a:	f000 fd2b 	bl	8009684 <__retarget_lock_acquire_recursive>
 8008c2e:	89ab      	ldrh	r3, [r5, #12]
 8008c30:	071b      	lsls	r3, r3, #28
 8008c32:	d501      	bpl.n	8008c38 <_vfiprintf_r+0x3c>
 8008c34:	692b      	ldr	r3, [r5, #16]
 8008c36:	b9eb      	cbnz	r3, 8008c74 <_vfiprintf_r+0x78>
 8008c38:	4629      	mov	r1, r5
 8008c3a:	4630      	mov	r0, r6
 8008c3c:	f000 faf4 	bl	8009228 <__swsetup_r>
 8008c40:	b1c0      	cbz	r0, 8008c74 <_vfiprintf_r+0x78>
 8008c42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c44:	07dc      	lsls	r4, r3, #31
 8008c46:	d50e      	bpl.n	8008c66 <_vfiprintf_r+0x6a>
 8008c48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c4c:	b01d      	add	sp, #116	; 0x74
 8008c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c52:	4b7b      	ldr	r3, [pc, #492]	; (8008e40 <_vfiprintf_r+0x244>)
 8008c54:	429d      	cmp	r5, r3
 8008c56:	d101      	bne.n	8008c5c <_vfiprintf_r+0x60>
 8008c58:	68b5      	ldr	r5, [r6, #8]
 8008c5a:	e7df      	b.n	8008c1c <_vfiprintf_r+0x20>
 8008c5c:	4b79      	ldr	r3, [pc, #484]	; (8008e44 <_vfiprintf_r+0x248>)
 8008c5e:	429d      	cmp	r5, r3
 8008c60:	bf08      	it	eq
 8008c62:	68f5      	ldreq	r5, [r6, #12]
 8008c64:	e7da      	b.n	8008c1c <_vfiprintf_r+0x20>
 8008c66:	89ab      	ldrh	r3, [r5, #12]
 8008c68:	0598      	lsls	r0, r3, #22
 8008c6a:	d4ed      	bmi.n	8008c48 <_vfiprintf_r+0x4c>
 8008c6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c6e:	f000 fd0a 	bl	8009686 <__retarget_lock_release_recursive>
 8008c72:	e7e9      	b.n	8008c48 <_vfiprintf_r+0x4c>
 8008c74:	2300      	movs	r3, #0
 8008c76:	9309      	str	r3, [sp, #36]	; 0x24
 8008c78:	2320      	movs	r3, #32
 8008c7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c82:	2330      	movs	r3, #48	; 0x30
 8008c84:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008e48 <_vfiprintf_r+0x24c>
 8008c88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c8c:	f04f 0901 	mov.w	r9, #1
 8008c90:	4623      	mov	r3, r4
 8008c92:	469a      	mov	sl, r3
 8008c94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c98:	b10a      	cbz	r2, 8008c9e <_vfiprintf_r+0xa2>
 8008c9a:	2a25      	cmp	r2, #37	; 0x25
 8008c9c:	d1f9      	bne.n	8008c92 <_vfiprintf_r+0x96>
 8008c9e:	ebba 0b04 	subs.w	fp, sl, r4
 8008ca2:	d00b      	beq.n	8008cbc <_vfiprintf_r+0xc0>
 8008ca4:	465b      	mov	r3, fp
 8008ca6:	4622      	mov	r2, r4
 8008ca8:	4629      	mov	r1, r5
 8008caa:	4630      	mov	r0, r6
 8008cac:	f7ff ff93 	bl	8008bd6 <__sfputs_r>
 8008cb0:	3001      	adds	r0, #1
 8008cb2:	f000 80aa 	beq.w	8008e0a <_vfiprintf_r+0x20e>
 8008cb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cb8:	445a      	add	r2, fp
 8008cba:	9209      	str	r2, [sp, #36]	; 0x24
 8008cbc:	f89a 3000 	ldrb.w	r3, [sl]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	f000 80a2 	beq.w	8008e0a <_vfiprintf_r+0x20e>
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ccc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cd0:	f10a 0a01 	add.w	sl, sl, #1
 8008cd4:	9304      	str	r3, [sp, #16]
 8008cd6:	9307      	str	r3, [sp, #28]
 8008cd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008cdc:	931a      	str	r3, [sp, #104]	; 0x68
 8008cde:	4654      	mov	r4, sl
 8008ce0:	2205      	movs	r2, #5
 8008ce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ce6:	4858      	ldr	r0, [pc, #352]	; (8008e48 <_vfiprintf_r+0x24c>)
 8008ce8:	f7f7 fac2 	bl	8000270 <memchr>
 8008cec:	9a04      	ldr	r2, [sp, #16]
 8008cee:	b9d8      	cbnz	r0, 8008d28 <_vfiprintf_r+0x12c>
 8008cf0:	06d1      	lsls	r1, r2, #27
 8008cf2:	bf44      	itt	mi
 8008cf4:	2320      	movmi	r3, #32
 8008cf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cfa:	0713      	lsls	r3, r2, #28
 8008cfc:	bf44      	itt	mi
 8008cfe:	232b      	movmi	r3, #43	; 0x2b
 8008d00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d04:	f89a 3000 	ldrb.w	r3, [sl]
 8008d08:	2b2a      	cmp	r3, #42	; 0x2a
 8008d0a:	d015      	beq.n	8008d38 <_vfiprintf_r+0x13c>
 8008d0c:	9a07      	ldr	r2, [sp, #28]
 8008d0e:	4654      	mov	r4, sl
 8008d10:	2000      	movs	r0, #0
 8008d12:	f04f 0c0a 	mov.w	ip, #10
 8008d16:	4621      	mov	r1, r4
 8008d18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d1c:	3b30      	subs	r3, #48	; 0x30
 8008d1e:	2b09      	cmp	r3, #9
 8008d20:	d94e      	bls.n	8008dc0 <_vfiprintf_r+0x1c4>
 8008d22:	b1b0      	cbz	r0, 8008d52 <_vfiprintf_r+0x156>
 8008d24:	9207      	str	r2, [sp, #28]
 8008d26:	e014      	b.n	8008d52 <_vfiprintf_r+0x156>
 8008d28:	eba0 0308 	sub.w	r3, r0, r8
 8008d2c:	fa09 f303 	lsl.w	r3, r9, r3
 8008d30:	4313      	orrs	r3, r2
 8008d32:	9304      	str	r3, [sp, #16]
 8008d34:	46a2      	mov	sl, r4
 8008d36:	e7d2      	b.n	8008cde <_vfiprintf_r+0xe2>
 8008d38:	9b03      	ldr	r3, [sp, #12]
 8008d3a:	1d19      	adds	r1, r3, #4
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	9103      	str	r1, [sp, #12]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	bfbb      	ittet	lt
 8008d44:	425b      	neglt	r3, r3
 8008d46:	f042 0202 	orrlt.w	r2, r2, #2
 8008d4a:	9307      	strge	r3, [sp, #28]
 8008d4c:	9307      	strlt	r3, [sp, #28]
 8008d4e:	bfb8      	it	lt
 8008d50:	9204      	strlt	r2, [sp, #16]
 8008d52:	7823      	ldrb	r3, [r4, #0]
 8008d54:	2b2e      	cmp	r3, #46	; 0x2e
 8008d56:	d10c      	bne.n	8008d72 <_vfiprintf_r+0x176>
 8008d58:	7863      	ldrb	r3, [r4, #1]
 8008d5a:	2b2a      	cmp	r3, #42	; 0x2a
 8008d5c:	d135      	bne.n	8008dca <_vfiprintf_r+0x1ce>
 8008d5e:	9b03      	ldr	r3, [sp, #12]
 8008d60:	1d1a      	adds	r2, r3, #4
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	9203      	str	r2, [sp, #12]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	bfb8      	it	lt
 8008d6a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008d6e:	3402      	adds	r4, #2
 8008d70:	9305      	str	r3, [sp, #20]
 8008d72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008e58 <_vfiprintf_r+0x25c>
 8008d76:	7821      	ldrb	r1, [r4, #0]
 8008d78:	2203      	movs	r2, #3
 8008d7a:	4650      	mov	r0, sl
 8008d7c:	f7f7 fa78 	bl	8000270 <memchr>
 8008d80:	b140      	cbz	r0, 8008d94 <_vfiprintf_r+0x198>
 8008d82:	2340      	movs	r3, #64	; 0x40
 8008d84:	eba0 000a 	sub.w	r0, r0, sl
 8008d88:	fa03 f000 	lsl.w	r0, r3, r0
 8008d8c:	9b04      	ldr	r3, [sp, #16]
 8008d8e:	4303      	orrs	r3, r0
 8008d90:	3401      	adds	r4, #1
 8008d92:	9304      	str	r3, [sp, #16]
 8008d94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d98:	482c      	ldr	r0, [pc, #176]	; (8008e4c <_vfiprintf_r+0x250>)
 8008d9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d9e:	2206      	movs	r2, #6
 8008da0:	f7f7 fa66 	bl	8000270 <memchr>
 8008da4:	2800      	cmp	r0, #0
 8008da6:	d03f      	beq.n	8008e28 <_vfiprintf_r+0x22c>
 8008da8:	4b29      	ldr	r3, [pc, #164]	; (8008e50 <_vfiprintf_r+0x254>)
 8008daa:	bb1b      	cbnz	r3, 8008df4 <_vfiprintf_r+0x1f8>
 8008dac:	9b03      	ldr	r3, [sp, #12]
 8008dae:	3307      	adds	r3, #7
 8008db0:	f023 0307 	bic.w	r3, r3, #7
 8008db4:	3308      	adds	r3, #8
 8008db6:	9303      	str	r3, [sp, #12]
 8008db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dba:	443b      	add	r3, r7
 8008dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8008dbe:	e767      	b.n	8008c90 <_vfiprintf_r+0x94>
 8008dc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dc4:	460c      	mov	r4, r1
 8008dc6:	2001      	movs	r0, #1
 8008dc8:	e7a5      	b.n	8008d16 <_vfiprintf_r+0x11a>
 8008dca:	2300      	movs	r3, #0
 8008dcc:	3401      	adds	r4, #1
 8008dce:	9305      	str	r3, [sp, #20]
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	f04f 0c0a 	mov.w	ip, #10
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ddc:	3a30      	subs	r2, #48	; 0x30
 8008dde:	2a09      	cmp	r2, #9
 8008de0:	d903      	bls.n	8008dea <_vfiprintf_r+0x1ee>
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d0c5      	beq.n	8008d72 <_vfiprintf_r+0x176>
 8008de6:	9105      	str	r1, [sp, #20]
 8008de8:	e7c3      	b.n	8008d72 <_vfiprintf_r+0x176>
 8008dea:	fb0c 2101 	mla	r1, ip, r1, r2
 8008dee:	4604      	mov	r4, r0
 8008df0:	2301      	movs	r3, #1
 8008df2:	e7f0      	b.n	8008dd6 <_vfiprintf_r+0x1da>
 8008df4:	ab03      	add	r3, sp, #12
 8008df6:	9300      	str	r3, [sp, #0]
 8008df8:	462a      	mov	r2, r5
 8008dfa:	4b16      	ldr	r3, [pc, #88]	; (8008e54 <_vfiprintf_r+0x258>)
 8008dfc:	a904      	add	r1, sp, #16
 8008dfe:	4630      	mov	r0, r6
 8008e00:	f3af 8000 	nop.w
 8008e04:	4607      	mov	r7, r0
 8008e06:	1c78      	adds	r0, r7, #1
 8008e08:	d1d6      	bne.n	8008db8 <_vfiprintf_r+0x1bc>
 8008e0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e0c:	07d9      	lsls	r1, r3, #31
 8008e0e:	d405      	bmi.n	8008e1c <_vfiprintf_r+0x220>
 8008e10:	89ab      	ldrh	r3, [r5, #12]
 8008e12:	059a      	lsls	r2, r3, #22
 8008e14:	d402      	bmi.n	8008e1c <_vfiprintf_r+0x220>
 8008e16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e18:	f000 fc35 	bl	8009686 <__retarget_lock_release_recursive>
 8008e1c:	89ab      	ldrh	r3, [r5, #12]
 8008e1e:	065b      	lsls	r3, r3, #25
 8008e20:	f53f af12 	bmi.w	8008c48 <_vfiprintf_r+0x4c>
 8008e24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e26:	e711      	b.n	8008c4c <_vfiprintf_r+0x50>
 8008e28:	ab03      	add	r3, sp, #12
 8008e2a:	9300      	str	r3, [sp, #0]
 8008e2c:	462a      	mov	r2, r5
 8008e2e:	4b09      	ldr	r3, [pc, #36]	; (8008e54 <_vfiprintf_r+0x258>)
 8008e30:	a904      	add	r1, sp, #16
 8008e32:	4630      	mov	r0, r6
 8008e34:	f000 f880 	bl	8008f38 <_printf_i>
 8008e38:	e7e4      	b.n	8008e04 <_vfiprintf_r+0x208>
 8008e3a:	bf00      	nop
 8008e3c:	0800ac58 	.word	0x0800ac58
 8008e40:	0800ac78 	.word	0x0800ac78
 8008e44:	0800ac38 	.word	0x0800ac38
 8008e48:	0800ac04 	.word	0x0800ac04
 8008e4c:	0800ac0e 	.word	0x0800ac0e
 8008e50:	00000000 	.word	0x00000000
 8008e54:	08008bd7 	.word	0x08008bd7
 8008e58:	0800ac0a 	.word	0x0800ac0a

08008e5c <_printf_common>:
 8008e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e60:	4616      	mov	r6, r2
 8008e62:	4699      	mov	r9, r3
 8008e64:	688a      	ldr	r2, [r1, #8]
 8008e66:	690b      	ldr	r3, [r1, #16]
 8008e68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	bfb8      	it	lt
 8008e70:	4613      	movlt	r3, r2
 8008e72:	6033      	str	r3, [r6, #0]
 8008e74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e78:	4607      	mov	r7, r0
 8008e7a:	460c      	mov	r4, r1
 8008e7c:	b10a      	cbz	r2, 8008e82 <_printf_common+0x26>
 8008e7e:	3301      	adds	r3, #1
 8008e80:	6033      	str	r3, [r6, #0]
 8008e82:	6823      	ldr	r3, [r4, #0]
 8008e84:	0699      	lsls	r1, r3, #26
 8008e86:	bf42      	ittt	mi
 8008e88:	6833      	ldrmi	r3, [r6, #0]
 8008e8a:	3302      	addmi	r3, #2
 8008e8c:	6033      	strmi	r3, [r6, #0]
 8008e8e:	6825      	ldr	r5, [r4, #0]
 8008e90:	f015 0506 	ands.w	r5, r5, #6
 8008e94:	d106      	bne.n	8008ea4 <_printf_common+0x48>
 8008e96:	f104 0a19 	add.w	sl, r4, #25
 8008e9a:	68e3      	ldr	r3, [r4, #12]
 8008e9c:	6832      	ldr	r2, [r6, #0]
 8008e9e:	1a9b      	subs	r3, r3, r2
 8008ea0:	42ab      	cmp	r3, r5
 8008ea2:	dc26      	bgt.n	8008ef2 <_printf_common+0x96>
 8008ea4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ea8:	1e13      	subs	r3, r2, #0
 8008eaa:	6822      	ldr	r2, [r4, #0]
 8008eac:	bf18      	it	ne
 8008eae:	2301      	movne	r3, #1
 8008eb0:	0692      	lsls	r2, r2, #26
 8008eb2:	d42b      	bmi.n	8008f0c <_printf_common+0xb0>
 8008eb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008eb8:	4649      	mov	r1, r9
 8008eba:	4638      	mov	r0, r7
 8008ebc:	47c0      	blx	r8
 8008ebe:	3001      	adds	r0, #1
 8008ec0:	d01e      	beq.n	8008f00 <_printf_common+0xa4>
 8008ec2:	6823      	ldr	r3, [r4, #0]
 8008ec4:	68e5      	ldr	r5, [r4, #12]
 8008ec6:	6832      	ldr	r2, [r6, #0]
 8008ec8:	f003 0306 	and.w	r3, r3, #6
 8008ecc:	2b04      	cmp	r3, #4
 8008ece:	bf08      	it	eq
 8008ed0:	1aad      	subeq	r5, r5, r2
 8008ed2:	68a3      	ldr	r3, [r4, #8]
 8008ed4:	6922      	ldr	r2, [r4, #16]
 8008ed6:	bf0c      	ite	eq
 8008ed8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008edc:	2500      	movne	r5, #0
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	bfc4      	itt	gt
 8008ee2:	1a9b      	subgt	r3, r3, r2
 8008ee4:	18ed      	addgt	r5, r5, r3
 8008ee6:	2600      	movs	r6, #0
 8008ee8:	341a      	adds	r4, #26
 8008eea:	42b5      	cmp	r5, r6
 8008eec:	d11a      	bne.n	8008f24 <_printf_common+0xc8>
 8008eee:	2000      	movs	r0, #0
 8008ef0:	e008      	b.n	8008f04 <_printf_common+0xa8>
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	4652      	mov	r2, sl
 8008ef6:	4649      	mov	r1, r9
 8008ef8:	4638      	mov	r0, r7
 8008efa:	47c0      	blx	r8
 8008efc:	3001      	adds	r0, #1
 8008efe:	d103      	bne.n	8008f08 <_printf_common+0xac>
 8008f00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f08:	3501      	adds	r5, #1
 8008f0a:	e7c6      	b.n	8008e9a <_printf_common+0x3e>
 8008f0c:	18e1      	adds	r1, r4, r3
 8008f0e:	1c5a      	adds	r2, r3, #1
 8008f10:	2030      	movs	r0, #48	; 0x30
 8008f12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f16:	4422      	add	r2, r4
 8008f18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f20:	3302      	adds	r3, #2
 8008f22:	e7c7      	b.n	8008eb4 <_printf_common+0x58>
 8008f24:	2301      	movs	r3, #1
 8008f26:	4622      	mov	r2, r4
 8008f28:	4649      	mov	r1, r9
 8008f2a:	4638      	mov	r0, r7
 8008f2c:	47c0      	blx	r8
 8008f2e:	3001      	adds	r0, #1
 8008f30:	d0e6      	beq.n	8008f00 <_printf_common+0xa4>
 8008f32:	3601      	adds	r6, #1
 8008f34:	e7d9      	b.n	8008eea <_printf_common+0x8e>
	...

08008f38 <_printf_i>:
 8008f38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f3c:	460c      	mov	r4, r1
 8008f3e:	4691      	mov	r9, r2
 8008f40:	7e27      	ldrb	r7, [r4, #24]
 8008f42:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008f44:	2f78      	cmp	r7, #120	; 0x78
 8008f46:	4680      	mov	r8, r0
 8008f48:	469a      	mov	sl, r3
 8008f4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f4e:	d807      	bhi.n	8008f60 <_printf_i+0x28>
 8008f50:	2f62      	cmp	r7, #98	; 0x62
 8008f52:	d80a      	bhi.n	8008f6a <_printf_i+0x32>
 8008f54:	2f00      	cmp	r7, #0
 8008f56:	f000 80d8 	beq.w	800910a <_printf_i+0x1d2>
 8008f5a:	2f58      	cmp	r7, #88	; 0x58
 8008f5c:	f000 80a3 	beq.w	80090a6 <_printf_i+0x16e>
 8008f60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008f64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f68:	e03a      	b.n	8008fe0 <_printf_i+0xa8>
 8008f6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f6e:	2b15      	cmp	r3, #21
 8008f70:	d8f6      	bhi.n	8008f60 <_printf_i+0x28>
 8008f72:	a001      	add	r0, pc, #4	; (adr r0, 8008f78 <_printf_i+0x40>)
 8008f74:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008f78:	08008fd1 	.word	0x08008fd1
 8008f7c:	08008fe5 	.word	0x08008fe5
 8008f80:	08008f61 	.word	0x08008f61
 8008f84:	08008f61 	.word	0x08008f61
 8008f88:	08008f61 	.word	0x08008f61
 8008f8c:	08008f61 	.word	0x08008f61
 8008f90:	08008fe5 	.word	0x08008fe5
 8008f94:	08008f61 	.word	0x08008f61
 8008f98:	08008f61 	.word	0x08008f61
 8008f9c:	08008f61 	.word	0x08008f61
 8008fa0:	08008f61 	.word	0x08008f61
 8008fa4:	080090f1 	.word	0x080090f1
 8008fa8:	08009015 	.word	0x08009015
 8008fac:	080090d3 	.word	0x080090d3
 8008fb0:	08008f61 	.word	0x08008f61
 8008fb4:	08008f61 	.word	0x08008f61
 8008fb8:	08009113 	.word	0x08009113
 8008fbc:	08008f61 	.word	0x08008f61
 8008fc0:	08009015 	.word	0x08009015
 8008fc4:	08008f61 	.word	0x08008f61
 8008fc8:	08008f61 	.word	0x08008f61
 8008fcc:	080090db 	.word	0x080090db
 8008fd0:	680b      	ldr	r3, [r1, #0]
 8008fd2:	1d1a      	adds	r2, r3, #4
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	600a      	str	r2, [r1, #0]
 8008fd8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008fdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	e0a3      	b.n	800912c <_printf_i+0x1f4>
 8008fe4:	6825      	ldr	r5, [r4, #0]
 8008fe6:	6808      	ldr	r0, [r1, #0]
 8008fe8:	062e      	lsls	r6, r5, #24
 8008fea:	f100 0304 	add.w	r3, r0, #4
 8008fee:	d50a      	bpl.n	8009006 <_printf_i+0xce>
 8008ff0:	6805      	ldr	r5, [r0, #0]
 8008ff2:	600b      	str	r3, [r1, #0]
 8008ff4:	2d00      	cmp	r5, #0
 8008ff6:	da03      	bge.n	8009000 <_printf_i+0xc8>
 8008ff8:	232d      	movs	r3, #45	; 0x2d
 8008ffa:	426d      	negs	r5, r5
 8008ffc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009000:	485e      	ldr	r0, [pc, #376]	; (800917c <_printf_i+0x244>)
 8009002:	230a      	movs	r3, #10
 8009004:	e019      	b.n	800903a <_printf_i+0x102>
 8009006:	f015 0f40 	tst.w	r5, #64	; 0x40
 800900a:	6805      	ldr	r5, [r0, #0]
 800900c:	600b      	str	r3, [r1, #0]
 800900e:	bf18      	it	ne
 8009010:	b22d      	sxthne	r5, r5
 8009012:	e7ef      	b.n	8008ff4 <_printf_i+0xbc>
 8009014:	680b      	ldr	r3, [r1, #0]
 8009016:	6825      	ldr	r5, [r4, #0]
 8009018:	1d18      	adds	r0, r3, #4
 800901a:	6008      	str	r0, [r1, #0]
 800901c:	0628      	lsls	r0, r5, #24
 800901e:	d501      	bpl.n	8009024 <_printf_i+0xec>
 8009020:	681d      	ldr	r5, [r3, #0]
 8009022:	e002      	b.n	800902a <_printf_i+0xf2>
 8009024:	0669      	lsls	r1, r5, #25
 8009026:	d5fb      	bpl.n	8009020 <_printf_i+0xe8>
 8009028:	881d      	ldrh	r5, [r3, #0]
 800902a:	4854      	ldr	r0, [pc, #336]	; (800917c <_printf_i+0x244>)
 800902c:	2f6f      	cmp	r7, #111	; 0x6f
 800902e:	bf0c      	ite	eq
 8009030:	2308      	moveq	r3, #8
 8009032:	230a      	movne	r3, #10
 8009034:	2100      	movs	r1, #0
 8009036:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800903a:	6866      	ldr	r6, [r4, #4]
 800903c:	60a6      	str	r6, [r4, #8]
 800903e:	2e00      	cmp	r6, #0
 8009040:	bfa2      	ittt	ge
 8009042:	6821      	ldrge	r1, [r4, #0]
 8009044:	f021 0104 	bicge.w	r1, r1, #4
 8009048:	6021      	strge	r1, [r4, #0]
 800904a:	b90d      	cbnz	r5, 8009050 <_printf_i+0x118>
 800904c:	2e00      	cmp	r6, #0
 800904e:	d04d      	beq.n	80090ec <_printf_i+0x1b4>
 8009050:	4616      	mov	r6, r2
 8009052:	fbb5 f1f3 	udiv	r1, r5, r3
 8009056:	fb03 5711 	mls	r7, r3, r1, r5
 800905a:	5dc7      	ldrb	r7, [r0, r7]
 800905c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009060:	462f      	mov	r7, r5
 8009062:	42bb      	cmp	r3, r7
 8009064:	460d      	mov	r5, r1
 8009066:	d9f4      	bls.n	8009052 <_printf_i+0x11a>
 8009068:	2b08      	cmp	r3, #8
 800906a:	d10b      	bne.n	8009084 <_printf_i+0x14c>
 800906c:	6823      	ldr	r3, [r4, #0]
 800906e:	07df      	lsls	r7, r3, #31
 8009070:	d508      	bpl.n	8009084 <_printf_i+0x14c>
 8009072:	6923      	ldr	r3, [r4, #16]
 8009074:	6861      	ldr	r1, [r4, #4]
 8009076:	4299      	cmp	r1, r3
 8009078:	bfde      	ittt	le
 800907a:	2330      	movle	r3, #48	; 0x30
 800907c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009080:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8009084:	1b92      	subs	r2, r2, r6
 8009086:	6122      	str	r2, [r4, #16]
 8009088:	f8cd a000 	str.w	sl, [sp]
 800908c:	464b      	mov	r3, r9
 800908e:	aa03      	add	r2, sp, #12
 8009090:	4621      	mov	r1, r4
 8009092:	4640      	mov	r0, r8
 8009094:	f7ff fee2 	bl	8008e5c <_printf_common>
 8009098:	3001      	adds	r0, #1
 800909a:	d14c      	bne.n	8009136 <_printf_i+0x1fe>
 800909c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090a0:	b004      	add	sp, #16
 80090a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090a6:	4835      	ldr	r0, [pc, #212]	; (800917c <_printf_i+0x244>)
 80090a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80090ac:	6823      	ldr	r3, [r4, #0]
 80090ae:	680e      	ldr	r6, [r1, #0]
 80090b0:	061f      	lsls	r7, r3, #24
 80090b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80090b6:	600e      	str	r6, [r1, #0]
 80090b8:	d514      	bpl.n	80090e4 <_printf_i+0x1ac>
 80090ba:	07d9      	lsls	r1, r3, #31
 80090bc:	bf44      	itt	mi
 80090be:	f043 0320 	orrmi.w	r3, r3, #32
 80090c2:	6023      	strmi	r3, [r4, #0]
 80090c4:	b91d      	cbnz	r5, 80090ce <_printf_i+0x196>
 80090c6:	6823      	ldr	r3, [r4, #0]
 80090c8:	f023 0320 	bic.w	r3, r3, #32
 80090cc:	6023      	str	r3, [r4, #0]
 80090ce:	2310      	movs	r3, #16
 80090d0:	e7b0      	b.n	8009034 <_printf_i+0xfc>
 80090d2:	6823      	ldr	r3, [r4, #0]
 80090d4:	f043 0320 	orr.w	r3, r3, #32
 80090d8:	6023      	str	r3, [r4, #0]
 80090da:	2378      	movs	r3, #120	; 0x78
 80090dc:	4828      	ldr	r0, [pc, #160]	; (8009180 <_printf_i+0x248>)
 80090de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80090e2:	e7e3      	b.n	80090ac <_printf_i+0x174>
 80090e4:	065e      	lsls	r6, r3, #25
 80090e6:	bf48      	it	mi
 80090e8:	b2ad      	uxthmi	r5, r5
 80090ea:	e7e6      	b.n	80090ba <_printf_i+0x182>
 80090ec:	4616      	mov	r6, r2
 80090ee:	e7bb      	b.n	8009068 <_printf_i+0x130>
 80090f0:	680b      	ldr	r3, [r1, #0]
 80090f2:	6826      	ldr	r6, [r4, #0]
 80090f4:	6960      	ldr	r0, [r4, #20]
 80090f6:	1d1d      	adds	r5, r3, #4
 80090f8:	600d      	str	r5, [r1, #0]
 80090fa:	0635      	lsls	r5, r6, #24
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	d501      	bpl.n	8009104 <_printf_i+0x1cc>
 8009100:	6018      	str	r0, [r3, #0]
 8009102:	e002      	b.n	800910a <_printf_i+0x1d2>
 8009104:	0671      	lsls	r1, r6, #25
 8009106:	d5fb      	bpl.n	8009100 <_printf_i+0x1c8>
 8009108:	8018      	strh	r0, [r3, #0]
 800910a:	2300      	movs	r3, #0
 800910c:	6123      	str	r3, [r4, #16]
 800910e:	4616      	mov	r6, r2
 8009110:	e7ba      	b.n	8009088 <_printf_i+0x150>
 8009112:	680b      	ldr	r3, [r1, #0]
 8009114:	1d1a      	adds	r2, r3, #4
 8009116:	600a      	str	r2, [r1, #0]
 8009118:	681e      	ldr	r6, [r3, #0]
 800911a:	6862      	ldr	r2, [r4, #4]
 800911c:	2100      	movs	r1, #0
 800911e:	4630      	mov	r0, r6
 8009120:	f7f7 f8a6 	bl	8000270 <memchr>
 8009124:	b108      	cbz	r0, 800912a <_printf_i+0x1f2>
 8009126:	1b80      	subs	r0, r0, r6
 8009128:	6060      	str	r0, [r4, #4]
 800912a:	6863      	ldr	r3, [r4, #4]
 800912c:	6123      	str	r3, [r4, #16]
 800912e:	2300      	movs	r3, #0
 8009130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009134:	e7a8      	b.n	8009088 <_printf_i+0x150>
 8009136:	6923      	ldr	r3, [r4, #16]
 8009138:	4632      	mov	r2, r6
 800913a:	4649      	mov	r1, r9
 800913c:	4640      	mov	r0, r8
 800913e:	47d0      	blx	sl
 8009140:	3001      	adds	r0, #1
 8009142:	d0ab      	beq.n	800909c <_printf_i+0x164>
 8009144:	6823      	ldr	r3, [r4, #0]
 8009146:	079b      	lsls	r3, r3, #30
 8009148:	d413      	bmi.n	8009172 <_printf_i+0x23a>
 800914a:	68e0      	ldr	r0, [r4, #12]
 800914c:	9b03      	ldr	r3, [sp, #12]
 800914e:	4298      	cmp	r0, r3
 8009150:	bfb8      	it	lt
 8009152:	4618      	movlt	r0, r3
 8009154:	e7a4      	b.n	80090a0 <_printf_i+0x168>
 8009156:	2301      	movs	r3, #1
 8009158:	4632      	mov	r2, r6
 800915a:	4649      	mov	r1, r9
 800915c:	4640      	mov	r0, r8
 800915e:	47d0      	blx	sl
 8009160:	3001      	adds	r0, #1
 8009162:	d09b      	beq.n	800909c <_printf_i+0x164>
 8009164:	3501      	adds	r5, #1
 8009166:	68e3      	ldr	r3, [r4, #12]
 8009168:	9903      	ldr	r1, [sp, #12]
 800916a:	1a5b      	subs	r3, r3, r1
 800916c:	42ab      	cmp	r3, r5
 800916e:	dcf2      	bgt.n	8009156 <_printf_i+0x21e>
 8009170:	e7eb      	b.n	800914a <_printf_i+0x212>
 8009172:	2500      	movs	r5, #0
 8009174:	f104 0619 	add.w	r6, r4, #25
 8009178:	e7f5      	b.n	8009166 <_printf_i+0x22e>
 800917a:	bf00      	nop
 800917c:	0800ac15 	.word	0x0800ac15
 8009180:	0800ac26 	.word	0x0800ac26

08009184 <__swbuf_r>:
 8009184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009186:	460e      	mov	r6, r1
 8009188:	4614      	mov	r4, r2
 800918a:	4605      	mov	r5, r0
 800918c:	b118      	cbz	r0, 8009196 <__swbuf_r+0x12>
 800918e:	6983      	ldr	r3, [r0, #24]
 8009190:	b90b      	cbnz	r3, 8009196 <__swbuf_r+0x12>
 8009192:	f000 f9d9 	bl	8009548 <__sinit>
 8009196:	4b21      	ldr	r3, [pc, #132]	; (800921c <__swbuf_r+0x98>)
 8009198:	429c      	cmp	r4, r3
 800919a:	d12b      	bne.n	80091f4 <__swbuf_r+0x70>
 800919c:	686c      	ldr	r4, [r5, #4]
 800919e:	69a3      	ldr	r3, [r4, #24]
 80091a0:	60a3      	str	r3, [r4, #8]
 80091a2:	89a3      	ldrh	r3, [r4, #12]
 80091a4:	071a      	lsls	r2, r3, #28
 80091a6:	d52f      	bpl.n	8009208 <__swbuf_r+0x84>
 80091a8:	6923      	ldr	r3, [r4, #16]
 80091aa:	b36b      	cbz	r3, 8009208 <__swbuf_r+0x84>
 80091ac:	6923      	ldr	r3, [r4, #16]
 80091ae:	6820      	ldr	r0, [r4, #0]
 80091b0:	1ac0      	subs	r0, r0, r3
 80091b2:	6963      	ldr	r3, [r4, #20]
 80091b4:	b2f6      	uxtb	r6, r6
 80091b6:	4283      	cmp	r3, r0
 80091b8:	4637      	mov	r7, r6
 80091ba:	dc04      	bgt.n	80091c6 <__swbuf_r+0x42>
 80091bc:	4621      	mov	r1, r4
 80091be:	4628      	mov	r0, r5
 80091c0:	f000 f92e 	bl	8009420 <_fflush_r>
 80091c4:	bb30      	cbnz	r0, 8009214 <__swbuf_r+0x90>
 80091c6:	68a3      	ldr	r3, [r4, #8]
 80091c8:	3b01      	subs	r3, #1
 80091ca:	60a3      	str	r3, [r4, #8]
 80091cc:	6823      	ldr	r3, [r4, #0]
 80091ce:	1c5a      	adds	r2, r3, #1
 80091d0:	6022      	str	r2, [r4, #0]
 80091d2:	701e      	strb	r6, [r3, #0]
 80091d4:	6963      	ldr	r3, [r4, #20]
 80091d6:	3001      	adds	r0, #1
 80091d8:	4283      	cmp	r3, r0
 80091da:	d004      	beq.n	80091e6 <__swbuf_r+0x62>
 80091dc:	89a3      	ldrh	r3, [r4, #12]
 80091de:	07db      	lsls	r3, r3, #31
 80091e0:	d506      	bpl.n	80091f0 <__swbuf_r+0x6c>
 80091e2:	2e0a      	cmp	r6, #10
 80091e4:	d104      	bne.n	80091f0 <__swbuf_r+0x6c>
 80091e6:	4621      	mov	r1, r4
 80091e8:	4628      	mov	r0, r5
 80091ea:	f000 f919 	bl	8009420 <_fflush_r>
 80091ee:	b988      	cbnz	r0, 8009214 <__swbuf_r+0x90>
 80091f0:	4638      	mov	r0, r7
 80091f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091f4:	4b0a      	ldr	r3, [pc, #40]	; (8009220 <__swbuf_r+0x9c>)
 80091f6:	429c      	cmp	r4, r3
 80091f8:	d101      	bne.n	80091fe <__swbuf_r+0x7a>
 80091fa:	68ac      	ldr	r4, [r5, #8]
 80091fc:	e7cf      	b.n	800919e <__swbuf_r+0x1a>
 80091fe:	4b09      	ldr	r3, [pc, #36]	; (8009224 <__swbuf_r+0xa0>)
 8009200:	429c      	cmp	r4, r3
 8009202:	bf08      	it	eq
 8009204:	68ec      	ldreq	r4, [r5, #12]
 8009206:	e7ca      	b.n	800919e <__swbuf_r+0x1a>
 8009208:	4621      	mov	r1, r4
 800920a:	4628      	mov	r0, r5
 800920c:	f000 f80c 	bl	8009228 <__swsetup_r>
 8009210:	2800      	cmp	r0, #0
 8009212:	d0cb      	beq.n	80091ac <__swbuf_r+0x28>
 8009214:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009218:	e7ea      	b.n	80091f0 <__swbuf_r+0x6c>
 800921a:	bf00      	nop
 800921c:	0800ac58 	.word	0x0800ac58
 8009220:	0800ac78 	.word	0x0800ac78
 8009224:	0800ac38 	.word	0x0800ac38

08009228 <__swsetup_r>:
 8009228:	4b32      	ldr	r3, [pc, #200]	; (80092f4 <__swsetup_r+0xcc>)
 800922a:	b570      	push	{r4, r5, r6, lr}
 800922c:	681d      	ldr	r5, [r3, #0]
 800922e:	4606      	mov	r6, r0
 8009230:	460c      	mov	r4, r1
 8009232:	b125      	cbz	r5, 800923e <__swsetup_r+0x16>
 8009234:	69ab      	ldr	r3, [r5, #24]
 8009236:	b913      	cbnz	r3, 800923e <__swsetup_r+0x16>
 8009238:	4628      	mov	r0, r5
 800923a:	f000 f985 	bl	8009548 <__sinit>
 800923e:	4b2e      	ldr	r3, [pc, #184]	; (80092f8 <__swsetup_r+0xd0>)
 8009240:	429c      	cmp	r4, r3
 8009242:	d10f      	bne.n	8009264 <__swsetup_r+0x3c>
 8009244:	686c      	ldr	r4, [r5, #4]
 8009246:	89a3      	ldrh	r3, [r4, #12]
 8009248:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800924c:	0719      	lsls	r1, r3, #28
 800924e:	d42c      	bmi.n	80092aa <__swsetup_r+0x82>
 8009250:	06dd      	lsls	r5, r3, #27
 8009252:	d411      	bmi.n	8009278 <__swsetup_r+0x50>
 8009254:	2309      	movs	r3, #9
 8009256:	6033      	str	r3, [r6, #0]
 8009258:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800925c:	81a3      	strh	r3, [r4, #12]
 800925e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009262:	e03e      	b.n	80092e2 <__swsetup_r+0xba>
 8009264:	4b25      	ldr	r3, [pc, #148]	; (80092fc <__swsetup_r+0xd4>)
 8009266:	429c      	cmp	r4, r3
 8009268:	d101      	bne.n	800926e <__swsetup_r+0x46>
 800926a:	68ac      	ldr	r4, [r5, #8]
 800926c:	e7eb      	b.n	8009246 <__swsetup_r+0x1e>
 800926e:	4b24      	ldr	r3, [pc, #144]	; (8009300 <__swsetup_r+0xd8>)
 8009270:	429c      	cmp	r4, r3
 8009272:	bf08      	it	eq
 8009274:	68ec      	ldreq	r4, [r5, #12]
 8009276:	e7e6      	b.n	8009246 <__swsetup_r+0x1e>
 8009278:	0758      	lsls	r0, r3, #29
 800927a:	d512      	bpl.n	80092a2 <__swsetup_r+0x7a>
 800927c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800927e:	b141      	cbz	r1, 8009292 <__swsetup_r+0x6a>
 8009280:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009284:	4299      	cmp	r1, r3
 8009286:	d002      	beq.n	800928e <__swsetup_r+0x66>
 8009288:	4630      	mov	r0, r6
 800928a:	f000 fa61 	bl	8009750 <_free_r>
 800928e:	2300      	movs	r3, #0
 8009290:	6363      	str	r3, [r4, #52]	; 0x34
 8009292:	89a3      	ldrh	r3, [r4, #12]
 8009294:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009298:	81a3      	strh	r3, [r4, #12]
 800929a:	2300      	movs	r3, #0
 800929c:	6063      	str	r3, [r4, #4]
 800929e:	6923      	ldr	r3, [r4, #16]
 80092a0:	6023      	str	r3, [r4, #0]
 80092a2:	89a3      	ldrh	r3, [r4, #12]
 80092a4:	f043 0308 	orr.w	r3, r3, #8
 80092a8:	81a3      	strh	r3, [r4, #12]
 80092aa:	6923      	ldr	r3, [r4, #16]
 80092ac:	b94b      	cbnz	r3, 80092c2 <__swsetup_r+0x9a>
 80092ae:	89a3      	ldrh	r3, [r4, #12]
 80092b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80092b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092b8:	d003      	beq.n	80092c2 <__swsetup_r+0x9a>
 80092ba:	4621      	mov	r1, r4
 80092bc:	4630      	mov	r0, r6
 80092be:	f000 fa07 	bl	80096d0 <__smakebuf_r>
 80092c2:	89a0      	ldrh	r0, [r4, #12]
 80092c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092c8:	f010 0301 	ands.w	r3, r0, #1
 80092cc:	d00a      	beq.n	80092e4 <__swsetup_r+0xbc>
 80092ce:	2300      	movs	r3, #0
 80092d0:	60a3      	str	r3, [r4, #8]
 80092d2:	6963      	ldr	r3, [r4, #20]
 80092d4:	425b      	negs	r3, r3
 80092d6:	61a3      	str	r3, [r4, #24]
 80092d8:	6923      	ldr	r3, [r4, #16]
 80092da:	b943      	cbnz	r3, 80092ee <__swsetup_r+0xc6>
 80092dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80092e0:	d1ba      	bne.n	8009258 <__swsetup_r+0x30>
 80092e2:	bd70      	pop	{r4, r5, r6, pc}
 80092e4:	0781      	lsls	r1, r0, #30
 80092e6:	bf58      	it	pl
 80092e8:	6963      	ldrpl	r3, [r4, #20]
 80092ea:	60a3      	str	r3, [r4, #8]
 80092ec:	e7f4      	b.n	80092d8 <__swsetup_r+0xb0>
 80092ee:	2000      	movs	r0, #0
 80092f0:	e7f7      	b.n	80092e2 <__swsetup_r+0xba>
 80092f2:	bf00      	nop
 80092f4:	20000030 	.word	0x20000030
 80092f8:	0800ac58 	.word	0x0800ac58
 80092fc:	0800ac78 	.word	0x0800ac78
 8009300:	0800ac38 	.word	0x0800ac38

08009304 <abort>:
 8009304:	b508      	push	{r3, lr}
 8009306:	2006      	movs	r0, #6
 8009308:	f000 fb04 	bl	8009914 <raise>
 800930c:	2001      	movs	r0, #1
 800930e:	f7f8 fa91 	bl	8001834 <_exit>
	...

08009314 <__sflush_r>:
 8009314:	898a      	ldrh	r2, [r1, #12]
 8009316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800931a:	4605      	mov	r5, r0
 800931c:	0710      	lsls	r0, r2, #28
 800931e:	460c      	mov	r4, r1
 8009320:	d458      	bmi.n	80093d4 <__sflush_r+0xc0>
 8009322:	684b      	ldr	r3, [r1, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	dc05      	bgt.n	8009334 <__sflush_r+0x20>
 8009328:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800932a:	2b00      	cmp	r3, #0
 800932c:	dc02      	bgt.n	8009334 <__sflush_r+0x20>
 800932e:	2000      	movs	r0, #0
 8009330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009334:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009336:	2e00      	cmp	r6, #0
 8009338:	d0f9      	beq.n	800932e <__sflush_r+0x1a>
 800933a:	2300      	movs	r3, #0
 800933c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009340:	682f      	ldr	r7, [r5, #0]
 8009342:	602b      	str	r3, [r5, #0]
 8009344:	d032      	beq.n	80093ac <__sflush_r+0x98>
 8009346:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009348:	89a3      	ldrh	r3, [r4, #12]
 800934a:	075a      	lsls	r2, r3, #29
 800934c:	d505      	bpl.n	800935a <__sflush_r+0x46>
 800934e:	6863      	ldr	r3, [r4, #4]
 8009350:	1ac0      	subs	r0, r0, r3
 8009352:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009354:	b10b      	cbz	r3, 800935a <__sflush_r+0x46>
 8009356:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009358:	1ac0      	subs	r0, r0, r3
 800935a:	2300      	movs	r3, #0
 800935c:	4602      	mov	r2, r0
 800935e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009360:	6a21      	ldr	r1, [r4, #32]
 8009362:	4628      	mov	r0, r5
 8009364:	47b0      	blx	r6
 8009366:	1c43      	adds	r3, r0, #1
 8009368:	89a3      	ldrh	r3, [r4, #12]
 800936a:	d106      	bne.n	800937a <__sflush_r+0x66>
 800936c:	6829      	ldr	r1, [r5, #0]
 800936e:	291d      	cmp	r1, #29
 8009370:	d82c      	bhi.n	80093cc <__sflush_r+0xb8>
 8009372:	4a2a      	ldr	r2, [pc, #168]	; (800941c <__sflush_r+0x108>)
 8009374:	40ca      	lsrs	r2, r1
 8009376:	07d6      	lsls	r6, r2, #31
 8009378:	d528      	bpl.n	80093cc <__sflush_r+0xb8>
 800937a:	2200      	movs	r2, #0
 800937c:	6062      	str	r2, [r4, #4]
 800937e:	04d9      	lsls	r1, r3, #19
 8009380:	6922      	ldr	r2, [r4, #16]
 8009382:	6022      	str	r2, [r4, #0]
 8009384:	d504      	bpl.n	8009390 <__sflush_r+0x7c>
 8009386:	1c42      	adds	r2, r0, #1
 8009388:	d101      	bne.n	800938e <__sflush_r+0x7a>
 800938a:	682b      	ldr	r3, [r5, #0]
 800938c:	b903      	cbnz	r3, 8009390 <__sflush_r+0x7c>
 800938e:	6560      	str	r0, [r4, #84]	; 0x54
 8009390:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009392:	602f      	str	r7, [r5, #0]
 8009394:	2900      	cmp	r1, #0
 8009396:	d0ca      	beq.n	800932e <__sflush_r+0x1a>
 8009398:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800939c:	4299      	cmp	r1, r3
 800939e:	d002      	beq.n	80093a6 <__sflush_r+0x92>
 80093a0:	4628      	mov	r0, r5
 80093a2:	f000 f9d5 	bl	8009750 <_free_r>
 80093a6:	2000      	movs	r0, #0
 80093a8:	6360      	str	r0, [r4, #52]	; 0x34
 80093aa:	e7c1      	b.n	8009330 <__sflush_r+0x1c>
 80093ac:	6a21      	ldr	r1, [r4, #32]
 80093ae:	2301      	movs	r3, #1
 80093b0:	4628      	mov	r0, r5
 80093b2:	47b0      	blx	r6
 80093b4:	1c41      	adds	r1, r0, #1
 80093b6:	d1c7      	bne.n	8009348 <__sflush_r+0x34>
 80093b8:	682b      	ldr	r3, [r5, #0]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d0c4      	beq.n	8009348 <__sflush_r+0x34>
 80093be:	2b1d      	cmp	r3, #29
 80093c0:	d001      	beq.n	80093c6 <__sflush_r+0xb2>
 80093c2:	2b16      	cmp	r3, #22
 80093c4:	d101      	bne.n	80093ca <__sflush_r+0xb6>
 80093c6:	602f      	str	r7, [r5, #0]
 80093c8:	e7b1      	b.n	800932e <__sflush_r+0x1a>
 80093ca:	89a3      	ldrh	r3, [r4, #12]
 80093cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093d0:	81a3      	strh	r3, [r4, #12]
 80093d2:	e7ad      	b.n	8009330 <__sflush_r+0x1c>
 80093d4:	690f      	ldr	r7, [r1, #16]
 80093d6:	2f00      	cmp	r7, #0
 80093d8:	d0a9      	beq.n	800932e <__sflush_r+0x1a>
 80093da:	0793      	lsls	r3, r2, #30
 80093dc:	680e      	ldr	r6, [r1, #0]
 80093de:	bf08      	it	eq
 80093e0:	694b      	ldreq	r3, [r1, #20]
 80093e2:	600f      	str	r7, [r1, #0]
 80093e4:	bf18      	it	ne
 80093e6:	2300      	movne	r3, #0
 80093e8:	eba6 0807 	sub.w	r8, r6, r7
 80093ec:	608b      	str	r3, [r1, #8]
 80093ee:	f1b8 0f00 	cmp.w	r8, #0
 80093f2:	dd9c      	ble.n	800932e <__sflush_r+0x1a>
 80093f4:	6a21      	ldr	r1, [r4, #32]
 80093f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80093f8:	4643      	mov	r3, r8
 80093fa:	463a      	mov	r2, r7
 80093fc:	4628      	mov	r0, r5
 80093fe:	47b0      	blx	r6
 8009400:	2800      	cmp	r0, #0
 8009402:	dc06      	bgt.n	8009412 <__sflush_r+0xfe>
 8009404:	89a3      	ldrh	r3, [r4, #12]
 8009406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800940a:	81a3      	strh	r3, [r4, #12]
 800940c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009410:	e78e      	b.n	8009330 <__sflush_r+0x1c>
 8009412:	4407      	add	r7, r0
 8009414:	eba8 0800 	sub.w	r8, r8, r0
 8009418:	e7e9      	b.n	80093ee <__sflush_r+0xda>
 800941a:	bf00      	nop
 800941c:	20400001 	.word	0x20400001

08009420 <_fflush_r>:
 8009420:	b538      	push	{r3, r4, r5, lr}
 8009422:	690b      	ldr	r3, [r1, #16]
 8009424:	4605      	mov	r5, r0
 8009426:	460c      	mov	r4, r1
 8009428:	b913      	cbnz	r3, 8009430 <_fflush_r+0x10>
 800942a:	2500      	movs	r5, #0
 800942c:	4628      	mov	r0, r5
 800942e:	bd38      	pop	{r3, r4, r5, pc}
 8009430:	b118      	cbz	r0, 800943a <_fflush_r+0x1a>
 8009432:	6983      	ldr	r3, [r0, #24]
 8009434:	b90b      	cbnz	r3, 800943a <_fflush_r+0x1a>
 8009436:	f000 f887 	bl	8009548 <__sinit>
 800943a:	4b14      	ldr	r3, [pc, #80]	; (800948c <_fflush_r+0x6c>)
 800943c:	429c      	cmp	r4, r3
 800943e:	d11b      	bne.n	8009478 <_fflush_r+0x58>
 8009440:	686c      	ldr	r4, [r5, #4]
 8009442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d0ef      	beq.n	800942a <_fflush_r+0xa>
 800944a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800944c:	07d0      	lsls	r0, r2, #31
 800944e:	d404      	bmi.n	800945a <_fflush_r+0x3a>
 8009450:	0599      	lsls	r1, r3, #22
 8009452:	d402      	bmi.n	800945a <_fflush_r+0x3a>
 8009454:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009456:	f000 f915 	bl	8009684 <__retarget_lock_acquire_recursive>
 800945a:	4628      	mov	r0, r5
 800945c:	4621      	mov	r1, r4
 800945e:	f7ff ff59 	bl	8009314 <__sflush_r>
 8009462:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009464:	07da      	lsls	r2, r3, #31
 8009466:	4605      	mov	r5, r0
 8009468:	d4e0      	bmi.n	800942c <_fflush_r+0xc>
 800946a:	89a3      	ldrh	r3, [r4, #12]
 800946c:	059b      	lsls	r3, r3, #22
 800946e:	d4dd      	bmi.n	800942c <_fflush_r+0xc>
 8009470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009472:	f000 f908 	bl	8009686 <__retarget_lock_release_recursive>
 8009476:	e7d9      	b.n	800942c <_fflush_r+0xc>
 8009478:	4b05      	ldr	r3, [pc, #20]	; (8009490 <_fflush_r+0x70>)
 800947a:	429c      	cmp	r4, r3
 800947c:	d101      	bne.n	8009482 <_fflush_r+0x62>
 800947e:	68ac      	ldr	r4, [r5, #8]
 8009480:	e7df      	b.n	8009442 <_fflush_r+0x22>
 8009482:	4b04      	ldr	r3, [pc, #16]	; (8009494 <_fflush_r+0x74>)
 8009484:	429c      	cmp	r4, r3
 8009486:	bf08      	it	eq
 8009488:	68ec      	ldreq	r4, [r5, #12]
 800948a:	e7da      	b.n	8009442 <_fflush_r+0x22>
 800948c:	0800ac58 	.word	0x0800ac58
 8009490:	0800ac78 	.word	0x0800ac78
 8009494:	0800ac38 	.word	0x0800ac38

08009498 <std>:
 8009498:	2300      	movs	r3, #0
 800949a:	b510      	push	{r4, lr}
 800949c:	4604      	mov	r4, r0
 800949e:	e9c0 3300 	strd	r3, r3, [r0]
 80094a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094a6:	6083      	str	r3, [r0, #8]
 80094a8:	8181      	strh	r1, [r0, #12]
 80094aa:	6643      	str	r3, [r0, #100]	; 0x64
 80094ac:	81c2      	strh	r2, [r0, #14]
 80094ae:	6183      	str	r3, [r0, #24]
 80094b0:	4619      	mov	r1, r3
 80094b2:	2208      	movs	r2, #8
 80094b4:	305c      	adds	r0, #92	; 0x5c
 80094b6:	f7ff fb6f 	bl	8008b98 <memset>
 80094ba:	4b05      	ldr	r3, [pc, #20]	; (80094d0 <std+0x38>)
 80094bc:	6263      	str	r3, [r4, #36]	; 0x24
 80094be:	4b05      	ldr	r3, [pc, #20]	; (80094d4 <std+0x3c>)
 80094c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80094c2:	4b05      	ldr	r3, [pc, #20]	; (80094d8 <std+0x40>)
 80094c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80094c6:	4b05      	ldr	r3, [pc, #20]	; (80094dc <std+0x44>)
 80094c8:	6224      	str	r4, [r4, #32]
 80094ca:	6323      	str	r3, [r4, #48]	; 0x30
 80094cc:	bd10      	pop	{r4, pc}
 80094ce:	bf00      	nop
 80094d0:	0800994d 	.word	0x0800994d
 80094d4:	0800996f 	.word	0x0800996f
 80094d8:	080099a7 	.word	0x080099a7
 80094dc:	080099cb 	.word	0x080099cb

080094e0 <_cleanup_r>:
 80094e0:	4901      	ldr	r1, [pc, #4]	; (80094e8 <_cleanup_r+0x8>)
 80094e2:	f000 b8af 	b.w	8009644 <_fwalk_reent>
 80094e6:	bf00      	nop
 80094e8:	08009421 	.word	0x08009421

080094ec <__sfmoreglue>:
 80094ec:	b570      	push	{r4, r5, r6, lr}
 80094ee:	1e4a      	subs	r2, r1, #1
 80094f0:	2568      	movs	r5, #104	; 0x68
 80094f2:	4355      	muls	r5, r2
 80094f4:	460e      	mov	r6, r1
 80094f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80094fa:	f000 f979 	bl	80097f0 <_malloc_r>
 80094fe:	4604      	mov	r4, r0
 8009500:	b140      	cbz	r0, 8009514 <__sfmoreglue+0x28>
 8009502:	2100      	movs	r1, #0
 8009504:	e9c0 1600 	strd	r1, r6, [r0]
 8009508:	300c      	adds	r0, #12
 800950a:	60a0      	str	r0, [r4, #8]
 800950c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009510:	f7ff fb42 	bl	8008b98 <memset>
 8009514:	4620      	mov	r0, r4
 8009516:	bd70      	pop	{r4, r5, r6, pc}

08009518 <__sfp_lock_acquire>:
 8009518:	4801      	ldr	r0, [pc, #4]	; (8009520 <__sfp_lock_acquire+0x8>)
 800951a:	f000 b8b3 	b.w	8009684 <__retarget_lock_acquire_recursive>
 800951e:	bf00      	nop
 8009520:	20003228 	.word	0x20003228

08009524 <__sfp_lock_release>:
 8009524:	4801      	ldr	r0, [pc, #4]	; (800952c <__sfp_lock_release+0x8>)
 8009526:	f000 b8ae 	b.w	8009686 <__retarget_lock_release_recursive>
 800952a:	bf00      	nop
 800952c:	20003228 	.word	0x20003228

08009530 <__sinit_lock_acquire>:
 8009530:	4801      	ldr	r0, [pc, #4]	; (8009538 <__sinit_lock_acquire+0x8>)
 8009532:	f000 b8a7 	b.w	8009684 <__retarget_lock_acquire_recursive>
 8009536:	bf00      	nop
 8009538:	20003223 	.word	0x20003223

0800953c <__sinit_lock_release>:
 800953c:	4801      	ldr	r0, [pc, #4]	; (8009544 <__sinit_lock_release+0x8>)
 800953e:	f000 b8a2 	b.w	8009686 <__retarget_lock_release_recursive>
 8009542:	bf00      	nop
 8009544:	20003223 	.word	0x20003223

08009548 <__sinit>:
 8009548:	b510      	push	{r4, lr}
 800954a:	4604      	mov	r4, r0
 800954c:	f7ff fff0 	bl	8009530 <__sinit_lock_acquire>
 8009550:	69a3      	ldr	r3, [r4, #24]
 8009552:	b11b      	cbz	r3, 800955c <__sinit+0x14>
 8009554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009558:	f7ff bff0 	b.w	800953c <__sinit_lock_release>
 800955c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009560:	6523      	str	r3, [r4, #80]	; 0x50
 8009562:	4b13      	ldr	r3, [pc, #76]	; (80095b0 <__sinit+0x68>)
 8009564:	4a13      	ldr	r2, [pc, #76]	; (80095b4 <__sinit+0x6c>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	62a2      	str	r2, [r4, #40]	; 0x28
 800956a:	42a3      	cmp	r3, r4
 800956c:	bf04      	itt	eq
 800956e:	2301      	moveq	r3, #1
 8009570:	61a3      	streq	r3, [r4, #24]
 8009572:	4620      	mov	r0, r4
 8009574:	f000 f820 	bl	80095b8 <__sfp>
 8009578:	6060      	str	r0, [r4, #4]
 800957a:	4620      	mov	r0, r4
 800957c:	f000 f81c 	bl	80095b8 <__sfp>
 8009580:	60a0      	str	r0, [r4, #8]
 8009582:	4620      	mov	r0, r4
 8009584:	f000 f818 	bl	80095b8 <__sfp>
 8009588:	2200      	movs	r2, #0
 800958a:	60e0      	str	r0, [r4, #12]
 800958c:	2104      	movs	r1, #4
 800958e:	6860      	ldr	r0, [r4, #4]
 8009590:	f7ff ff82 	bl	8009498 <std>
 8009594:	68a0      	ldr	r0, [r4, #8]
 8009596:	2201      	movs	r2, #1
 8009598:	2109      	movs	r1, #9
 800959a:	f7ff ff7d 	bl	8009498 <std>
 800959e:	68e0      	ldr	r0, [r4, #12]
 80095a0:	2202      	movs	r2, #2
 80095a2:	2112      	movs	r1, #18
 80095a4:	f7ff ff78 	bl	8009498 <std>
 80095a8:	2301      	movs	r3, #1
 80095aa:	61a3      	str	r3, [r4, #24]
 80095ac:	e7d2      	b.n	8009554 <__sinit+0xc>
 80095ae:	bf00      	nop
 80095b0:	0800ac00 	.word	0x0800ac00
 80095b4:	080094e1 	.word	0x080094e1

080095b8 <__sfp>:
 80095b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ba:	4607      	mov	r7, r0
 80095bc:	f7ff ffac 	bl	8009518 <__sfp_lock_acquire>
 80095c0:	4b1e      	ldr	r3, [pc, #120]	; (800963c <__sfp+0x84>)
 80095c2:	681e      	ldr	r6, [r3, #0]
 80095c4:	69b3      	ldr	r3, [r6, #24]
 80095c6:	b913      	cbnz	r3, 80095ce <__sfp+0x16>
 80095c8:	4630      	mov	r0, r6
 80095ca:	f7ff ffbd 	bl	8009548 <__sinit>
 80095ce:	3648      	adds	r6, #72	; 0x48
 80095d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80095d4:	3b01      	subs	r3, #1
 80095d6:	d503      	bpl.n	80095e0 <__sfp+0x28>
 80095d8:	6833      	ldr	r3, [r6, #0]
 80095da:	b30b      	cbz	r3, 8009620 <__sfp+0x68>
 80095dc:	6836      	ldr	r6, [r6, #0]
 80095de:	e7f7      	b.n	80095d0 <__sfp+0x18>
 80095e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80095e4:	b9d5      	cbnz	r5, 800961c <__sfp+0x64>
 80095e6:	4b16      	ldr	r3, [pc, #88]	; (8009640 <__sfp+0x88>)
 80095e8:	60e3      	str	r3, [r4, #12]
 80095ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80095ee:	6665      	str	r5, [r4, #100]	; 0x64
 80095f0:	f000 f847 	bl	8009682 <__retarget_lock_init_recursive>
 80095f4:	f7ff ff96 	bl	8009524 <__sfp_lock_release>
 80095f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80095fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009600:	6025      	str	r5, [r4, #0]
 8009602:	61a5      	str	r5, [r4, #24]
 8009604:	2208      	movs	r2, #8
 8009606:	4629      	mov	r1, r5
 8009608:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800960c:	f7ff fac4 	bl	8008b98 <memset>
 8009610:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009614:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009618:	4620      	mov	r0, r4
 800961a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800961c:	3468      	adds	r4, #104	; 0x68
 800961e:	e7d9      	b.n	80095d4 <__sfp+0x1c>
 8009620:	2104      	movs	r1, #4
 8009622:	4638      	mov	r0, r7
 8009624:	f7ff ff62 	bl	80094ec <__sfmoreglue>
 8009628:	4604      	mov	r4, r0
 800962a:	6030      	str	r0, [r6, #0]
 800962c:	2800      	cmp	r0, #0
 800962e:	d1d5      	bne.n	80095dc <__sfp+0x24>
 8009630:	f7ff ff78 	bl	8009524 <__sfp_lock_release>
 8009634:	230c      	movs	r3, #12
 8009636:	603b      	str	r3, [r7, #0]
 8009638:	e7ee      	b.n	8009618 <__sfp+0x60>
 800963a:	bf00      	nop
 800963c:	0800ac00 	.word	0x0800ac00
 8009640:	ffff0001 	.word	0xffff0001

08009644 <_fwalk_reent>:
 8009644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009648:	4606      	mov	r6, r0
 800964a:	4688      	mov	r8, r1
 800964c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009650:	2700      	movs	r7, #0
 8009652:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009656:	f1b9 0901 	subs.w	r9, r9, #1
 800965a:	d505      	bpl.n	8009668 <_fwalk_reent+0x24>
 800965c:	6824      	ldr	r4, [r4, #0]
 800965e:	2c00      	cmp	r4, #0
 8009660:	d1f7      	bne.n	8009652 <_fwalk_reent+0xe>
 8009662:	4638      	mov	r0, r7
 8009664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009668:	89ab      	ldrh	r3, [r5, #12]
 800966a:	2b01      	cmp	r3, #1
 800966c:	d907      	bls.n	800967e <_fwalk_reent+0x3a>
 800966e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009672:	3301      	adds	r3, #1
 8009674:	d003      	beq.n	800967e <_fwalk_reent+0x3a>
 8009676:	4629      	mov	r1, r5
 8009678:	4630      	mov	r0, r6
 800967a:	47c0      	blx	r8
 800967c:	4307      	orrs	r7, r0
 800967e:	3568      	adds	r5, #104	; 0x68
 8009680:	e7e9      	b.n	8009656 <_fwalk_reent+0x12>

08009682 <__retarget_lock_init_recursive>:
 8009682:	4770      	bx	lr

08009684 <__retarget_lock_acquire_recursive>:
 8009684:	4770      	bx	lr

08009686 <__retarget_lock_release_recursive>:
 8009686:	4770      	bx	lr

08009688 <__swhatbuf_r>:
 8009688:	b570      	push	{r4, r5, r6, lr}
 800968a:	460e      	mov	r6, r1
 800968c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009690:	2900      	cmp	r1, #0
 8009692:	b096      	sub	sp, #88	; 0x58
 8009694:	4614      	mov	r4, r2
 8009696:	461d      	mov	r5, r3
 8009698:	da07      	bge.n	80096aa <__swhatbuf_r+0x22>
 800969a:	2300      	movs	r3, #0
 800969c:	602b      	str	r3, [r5, #0]
 800969e:	89b3      	ldrh	r3, [r6, #12]
 80096a0:	061a      	lsls	r2, r3, #24
 80096a2:	d410      	bmi.n	80096c6 <__swhatbuf_r+0x3e>
 80096a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096a8:	e00e      	b.n	80096c8 <__swhatbuf_r+0x40>
 80096aa:	466a      	mov	r2, sp
 80096ac:	f000 f9a2 	bl	80099f4 <_fstat_r>
 80096b0:	2800      	cmp	r0, #0
 80096b2:	dbf2      	blt.n	800969a <__swhatbuf_r+0x12>
 80096b4:	9a01      	ldr	r2, [sp, #4]
 80096b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80096ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80096be:	425a      	negs	r2, r3
 80096c0:	415a      	adcs	r2, r3
 80096c2:	602a      	str	r2, [r5, #0]
 80096c4:	e7ee      	b.n	80096a4 <__swhatbuf_r+0x1c>
 80096c6:	2340      	movs	r3, #64	; 0x40
 80096c8:	2000      	movs	r0, #0
 80096ca:	6023      	str	r3, [r4, #0]
 80096cc:	b016      	add	sp, #88	; 0x58
 80096ce:	bd70      	pop	{r4, r5, r6, pc}

080096d0 <__smakebuf_r>:
 80096d0:	898b      	ldrh	r3, [r1, #12]
 80096d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80096d4:	079d      	lsls	r5, r3, #30
 80096d6:	4606      	mov	r6, r0
 80096d8:	460c      	mov	r4, r1
 80096da:	d507      	bpl.n	80096ec <__smakebuf_r+0x1c>
 80096dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80096e0:	6023      	str	r3, [r4, #0]
 80096e2:	6123      	str	r3, [r4, #16]
 80096e4:	2301      	movs	r3, #1
 80096e6:	6163      	str	r3, [r4, #20]
 80096e8:	b002      	add	sp, #8
 80096ea:	bd70      	pop	{r4, r5, r6, pc}
 80096ec:	ab01      	add	r3, sp, #4
 80096ee:	466a      	mov	r2, sp
 80096f0:	f7ff ffca 	bl	8009688 <__swhatbuf_r>
 80096f4:	9900      	ldr	r1, [sp, #0]
 80096f6:	4605      	mov	r5, r0
 80096f8:	4630      	mov	r0, r6
 80096fa:	f000 f879 	bl	80097f0 <_malloc_r>
 80096fe:	b948      	cbnz	r0, 8009714 <__smakebuf_r+0x44>
 8009700:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009704:	059a      	lsls	r2, r3, #22
 8009706:	d4ef      	bmi.n	80096e8 <__smakebuf_r+0x18>
 8009708:	f023 0303 	bic.w	r3, r3, #3
 800970c:	f043 0302 	orr.w	r3, r3, #2
 8009710:	81a3      	strh	r3, [r4, #12]
 8009712:	e7e3      	b.n	80096dc <__smakebuf_r+0xc>
 8009714:	4b0d      	ldr	r3, [pc, #52]	; (800974c <__smakebuf_r+0x7c>)
 8009716:	62b3      	str	r3, [r6, #40]	; 0x28
 8009718:	89a3      	ldrh	r3, [r4, #12]
 800971a:	6020      	str	r0, [r4, #0]
 800971c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009720:	81a3      	strh	r3, [r4, #12]
 8009722:	9b00      	ldr	r3, [sp, #0]
 8009724:	6163      	str	r3, [r4, #20]
 8009726:	9b01      	ldr	r3, [sp, #4]
 8009728:	6120      	str	r0, [r4, #16]
 800972a:	b15b      	cbz	r3, 8009744 <__smakebuf_r+0x74>
 800972c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009730:	4630      	mov	r0, r6
 8009732:	f000 f971 	bl	8009a18 <_isatty_r>
 8009736:	b128      	cbz	r0, 8009744 <__smakebuf_r+0x74>
 8009738:	89a3      	ldrh	r3, [r4, #12]
 800973a:	f023 0303 	bic.w	r3, r3, #3
 800973e:	f043 0301 	orr.w	r3, r3, #1
 8009742:	81a3      	strh	r3, [r4, #12]
 8009744:	89a0      	ldrh	r0, [r4, #12]
 8009746:	4305      	orrs	r5, r0
 8009748:	81a5      	strh	r5, [r4, #12]
 800974a:	e7cd      	b.n	80096e8 <__smakebuf_r+0x18>
 800974c:	080094e1 	.word	0x080094e1

08009750 <_free_r>:
 8009750:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009752:	2900      	cmp	r1, #0
 8009754:	d048      	beq.n	80097e8 <_free_r+0x98>
 8009756:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800975a:	9001      	str	r0, [sp, #4]
 800975c:	2b00      	cmp	r3, #0
 800975e:	f1a1 0404 	sub.w	r4, r1, #4
 8009762:	bfb8      	it	lt
 8009764:	18e4      	addlt	r4, r4, r3
 8009766:	f000 f979 	bl	8009a5c <__malloc_lock>
 800976a:	4a20      	ldr	r2, [pc, #128]	; (80097ec <_free_r+0x9c>)
 800976c:	9801      	ldr	r0, [sp, #4]
 800976e:	6813      	ldr	r3, [r2, #0]
 8009770:	4615      	mov	r5, r2
 8009772:	b933      	cbnz	r3, 8009782 <_free_r+0x32>
 8009774:	6063      	str	r3, [r4, #4]
 8009776:	6014      	str	r4, [r2, #0]
 8009778:	b003      	add	sp, #12
 800977a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800977e:	f000 b973 	b.w	8009a68 <__malloc_unlock>
 8009782:	42a3      	cmp	r3, r4
 8009784:	d90b      	bls.n	800979e <_free_r+0x4e>
 8009786:	6821      	ldr	r1, [r4, #0]
 8009788:	1862      	adds	r2, r4, r1
 800978a:	4293      	cmp	r3, r2
 800978c:	bf04      	itt	eq
 800978e:	681a      	ldreq	r2, [r3, #0]
 8009790:	685b      	ldreq	r3, [r3, #4]
 8009792:	6063      	str	r3, [r4, #4]
 8009794:	bf04      	itt	eq
 8009796:	1852      	addeq	r2, r2, r1
 8009798:	6022      	streq	r2, [r4, #0]
 800979a:	602c      	str	r4, [r5, #0]
 800979c:	e7ec      	b.n	8009778 <_free_r+0x28>
 800979e:	461a      	mov	r2, r3
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	b10b      	cbz	r3, 80097a8 <_free_r+0x58>
 80097a4:	42a3      	cmp	r3, r4
 80097a6:	d9fa      	bls.n	800979e <_free_r+0x4e>
 80097a8:	6811      	ldr	r1, [r2, #0]
 80097aa:	1855      	adds	r5, r2, r1
 80097ac:	42a5      	cmp	r5, r4
 80097ae:	d10b      	bne.n	80097c8 <_free_r+0x78>
 80097b0:	6824      	ldr	r4, [r4, #0]
 80097b2:	4421      	add	r1, r4
 80097b4:	1854      	adds	r4, r2, r1
 80097b6:	42a3      	cmp	r3, r4
 80097b8:	6011      	str	r1, [r2, #0]
 80097ba:	d1dd      	bne.n	8009778 <_free_r+0x28>
 80097bc:	681c      	ldr	r4, [r3, #0]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	6053      	str	r3, [r2, #4]
 80097c2:	4421      	add	r1, r4
 80097c4:	6011      	str	r1, [r2, #0]
 80097c6:	e7d7      	b.n	8009778 <_free_r+0x28>
 80097c8:	d902      	bls.n	80097d0 <_free_r+0x80>
 80097ca:	230c      	movs	r3, #12
 80097cc:	6003      	str	r3, [r0, #0]
 80097ce:	e7d3      	b.n	8009778 <_free_r+0x28>
 80097d0:	6825      	ldr	r5, [r4, #0]
 80097d2:	1961      	adds	r1, r4, r5
 80097d4:	428b      	cmp	r3, r1
 80097d6:	bf04      	itt	eq
 80097d8:	6819      	ldreq	r1, [r3, #0]
 80097da:	685b      	ldreq	r3, [r3, #4]
 80097dc:	6063      	str	r3, [r4, #4]
 80097de:	bf04      	itt	eq
 80097e0:	1949      	addeq	r1, r1, r5
 80097e2:	6021      	streq	r1, [r4, #0]
 80097e4:	6054      	str	r4, [r2, #4]
 80097e6:	e7c7      	b.n	8009778 <_free_r+0x28>
 80097e8:	b003      	add	sp, #12
 80097ea:	bd30      	pop	{r4, r5, pc}
 80097ec:	20002fe8 	.word	0x20002fe8

080097f0 <_malloc_r>:
 80097f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097f2:	1ccd      	adds	r5, r1, #3
 80097f4:	f025 0503 	bic.w	r5, r5, #3
 80097f8:	3508      	adds	r5, #8
 80097fa:	2d0c      	cmp	r5, #12
 80097fc:	bf38      	it	cc
 80097fe:	250c      	movcc	r5, #12
 8009800:	2d00      	cmp	r5, #0
 8009802:	4606      	mov	r6, r0
 8009804:	db01      	blt.n	800980a <_malloc_r+0x1a>
 8009806:	42a9      	cmp	r1, r5
 8009808:	d903      	bls.n	8009812 <_malloc_r+0x22>
 800980a:	230c      	movs	r3, #12
 800980c:	6033      	str	r3, [r6, #0]
 800980e:	2000      	movs	r0, #0
 8009810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009812:	f000 f923 	bl	8009a5c <__malloc_lock>
 8009816:	4921      	ldr	r1, [pc, #132]	; (800989c <_malloc_r+0xac>)
 8009818:	680a      	ldr	r2, [r1, #0]
 800981a:	4614      	mov	r4, r2
 800981c:	b99c      	cbnz	r4, 8009846 <_malloc_r+0x56>
 800981e:	4f20      	ldr	r7, [pc, #128]	; (80098a0 <_malloc_r+0xb0>)
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	b923      	cbnz	r3, 800982e <_malloc_r+0x3e>
 8009824:	4621      	mov	r1, r4
 8009826:	4630      	mov	r0, r6
 8009828:	f000 f83c 	bl	80098a4 <_sbrk_r>
 800982c:	6038      	str	r0, [r7, #0]
 800982e:	4629      	mov	r1, r5
 8009830:	4630      	mov	r0, r6
 8009832:	f000 f837 	bl	80098a4 <_sbrk_r>
 8009836:	1c43      	adds	r3, r0, #1
 8009838:	d123      	bne.n	8009882 <_malloc_r+0x92>
 800983a:	230c      	movs	r3, #12
 800983c:	6033      	str	r3, [r6, #0]
 800983e:	4630      	mov	r0, r6
 8009840:	f000 f912 	bl	8009a68 <__malloc_unlock>
 8009844:	e7e3      	b.n	800980e <_malloc_r+0x1e>
 8009846:	6823      	ldr	r3, [r4, #0]
 8009848:	1b5b      	subs	r3, r3, r5
 800984a:	d417      	bmi.n	800987c <_malloc_r+0x8c>
 800984c:	2b0b      	cmp	r3, #11
 800984e:	d903      	bls.n	8009858 <_malloc_r+0x68>
 8009850:	6023      	str	r3, [r4, #0]
 8009852:	441c      	add	r4, r3
 8009854:	6025      	str	r5, [r4, #0]
 8009856:	e004      	b.n	8009862 <_malloc_r+0x72>
 8009858:	6863      	ldr	r3, [r4, #4]
 800985a:	42a2      	cmp	r2, r4
 800985c:	bf0c      	ite	eq
 800985e:	600b      	streq	r3, [r1, #0]
 8009860:	6053      	strne	r3, [r2, #4]
 8009862:	4630      	mov	r0, r6
 8009864:	f000 f900 	bl	8009a68 <__malloc_unlock>
 8009868:	f104 000b 	add.w	r0, r4, #11
 800986c:	1d23      	adds	r3, r4, #4
 800986e:	f020 0007 	bic.w	r0, r0, #7
 8009872:	1ac2      	subs	r2, r0, r3
 8009874:	d0cc      	beq.n	8009810 <_malloc_r+0x20>
 8009876:	1a1b      	subs	r3, r3, r0
 8009878:	50a3      	str	r3, [r4, r2]
 800987a:	e7c9      	b.n	8009810 <_malloc_r+0x20>
 800987c:	4622      	mov	r2, r4
 800987e:	6864      	ldr	r4, [r4, #4]
 8009880:	e7cc      	b.n	800981c <_malloc_r+0x2c>
 8009882:	1cc4      	adds	r4, r0, #3
 8009884:	f024 0403 	bic.w	r4, r4, #3
 8009888:	42a0      	cmp	r0, r4
 800988a:	d0e3      	beq.n	8009854 <_malloc_r+0x64>
 800988c:	1a21      	subs	r1, r4, r0
 800988e:	4630      	mov	r0, r6
 8009890:	f000 f808 	bl	80098a4 <_sbrk_r>
 8009894:	3001      	adds	r0, #1
 8009896:	d1dd      	bne.n	8009854 <_malloc_r+0x64>
 8009898:	e7cf      	b.n	800983a <_malloc_r+0x4a>
 800989a:	bf00      	nop
 800989c:	20002fe8 	.word	0x20002fe8
 80098a0:	20002fec 	.word	0x20002fec

080098a4 <_sbrk_r>:
 80098a4:	b538      	push	{r3, r4, r5, lr}
 80098a6:	4d06      	ldr	r5, [pc, #24]	; (80098c0 <_sbrk_r+0x1c>)
 80098a8:	2300      	movs	r3, #0
 80098aa:	4604      	mov	r4, r0
 80098ac:	4608      	mov	r0, r1
 80098ae:	602b      	str	r3, [r5, #0]
 80098b0:	f001 f8a8 	bl	800aa04 <_sbrk>
 80098b4:	1c43      	adds	r3, r0, #1
 80098b6:	d102      	bne.n	80098be <_sbrk_r+0x1a>
 80098b8:	682b      	ldr	r3, [r5, #0]
 80098ba:	b103      	cbz	r3, 80098be <_sbrk_r+0x1a>
 80098bc:	6023      	str	r3, [r4, #0]
 80098be:	bd38      	pop	{r3, r4, r5, pc}
 80098c0:	2000322c 	.word	0x2000322c

080098c4 <_raise_r>:
 80098c4:	291f      	cmp	r1, #31
 80098c6:	b538      	push	{r3, r4, r5, lr}
 80098c8:	4604      	mov	r4, r0
 80098ca:	460d      	mov	r5, r1
 80098cc:	d904      	bls.n	80098d8 <_raise_r+0x14>
 80098ce:	2316      	movs	r3, #22
 80098d0:	6003      	str	r3, [r0, #0]
 80098d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098d6:	bd38      	pop	{r3, r4, r5, pc}
 80098d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80098da:	b112      	cbz	r2, 80098e2 <_raise_r+0x1e>
 80098dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098e0:	b94b      	cbnz	r3, 80098f6 <_raise_r+0x32>
 80098e2:	4620      	mov	r0, r4
 80098e4:	f000 f830 	bl	8009948 <_getpid_r>
 80098e8:	462a      	mov	r2, r5
 80098ea:	4601      	mov	r1, r0
 80098ec:	4620      	mov	r0, r4
 80098ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098f2:	f000 b817 	b.w	8009924 <_kill_r>
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d00a      	beq.n	8009910 <_raise_r+0x4c>
 80098fa:	1c59      	adds	r1, r3, #1
 80098fc:	d103      	bne.n	8009906 <_raise_r+0x42>
 80098fe:	2316      	movs	r3, #22
 8009900:	6003      	str	r3, [r0, #0]
 8009902:	2001      	movs	r0, #1
 8009904:	e7e7      	b.n	80098d6 <_raise_r+0x12>
 8009906:	2400      	movs	r4, #0
 8009908:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800990c:	4628      	mov	r0, r5
 800990e:	4798      	blx	r3
 8009910:	2000      	movs	r0, #0
 8009912:	e7e0      	b.n	80098d6 <_raise_r+0x12>

08009914 <raise>:
 8009914:	4b02      	ldr	r3, [pc, #8]	; (8009920 <raise+0xc>)
 8009916:	4601      	mov	r1, r0
 8009918:	6818      	ldr	r0, [r3, #0]
 800991a:	f7ff bfd3 	b.w	80098c4 <_raise_r>
 800991e:	bf00      	nop
 8009920:	20000030 	.word	0x20000030

08009924 <_kill_r>:
 8009924:	b538      	push	{r3, r4, r5, lr}
 8009926:	4d07      	ldr	r5, [pc, #28]	; (8009944 <_kill_r+0x20>)
 8009928:	2300      	movs	r3, #0
 800992a:	4604      	mov	r4, r0
 800992c:	4608      	mov	r0, r1
 800992e:	4611      	mov	r1, r2
 8009930:	602b      	str	r3, [r5, #0]
 8009932:	f7f7 ff6f 	bl	8001814 <_kill>
 8009936:	1c43      	adds	r3, r0, #1
 8009938:	d102      	bne.n	8009940 <_kill_r+0x1c>
 800993a:	682b      	ldr	r3, [r5, #0]
 800993c:	b103      	cbz	r3, 8009940 <_kill_r+0x1c>
 800993e:	6023      	str	r3, [r4, #0]
 8009940:	bd38      	pop	{r3, r4, r5, pc}
 8009942:	bf00      	nop
 8009944:	2000322c 	.word	0x2000322c

08009948 <_getpid_r>:
 8009948:	f7f7 bf5c 	b.w	8001804 <_getpid>

0800994c <__sread>:
 800994c:	b510      	push	{r4, lr}
 800994e:	460c      	mov	r4, r1
 8009950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009954:	f000 f88e 	bl	8009a74 <_read_r>
 8009958:	2800      	cmp	r0, #0
 800995a:	bfab      	itete	ge
 800995c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800995e:	89a3      	ldrhlt	r3, [r4, #12]
 8009960:	181b      	addge	r3, r3, r0
 8009962:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009966:	bfac      	ite	ge
 8009968:	6563      	strge	r3, [r4, #84]	; 0x54
 800996a:	81a3      	strhlt	r3, [r4, #12]
 800996c:	bd10      	pop	{r4, pc}

0800996e <__swrite>:
 800996e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009972:	461f      	mov	r7, r3
 8009974:	898b      	ldrh	r3, [r1, #12]
 8009976:	05db      	lsls	r3, r3, #23
 8009978:	4605      	mov	r5, r0
 800997a:	460c      	mov	r4, r1
 800997c:	4616      	mov	r6, r2
 800997e:	d505      	bpl.n	800998c <__swrite+0x1e>
 8009980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009984:	2302      	movs	r3, #2
 8009986:	2200      	movs	r2, #0
 8009988:	f000 f856 	bl	8009a38 <_lseek_r>
 800998c:	89a3      	ldrh	r3, [r4, #12]
 800998e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009992:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009996:	81a3      	strh	r3, [r4, #12]
 8009998:	4632      	mov	r2, r6
 800999a:	463b      	mov	r3, r7
 800999c:	4628      	mov	r0, r5
 800999e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099a2:	f7ff b871 	b.w	8008a88 <_write_r>

080099a6 <__sseek>:
 80099a6:	b510      	push	{r4, lr}
 80099a8:	460c      	mov	r4, r1
 80099aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099ae:	f000 f843 	bl	8009a38 <_lseek_r>
 80099b2:	1c43      	adds	r3, r0, #1
 80099b4:	89a3      	ldrh	r3, [r4, #12]
 80099b6:	bf15      	itete	ne
 80099b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80099ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80099be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80099c2:	81a3      	strheq	r3, [r4, #12]
 80099c4:	bf18      	it	ne
 80099c6:	81a3      	strhne	r3, [r4, #12]
 80099c8:	bd10      	pop	{r4, pc}

080099ca <__sclose>:
 80099ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099ce:	f000 b801 	b.w	80099d4 <_close_r>
	...

080099d4 <_close_r>:
 80099d4:	b538      	push	{r3, r4, r5, lr}
 80099d6:	4d06      	ldr	r5, [pc, #24]	; (80099f0 <_close_r+0x1c>)
 80099d8:	2300      	movs	r3, #0
 80099da:	4604      	mov	r4, r0
 80099dc:	4608      	mov	r0, r1
 80099de:	602b      	str	r3, [r5, #0]
 80099e0:	f7f7 ff4f 	bl	8001882 <_close>
 80099e4:	1c43      	adds	r3, r0, #1
 80099e6:	d102      	bne.n	80099ee <_close_r+0x1a>
 80099e8:	682b      	ldr	r3, [r5, #0]
 80099ea:	b103      	cbz	r3, 80099ee <_close_r+0x1a>
 80099ec:	6023      	str	r3, [r4, #0]
 80099ee:	bd38      	pop	{r3, r4, r5, pc}
 80099f0:	2000322c 	.word	0x2000322c

080099f4 <_fstat_r>:
 80099f4:	b538      	push	{r3, r4, r5, lr}
 80099f6:	4d07      	ldr	r5, [pc, #28]	; (8009a14 <_fstat_r+0x20>)
 80099f8:	2300      	movs	r3, #0
 80099fa:	4604      	mov	r4, r0
 80099fc:	4608      	mov	r0, r1
 80099fe:	4611      	mov	r1, r2
 8009a00:	602b      	str	r3, [r5, #0]
 8009a02:	f7f7 ff4a 	bl	800189a <_fstat>
 8009a06:	1c43      	adds	r3, r0, #1
 8009a08:	d102      	bne.n	8009a10 <_fstat_r+0x1c>
 8009a0a:	682b      	ldr	r3, [r5, #0]
 8009a0c:	b103      	cbz	r3, 8009a10 <_fstat_r+0x1c>
 8009a0e:	6023      	str	r3, [r4, #0]
 8009a10:	bd38      	pop	{r3, r4, r5, pc}
 8009a12:	bf00      	nop
 8009a14:	2000322c 	.word	0x2000322c

08009a18 <_isatty_r>:
 8009a18:	b538      	push	{r3, r4, r5, lr}
 8009a1a:	4d06      	ldr	r5, [pc, #24]	; (8009a34 <_isatty_r+0x1c>)
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	4604      	mov	r4, r0
 8009a20:	4608      	mov	r0, r1
 8009a22:	602b      	str	r3, [r5, #0]
 8009a24:	f7f7 ff49 	bl	80018ba <_isatty>
 8009a28:	1c43      	adds	r3, r0, #1
 8009a2a:	d102      	bne.n	8009a32 <_isatty_r+0x1a>
 8009a2c:	682b      	ldr	r3, [r5, #0]
 8009a2e:	b103      	cbz	r3, 8009a32 <_isatty_r+0x1a>
 8009a30:	6023      	str	r3, [r4, #0]
 8009a32:	bd38      	pop	{r3, r4, r5, pc}
 8009a34:	2000322c 	.word	0x2000322c

08009a38 <_lseek_r>:
 8009a38:	b538      	push	{r3, r4, r5, lr}
 8009a3a:	4d07      	ldr	r5, [pc, #28]	; (8009a58 <_lseek_r+0x20>)
 8009a3c:	4604      	mov	r4, r0
 8009a3e:	4608      	mov	r0, r1
 8009a40:	4611      	mov	r1, r2
 8009a42:	2200      	movs	r2, #0
 8009a44:	602a      	str	r2, [r5, #0]
 8009a46:	461a      	mov	r2, r3
 8009a48:	f7f7 ff42 	bl	80018d0 <_lseek>
 8009a4c:	1c43      	adds	r3, r0, #1
 8009a4e:	d102      	bne.n	8009a56 <_lseek_r+0x1e>
 8009a50:	682b      	ldr	r3, [r5, #0]
 8009a52:	b103      	cbz	r3, 8009a56 <_lseek_r+0x1e>
 8009a54:	6023      	str	r3, [r4, #0]
 8009a56:	bd38      	pop	{r3, r4, r5, pc}
 8009a58:	2000322c 	.word	0x2000322c

08009a5c <__malloc_lock>:
 8009a5c:	4801      	ldr	r0, [pc, #4]	; (8009a64 <__malloc_lock+0x8>)
 8009a5e:	f7ff be11 	b.w	8009684 <__retarget_lock_acquire_recursive>
 8009a62:	bf00      	nop
 8009a64:	20003224 	.word	0x20003224

08009a68 <__malloc_unlock>:
 8009a68:	4801      	ldr	r0, [pc, #4]	; (8009a70 <__malloc_unlock+0x8>)
 8009a6a:	f7ff be0c 	b.w	8009686 <__retarget_lock_release_recursive>
 8009a6e:	bf00      	nop
 8009a70:	20003224 	.word	0x20003224

08009a74 <_read_r>:
 8009a74:	b538      	push	{r3, r4, r5, lr}
 8009a76:	4d07      	ldr	r5, [pc, #28]	; (8009a94 <_read_r+0x20>)
 8009a78:	4604      	mov	r4, r0
 8009a7a:	4608      	mov	r0, r1
 8009a7c:	4611      	mov	r1, r2
 8009a7e:	2200      	movs	r2, #0
 8009a80:	602a      	str	r2, [r5, #0]
 8009a82:	461a      	mov	r2, r3
 8009a84:	f7f7 fee0 	bl	8001848 <_read>
 8009a88:	1c43      	adds	r3, r0, #1
 8009a8a:	d102      	bne.n	8009a92 <_read_r+0x1e>
 8009a8c:	682b      	ldr	r3, [r5, #0]
 8009a8e:	b103      	cbz	r3, 8009a92 <_read_r+0x1e>
 8009a90:	6023      	str	r3, [r4, #0]
 8009a92:	bd38      	pop	{r3, r4, r5, pc}
 8009a94:	2000322c 	.word	0x2000322c

08009a98 <pow>:
 8009a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a9c:	ec59 8b10 	vmov	r8, r9, d0
 8009aa0:	ec57 6b11 	vmov	r6, r7, d1
 8009aa4:	f000 f8a8 	bl	8009bf8 <__ieee754_pow>
 8009aa8:	4b4e      	ldr	r3, [pc, #312]	; (8009be4 <pow+0x14c>)
 8009aaa:	f993 3000 	ldrsb.w	r3, [r3]
 8009aae:	3301      	adds	r3, #1
 8009ab0:	ec55 4b10 	vmov	r4, r5, d0
 8009ab4:	d015      	beq.n	8009ae2 <pow+0x4a>
 8009ab6:	4632      	mov	r2, r6
 8009ab8:	463b      	mov	r3, r7
 8009aba:	4630      	mov	r0, r6
 8009abc:	4639      	mov	r1, r7
 8009abe:	f7f7 f87d 	bl	8000bbc <__aeabi_dcmpun>
 8009ac2:	b970      	cbnz	r0, 8009ae2 <pow+0x4a>
 8009ac4:	4642      	mov	r2, r8
 8009ac6:	464b      	mov	r3, r9
 8009ac8:	4640      	mov	r0, r8
 8009aca:	4649      	mov	r1, r9
 8009acc:	f7f7 f876 	bl	8000bbc <__aeabi_dcmpun>
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	b148      	cbz	r0, 8009aea <pow+0x52>
 8009ad6:	4630      	mov	r0, r6
 8009ad8:	4639      	mov	r1, r7
 8009ada:	f7f7 f83d 	bl	8000b58 <__aeabi_dcmpeq>
 8009ade:	2800      	cmp	r0, #0
 8009ae0:	d17d      	bne.n	8009bde <pow+0x146>
 8009ae2:	ec45 4b10 	vmov	d0, r4, r5
 8009ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009aea:	4640      	mov	r0, r8
 8009aec:	4649      	mov	r1, r9
 8009aee:	f7f7 f833 	bl	8000b58 <__aeabi_dcmpeq>
 8009af2:	b1e0      	cbz	r0, 8009b2e <pow+0x96>
 8009af4:	2200      	movs	r2, #0
 8009af6:	2300      	movs	r3, #0
 8009af8:	4630      	mov	r0, r6
 8009afa:	4639      	mov	r1, r7
 8009afc:	f7f7 f82c 	bl	8000b58 <__aeabi_dcmpeq>
 8009b00:	2800      	cmp	r0, #0
 8009b02:	d16c      	bne.n	8009bde <pow+0x146>
 8009b04:	ec47 6b10 	vmov	d0, r6, r7
 8009b08:	f000 fe55 	bl	800a7b6 <finite>
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	d0e8      	beq.n	8009ae2 <pow+0x4a>
 8009b10:	2200      	movs	r2, #0
 8009b12:	2300      	movs	r3, #0
 8009b14:	4630      	mov	r0, r6
 8009b16:	4639      	mov	r1, r7
 8009b18:	f7f7 f828 	bl	8000b6c <__aeabi_dcmplt>
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	d0e0      	beq.n	8009ae2 <pow+0x4a>
 8009b20:	f7fe ffe2 	bl	8008ae8 <__errno>
 8009b24:	2321      	movs	r3, #33	; 0x21
 8009b26:	6003      	str	r3, [r0, #0]
 8009b28:	2400      	movs	r4, #0
 8009b2a:	4d2f      	ldr	r5, [pc, #188]	; (8009be8 <pow+0x150>)
 8009b2c:	e7d9      	b.n	8009ae2 <pow+0x4a>
 8009b2e:	ec45 4b10 	vmov	d0, r4, r5
 8009b32:	f000 fe40 	bl	800a7b6 <finite>
 8009b36:	bbb8      	cbnz	r0, 8009ba8 <pow+0x110>
 8009b38:	ec49 8b10 	vmov	d0, r8, r9
 8009b3c:	f000 fe3b 	bl	800a7b6 <finite>
 8009b40:	b390      	cbz	r0, 8009ba8 <pow+0x110>
 8009b42:	ec47 6b10 	vmov	d0, r6, r7
 8009b46:	f000 fe36 	bl	800a7b6 <finite>
 8009b4a:	b368      	cbz	r0, 8009ba8 <pow+0x110>
 8009b4c:	4622      	mov	r2, r4
 8009b4e:	462b      	mov	r3, r5
 8009b50:	4620      	mov	r0, r4
 8009b52:	4629      	mov	r1, r5
 8009b54:	f7f7 f832 	bl	8000bbc <__aeabi_dcmpun>
 8009b58:	b160      	cbz	r0, 8009b74 <pow+0xdc>
 8009b5a:	f7fe ffc5 	bl	8008ae8 <__errno>
 8009b5e:	2321      	movs	r3, #33	; 0x21
 8009b60:	6003      	str	r3, [r0, #0]
 8009b62:	2200      	movs	r2, #0
 8009b64:	2300      	movs	r3, #0
 8009b66:	4610      	mov	r0, r2
 8009b68:	4619      	mov	r1, r3
 8009b6a:	f7f6 feb7 	bl	80008dc <__aeabi_ddiv>
 8009b6e:	4604      	mov	r4, r0
 8009b70:	460d      	mov	r5, r1
 8009b72:	e7b6      	b.n	8009ae2 <pow+0x4a>
 8009b74:	f7fe ffb8 	bl	8008ae8 <__errno>
 8009b78:	2322      	movs	r3, #34	; 0x22
 8009b7a:	6003      	str	r3, [r0, #0]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	2300      	movs	r3, #0
 8009b80:	4640      	mov	r0, r8
 8009b82:	4649      	mov	r1, r9
 8009b84:	f7f6 fff2 	bl	8000b6c <__aeabi_dcmplt>
 8009b88:	2400      	movs	r4, #0
 8009b8a:	b158      	cbz	r0, 8009ba4 <pow+0x10c>
 8009b8c:	ec47 6b10 	vmov	d0, r6, r7
 8009b90:	f000 fe26 	bl	800a7e0 <rint>
 8009b94:	4632      	mov	r2, r6
 8009b96:	ec51 0b10 	vmov	r0, r1, d0
 8009b9a:	463b      	mov	r3, r7
 8009b9c:	f7f6 ffdc 	bl	8000b58 <__aeabi_dcmpeq>
 8009ba0:	2800      	cmp	r0, #0
 8009ba2:	d0c2      	beq.n	8009b2a <pow+0x92>
 8009ba4:	4d11      	ldr	r5, [pc, #68]	; (8009bec <pow+0x154>)
 8009ba6:	e79c      	b.n	8009ae2 <pow+0x4a>
 8009ba8:	2200      	movs	r2, #0
 8009baa:	2300      	movs	r3, #0
 8009bac:	4620      	mov	r0, r4
 8009bae:	4629      	mov	r1, r5
 8009bb0:	f7f6 ffd2 	bl	8000b58 <__aeabi_dcmpeq>
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	d094      	beq.n	8009ae2 <pow+0x4a>
 8009bb8:	ec49 8b10 	vmov	d0, r8, r9
 8009bbc:	f000 fdfb 	bl	800a7b6 <finite>
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	d08e      	beq.n	8009ae2 <pow+0x4a>
 8009bc4:	ec47 6b10 	vmov	d0, r6, r7
 8009bc8:	f000 fdf5 	bl	800a7b6 <finite>
 8009bcc:	2800      	cmp	r0, #0
 8009bce:	d088      	beq.n	8009ae2 <pow+0x4a>
 8009bd0:	f7fe ff8a 	bl	8008ae8 <__errno>
 8009bd4:	2322      	movs	r3, #34	; 0x22
 8009bd6:	6003      	str	r3, [r0, #0]
 8009bd8:	2400      	movs	r4, #0
 8009bda:	2500      	movs	r5, #0
 8009bdc:	e781      	b.n	8009ae2 <pow+0x4a>
 8009bde:	4d04      	ldr	r5, [pc, #16]	; (8009bf0 <pow+0x158>)
 8009be0:	2400      	movs	r4, #0
 8009be2:	e77e      	b.n	8009ae2 <pow+0x4a>
 8009be4:	20000094 	.word	0x20000094
 8009be8:	fff00000 	.word	0xfff00000
 8009bec:	7ff00000 	.word	0x7ff00000
 8009bf0:	3ff00000 	.word	0x3ff00000
 8009bf4:	00000000 	.word	0x00000000

08009bf8 <__ieee754_pow>:
 8009bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bfc:	ed2d 8b06 	vpush	{d8-d10}
 8009c00:	b08d      	sub	sp, #52	; 0x34
 8009c02:	ed8d 1b02 	vstr	d1, [sp, #8]
 8009c06:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8009c0a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8009c0e:	ea56 0100 	orrs.w	r1, r6, r0
 8009c12:	ec53 2b10 	vmov	r2, r3, d0
 8009c16:	f000 84d1 	beq.w	800a5bc <__ieee754_pow+0x9c4>
 8009c1a:	497f      	ldr	r1, [pc, #508]	; (8009e18 <__ieee754_pow+0x220>)
 8009c1c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8009c20:	428c      	cmp	r4, r1
 8009c22:	ee10 8a10 	vmov	r8, s0
 8009c26:	4699      	mov	r9, r3
 8009c28:	dc09      	bgt.n	8009c3e <__ieee754_pow+0x46>
 8009c2a:	d103      	bne.n	8009c34 <__ieee754_pow+0x3c>
 8009c2c:	b97a      	cbnz	r2, 8009c4e <__ieee754_pow+0x56>
 8009c2e:	42a6      	cmp	r6, r4
 8009c30:	dd02      	ble.n	8009c38 <__ieee754_pow+0x40>
 8009c32:	e00c      	b.n	8009c4e <__ieee754_pow+0x56>
 8009c34:	428e      	cmp	r6, r1
 8009c36:	dc02      	bgt.n	8009c3e <__ieee754_pow+0x46>
 8009c38:	428e      	cmp	r6, r1
 8009c3a:	d110      	bne.n	8009c5e <__ieee754_pow+0x66>
 8009c3c:	b178      	cbz	r0, 8009c5e <__ieee754_pow+0x66>
 8009c3e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009c42:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009c46:	ea54 0308 	orrs.w	r3, r4, r8
 8009c4a:	f000 84b7 	beq.w	800a5bc <__ieee754_pow+0x9c4>
 8009c4e:	4873      	ldr	r0, [pc, #460]	; (8009e1c <__ieee754_pow+0x224>)
 8009c50:	b00d      	add	sp, #52	; 0x34
 8009c52:	ecbd 8b06 	vpop	{d8-d10}
 8009c56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c5a:	f000 bdb9 	b.w	800a7d0 <nan>
 8009c5e:	f1b9 0f00 	cmp.w	r9, #0
 8009c62:	da36      	bge.n	8009cd2 <__ieee754_pow+0xda>
 8009c64:	496e      	ldr	r1, [pc, #440]	; (8009e20 <__ieee754_pow+0x228>)
 8009c66:	428e      	cmp	r6, r1
 8009c68:	dc51      	bgt.n	8009d0e <__ieee754_pow+0x116>
 8009c6a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8009c6e:	428e      	cmp	r6, r1
 8009c70:	f340 84af 	ble.w	800a5d2 <__ieee754_pow+0x9da>
 8009c74:	1531      	asrs	r1, r6, #20
 8009c76:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009c7a:	2914      	cmp	r1, #20
 8009c7c:	dd0f      	ble.n	8009c9e <__ieee754_pow+0xa6>
 8009c7e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8009c82:	fa20 fc01 	lsr.w	ip, r0, r1
 8009c86:	fa0c f101 	lsl.w	r1, ip, r1
 8009c8a:	4281      	cmp	r1, r0
 8009c8c:	f040 84a1 	bne.w	800a5d2 <__ieee754_pow+0x9da>
 8009c90:	f00c 0c01 	and.w	ip, ip, #1
 8009c94:	f1cc 0102 	rsb	r1, ip, #2
 8009c98:	9100      	str	r1, [sp, #0]
 8009c9a:	b180      	cbz	r0, 8009cbe <__ieee754_pow+0xc6>
 8009c9c:	e059      	b.n	8009d52 <__ieee754_pow+0x15a>
 8009c9e:	2800      	cmp	r0, #0
 8009ca0:	d155      	bne.n	8009d4e <__ieee754_pow+0x156>
 8009ca2:	f1c1 0114 	rsb	r1, r1, #20
 8009ca6:	fa46 fc01 	asr.w	ip, r6, r1
 8009caa:	fa0c f101 	lsl.w	r1, ip, r1
 8009cae:	42b1      	cmp	r1, r6
 8009cb0:	f040 848c 	bne.w	800a5cc <__ieee754_pow+0x9d4>
 8009cb4:	f00c 0c01 	and.w	ip, ip, #1
 8009cb8:	f1cc 0102 	rsb	r1, ip, #2
 8009cbc:	9100      	str	r1, [sp, #0]
 8009cbe:	4959      	ldr	r1, [pc, #356]	; (8009e24 <__ieee754_pow+0x22c>)
 8009cc0:	428e      	cmp	r6, r1
 8009cc2:	d12d      	bne.n	8009d20 <__ieee754_pow+0x128>
 8009cc4:	2f00      	cmp	r7, #0
 8009cc6:	da79      	bge.n	8009dbc <__ieee754_pow+0x1c4>
 8009cc8:	4956      	ldr	r1, [pc, #344]	; (8009e24 <__ieee754_pow+0x22c>)
 8009cca:	2000      	movs	r0, #0
 8009ccc:	f7f6 fe06 	bl	80008dc <__aeabi_ddiv>
 8009cd0:	e016      	b.n	8009d00 <__ieee754_pow+0x108>
 8009cd2:	2100      	movs	r1, #0
 8009cd4:	9100      	str	r1, [sp, #0]
 8009cd6:	2800      	cmp	r0, #0
 8009cd8:	d13b      	bne.n	8009d52 <__ieee754_pow+0x15a>
 8009cda:	494f      	ldr	r1, [pc, #316]	; (8009e18 <__ieee754_pow+0x220>)
 8009cdc:	428e      	cmp	r6, r1
 8009cde:	d1ee      	bne.n	8009cbe <__ieee754_pow+0xc6>
 8009ce0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009ce4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009ce8:	ea53 0308 	orrs.w	r3, r3, r8
 8009cec:	f000 8466 	beq.w	800a5bc <__ieee754_pow+0x9c4>
 8009cf0:	4b4d      	ldr	r3, [pc, #308]	; (8009e28 <__ieee754_pow+0x230>)
 8009cf2:	429c      	cmp	r4, r3
 8009cf4:	dd0d      	ble.n	8009d12 <__ieee754_pow+0x11a>
 8009cf6:	2f00      	cmp	r7, #0
 8009cf8:	f280 8464 	bge.w	800a5c4 <__ieee754_pow+0x9cc>
 8009cfc:	2000      	movs	r0, #0
 8009cfe:	2100      	movs	r1, #0
 8009d00:	ec41 0b10 	vmov	d0, r0, r1
 8009d04:	b00d      	add	sp, #52	; 0x34
 8009d06:	ecbd 8b06 	vpop	{d8-d10}
 8009d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d0e:	2102      	movs	r1, #2
 8009d10:	e7e0      	b.n	8009cd4 <__ieee754_pow+0xdc>
 8009d12:	2f00      	cmp	r7, #0
 8009d14:	daf2      	bge.n	8009cfc <__ieee754_pow+0x104>
 8009d16:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8009d1a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009d1e:	e7ef      	b.n	8009d00 <__ieee754_pow+0x108>
 8009d20:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8009d24:	d104      	bne.n	8009d30 <__ieee754_pow+0x138>
 8009d26:	4610      	mov	r0, r2
 8009d28:	4619      	mov	r1, r3
 8009d2a:	f7f6 fcad 	bl	8000688 <__aeabi_dmul>
 8009d2e:	e7e7      	b.n	8009d00 <__ieee754_pow+0x108>
 8009d30:	493e      	ldr	r1, [pc, #248]	; (8009e2c <__ieee754_pow+0x234>)
 8009d32:	428f      	cmp	r7, r1
 8009d34:	d10d      	bne.n	8009d52 <__ieee754_pow+0x15a>
 8009d36:	f1b9 0f00 	cmp.w	r9, #0
 8009d3a:	db0a      	blt.n	8009d52 <__ieee754_pow+0x15a>
 8009d3c:	ec43 2b10 	vmov	d0, r2, r3
 8009d40:	b00d      	add	sp, #52	; 0x34
 8009d42:	ecbd 8b06 	vpop	{d8-d10}
 8009d46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d4a:	f000 bc77 	b.w	800a63c <__ieee754_sqrt>
 8009d4e:	2100      	movs	r1, #0
 8009d50:	9100      	str	r1, [sp, #0]
 8009d52:	ec43 2b10 	vmov	d0, r2, r3
 8009d56:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009d5a:	f000 fd23 	bl	800a7a4 <fabs>
 8009d5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d62:	ec51 0b10 	vmov	r0, r1, d0
 8009d66:	f1b8 0f00 	cmp.w	r8, #0
 8009d6a:	d12a      	bne.n	8009dc2 <__ieee754_pow+0x1ca>
 8009d6c:	b12c      	cbz	r4, 8009d7a <__ieee754_pow+0x182>
 8009d6e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8009e24 <__ieee754_pow+0x22c>
 8009d72:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8009d76:	45e6      	cmp	lr, ip
 8009d78:	d123      	bne.n	8009dc2 <__ieee754_pow+0x1ca>
 8009d7a:	2f00      	cmp	r7, #0
 8009d7c:	da05      	bge.n	8009d8a <__ieee754_pow+0x192>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	460b      	mov	r3, r1
 8009d82:	2000      	movs	r0, #0
 8009d84:	4927      	ldr	r1, [pc, #156]	; (8009e24 <__ieee754_pow+0x22c>)
 8009d86:	f7f6 fda9 	bl	80008dc <__aeabi_ddiv>
 8009d8a:	f1b9 0f00 	cmp.w	r9, #0
 8009d8e:	dab7      	bge.n	8009d00 <__ieee754_pow+0x108>
 8009d90:	9b00      	ldr	r3, [sp, #0]
 8009d92:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009d96:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009d9a:	4323      	orrs	r3, r4
 8009d9c:	d108      	bne.n	8009db0 <__ieee754_pow+0x1b8>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	460b      	mov	r3, r1
 8009da2:	4610      	mov	r0, r2
 8009da4:	4619      	mov	r1, r3
 8009da6:	f7f6 fab7 	bl	8000318 <__aeabi_dsub>
 8009daa:	4602      	mov	r2, r0
 8009dac:	460b      	mov	r3, r1
 8009dae:	e78d      	b.n	8009ccc <__ieee754_pow+0xd4>
 8009db0:	9b00      	ldr	r3, [sp, #0]
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d1a4      	bne.n	8009d00 <__ieee754_pow+0x108>
 8009db6:	4602      	mov	r2, r0
 8009db8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009dbc:	4610      	mov	r0, r2
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	e79e      	b.n	8009d00 <__ieee754_pow+0x108>
 8009dc2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8009dc6:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 8009dca:	950a      	str	r5, [sp, #40]	; 0x28
 8009dcc:	9d00      	ldr	r5, [sp, #0]
 8009dce:	46ac      	mov	ip, r5
 8009dd0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009dd2:	ea5c 0505 	orrs.w	r5, ip, r5
 8009dd6:	d0e4      	beq.n	8009da2 <__ieee754_pow+0x1aa>
 8009dd8:	4b15      	ldr	r3, [pc, #84]	; (8009e30 <__ieee754_pow+0x238>)
 8009dda:	429e      	cmp	r6, r3
 8009ddc:	f340 80fc 	ble.w	8009fd8 <__ieee754_pow+0x3e0>
 8009de0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009de4:	429e      	cmp	r6, r3
 8009de6:	4b10      	ldr	r3, [pc, #64]	; (8009e28 <__ieee754_pow+0x230>)
 8009de8:	dd07      	ble.n	8009dfa <__ieee754_pow+0x202>
 8009dea:	429c      	cmp	r4, r3
 8009dec:	dc0a      	bgt.n	8009e04 <__ieee754_pow+0x20c>
 8009dee:	2f00      	cmp	r7, #0
 8009df0:	da84      	bge.n	8009cfc <__ieee754_pow+0x104>
 8009df2:	a307      	add	r3, pc, #28	; (adr r3, 8009e10 <__ieee754_pow+0x218>)
 8009df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df8:	e795      	b.n	8009d26 <__ieee754_pow+0x12e>
 8009dfa:	429c      	cmp	r4, r3
 8009dfc:	dbf7      	blt.n	8009dee <__ieee754_pow+0x1f6>
 8009dfe:	4b09      	ldr	r3, [pc, #36]	; (8009e24 <__ieee754_pow+0x22c>)
 8009e00:	429c      	cmp	r4, r3
 8009e02:	dd17      	ble.n	8009e34 <__ieee754_pow+0x23c>
 8009e04:	2f00      	cmp	r7, #0
 8009e06:	dcf4      	bgt.n	8009df2 <__ieee754_pow+0x1fa>
 8009e08:	e778      	b.n	8009cfc <__ieee754_pow+0x104>
 8009e0a:	bf00      	nop
 8009e0c:	f3af 8000 	nop.w
 8009e10:	8800759c 	.word	0x8800759c
 8009e14:	7e37e43c 	.word	0x7e37e43c
 8009e18:	7ff00000 	.word	0x7ff00000
 8009e1c:	0800abfd 	.word	0x0800abfd
 8009e20:	433fffff 	.word	0x433fffff
 8009e24:	3ff00000 	.word	0x3ff00000
 8009e28:	3fefffff 	.word	0x3fefffff
 8009e2c:	3fe00000 	.word	0x3fe00000
 8009e30:	41e00000 	.word	0x41e00000
 8009e34:	4b64      	ldr	r3, [pc, #400]	; (8009fc8 <__ieee754_pow+0x3d0>)
 8009e36:	2200      	movs	r2, #0
 8009e38:	f7f6 fa6e 	bl	8000318 <__aeabi_dsub>
 8009e3c:	a356      	add	r3, pc, #344	; (adr r3, 8009f98 <__ieee754_pow+0x3a0>)
 8009e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e42:	4604      	mov	r4, r0
 8009e44:	460d      	mov	r5, r1
 8009e46:	f7f6 fc1f 	bl	8000688 <__aeabi_dmul>
 8009e4a:	a355      	add	r3, pc, #340	; (adr r3, 8009fa0 <__ieee754_pow+0x3a8>)
 8009e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e50:	4606      	mov	r6, r0
 8009e52:	460f      	mov	r7, r1
 8009e54:	4620      	mov	r0, r4
 8009e56:	4629      	mov	r1, r5
 8009e58:	f7f6 fc16 	bl	8000688 <__aeabi_dmul>
 8009e5c:	4b5b      	ldr	r3, [pc, #364]	; (8009fcc <__ieee754_pow+0x3d4>)
 8009e5e:	4682      	mov	sl, r0
 8009e60:	468b      	mov	fp, r1
 8009e62:	2200      	movs	r2, #0
 8009e64:	4620      	mov	r0, r4
 8009e66:	4629      	mov	r1, r5
 8009e68:	f7f6 fc0e 	bl	8000688 <__aeabi_dmul>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	460b      	mov	r3, r1
 8009e70:	a14d      	add	r1, pc, #308	; (adr r1, 8009fa8 <__ieee754_pow+0x3b0>)
 8009e72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e76:	f7f6 fa4f 	bl	8000318 <__aeabi_dsub>
 8009e7a:	4622      	mov	r2, r4
 8009e7c:	462b      	mov	r3, r5
 8009e7e:	f7f6 fc03 	bl	8000688 <__aeabi_dmul>
 8009e82:	4602      	mov	r2, r0
 8009e84:	460b      	mov	r3, r1
 8009e86:	2000      	movs	r0, #0
 8009e88:	4951      	ldr	r1, [pc, #324]	; (8009fd0 <__ieee754_pow+0x3d8>)
 8009e8a:	f7f6 fa45 	bl	8000318 <__aeabi_dsub>
 8009e8e:	4622      	mov	r2, r4
 8009e90:	4680      	mov	r8, r0
 8009e92:	4689      	mov	r9, r1
 8009e94:	462b      	mov	r3, r5
 8009e96:	4620      	mov	r0, r4
 8009e98:	4629      	mov	r1, r5
 8009e9a:	f7f6 fbf5 	bl	8000688 <__aeabi_dmul>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	4640      	mov	r0, r8
 8009ea4:	4649      	mov	r1, r9
 8009ea6:	f7f6 fbef 	bl	8000688 <__aeabi_dmul>
 8009eaa:	a341      	add	r3, pc, #260	; (adr r3, 8009fb0 <__ieee754_pow+0x3b8>)
 8009eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb0:	f7f6 fbea 	bl	8000688 <__aeabi_dmul>
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	4650      	mov	r0, sl
 8009eba:	4659      	mov	r1, fp
 8009ebc:	f7f6 fa2c 	bl	8000318 <__aeabi_dsub>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	4680      	mov	r8, r0
 8009ec6:	4689      	mov	r9, r1
 8009ec8:	4630      	mov	r0, r6
 8009eca:	4639      	mov	r1, r7
 8009ecc:	f7f6 fa26 	bl	800031c <__adddf3>
 8009ed0:	2400      	movs	r4, #0
 8009ed2:	4632      	mov	r2, r6
 8009ed4:	463b      	mov	r3, r7
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	460d      	mov	r5, r1
 8009eda:	f7f6 fa1d 	bl	8000318 <__aeabi_dsub>
 8009ede:	4602      	mov	r2, r0
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	4640      	mov	r0, r8
 8009ee4:	4649      	mov	r1, r9
 8009ee6:	f7f6 fa17 	bl	8000318 <__aeabi_dsub>
 8009eea:	9b00      	ldr	r3, [sp, #0]
 8009eec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009eee:	3b01      	subs	r3, #1
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	4682      	mov	sl, r0
 8009ef4:	468b      	mov	fp, r1
 8009ef6:	f040 81f1 	bne.w	800a2dc <__ieee754_pow+0x6e4>
 8009efa:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8009fb8 <__ieee754_pow+0x3c0>
 8009efe:	eeb0 8a47 	vmov.f32	s16, s14
 8009f02:	eef0 8a67 	vmov.f32	s17, s15
 8009f06:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009f0a:	2600      	movs	r6, #0
 8009f0c:	4632      	mov	r2, r6
 8009f0e:	463b      	mov	r3, r7
 8009f10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f14:	f7f6 fa00 	bl	8000318 <__aeabi_dsub>
 8009f18:	4622      	mov	r2, r4
 8009f1a:	462b      	mov	r3, r5
 8009f1c:	f7f6 fbb4 	bl	8000688 <__aeabi_dmul>
 8009f20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f24:	4680      	mov	r8, r0
 8009f26:	4689      	mov	r9, r1
 8009f28:	4650      	mov	r0, sl
 8009f2a:	4659      	mov	r1, fp
 8009f2c:	f7f6 fbac 	bl	8000688 <__aeabi_dmul>
 8009f30:	4602      	mov	r2, r0
 8009f32:	460b      	mov	r3, r1
 8009f34:	4640      	mov	r0, r8
 8009f36:	4649      	mov	r1, r9
 8009f38:	f7f6 f9f0 	bl	800031c <__adddf3>
 8009f3c:	4632      	mov	r2, r6
 8009f3e:	463b      	mov	r3, r7
 8009f40:	4680      	mov	r8, r0
 8009f42:	4689      	mov	r9, r1
 8009f44:	4620      	mov	r0, r4
 8009f46:	4629      	mov	r1, r5
 8009f48:	f7f6 fb9e 	bl	8000688 <__aeabi_dmul>
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	4604      	mov	r4, r0
 8009f50:	460d      	mov	r5, r1
 8009f52:	4602      	mov	r2, r0
 8009f54:	4649      	mov	r1, r9
 8009f56:	4640      	mov	r0, r8
 8009f58:	f7f6 f9e0 	bl	800031c <__adddf3>
 8009f5c:	4b1d      	ldr	r3, [pc, #116]	; (8009fd4 <__ieee754_pow+0x3dc>)
 8009f5e:	4299      	cmp	r1, r3
 8009f60:	ec45 4b19 	vmov	d9, r4, r5
 8009f64:	4606      	mov	r6, r0
 8009f66:	460f      	mov	r7, r1
 8009f68:	468b      	mov	fp, r1
 8009f6a:	f340 82fe 	ble.w	800a56a <__ieee754_pow+0x972>
 8009f6e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009f72:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009f76:	4303      	orrs	r3, r0
 8009f78:	f000 81f0 	beq.w	800a35c <__ieee754_pow+0x764>
 8009f7c:	a310      	add	r3, pc, #64	; (adr r3, 8009fc0 <__ieee754_pow+0x3c8>)
 8009f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f82:	ec51 0b18 	vmov	r0, r1, d8
 8009f86:	f7f6 fb7f 	bl	8000688 <__aeabi_dmul>
 8009f8a:	a30d      	add	r3, pc, #52	; (adr r3, 8009fc0 <__ieee754_pow+0x3c8>)
 8009f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f90:	e6cb      	b.n	8009d2a <__ieee754_pow+0x132>
 8009f92:	bf00      	nop
 8009f94:	f3af 8000 	nop.w
 8009f98:	60000000 	.word	0x60000000
 8009f9c:	3ff71547 	.word	0x3ff71547
 8009fa0:	f85ddf44 	.word	0xf85ddf44
 8009fa4:	3e54ae0b 	.word	0x3e54ae0b
 8009fa8:	55555555 	.word	0x55555555
 8009fac:	3fd55555 	.word	0x3fd55555
 8009fb0:	652b82fe 	.word	0x652b82fe
 8009fb4:	3ff71547 	.word	0x3ff71547
 8009fb8:	00000000 	.word	0x00000000
 8009fbc:	bff00000 	.word	0xbff00000
 8009fc0:	8800759c 	.word	0x8800759c
 8009fc4:	7e37e43c 	.word	0x7e37e43c
 8009fc8:	3ff00000 	.word	0x3ff00000
 8009fcc:	3fd00000 	.word	0x3fd00000
 8009fd0:	3fe00000 	.word	0x3fe00000
 8009fd4:	408fffff 	.word	0x408fffff
 8009fd8:	4bd7      	ldr	r3, [pc, #860]	; (800a338 <__ieee754_pow+0x740>)
 8009fda:	ea03 0309 	and.w	r3, r3, r9
 8009fde:	2200      	movs	r2, #0
 8009fe0:	b92b      	cbnz	r3, 8009fee <__ieee754_pow+0x3f6>
 8009fe2:	4bd6      	ldr	r3, [pc, #856]	; (800a33c <__ieee754_pow+0x744>)
 8009fe4:	f7f6 fb50 	bl	8000688 <__aeabi_dmul>
 8009fe8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009fec:	460c      	mov	r4, r1
 8009fee:	1523      	asrs	r3, r4, #20
 8009ff0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009ff4:	4413      	add	r3, r2
 8009ff6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ff8:	4bd1      	ldr	r3, [pc, #836]	; (800a340 <__ieee754_pow+0x748>)
 8009ffa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009ffe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a002:	429c      	cmp	r4, r3
 800a004:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a008:	dd08      	ble.n	800a01c <__ieee754_pow+0x424>
 800a00a:	4bce      	ldr	r3, [pc, #824]	; (800a344 <__ieee754_pow+0x74c>)
 800a00c:	429c      	cmp	r4, r3
 800a00e:	f340 8163 	ble.w	800a2d8 <__ieee754_pow+0x6e0>
 800a012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a014:	3301      	adds	r3, #1
 800a016:	9309      	str	r3, [sp, #36]	; 0x24
 800a018:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a01c:	2400      	movs	r4, #0
 800a01e:	00e3      	lsls	r3, r4, #3
 800a020:	930b      	str	r3, [sp, #44]	; 0x2c
 800a022:	4bc9      	ldr	r3, [pc, #804]	; (800a348 <__ieee754_pow+0x750>)
 800a024:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a028:	ed93 7b00 	vldr	d7, [r3]
 800a02c:	4629      	mov	r1, r5
 800a02e:	ec53 2b17 	vmov	r2, r3, d7
 800a032:	eeb0 8a47 	vmov.f32	s16, s14
 800a036:	eef0 8a67 	vmov.f32	s17, s15
 800a03a:	4682      	mov	sl, r0
 800a03c:	f7f6 f96c 	bl	8000318 <__aeabi_dsub>
 800a040:	4652      	mov	r2, sl
 800a042:	4606      	mov	r6, r0
 800a044:	460f      	mov	r7, r1
 800a046:	462b      	mov	r3, r5
 800a048:	ec51 0b18 	vmov	r0, r1, d8
 800a04c:	f7f6 f966 	bl	800031c <__adddf3>
 800a050:	4602      	mov	r2, r0
 800a052:	460b      	mov	r3, r1
 800a054:	2000      	movs	r0, #0
 800a056:	49bd      	ldr	r1, [pc, #756]	; (800a34c <__ieee754_pow+0x754>)
 800a058:	f7f6 fc40 	bl	80008dc <__aeabi_ddiv>
 800a05c:	ec41 0b19 	vmov	d9, r0, r1
 800a060:	4602      	mov	r2, r0
 800a062:	460b      	mov	r3, r1
 800a064:	4630      	mov	r0, r6
 800a066:	4639      	mov	r1, r7
 800a068:	f7f6 fb0e 	bl	8000688 <__aeabi_dmul>
 800a06c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a070:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a074:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a078:	2300      	movs	r3, #0
 800a07a:	9304      	str	r3, [sp, #16]
 800a07c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a080:	46ab      	mov	fp, r5
 800a082:	106d      	asrs	r5, r5, #1
 800a084:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a088:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a08c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a090:	2200      	movs	r2, #0
 800a092:	4640      	mov	r0, r8
 800a094:	4649      	mov	r1, r9
 800a096:	4614      	mov	r4, r2
 800a098:	461d      	mov	r5, r3
 800a09a:	f7f6 faf5 	bl	8000688 <__aeabi_dmul>
 800a09e:	4602      	mov	r2, r0
 800a0a0:	460b      	mov	r3, r1
 800a0a2:	4630      	mov	r0, r6
 800a0a4:	4639      	mov	r1, r7
 800a0a6:	f7f6 f937 	bl	8000318 <__aeabi_dsub>
 800a0aa:	ec53 2b18 	vmov	r2, r3, d8
 800a0ae:	4606      	mov	r6, r0
 800a0b0:	460f      	mov	r7, r1
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	4629      	mov	r1, r5
 800a0b6:	f7f6 f92f 	bl	8000318 <__aeabi_dsub>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	460b      	mov	r3, r1
 800a0be:	4650      	mov	r0, sl
 800a0c0:	4659      	mov	r1, fp
 800a0c2:	f7f6 f929 	bl	8000318 <__aeabi_dsub>
 800a0c6:	4642      	mov	r2, r8
 800a0c8:	464b      	mov	r3, r9
 800a0ca:	f7f6 fadd 	bl	8000688 <__aeabi_dmul>
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	4630      	mov	r0, r6
 800a0d4:	4639      	mov	r1, r7
 800a0d6:	f7f6 f91f 	bl	8000318 <__aeabi_dsub>
 800a0da:	ec53 2b19 	vmov	r2, r3, d9
 800a0de:	f7f6 fad3 	bl	8000688 <__aeabi_dmul>
 800a0e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a0e6:	ec41 0b18 	vmov	d8, r0, r1
 800a0ea:	4610      	mov	r0, r2
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	f7f6 facb 	bl	8000688 <__aeabi_dmul>
 800a0f2:	a37d      	add	r3, pc, #500	; (adr r3, 800a2e8 <__ieee754_pow+0x6f0>)
 800a0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f8:	4604      	mov	r4, r0
 800a0fa:	460d      	mov	r5, r1
 800a0fc:	f7f6 fac4 	bl	8000688 <__aeabi_dmul>
 800a100:	a37b      	add	r3, pc, #492	; (adr r3, 800a2f0 <__ieee754_pow+0x6f8>)
 800a102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a106:	f7f6 f909 	bl	800031c <__adddf3>
 800a10a:	4622      	mov	r2, r4
 800a10c:	462b      	mov	r3, r5
 800a10e:	f7f6 fabb 	bl	8000688 <__aeabi_dmul>
 800a112:	a379      	add	r3, pc, #484	; (adr r3, 800a2f8 <__ieee754_pow+0x700>)
 800a114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a118:	f7f6 f900 	bl	800031c <__adddf3>
 800a11c:	4622      	mov	r2, r4
 800a11e:	462b      	mov	r3, r5
 800a120:	f7f6 fab2 	bl	8000688 <__aeabi_dmul>
 800a124:	a376      	add	r3, pc, #472	; (adr r3, 800a300 <__ieee754_pow+0x708>)
 800a126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a12a:	f7f6 f8f7 	bl	800031c <__adddf3>
 800a12e:	4622      	mov	r2, r4
 800a130:	462b      	mov	r3, r5
 800a132:	f7f6 faa9 	bl	8000688 <__aeabi_dmul>
 800a136:	a374      	add	r3, pc, #464	; (adr r3, 800a308 <__ieee754_pow+0x710>)
 800a138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13c:	f7f6 f8ee 	bl	800031c <__adddf3>
 800a140:	4622      	mov	r2, r4
 800a142:	462b      	mov	r3, r5
 800a144:	f7f6 faa0 	bl	8000688 <__aeabi_dmul>
 800a148:	a371      	add	r3, pc, #452	; (adr r3, 800a310 <__ieee754_pow+0x718>)
 800a14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14e:	f7f6 f8e5 	bl	800031c <__adddf3>
 800a152:	4622      	mov	r2, r4
 800a154:	4606      	mov	r6, r0
 800a156:	460f      	mov	r7, r1
 800a158:	462b      	mov	r3, r5
 800a15a:	4620      	mov	r0, r4
 800a15c:	4629      	mov	r1, r5
 800a15e:	f7f6 fa93 	bl	8000688 <__aeabi_dmul>
 800a162:	4602      	mov	r2, r0
 800a164:	460b      	mov	r3, r1
 800a166:	4630      	mov	r0, r6
 800a168:	4639      	mov	r1, r7
 800a16a:	f7f6 fa8d 	bl	8000688 <__aeabi_dmul>
 800a16e:	4642      	mov	r2, r8
 800a170:	4604      	mov	r4, r0
 800a172:	460d      	mov	r5, r1
 800a174:	464b      	mov	r3, r9
 800a176:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a17a:	f7f6 f8cf 	bl	800031c <__adddf3>
 800a17e:	ec53 2b18 	vmov	r2, r3, d8
 800a182:	f7f6 fa81 	bl	8000688 <__aeabi_dmul>
 800a186:	4622      	mov	r2, r4
 800a188:	462b      	mov	r3, r5
 800a18a:	f7f6 f8c7 	bl	800031c <__adddf3>
 800a18e:	4642      	mov	r2, r8
 800a190:	4682      	mov	sl, r0
 800a192:	468b      	mov	fp, r1
 800a194:	464b      	mov	r3, r9
 800a196:	4640      	mov	r0, r8
 800a198:	4649      	mov	r1, r9
 800a19a:	f7f6 fa75 	bl	8000688 <__aeabi_dmul>
 800a19e:	4b6c      	ldr	r3, [pc, #432]	; (800a350 <__ieee754_pow+0x758>)
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	4606      	mov	r6, r0
 800a1a4:	460f      	mov	r7, r1
 800a1a6:	f7f6 f8b9 	bl	800031c <__adddf3>
 800a1aa:	4652      	mov	r2, sl
 800a1ac:	465b      	mov	r3, fp
 800a1ae:	f7f6 f8b5 	bl	800031c <__adddf3>
 800a1b2:	9c04      	ldr	r4, [sp, #16]
 800a1b4:	460d      	mov	r5, r1
 800a1b6:	4622      	mov	r2, r4
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	4640      	mov	r0, r8
 800a1bc:	4649      	mov	r1, r9
 800a1be:	f7f6 fa63 	bl	8000688 <__aeabi_dmul>
 800a1c2:	4b63      	ldr	r3, [pc, #396]	; (800a350 <__ieee754_pow+0x758>)
 800a1c4:	4680      	mov	r8, r0
 800a1c6:	4689      	mov	r9, r1
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	4620      	mov	r0, r4
 800a1cc:	4629      	mov	r1, r5
 800a1ce:	f7f6 f8a3 	bl	8000318 <__aeabi_dsub>
 800a1d2:	4632      	mov	r2, r6
 800a1d4:	463b      	mov	r3, r7
 800a1d6:	f7f6 f89f 	bl	8000318 <__aeabi_dsub>
 800a1da:	4602      	mov	r2, r0
 800a1dc:	460b      	mov	r3, r1
 800a1de:	4650      	mov	r0, sl
 800a1e0:	4659      	mov	r1, fp
 800a1e2:	f7f6 f899 	bl	8000318 <__aeabi_dsub>
 800a1e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a1ea:	f7f6 fa4d 	bl	8000688 <__aeabi_dmul>
 800a1ee:	4622      	mov	r2, r4
 800a1f0:	4606      	mov	r6, r0
 800a1f2:	460f      	mov	r7, r1
 800a1f4:	462b      	mov	r3, r5
 800a1f6:	ec51 0b18 	vmov	r0, r1, d8
 800a1fa:	f7f6 fa45 	bl	8000688 <__aeabi_dmul>
 800a1fe:	4602      	mov	r2, r0
 800a200:	460b      	mov	r3, r1
 800a202:	4630      	mov	r0, r6
 800a204:	4639      	mov	r1, r7
 800a206:	f7f6 f889 	bl	800031c <__adddf3>
 800a20a:	4606      	mov	r6, r0
 800a20c:	460f      	mov	r7, r1
 800a20e:	4602      	mov	r2, r0
 800a210:	460b      	mov	r3, r1
 800a212:	4640      	mov	r0, r8
 800a214:	4649      	mov	r1, r9
 800a216:	f7f6 f881 	bl	800031c <__adddf3>
 800a21a:	9c04      	ldr	r4, [sp, #16]
 800a21c:	a33e      	add	r3, pc, #248	; (adr r3, 800a318 <__ieee754_pow+0x720>)
 800a21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a222:	4620      	mov	r0, r4
 800a224:	460d      	mov	r5, r1
 800a226:	f7f6 fa2f 	bl	8000688 <__aeabi_dmul>
 800a22a:	4642      	mov	r2, r8
 800a22c:	ec41 0b18 	vmov	d8, r0, r1
 800a230:	464b      	mov	r3, r9
 800a232:	4620      	mov	r0, r4
 800a234:	4629      	mov	r1, r5
 800a236:	f7f6 f86f 	bl	8000318 <__aeabi_dsub>
 800a23a:	4602      	mov	r2, r0
 800a23c:	460b      	mov	r3, r1
 800a23e:	4630      	mov	r0, r6
 800a240:	4639      	mov	r1, r7
 800a242:	f7f6 f869 	bl	8000318 <__aeabi_dsub>
 800a246:	a336      	add	r3, pc, #216	; (adr r3, 800a320 <__ieee754_pow+0x728>)
 800a248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24c:	f7f6 fa1c 	bl	8000688 <__aeabi_dmul>
 800a250:	a335      	add	r3, pc, #212	; (adr r3, 800a328 <__ieee754_pow+0x730>)
 800a252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a256:	4606      	mov	r6, r0
 800a258:	460f      	mov	r7, r1
 800a25a:	4620      	mov	r0, r4
 800a25c:	4629      	mov	r1, r5
 800a25e:	f7f6 fa13 	bl	8000688 <__aeabi_dmul>
 800a262:	4602      	mov	r2, r0
 800a264:	460b      	mov	r3, r1
 800a266:	4630      	mov	r0, r6
 800a268:	4639      	mov	r1, r7
 800a26a:	f7f6 f857 	bl	800031c <__adddf3>
 800a26e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a270:	4b38      	ldr	r3, [pc, #224]	; (800a354 <__ieee754_pow+0x75c>)
 800a272:	4413      	add	r3, r2
 800a274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a278:	f7f6 f850 	bl	800031c <__adddf3>
 800a27c:	4682      	mov	sl, r0
 800a27e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a280:	468b      	mov	fp, r1
 800a282:	f7f6 f997 	bl	80005b4 <__aeabi_i2d>
 800a286:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a288:	4b33      	ldr	r3, [pc, #204]	; (800a358 <__ieee754_pow+0x760>)
 800a28a:	4413      	add	r3, r2
 800a28c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a290:	4606      	mov	r6, r0
 800a292:	460f      	mov	r7, r1
 800a294:	4652      	mov	r2, sl
 800a296:	465b      	mov	r3, fp
 800a298:	ec51 0b18 	vmov	r0, r1, d8
 800a29c:	f7f6 f83e 	bl	800031c <__adddf3>
 800a2a0:	4642      	mov	r2, r8
 800a2a2:	464b      	mov	r3, r9
 800a2a4:	f7f6 f83a 	bl	800031c <__adddf3>
 800a2a8:	4632      	mov	r2, r6
 800a2aa:	463b      	mov	r3, r7
 800a2ac:	f7f6 f836 	bl	800031c <__adddf3>
 800a2b0:	9c04      	ldr	r4, [sp, #16]
 800a2b2:	4632      	mov	r2, r6
 800a2b4:	463b      	mov	r3, r7
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	460d      	mov	r5, r1
 800a2ba:	f7f6 f82d 	bl	8000318 <__aeabi_dsub>
 800a2be:	4642      	mov	r2, r8
 800a2c0:	464b      	mov	r3, r9
 800a2c2:	f7f6 f829 	bl	8000318 <__aeabi_dsub>
 800a2c6:	ec53 2b18 	vmov	r2, r3, d8
 800a2ca:	f7f6 f825 	bl	8000318 <__aeabi_dsub>
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	4650      	mov	r0, sl
 800a2d4:	4659      	mov	r1, fp
 800a2d6:	e606      	b.n	8009ee6 <__ieee754_pow+0x2ee>
 800a2d8:	2401      	movs	r4, #1
 800a2da:	e6a0      	b.n	800a01e <__ieee754_pow+0x426>
 800a2dc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800a330 <__ieee754_pow+0x738>
 800a2e0:	e60d      	b.n	8009efe <__ieee754_pow+0x306>
 800a2e2:	bf00      	nop
 800a2e4:	f3af 8000 	nop.w
 800a2e8:	4a454eef 	.word	0x4a454eef
 800a2ec:	3fca7e28 	.word	0x3fca7e28
 800a2f0:	93c9db65 	.word	0x93c9db65
 800a2f4:	3fcd864a 	.word	0x3fcd864a
 800a2f8:	a91d4101 	.word	0xa91d4101
 800a2fc:	3fd17460 	.word	0x3fd17460
 800a300:	518f264d 	.word	0x518f264d
 800a304:	3fd55555 	.word	0x3fd55555
 800a308:	db6fabff 	.word	0xdb6fabff
 800a30c:	3fdb6db6 	.word	0x3fdb6db6
 800a310:	33333303 	.word	0x33333303
 800a314:	3fe33333 	.word	0x3fe33333
 800a318:	e0000000 	.word	0xe0000000
 800a31c:	3feec709 	.word	0x3feec709
 800a320:	dc3a03fd 	.word	0xdc3a03fd
 800a324:	3feec709 	.word	0x3feec709
 800a328:	145b01f5 	.word	0x145b01f5
 800a32c:	be3e2fe0 	.word	0xbe3e2fe0
 800a330:	00000000 	.word	0x00000000
 800a334:	3ff00000 	.word	0x3ff00000
 800a338:	7ff00000 	.word	0x7ff00000
 800a33c:	43400000 	.word	0x43400000
 800a340:	0003988e 	.word	0x0003988e
 800a344:	000bb679 	.word	0x000bb679
 800a348:	0800ac98 	.word	0x0800ac98
 800a34c:	3ff00000 	.word	0x3ff00000
 800a350:	40080000 	.word	0x40080000
 800a354:	0800acb8 	.word	0x0800acb8
 800a358:	0800aca8 	.word	0x0800aca8
 800a35c:	a3b5      	add	r3, pc, #724	; (adr r3, 800a634 <__ieee754_pow+0xa3c>)
 800a35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a362:	4640      	mov	r0, r8
 800a364:	4649      	mov	r1, r9
 800a366:	f7f5 ffd9 	bl	800031c <__adddf3>
 800a36a:	4622      	mov	r2, r4
 800a36c:	ec41 0b1a 	vmov	d10, r0, r1
 800a370:	462b      	mov	r3, r5
 800a372:	4630      	mov	r0, r6
 800a374:	4639      	mov	r1, r7
 800a376:	f7f5 ffcf 	bl	8000318 <__aeabi_dsub>
 800a37a:	4602      	mov	r2, r0
 800a37c:	460b      	mov	r3, r1
 800a37e:	ec51 0b1a 	vmov	r0, r1, d10
 800a382:	f7f6 fc11 	bl	8000ba8 <__aeabi_dcmpgt>
 800a386:	2800      	cmp	r0, #0
 800a388:	f47f adf8 	bne.w	8009f7c <__ieee754_pow+0x384>
 800a38c:	4aa4      	ldr	r2, [pc, #656]	; (800a620 <__ieee754_pow+0xa28>)
 800a38e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a392:	4293      	cmp	r3, r2
 800a394:	f340 810b 	ble.w	800a5ae <__ieee754_pow+0x9b6>
 800a398:	151b      	asrs	r3, r3, #20
 800a39a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a39e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a3a2:	fa4a f303 	asr.w	r3, sl, r3
 800a3a6:	445b      	add	r3, fp
 800a3a8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a3ac:	4e9d      	ldr	r6, [pc, #628]	; (800a624 <__ieee754_pow+0xa2c>)
 800a3ae:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a3b2:	4116      	asrs	r6, r2
 800a3b4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a3b8:	2000      	movs	r0, #0
 800a3ba:	ea23 0106 	bic.w	r1, r3, r6
 800a3be:	f1c2 0214 	rsb	r2, r2, #20
 800a3c2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a3c6:	fa4a fa02 	asr.w	sl, sl, r2
 800a3ca:	f1bb 0f00 	cmp.w	fp, #0
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	460b      	mov	r3, r1
 800a3d2:	4620      	mov	r0, r4
 800a3d4:	4629      	mov	r1, r5
 800a3d6:	bfb8      	it	lt
 800a3d8:	f1ca 0a00 	rsblt	sl, sl, #0
 800a3dc:	f7f5 ff9c 	bl	8000318 <__aeabi_dsub>
 800a3e0:	ec41 0b19 	vmov	d9, r0, r1
 800a3e4:	4642      	mov	r2, r8
 800a3e6:	464b      	mov	r3, r9
 800a3e8:	ec51 0b19 	vmov	r0, r1, d9
 800a3ec:	f7f5 ff96 	bl	800031c <__adddf3>
 800a3f0:	2400      	movs	r4, #0
 800a3f2:	a379      	add	r3, pc, #484	; (adr r3, 800a5d8 <__ieee754_pow+0x9e0>)
 800a3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	460d      	mov	r5, r1
 800a3fc:	f7f6 f944 	bl	8000688 <__aeabi_dmul>
 800a400:	ec53 2b19 	vmov	r2, r3, d9
 800a404:	4606      	mov	r6, r0
 800a406:	460f      	mov	r7, r1
 800a408:	4620      	mov	r0, r4
 800a40a:	4629      	mov	r1, r5
 800a40c:	f7f5 ff84 	bl	8000318 <__aeabi_dsub>
 800a410:	4602      	mov	r2, r0
 800a412:	460b      	mov	r3, r1
 800a414:	4640      	mov	r0, r8
 800a416:	4649      	mov	r1, r9
 800a418:	f7f5 ff7e 	bl	8000318 <__aeabi_dsub>
 800a41c:	a370      	add	r3, pc, #448	; (adr r3, 800a5e0 <__ieee754_pow+0x9e8>)
 800a41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a422:	f7f6 f931 	bl	8000688 <__aeabi_dmul>
 800a426:	a370      	add	r3, pc, #448	; (adr r3, 800a5e8 <__ieee754_pow+0x9f0>)
 800a428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42c:	4680      	mov	r8, r0
 800a42e:	4689      	mov	r9, r1
 800a430:	4620      	mov	r0, r4
 800a432:	4629      	mov	r1, r5
 800a434:	f7f6 f928 	bl	8000688 <__aeabi_dmul>
 800a438:	4602      	mov	r2, r0
 800a43a:	460b      	mov	r3, r1
 800a43c:	4640      	mov	r0, r8
 800a43e:	4649      	mov	r1, r9
 800a440:	f7f5 ff6c 	bl	800031c <__adddf3>
 800a444:	4604      	mov	r4, r0
 800a446:	460d      	mov	r5, r1
 800a448:	4602      	mov	r2, r0
 800a44a:	460b      	mov	r3, r1
 800a44c:	4630      	mov	r0, r6
 800a44e:	4639      	mov	r1, r7
 800a450:	f7f5 ff64 	bl	800031c <__adddf3>
 800a454:	4632      	mov	r2, r6
 800a456:	463b      	mov	r3, r7
 800a458:	4680      	mov	r8, r0
 800a45a:	4689      	mov	r9, r1
 800a45c:	f7f5 ff5c 	bl	8000318 <__aeabi_dsub>
 800a460:	4602      	mov	r2, r0
 800a462:	460b      	mov	r3, r1
 800a464:	4620      	mov	r0, r4
 800a466:	4629      	mov	r1, r5
 800a468:	f7f5 ff56 	bl	8000318 <__aeabi_dsub>
 800a46c:	4642      	mov	r2, r8
 800a46e:	4606      	mov	r6, r0
 800a470:	460f      	mov	r7, r1
 800a472:	464b      	mov	r3, r9
 800a474:	4640      	mov	r0, r8
 800a476:	4649      	mov	r1, r9
 800a478:	f7f6 f906 	bl	8000688 <__aeabi_dmul>
 800a47c:	a35c      	add	r3, pc, #368	; (adr r3, 800a5f0 <__ieee754_pow+0x9f8>)
 800a47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a482:	4604      	mov	r4, r0
 800a484:	460d      	mov	r5, r1
 800a486:	f7f6 f8ff 	bl	8000688 <__aeabi_dmul>
 800a48a:	a35b      	add	r3, pc, #364	; (adr r3, 800a5f8 <__ieee754_pow+0xa00>)
 800a48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a490:	f7f5 ff42 	bl	8000318 <__aeabi_dsub>
 800a494:	4622      	mov	r2, r4
 800a496:	462b      	mov	r3, r5
 800a498:	f7f6 f8f6 	bl	8000688 <__aeabi_dmul>
 800a49c:	a358      	add	r3, pc, #352	; (adr r3, 800a600 <__ieee754_pow+0xa08>)
 800a49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a2:	f7f5 ff3b 	bl	800031c <__adddf3>
 800a4a6:	4622      	mov	r2, r4
 800a4a8:	462b      	mov	r3, r5
 800a4aa:	f7f6 f8ed 	bl	8000688 <__aeabi_dmul>
 800a4ae:	a356      	add	r3, pc, #344	; (adr r3, 800a608 <__ieee754_pow+0xa10>)
 800a4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b4:	f7f5 ff30 	bl	8000318 <__aeabi_dsub>
 800a4b8:	4622      	mov	r2, r4
 800a4ba:	462b      	mov	r3, r5
 800a4bc:	f7f6 f8e4 	bl	8000688 <__aeabi_dmul>
 800a4c0:	a353      	add	r3, pc, #332	; (adr r3, 800a610 <__ieee754_pow+0xa18>)
 800a4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c6:	f7f5 ff29 	bl	800031c <__adddf3>
 800a4ca:	4622      	mov	r2, r4
 800a4cc:	462b      	mov	r3, r5
 800a4ce:	f7f6 f8db 	bl	8000688 <__aeabi_dmul>
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	460b      	mov	r3, r1
 800a4d6:	4640      	mov	r0, r8
 800a4d8:	4649      	mov	r1, r9
 800a4da:	f7f5 ff1d 	bl	8000318 <__aeabi_dsub>
 800a4de:	4604      	mov	r4, r0
 800a4e0:	460d      	mov	r5, r1
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	4640      	mov	r0, r8
 800a4e8:	4649      	mov	r1, r9
 800a4ea:	f7f6 f8cd 	bl	8000688 <__aeabi_dmul>
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	ec41 0b19 	vmov	d9, r0, r1
 800a4f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	4629      	mov	r1, r5
 800a4fc:	f7f5 ff0c 	bl	8000318 <__aeabi_dsub>
 800a500:	4602      	mov	r2, r0
 800a502:	460b      	mov	r3, r1
 800a504:	ec51 0b19 	vmov	r0, r1, d9
 800a508:	f7f6 f9e8 	bl	80008dc <__aeabi_ddiv>
 800a50c:	4632      	mov	r2, r6
 800a50e:	4604      	mov	r4, r0
 800a510:	460d      	mov	r5, r1
 800a512:	463b      	mov	r3, r7
 800a514:	4640      	mov	r0, r8
 800a516:	4649      	mov	r1, r9
 800a518:	f7f6 f8b6 	bl	8000688 <__aeabi_dmul>
 800a51c:	4632      	mov	r2, r6
 800a51e:	463b      	mov	r3, r7
 800a520:	f7f5 fefc 	bl	800031c <__adddf3>
 800a524:	4602      	mov	r2, r0
 800a526:	460b      	mov	r3, r1
 800a528:	4620      	mov	r0, r4
 800a52a:	4629      	mov	r1, r5
 800a52c:	f7f5 fef4 	bl	8000318 <__aeabi_dsub>
 800a530:	4642      	mov	r2, r8
 800a532:	464b      	mov	r3, r9
 800a534:	f7f5 fef0 	bl	8000318 <__aeabi_dsub>
 800a538:	460b      	mov	r3, r1
 800a53a:	4602      	mov	r2, r0
 800a53c:	493a      	ldr	r1, [pc, #232]	; (800a628 <__ieee754_pow+0xa30>)
 800a53e:	2000      	movs	r0, #0
 800a540:	f7f5 feea 	bl	8000318 <__aeabi_dsub>
 800a544:	e9cd 0100 	strd	r0, r1, [sp]
 800a548:	9b01      	ldr	r3, [sp, #4]
 800a54a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a54e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a552:	da2f      	bge.n	800a5b4 <__ieee754_pow+0x9bc>
 800a554:	4650      	mov	r0, sl
 800a556:	ed9d 0b00 	vldr	d0, [sp]
 800a55a:	f000 f9cd 	bl	800a8f8 <scalbn>
 800a55e:	ec51 0b10 	vmov	r0, r1, d0
 800a562:	ec53 2b18 	vmov	r2, r3, d8
 800a566:	f7ff bbe0 	b.w	8009d2a <__ieee754_pow+0x132>
 800a56a:	4b30      	ldr	r3, [pc, #192]	; (800a62c <__ieee754_pow+0xa34>)
 800a56c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a570:	429e      	cmp	r6, r3
 800a572:	f77f af0b 	ble.w	800a38c <__ieee754_pow+0x794>
 800a576:	4b2e      	ldr	r3, [pc, #184]	; (800a630 <__ieee754_pow+0xa38>)
 800a578:	440b      	add	r3, r1
 800a57a:	4303      	orrs	r3, r0
 800a57c:	d00b      	beq.n	800a596 <__ieee754_pow+0x99e>
 800a57e:	a326      	add	r3, pc, #152	; (adr r3, 800a618 <__ieee754_pow+0xa20>)
 800a580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a584:	ec51 0b18 	vmov	r0, r1, d8
 800a588:	f7f6 f87e 	bl	8000688 <__aeabi_dmul>
 800a58c:	a322      	add	r3, pc, #136	; (adr r3, 800a618 <__ieee754_pow+0xa20>)
 800a58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a592:	f7ff bbca 	b.w	8009d2a <__ieee754_pow+0x132>
 800a596:	4622      	mov	r2, r4
 800a598:	462b      	mov	r3, r5
 800a59a:	f7f5 febd 	bl	8000318 <__aeabi_dsub>
 800a59e:	4642      	mov	r2, r8
 800a5a0:	464b      	mov	r3, r9
 800a5a2:	f7f6 faf7 	bl	8000b94 <__aeabi_dcmpge>
 800a5a6:	2800      	cmp	r0, #0
 800a5a8:	f43f aef0 	beq.w	800a38c <__ieee754_pow+0x794>
 800a5ac:	e7e7      	b.n	800a57e <__ieee754_pow+0x986>
 800a5ae:	f04f 0a00 	mov.w	sl, #0
 800a5b2:	e717      	b.n	800a3e4 <__ieee754_pow+0x7ec>
 800a5b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	e7d2      	b.n	800a562 <__ieee754_pow+0x96a>
 800a5bc:	491a      	ldr	r1, [pc, #104]	; (800a628 <__ieee754_pow+0xa30>)
 800a5be:	2000      	movs	r0, #0
 800a5c0:	f7ff bb9e 	b.w	8009d00 <__ieee754_pow+0x108>
 800a5c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5c8:	f7ff bb9a 	b.w	8009d00 <__ieee754_pow+0x108>
 800a5cc:	9000      	str	r0, [sp, #0]
 800a5ce:	f7ff bb76 	b.w	8009cbe <__ieee754_pow+0xc6>
 800a5d2:	2100      	movs	r1, #0
 800a5d4:	f7ff bb60 	b.w	8009c98 <__ieee754_pow+0xa0>
 800a5d8:	00000000 	.word	0x00000000
 800a5dc:	3fe62e43 	.word	0x3fe62e43
 800a5e0:	fefa39ef 	.word	0xfefa39ef
 800a5e4:	3fe62e42 	.word	0x3fe62e42
 800a5e8:	0ca86c39 	.word	0x0ca86c39
 800a5ec:	be205c61 	.word	0xbe205c61
 800a5f0:	72bea4d0 	.word	0x72bea4d0
 800a5f4:	3e663769 	.word	0x3e663769
 800a5f8:	c5d26bf1 	.word	0xc5d26bf1
 800a5fc:	3ebbbd41 	.word	0x3ebbbd41
 800a600:	af25de2c 	.word	0xaf25de2c
 800a604:	3f11566a 	.word	0x3f11566a
 800a608:	16bebd93 	.word	0x16bebd93
 800a60c:	3f66c16c 	.word	0x3f66c16c
 800a610:	5555553e 	.word	0x5555553e
 800a614:	3fc55555 	.word	0x3fc55555
 800a618:	c2f8f359 	.word	0xc2f8f359
 800a61c:	01a56e1f 	.word	0x01a56e1f
 800a620:	3fe00000 	.word	0x3fe00000
 800a624:	000fffff 	.word	0x000fffff
 800a628:	3ff00000 	.word	0x3ff00000
 800a62c:	4090cbff 	.word	0x4090cbff
 800a630:	3f6f3400 	.word	0x3f6f3400
 800a634:	652b82fe 	.word	0x652b82fe
 800a638:	3c971547 	.word	0x3c971547

0800a63c <__ieee754_sqrt>:
 800a63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a640:	ec55 4b10 	vmov	r4, r5, d0
 800a644:	4e56      	ldr	r6, [pc, #344]	; (800a7a0 <__ieee754_sqrt+0x164>)
 800a646:	43ae      	bics	r6, r5
 800a648:	ee10 0a10 	vmov	r0, s0
 800a64c:	ee10 3a10 	vmov	r3, s0
 800a650:	4629      	mov	r1, r5
 800a652:	462a      	mov	r2, r5
 800a654:	d110      	bne.n	800a678 <__ieee754_sqrt+0x3c>
 800a656:	ee10 2a10 	vmov	r2, s0
 800a65a:	462b      	mov	r3, r5
 800a65c:	f7f6 f814 	bl	8000688 <__aeabi_dmul>
 800a660:	4602      	mov	r2, r0
 800a662:	460b      	mov	r3, r1
 800a664:	4620      	mov	r0, r4
 800a666:	4629      	mov	r1, r5
 800a668:	f7f5 fe58 	bl	800031c <__adddf3>
 800a66c:	4604      	mov	r4, r0
 800a66e:	460d      	mov	r5, r1
 800a670:	ec45 4b10 	vmov	d0, r4, r5
 800a674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a678:	2d00      	cmp	r5, #0
 800a67a:	dc10      	bgt.n	800a69e <__ieee754_sqrt+0x62>
 800a67c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a680:	4330      	orrs	r0, r6
 800a682:	d0f5      	beq.n	800a670 <__ieee754_sqrt+0x34>
 800a684:	b15d      	cbz	r5, 800a69e <__ieee754_sqrt+0x62>
 800a686:	ee10 2a10 	vmov	r2, s0
 800a68a:	462b      	mov	r3, r5
 800a68c:	ee10 0a10 	vmov	r0, s0
 800a690:	f7f5 fe42 	bl	8000318 <__aeabi_dsub>
 800a694:	4602      	mov	r2, r0
 800a696:	460b      	mov	r3, r1
 800a698:	f7f6 f920 	bl	80008dc <__aeabi_ddiv>
 800a69c:	e7e6      	b.n	800a66c <__ieee754_sqrt+0x30>
 800a69e:	1509      	asrs	r1, r1, #20
 800a6a0:	d076      	beq.n	800a790 <__ieee754_sqrt+0x154>
 800a6a2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a6a6:	07ce      	lsls	r6, r1, #31
 800a6a8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800a6ac:	bf5e      	ittt	pl
 800a6ae:	0fda      	lsrpl	r2, r3, #31
 800a6b0:	005b      	lslpl	r3, r3, #1
 800a6b2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800a6b6:	0fda      	lsrs	r2, r3, #31
 800a6b8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800a6bc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800a6c0:	2000      	movs	r0, #0
 800a6c2:	106d      	asrs	r5, r5, #1
 800a6c4:	005b      	lsls	r3, r3, #1
 800a6c6:	f04f 0e16 	mov.w	lr, #22
 800a6ca:	4684      	mov	ip, r0
 800a6cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a6d0:	eb0c 0401 	add.w	r4, ip, r1
 800a6d4:	4294      	cmp	r4, r2
 800a6d6:	bfde      	ittt	le
 800a6d8:	1b12      	suble	r2, r2, r4
 800a6da:	eb04 0c01 	addle.w	ip, r4, r1
 800a6de:	1840      	addle	r0, r0, r1
 800a6e0:	0052      	lsls	r2, r2, #1
 800a6e2:	f1be 0e01 	subs.w	lr, lr, #1
 800a6e6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a6ea:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a6ee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a6f2:	d1ed      	bne.n	800a6d0 <__ieee754_sqrt+0x94>
 800a6f4:	4671      	mov	r1, lr
 800a6f6:	2720      	movs	r7, #32
 800a6f8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a6fc:	4562      	cmp	r2, ip
 800a6fe:	eb04 060e 	add.w	r6, r4, lr
 800a702:	dc02      	bgt.n	800a70a <__ieee754_sqrt+0xce>
 800a704:	d113      	bne.n	800a72e <__ieee754_sqrt+0xf2>
 800a706:	429e      	cmp	r6, r3
 800a708:	d811      	bhi.n	800a72e <__ieee754_sqrt+0xf2>
 800a70a:	2e00      	cmp	r6, #0
 800a70c:	eb06 0e04 	add.w	lr, r6, r4
 800a710:	da43      	bge.n	800a79a <__ieee754_sqrt+0x15e>
 800a712:	f1be 0f00 	cmp.w	lr, #0
 800a716:	db40      	blt.n	800a79a <__ieee754_sqrt+0x15e>
 800a718:	f10c 0801 	add.w	r8, ip, #1
 800a71c:	eba2 020c 	sub.w	r2, r2, ip
 800a720:	429e      	cmp	r6, r3
 800a722:	bf88      	it	hi
 800a724:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800a728:	1b9b      	subs	r3, r3, r6
 800a72a:	4421      	add	r1, r4
 800a72c:	46c4      	mov	ip, r8
 800a72e:	0052      	lsls	r2, r2, #1
 800a730:	3f01      	subs	r7, #1
 800a732:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a736:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a73a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a73e:	d1dd      	bne.n	800a6fc <__ieee754_sqrt+0xc0>
 800a740:	4313      	orrs	r3, r2
 800a742:	d006      	beq.n	800a752 <__ieee754_sqrt+0x116>
 800a744:	1c4c      	adds	r4, r1, #1
 800a746:	bf13      	iteet	ne
 800a748:	3101      	addne	r1, #1
 800a74a:	3001      	addeq	r0, #1
 800a74c:	4639      	moveq	r1, r7
 800a74e:	f021 0101 	bicne.w	r1, r1, #1
 800a752:	1043      	asrs	r3, r0, #1
 800a754:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a758:	0849      	lsrs	r1, r1, #1
 800a75a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a75e:	07c2      	lsls	r2, r0, #31
 800a760:	bf48      	it	mi
 800a762:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800a766:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800a76a:	460c      	mov	r4, r1
 800a76c:	463d      	mov	r5, r7
 800a76e:	e77f      	b.n	800a670 <__ieee754_sqrt+0x34>
 800a770:	0ada      	lsrs	r2, r3, #11
 800a772:	3815      	subs	r0, #21
 800a774:	055b      	lsls	r3, r3, #21
 800a776:	2a00      	cmp	r2, #0
 800a778:	d0fa      	beq.n	800a770 <__ieee754_sqrt+0x134>
 800a77a:	02d7      	lsls	r7, r2, #11
 800a77c:	d50a      	bpl.n	800a794 <__ieee754_sqrt+0x158>
 800a77e:	f1c1 0420 	rsb	r4, r1, #32
 800a782:	fa23 f404 	lsr.w	r4, r3, r4
 800a786:	1e4d      	subs	r5, r1, #1
 800a788:	408b      	lsls	r3, r1
 800a78a:	4322      	orrs	r2, r4
 800a78c:	1b41      	subs	r1, r0, r5
 800a78e:	e788      	b.n	800a6a2 <__ieee754_sqrt+0x66>
 800a790:	4608      	mov	r0, r1
 800a792:	e7f0      	b.n	800a776 <__ieee754_sqrt+0x13a>
 800a794:	0052      	lsls	r2, r2, #1
 800a796:	3101      	adds	r1, #1
 800a798:	e7ef      	b.n	800a77a <__ieee754_sqrt+0x13e>
 800a79a:	46e0      	mov	r8, ip
 800a79c:	e7be      	b.n	800a71c <__ieee754_sqrt+0xe0>
 800a79e:	bf00      	nop
 800a7a0:	7ff00000 	.word	0x7ff00000

0800a7a4 <fabs>:
 800a7a4:	ec51 0b10 	vmov	r0, r1, d0
 800a7a8:	ee10 2a10 	vmov	r2, s0
 800a7ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a7b0:	ec43 2b10 	vmov	d0, r2, r3
 800a7b4:	4770      	bx	lr

0800a7b6 <finite>:
 800a7b6:	b082      	sub	sp, #8
 800a7b8:	ed8d 0b00 	vstr	d0, [sp]
 800a7bc:	9801      	ldr	r0, [sp, #4]
 800a7be:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a7c2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a7c6:	0fc0      	lsrs	r0, r0, #31
 800a7c8:	b002      	add	sp, #8
 800a7ca:	4770      	bx	lr
 800a7cc:	0000      	movs	r0, r0
	...

0800a7d0 <nan>:
 800a7d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a7d8 <nan+0x8>
 800a7d4:	4770      	bx	lr
 800a7d6:	bf00      	nop
 800a7d8:	00000000 	.word	0x00000000
 800a7dc:	7ff80000 	.word	0x7ff80000

0800a7e0 <rint>:
 800a7e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7e2:	ec51 0b10 	vmov	r0, r1, d0
 800a7e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a7ea:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a7ee:	2e13      	cmp	r6, #19
 800a7f0:	ee10 4a10 	vmov	r4, s0
 800a7f4:	460b      	mov	r3, r1
 800a7f6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800a7fa:	dc58      	bgt.n	800a8ae <rint+0xce>
 800a7fc:	2e00      	cmp	r6, #0
 800a7fe:	da2b      	bge.n	800a858 <rint+0x78>
 800a800:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a804:	4302      	orrs	r2, r0
 800a806:	d023      	beq.n	800a850 <rint+0x70>
 800a808:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a80c:	4302      	orrs	r2, r0
 800a80e:	4254      	negs	r4, r2
 800a810:	4314      	orrs	r4, r2
 800a812:	0c4b      	lsrs	r3, r1, #17
 800a814:	0b24      	lsrs	r4, r4, #12
 800a816:	045b      	lsls	r3, r3, #17
 800a818:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800a81c:	ea44 0103 	orr.w	r1, r4, r3
 800a820:	4b32      	ldr	r3, [pc, #200]	; (800a8ec <rint+0x10c>)
 800a822:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a826:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a82a:	4602      	mov	r2, r0
 800a82c:	460b      	mov	r3, r1
 800a82e:	4630      	mov	r0, r6
 800a830:	4639      	mov	r1, r7
 800a832:	f7f5 fd73 	bl	800031c <__adddf3>
 800a836:	e9cd 0100 	strd	r0, r1, [sp]
 800a83a:	463b      	mov	r3, r7
 800a83c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a840:	4632      	mov	r2, r6
 800a842:	f7f5 fd69 	bl	8000318 <__aeabi_dsub>
 800a846:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a84a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800a84e:	4639      	mov	r1, r7
 800a850:	ec41 0b10 	vmov	d0, r0, r1
 800a854:	b003      	add	sp, #12
 800a856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a858:	4a25      	ldr	r2, [pc, #148]	; (800a8f0 <rint+0x110>)
 800a85a:	4132      	asrs	r2, r6
 800a85c:	ea01 0702 	and.w	r7, r1, r2
 800a860:	4307      	orrs	r7, r0
 800a862:	d0f5      	beq.n	800a850 <rint+0x70>
 800a864:	0851      	lsrs	r1, r2, #1
 800a866:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800a86a:	4314      	orrs	r4, r2
 800a86c:	d00c      	beq.n	800a888 <rint+0xa8>
 800a86e:	ea23 0201 	bic.w	r2, r3, r1
 800a872:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a876:	2e13      	cmp	r6, #19
 800a878:	fa43 f606 	asr.w	r6, r3, r6
 800a87c:	bf0c      	ite	eq
 800a87e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800a882:	2400      	movne	r4, #0
 800a884:	ea42 0306 	orr.w	r3, r2, r6
 800a888:	4918      	ldr	r1, [pc, #96]	; (800a8ec <rint+0x10c>)
 800a88a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800a88e:	4622      	mov	r2, r4
 800a890:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a894:	4620      	mov	r0, r4
 800a896:	4629      	mov	r1, r5
 800a898:	f7f5 fd40 	bl	800031c <__adddf3>
 800a89c:	e9cd 0100 	strd	r0, r1, [sp]
 800a8a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8a4:	4622      	mov	r2, r4
 800a8a6:	462b      	mov	r3, r5
 800a8a8:	f7f5 fd36 	bl	8000318 <__aeabi_dsub>
 800a8ac:	e7d0      	b.n	800a850 <rint+0x70>
 800a8ae:	2e33      	cmp	r6, #51	; 0x33
 800a8b0:	dd07      	ble.n	800a8c2 <rint+0xe2>
 800a8b2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a8b6:	d1cb      	bne.n	800a850 <rint+0x70>
 800a8b8:	ee10 2a10 	vmov	r2, s0
 800a8bc:	f7f5 fd2e 	bl	800031c <__adddf3>
 800a8c0:	e7c6      	b.n	800a850 <rint+0x70>
 800a8c2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800a8c6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800a8ca:	40d6      	lsrs	r6, r2
 800a8cc:	4230      	tst	r0, r6
 800a8ce:	d0bf      	beq.n	800a850 <rint+0x70>
 800a8d0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800a8d4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800a8d8:	bf1f      	itttt	ne
 800a8da:	ea24 0101 	bicne.w	r1, r4, r1
 800a8de:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800a8e2:	fa44 f202 	asrne.w	r2, r4, r2
 800a8e6:	ea41 0402 	orrne.w	r4, r1, r2
 800a8ea:	e7cd      	b.n	800a888 <rint+0xa8>
 800a8ec:	0800acc8 	.word	0x0800acc8
 800a8f0:	000fffff 	.word	0x000fffff
 800a8f4:	00000000 	.word	0x00000000

0800a8f8 <scalbn>:
 800a8f8:	b570      	push	{r4, r5, r6, lr}
 800a8fa:	ec55 4b10 	vmov	r4, r5, d0
 800a8fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a902:	4606      	mov	r6, r0
 800a904:	462b      	mov	r3, r5
 800a906:	b99a      	cbnz	r2, 800a930 <scalbn+0x38>
 800a908:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a90c:	4323      	orrs	r3, r4
 800a90e:	d036      	beq.n	800a97e <scalbn+0x86>
 800a910:	4b39      	ldr	r3, [pc, #228]	; (800a9f8 <scalbn+0x100>)
 800a912:	4629      	mov	r1, r5
 800a914:	ee10 0a10 	vmov	r0, s0
 800a918:	2200      	movs	r2, #0
 800a91a:	f7f5 feb5 	bl	8000688 <__aeabi_dmul>
 800a91e:	4b37      	ldr	r3, [pc, #220]	; (800a9fc <scalbn+0x104>)
 800a920:	429e      	cmp	r6, r3
 800a922:	4604      	mov	r4, r0
 800a924:	460d      	mov	r5, r1
 800a926:	da10      	bge.n	800a94a <scalbn+0x52>
 800a928:	a32b      	add	r3, pc, #172	; (adr r3, 800a9d8 <scalbn+0xe0>)
 800a92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92e:	e03a      	b.n	800a9a6 <scalbn+0xae>
 800a930:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a934:	428a      	cmp	r2, r1
 800a936:	d10c      	bne.n	800a952 <scalbn+0x5a>
 800a938:	ee10 2a10 	vmov	r2, s0
 800a93c:	4620      	mov	r0, r4
 800a93e:	4629      	mov	r1, r5
 800a940:	f7f5 fcec 	bl	800031c <__adddf3>
 800a944:	4604      	mov	r4, r0
 800a946:	460d      	mov	r5, r1
 800a948:	e019      	b.n	800a97e <scalbn+0x86>
 800a94a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a94e:	460b      	mov	r3, r1
 800a950:	3a36      	subs	r2, #54	; 0x36
 800a952:	4432      	add	r2, r6
 800a954:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a958:	428a      	cmp	r2, r1
 800a95a:	dd08      	ble.n	800a96e <scalbn+0x76>
 800a95c:	2d00      	cmp	r5, #0
 800a95e:	a120      	add	r1, pc, #128	; (adr r1, 800a9e0 <scalbn+0xe8>)
 800a960:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a964:	da1c      	bge.n	800a9a0 <scalbn+0xa8>
 800a966:	a120      	add	r1, pc, #128	; (adr r1, 800a9e8 <scalbn+0xf0>)
 800a968:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a96c:	e018      	b.n	800a9a0 <scalbn+0xa8>
 800a96e:	2a00      	cmp	r2, #0
 800a970:	dd08      	ble.n	800a984 <scalbn+0x8c>
 800a972:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a976:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a97a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a97e:	ec45 4b10 	vmov	d0, r4, r5
 800a982:	bd70      	pop	{r4, r5, r6, pc}
 800a984:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a988:	da19      	bge.n	800a9be <scalbn+0xc6>
 800a98a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a98e:	429e      	cmp	r6, r3
 800a990:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a994:	dd0a      	ble.n	800a9ac <scalbn+0xb4>
 800a996:	a112      	add	r1, pc, #72	; (adr r1, 800a9e0 <scalbn+0xe8>)
 800a998:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d1e2      	bne.n	800a966 <scalbn+0x6e>
 800a9a0:	a30f      	add	r3, pc, #60	; (adr r3, 800a9e0 <scalbn+0xe8>)
 800a9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a6:	f7f5 fe6f 	bl	8000688 <__aeabi_dmul>
 800a9aa:	e7cb      	b.n	800a944 <scalbn+0x4c>
 800a9ac:	a10a      	add	r1, pc, #40	; (adr r1, 800a9d8 <scalbn+0xe0>)
 800a9ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d0b8      	beq.n	800a928 <scalbn+0x30>
 800a9b6:	a10e      	add	r1, pc, #56	; (adr r1, 800a9f0 <scalbn+0xf8>)
 800a9b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9bc:	e7b4      	b.n	800a928 <scalbn+0x30>
 800a9be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a9c2:	3236      	adds	r2, #54	; 0x36
 800a9c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a9c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	4b0c      	ldr	r3, [pc, #48]	; (800aa00 <scalbn+0x108>)
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	e7e8      	b.n	800a9a6 <scalbn+0xae>
 800a9d4:	f3af 8000 	nop.w
 800a9d8:	c2f8f359 	.word	0xc2f8f359
 800a9dc:	01a56e1f 	.word	0x01a56e1f
 800a9e0:	8800759c 	.word	0x8800759c
 800a9e4:	7e37e43c 	.word	0x7e37e43c
 800a9e8:	8800759c 	.word	0x8800759c
 800a9ec:	fe37e43c 	.word	0xfe37e43c
 800a9f0:	c2f8f359 	.word	0xc2f8f359
 800a9f4:	81a56e1f 	.word	0x81a56e1f
 800a9f8:	43500000 	.word	0x43500000
 800a9fc:	ffff3cb0 	.word	0xffff3cb0
 800aa00:	3c900000 	.word	0x3c900000

0800aa04 <_sbrk>:
 800aa04:	4b04      	ldr	r3, [pc, #16]	; (800aa18 <_sbrk+0x14>)
 800aa06:	6819      	ldr	r1, [r3, #0]
 800aa08:	4602      	mov	r2, r0
 800aa0a:	b909      	cbnz	r1, 800aa10 <_sbrk+0xc>
 800aa0c:	4903      	ldr	r1, [pc, #12]	; (800aa1c <_sbrk+0x18>)
 800aa0e:	6019      	str	r1, [r3, #0]
 800aa10:	6818      	ldr	r0, [r3, #0]
 800aa12:	4402      	add	r2, r0
 800aa14:	601a      	str	r2, [r3, #0]
 800aa16:	4770      	bx	lr
 800aa18:	20002ff0 	.word	0x20002ff0
 800aa1c:	20003230 	.word	0x20003230

0800aa20 <_init>:
 800aa20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa22:	bf00      	nop
 800aa24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa26:	bc08      	pop	{r3}
 800aa28:	469e      	mov	lr, r3
 800aa2a:	4770      	bx	lr

0800aa2c <_fini>:
 800aa2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa2e:	bf00      	nop
 800aa30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa32:	bc08      	pop	{r3}
 800aa34:	469e      	mov	lr, r3
 800aa36:	4770      	bx	lr
