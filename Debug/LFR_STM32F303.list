
LFR_STM32F303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006214  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080063a4  080063a4  000163a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006470  08006470  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08006470  08006470  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006470  08006470  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006470  08006470  00016470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006474  08006474  00016474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006478  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003084  20000014  0800648c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003098  0800648c  00023098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018c52  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003034  00000000  00000000  00038c96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  0003bcd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001148  00000000  00000000  0003cf80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002011c  00000000  00000000  0003e0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015287  00000000  00000000  0005e1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c13bc  00000000  00000000  0007346b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00134827  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e74  00000000  00000000  0013487c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800638c 	.word	0x0800638c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	0800638c 	.word	0x0800638c

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20002ff0 	.word	0x20002ff0

08000264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000268:	f000 f9f6 	bl	8000658 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026c:	f000 f80e 	bl	800028c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000270:	f000 f84e 	bl	8000310 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL |= (1 << 0);
 8000274:	4b04      	ldr	r3, [pc, #16]	; (8000288 <main+0x24>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a03      	ldr	r2, [pc, #12]	; (8000288 <main+0x24>)
 800027a:	f043 0301 	orr.w	r3, r3, #1
 800027e:	6013      	str	r3, [r2, #0]
//  SEGGER_SYSVIEW_Conf();
//
//  SEGGER_SYSVIEW_Start();


  vTaskStartScheduler();
 8000280:	f003 f816 	bl	80032b0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000284:	e7fe      	b.n	8000284 <main+0x20>
 8000286:	bf00      	nop
 8000288:	e0001000 	.word	0xe0001000

0800028c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b090      	sub	sp, #64	; 0x40
 8000290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000292:	f107 0318 	add.w	r3, r7, #24
 8000296:	2228      	movs	r2, #40	; 0x28
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f006 f86e 	bl	800637c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	60da      	str	r2, [r3, #12]
 80002ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ae:	2302      	movs	r3, #2
 80002b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b2:	2301      	movs	r3, #1
 80002b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b6:	2310      	movs	r3, #16
 80002b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ba:	2302      	movs	r3, #2
 80002bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002be:	2300      	movs	r3, #0
 80002c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002c2:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 80002c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c8:	f107 0318 	add.w	r3, r7, #24
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 fc6d 	bl	8000bac <HAL_RCC_OscConfig>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002d8:	f000 f8e0 	bl	800049c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002dc:	230f      	movs	r3, #15
 80002de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e0:	2302      	movs	r3, #2
 80002e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	2101      	movs	r1, #1
 80002f6:	4618      	mov	r0, r3
 80002f8:	f001 fb60 	bl	80019bc <HAL_RCC_ClockConfig>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000302:	f000 f8cb 	bl	800049c <Error_Handler>
  }
}
 8000306:	bf00      	nop
 8000308:	3740      	adds	r7, #64	; 0x40
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
	...

08000310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b08a      	sub	sp, #40	; 0x28
 8000314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000316:	f107 0314 	add.w	r3, r7, #20
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]
 8000324:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000326:	4b50      	ldr	r3, [pc, #320]	; (8000468 <MX_GPIO_Init+0x158>)
 8000328:	695b      	ldr	r3, [r3, #20]
 800032a:	4a4f      	ldr	r2, [pc, #316]	; (8000468 <MX_GPIO_Init+0x158>)
 800032c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000330:	6153      	str	r3, [r2, #20]
 8000332:	4b4d      	ldr	r3, [pc, #308]	; (8000468 <MX_GPIO_Init+0x158>)
 8000334:	695b      	ldr	r3, [r3, #20]
 8000336:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800033a:	613b      	str	r3, [r7, #16]
 800033c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800033e:	4b4a      	ldr	r3, [pc, #296]	; (8000468 <MX_GPIO_Init+0x158>)
 8000340:	695b      	ldr	r3, [r3, #20]
 8000342:	4a49      	ldr	r2, [pc, #292]	; (8000468 <MX_GPIO_Init+0x158>)
 8000344:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000348:	6153      	str	r3, [r2, #20]
 800034a:	4b47      	ldr	r3, [pc, #284]	; (8000468 <MX_GPIO_Init+0x158>)
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000356:	4b44      	ldr	r3, [pc, #272]	; (8000468 <MX_GPIO_Init+0x158>)
 8000358:	695b      	ldr	r3, [r3, #20]
 800035a:	4a43      	ldr	r2, [pc, #268]	; (8000468 <MX_GPIO_Init+0x158>)
 800035c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000360:	6153      	str	r3, [r2, #20]
 8000362:	4b41      	ldr	r3, [pc, #260]	; (8000468 <MX_GPIO_Init+0x158>)
 8000364:	695b      	ldr	r3, [r3, #20]
 8000366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800036a:	60bb      	str	r3, [r7, #8]
 800036c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800036e:	4b3e      	ldr	r3, [pc, #248]	; (8000468 <MX_GPIO_Init+0x158>)
 8000370:	695b      	ldr	r3, [r3, #20]
 8000372:	4a3d      	ldr	r2, [pc, #244]	; (8000468 <MX_GPIO_Init+0x158>)
 8000374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000378:	6153      	str	r3, [r2, #20]
 800037a:	4b3b      	ldr	r3, [pc, #236]	; (8000468 <MX_GPIO_Init+0x158>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000382:	607b      	str	r3, [r7, #4]
 8000384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000386:	4b38      	ldr	r3, [pc, #224]	; (8000468 <MX_GPIO_Init+0x158>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	4a37      	ldr	r2, [pc, #220]	; (8000468 <MX_GPIO_Init+0x158>)
 800038c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000390:	6153      	str	r3, [r2, #20]
 8000392:	4b35      	ldr	r3, [pc, #212]	; (8000468 <MX_GPIO_Init+0x158>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800039a:	603b      	str	r3, [r7, #0]
 800039c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800039e:	2200      	movs	r2, #0
 80003a0:	f64f 7108 	movw	r1, #65288	; 0xff08
 80003a4:	4831      	ldr	r0, [pc, #196]	; (800046c <MX_GPIO_Init+0x15c>)
 80003a6:	f000 fbe9 	bl	8000b7c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80003aa:	2337      	movs	r3, #55	; 0x37
 80003ac:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80003ae:	4b30      	ldr	r3, [pc, #192]	; (8000470 <MX_GPIO_Init+0x160>)
 80003b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b2:	2300      	movs	r3, #0
 80003b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80003b6:	f107 0314 	add.w	r3, r7, #20
 80003ba:	4619      	mov	r1, r3
 80003bc:	482b      	ldr	r0, [pc, #172]	; (800046c <MX_GPIO_Init+0x15c>)
 80003be:	f000 fa63 	bl	8000888 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80003c2:	f64f 7308 	movw	r3, #65288	; 0xff08
 80003c6:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c8:	2301      	movs	r3, #1
 80003ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003cc:	2300      	movs	r3, #0
 80003ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d0:	2300      	movs	r3, #0
 80003d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80003d4:	f107 0314 	add.w	r3, r7, #20
 80003d8:	4619      	mov	r1, r3
 80003da:	4824      	ldr	r0, [pc, #144]	; (800046c <MX_GPIO_Init+0x15c>)
 80003dc:	f000 fa54 	bl	8000888 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003e0:	2301      	movs	r3, #1
 80003e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003e4:	2300      	movs	r3, #0
 80003e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e8:	2300      	movs	r3, #0
 80003ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003ec:	f107 0314 	add.w	r3, r7, #20
 80003f0:	4619      	mov	r1, r3
 80003f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003f6:	f000 fa47 	bl	8000888 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80003fa:	23e0      	movs	r3, #224	; 0xe0
 80003fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003fe:	2302      	movs	r3, #2
 8000400:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000402:	2300      	movs	r3, #0
 8000404:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000406:	2300      	movs	r3, #0
 8000408:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800040a:	2305      	movs	r3, #5
 800040c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800040e:	f107 0314 	add.w	r3, r7, #20
 8000412:	4619      	mov	r1, r3
 8000414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000418:	f000 fa36 	bl	8000888 <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800041c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000422:	2302      	movs	r3, #2
 8000424:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000426:	2300      	movs	r3, #0
 8000428:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800042a:	2303      	movs	r3, #3
 800042c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800042e:	230e      	movs	r3, #14
 8000430:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000432:	f107 0314 	add.w	r3, r7, #20
 8000436:	4619      	mov	r1, r3
 8000438:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800043c:	f000 fa24 	bl	8000888 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000440:	23c0      	movs	r3, #192	; 0xc0
 8000442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000444:	2312      	movs	r3, #18
 8000446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000448:	2301      	movs	r3, #1
 800044a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044c:	2300      	movs	r3, #0
 800044e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000450:	2304      	movs	r3, #4
 8000452:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000454:	f107 0314 	add.w	r3, r7, #20
 8000458:	4619      	mov	r1, r3
 800045a:	4806      	ldr	r0, [pc, #24]	; (8000474 <MX_GPIO_Init+0x164>)
 800045c:	f000 fa14 	bl	8000888 <HAL_GPIO_Init>

}
 8000460:	bf00      	nop
 8000462:	3728      	adds	r7, #40	; 0x28
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	40021000 	.word	0x40021000
 800046c:	48001000 	.word	0x48001000
 8000470:	10120000 	.word	0x10120000
 8000474:	48000400 	.word	0x48000400

08000478 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a04      	ldr	r2, [pc, #16]	; (8000498 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d101      	bne.n	800048e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800048a:	f000 f8fb 	bl	8000684 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800048e:	bf00      	nop
 8000490:	3708      	adds	r7, #8
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40001000 	.word	0x40001000

0800049c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a0:	b672      	cpsid	i
}
 80004a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004a4:	e7fe      	b.n	80004a4 <Error_Handler+0x8>
	...

080004a8 <HAL_MspInit>:
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <HAL_MspInit+0x44>)
 80004b0:	699b      	ldr	r3, [r3, #24]
 80004b2:	4a0e      	ldr	r2, [pc, #56]	; (80004ec <HAL_MspInit+0x44>)
 80004b4:	f043 0301 	orr.w	r3, r3, #1
 80004b8:	6193      	str	r3, [r2, #24]
 80004ba:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <HAL_MspInit+0x44>)
 80004bc:	699b      	ldr	r3, [r3, #24]
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4b09      	ldr	r3, [pc, #36]	; (80004ec <HAL_MspInit+0x44>)
 80004c8:	69db      	ldr	r3, [r3, #28]
 80004ca:	4a08      	ldr	r2, [pc, #32]	; (80004ec <HAL_MspInit+0x44>)
 80004cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d0:	61d3      	str	r3, [r2, #28]
 80004d2:	4b06      	ldr	r3, [pc, #24]	; (80004ec <HAL_MspInit+0x44>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004da:	603b      	str	r3, [r7, #0]
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	f004 f873 	bl	80045c8 <vInitPrioGroupValue>
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40021000 	.word	0x40021000

080004f0 <HAL_InitTick>:
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b08c      	sub	sp, #48	; 0x30
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	2300      	movs	r3, #0
 80004fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80004fc:	2300      	movs	r3, #0
 80004fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8000500:	2200      	movs	r2, #0
 8000502:	6879      	ldr	r1, [r7, #4]
 8000504:	2036      	movs	r0, #54	; 0x36
 8000506:	f000 f995 	bl	8000834 <HAL_NVIC_SetPriority>
 800050a:	2036      	movs	r0, #54	; 0x36
 800050c:	f000 f9ae 	bl	800086c <HAL_NVIC_EnableIRQ>
 8000510:	4b1f      	ldr	r3, [pc, #124]	; (8000590 <HAL_InitTick+0xa0>)
 8000512:	69db      	ldr	r3, [r3, #28]
 8000514:	4a1e      	ldr	r2, [pc, #120]	; (8000590 <HAL_InitTick+0xa0>)
 8000516:	f043 0310 	orr.w	r3, r3, #16
 800051a:	61d3      	str	r3, [r2, #28]
 800051c:	4b1c      	ldr	r3, [pc, #112]	; (8000590 <HAL_InitTick+0xa0>)
 800051e:	69db      	ldr	r3, [r3, #28]
 8000520:	f003 0310 	and.w	r3, r3, #16
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	f107 0210 	add.w	r2, r7, #16
 800052c:	f107 0314 	add.w	r3, r7, #20
 8000530:	4611      	mov	r1, r2
 8000532:	4618      	mov	r0, r3
 8000534:	f001 fc56 	bl	8001de4 <HAL_RCC_GetClockConfig>
 8000538:	f001 fc32 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 800053c:	4603      	mov	r3, r0
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000544:	4a13      	ldr	r2, [pc, #76]	; (8000594 <HAL_InitTick+0xa4>)
 8000546:	fba2 2303 	umull	r2, r3, r2, r3
 800054a:	0c9b      	lsrs	r3, r3, #18
 800054c:	3b01      	subs	r3, #1
 800054e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000550:	4b11      	ldr	r3, [pc, #68]	; (8000598 <HAL_InitTick+0xa8>)
 8000552:	4a12      	ldr	r2, [pc, #72]	; (800059c <HAL_InitTick+0xac>)
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	4b10      	ldr	r3, [pc, #64]	; (8000598 <HAL_InitTick+0xa8>)
 8000558:	f240 32e7 	movw	r2, #999	; 0x3e7
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	4a0e      	ldr	r2, [pc, #56]	; (8000598 <HAL_InitTick+0xa8>)
 8000560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000562:	6053      	str	r3, [r2, #4]
 8000564:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <HAL_InitTick+0xa8>)
 8000566:	2200      	movs	r2, #0
 8000568:	611a      	str	r2, [r3, #16]
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <HAL_InitTick+0xa8>)
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	4809      	ldr	r0, [pc, #36]	; (8000598 <HAL_InitTick+0xa8>)
 8000572:	f001 fc69 	bl	8001e48 <HAL_TIM_Base_Init>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d104      	bne.n	8000586 <HAL_InitTick+0x96>
 800057c:	4806      	ldr	r0, [pc, #24]	; (8000598 <HAL_InitTick+0xa8>)
 800057e:	f001 fcc5 	bl	8001f0c <HAL_TIM_Base_Start_IT>
 8000582:	4603      	mov	r3, r0
 8000584:	e000      	b.n	8000588 <HAL_InitTick+0x98>
 8000586:	2301      	movs	r3, #1
 8000588:	4618      	mov	r0, r3
 800058a:	3730      	adds	r7, #48	; 0x30
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40021000 	.word	0x40021000
 8000594:	431bde83 	.word	0x431bde83
 8000598:	20002f60 	.word	0x20002f60
 800059c:	40001000 	.word	0x40001000

080005a0 <NMI_Handler>:
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	e7fe      	b.n	80005a4 <NMI_Handler+0x4>

080005a6 <HardFault_Handler>:
 80005a6:	b480      	push	{r7}
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	e7fe      	b.n	80005aa <HardFault_Handler+0x4>

080005ac <MemManage_Handler>:
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	e7fe      	b.n	80005b0 <MemManage_Handler+0x4>

080005b2 <BusFault_Handler>:
 80005b2:	b480      	push	{r7}
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	e7fe      	b.n	80005b6 <BusFault_Handler+0x4>

080005b8 <UsageFault_Handler>:
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	e7fe      	b.n	80005bc <UsageFault_Handler+0x4>

080005be <DebugMon_Handler>:
 80005be:	b480      	push	{r7}
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	bf00      	nop
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <TIM6_DAC_IRQHandler>:
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	4802      	ldr	r0, [pc, #8]	; (80005dc <TIM6_DAC_IRQHandler+0x10>)
 80005d2:	f001 fd05 	bl	8001fe0 <HAL_TIM_IRQHandler>
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20002f60 	.word	0x20002f60

080005e0 <SystemInit>:
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <SystemInit+0x20>)
 80005e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005ea:	4a05      	ldr	r2, [pc, #20]	; (8000600 <SystemInit+0x20>)
 80005ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	e000ed00 	.word	0xe000ed00

08000604 <Reset_Handler>:
 8000604:	f8df d034 	ldr.w	sp, [pc, #52]	; 800063c <LoopForever+0x2>
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <LoopForever+0x6>)
 800060a:	490e      	ldr	r1, [pc, #56]	; (8000644 <LoopForever+0xa>)
 800060c:	4a0e      	ldr	r2, [pc, #56]	; (8000648 <LoopForever+0xe>)
 800060e:	2300      	movs	r3, #0
 8000610:	e002      	b.n	8000618 <LoopCopyDataInit>

08000612 <CopyDataInit>:
 8000612:	58d4      	ldr	r4, [r2, r3]
 8000614:	50c4      	str	r4, [r0, r3]
 8000616:	3304      	adds	r3, #4

08000618 <LoopCopyDataInit>:
 8000618:	18c4      	adds	r4, r0, r3
 800061a:	428c      	cmp	r4, r1
 800061c:	d3f9      	bcc.n	8000612 <CopyDataInit>
 800061e:	4a0b      	ldr	r2, [pc, #44]	; (800064c <LoopForever+0x12>)
 8000620:	4c0b      	ldr	r4, [pc, #44]	; (8000650 <LoopForever+0x16>)
 8000622:	2300      	movs	r3, #0
 8000624:	e001      	b.n	800062a <LoopFillZerobss>

08000626 <FillZerobss>:
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	3204      	adds	r2, #4

0800062a <LoopFillZerobss>:
 800062a:	42a2      	cmp	r2, r4
 800062c:	d3fb      	bcc.n	8000626 <FillZerobss>
 800062e:	f7ff ffd7 	bl	80005e0 <SystemInit>
 8000632:	f005 fe63 	bl	80062fc <__libc_init_array>
 8000636:	f7ff fe15 	bl	8000264 <main>

0800063a <LoopForever>:
 800063a:	e7fe      	b.n	800063a <LoopForever>
 800063c:	2000a000 	.word	0x2000a000
 8000640:	20000000 	.word	0x20000000
 8000644:	20000014 	.word	0x20000014
 8000648:	08006478 	.word	0x08006478
 800064c:	20000014 	.word	0x20000014
 8000650:	20003098 	.word	0x20003098

08000654 <ADC1_2_IRQHandler>:
 8000654:	e7fe      	b.n	8000654 <ADC1_2_IRQHandler>
	...

08000658 <HAL_Init>:
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <HAL_Init+0x28>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a07      	ldr	r2, [pc, #28]	; (8000680 <HAL_Init+0x28>)
 8000662:	f043 0310 	orr.w	r3, r3, #16
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	2003      	movs	r0, #3
 800066a:	f000 f8d8 	bl	800081e <HAL_NVIC_SetPriorityGrouping>
 800066e:	2000      	movs	r0, #0
 8000670:	f7ff ff3e 	bl	80004f0 <HAL_InitTick>
 8000674:	f7ff ff18 	bl	80004a8 <HAL_MspInit>
 8000678:	2300      	movs	r3, #0
 800067a:	4618      	mov	r0, r3
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40022000 	.word	0x40022000

08000684 <HAL_IncTick>:
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <HAL_IncTick+0x20>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	461a      	mov	r2, r3
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <HAL_IncTick+0x24>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4413      	add	r3, r2
 8000694:	4a04      	ldr	r2, [pc, #16]	; (80006a8 <HAL_IncTick+0x24>)
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	20000008 	.word	0x20000008
 80006a8:	20002fac 	.word	0x20002fac

080006ac <HAL_GetTick>:
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <HAL_GetTick+0x14>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4618      	mov	r0, r3
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	20002fac 	.word	0x20002fac

080006c4 <__NVIC_SetPriorityGrouping>:
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	f003 0307 	and.w	r3, r3, #7
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <__NVIC_SetPriorityGrouping+0x44>)
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68ba      	ldr	r2, [r7, #8]
 80006dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006e0:	4013      	ands	r3, r2
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	021a      	lsls	r2, r3, #8
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	4313      	orrs	r3, r2
 80006ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	4a04      	ldr	r2, [pc, #16]	; (8000708 <__NVIC_SetPriorityGrouping+0x44>)
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	60d3      	str	r3, [r2, #12]
 80006fc:	bf00      	nop
 80006fe:	3714      	adds	r7, #20
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <__NVIC_GetPriorityGrouping>:
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
 8000710:	4b04      	ldr	r3, [pc, #16]	; (8000724 <__NVIC_GetPriorityGrouping+0x18>)
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	0a1b      	lsrs	r3, r3, #8
 8000716:	f003 0307 	and.w	r3, r3, #7
 800071a:	4618      	mov	r0, r3
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <__NVIC_EnableIRQ>:
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
 8000732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000736:	2b00      	cmp	r3, #0
 8000738:	db0b      	blt.n	8000752 <__NVIC_EnableIRQ+0x2a>
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	f003 021f 	and.w	r2, r3, #31
 8000740:	4907      	ldr	r1, [pc, #28]	; (8000760 <__NVIC_EnableIRQ+0x38>)
 8000742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000746:	095b      	lsrs	r3, r3, #5
 8000748:	2001      	movs	r0, #1
 800074a:	fa00 f202 	lsl.w	r2, r0, r2
 800074e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	e000e100 	.word	0xe000e100

08000764 <__NVIC_SetPriority>:
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	6039      	str	r1, [r7, #0]
 800076e:	71fb      	strb	r3, [r7, #7]
 8000770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000774:	2b00      	cmp	r3, #0
 8000776:	db0a      	blt.n	800078e <__NVIC_SetPriority+0x2a>
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	b2da      	uxtb	r2, r3
 800077c:	490c      	ldr	r1, [pc, #48]	; (80007b0 <__NVIC_SetPriority+0x4c>)
 800077e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000782:	0112      	lsls	r2, r2, #4
 8000784:	b2d2      	uxtb	r2, r2
 8000786:	440b      	add	r3, r1
 8000788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800078c:	e00a      	b.n	80007a4 <__NVIC_SetPriority+0x40>
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	b2da      	uxtb	r2, r3
 8000792:	4908      	ldr	r1, [pc, #32]	; (80007b4 <__NVIC_SetPriority+0x50>)
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	f003 030f 	and.w	r3, r3, #15
 800079a:	3b04      	subs	r3, #4
 800079c:	0112      	lsls	r2, r2, #4
 800079e:	b2d2      	uxtb	r2, r2
 80007a0:	440b      	add	r3, r1
 80007a2:	761a      	strb	r2, [r3, #24]
 80007a4:	bf00      	nop
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	e000e100 	.word	0xe000e100
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <NVIC_EncodePriority>:
 80007b8:	b480      	push	{r7}
 80007ba:	b089      	sub	sp, #36	; 0x24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	f003 0307 	and.w	r3, r3, #7
 80007ca:	61fb      	str	r3, [r7, #28]
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	f1c3 0307 	rsb	r3, r3, #7
 80007d2:	2b04      	cmp	r3, #4
 80007d4:	bf28      	it	cs
 80007d6:	2304      	movcs	r3, #4
 80007d8:	61bb      	str	r3, [r7, #24]
 80007da:	69fb      	ldr	r3, [r7, #28]
 80007dc:	3304      	adds	r3, #4
 80007de:	2b06      	cmp	r3, #6
 80007e0:	d902      	bls.n	80007e8 <NVIC_EncodePriority+0x30>
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	3b03      	subs	r3, #3
 80007e6:	e000      	b.n	80007ea <NVIC_EncodePriority+0x32>
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
 80007ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	fa02 f303 	lsl.w	r3, r2, r3
 80007f6:	43da      	mvns	r2, r3
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	401a      	ands	r2, r3
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	409a      	lsls	r2, r3
 8000800:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	fa01 f303 	lsl.w	r3, r1, r3
 800080a:	43d9      	mvns	r1, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	400b      	ands	r3, r1
 8000810:	4313      	orrs	r3, r2
 8000812:	4618      	mov	r0, r3
 8000814:	3724      	adds	r7, #36	; 0x24
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <HAL_NVIC_SetPriorityGrouping>:
 800081e:	b580      	push	{r7, lr}
 8000820:	b082      	sub	sp, #8
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f7ff ff4c 	bl	80006c4 <__NVIC_SetPriorityGrouping>
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <HAL_NVIC_SetPriority>:
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	607a      	str	r2, [r7, #4]
 8000840:	73fb      	strb	r3, [r7, #15]
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
 8000846:	f7ff ff61 	bl	800070c <__NVIC_GetPriorityGrouping>
 800084a:	6178      	str	r0, [r7, #20]
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	68b9      	ldr	r1, [r7, #8]
 8000850:	6978      	ldr	r0, [r7, #20]
 8000852:	f7ff ffb1 	bl	80007b8 <NVIC_EncodePriority>
 8000856:	4602      	mov	r2, r0
 8000858:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800085c:	4611      	mov	r1, r2
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff ff80 	bl	8000764 <__NVIC_SetPriority>
 8000864:	bf00      	nop
 8000866:	3718      	adds	r7, #24
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <HAL_NVIC_EnableIRQ>:
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
 8000876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff ff54 	bl	8000728 <__NVIC_EnableIRQ>
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <HAL_GPIO_Init>:
 8000888:	b480      	push	{r7}
 800088a:	b087      	sub	sp, #28
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	6039      	str	r1, [r7, #0]
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
 8000896:	e154      	b.n	8000b42 <HAL_GPIO_Init+0x2ba>
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	2101      	movs	r1, #1
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	fa01 f303 	lsl.w	r3, r1, r3
 80008a4:	4013      	ands	r3, r2
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	f000 8146 	beq.w	8000b3c <HAL_GPIO_Init+0x2b4>
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d00b      	beq.n	80008d0 <HAL_GPIO_Init+0x48>
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	2b02      	cmp	r3, #2
 80008be:	d007      	beq.n	80008d0 <HAL_GPIO_Init+0x48>
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	2b11      	cmp	r3, #17
 80008c6:	d003      	beq.n	80008d0 <HAL_GPIO_Init+0x48>
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	2b12      	cmp	r3, #18
 80008ce:	d130      	bne.n	8000932 <HAL_GPIO_Init+0xaa>
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	2203      	movs	r2, #3
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	43db      	mvns	r3, r3
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	4013      	ands	r3, r2
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	68da      	ldr	r2, [r3, #12]
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	693a      	ldr	r2, [r7, #16]
 80008f6:	4313      	orrs	r3, r2
 80008f8:	613b      	str	r3, [r7, #16]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	693a      	ldr	r2, [r7, #16]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	2201      	movs	r2, #1
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	fa02 f303 	lsl.w	r3, r2, r3
 800090e:	43db      	mvns	r3, r3
 8000910:	693a      	ldr	r2, [r7, #16]
 8000912:	4013      	ands	r3, r2
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	091b      	lsrs	r3, r3, #4
 800091c:	f003 0201 	and.w	r2, r3, #1
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	693a      	ldr	r2, [r7, #16]
 8000928:	4313      	orrs	r3, r2
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	68db      	ldr	r3, [r3, #12]
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	2203      	movs	r2, #3
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	43db      	mvns	r3, r3
 8000944:	693a      	ldr	r2, [r7, #16]
 8000946:	4013      	ands	r3, r2
 8000948:	613b      	str	r3, [r7, #16]
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	689a      	ldr	r2, [r3, #8]
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	4313      	orrs	r3, r2
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	2b02      	cmp	r3, #2
 8000968:	d003      	beq.n	8000972 <HAL_GPIO_Init+0xea>
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	2b12      	cmp	r3, #18
 8000970:	d123      	bne.n	80009ba <HAL_GPIO_Init+0x132>
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	08da      	lsrs	r2, r3, #3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	3208      	adds	r2, #8
 800097a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	220f      	movs	r2, #15
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	43db      	mvns	r3, r3
 8000990:	693a      	ldr	r2, [r7, #16]
 8000992:	4013      	ands	r3, r2
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	691a      	ldr	r2, [r3, #16]
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	f003 0307 	and.w	r3, r3, #7
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	08da      	lsrs	r2, r3, #3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3208      	adds	r2, #8
 80009b4:	6939      	ldr	r1, [r7, #16]
 80009b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	2203      	movs	r2, #3
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	43db      	mvns	r3, r3
 80009cc:	693a      	ldr	r2, [r7, #16]
 80009ce:	4013      	ands	r3, r2
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	f003 0203 	and.w	r2, r3, #3
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	f000 80a0 	beq.w	8000b3c <HAL_GPIO_Init+0x2b4>
 80009fc:	4b58      	ldr	r3, [pc, #352]	; (8000b60 <HAL_GPIO_Init+0x2d8>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	4a57      	ldr	r2, [pc, #348]	; (8000b60 <HAL_GPIO_Init+0x2d8>)
 8000a02:	f043 0301 	orr.w	r3, r3, #1
 8000a06:	6193      	str	r3, [r2, #24]
 8000a08:	4b55      	ldr	r3, [pc, #340]	; (8000b60 <HAL_GPIO_Init+0x2d8>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	f003 0301 	and.w	r3, r3, #1
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	4a53      	ldr	r2, [pc, #332]	; (8000b64 <HAL_GPIO_Init+0x2dc>)
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	089b      	lsrs	r3, r3, #2
 8000a1a:	3302      	adds	r3, #2
 8000a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	f003 0303 	and.w	r3, r3, #3
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	220f      	movs	r2, #15
 8000a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a30:	43db      	mvns	r3, r3
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	4013      	ands	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a3e:	d019      	beq.n	8000a74 <HAL_GPIO_Init+0x1ec>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a49      	ldr	r2, [pc, #292]	; (8000b68 <HAL_GPIO_Init+0x2e0>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d013      	beq.n	8000a70 <HAL_GPIO_Init+0x1e8>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a48      	ldr	r2, [pc, #288]	; (8000b6c <HAL_GPIO_Init+0x2e4>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d00d      	beq.n	8000a6c <HAL_GPIO_Init+0x1e4>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a47      	ldr	r2, [pc, #284]	; (8000b70 <HAL_GPIO_Init+0x2e8>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d007      	beq.n	8000a68 <HAL_GPIO_Init+0x1e0>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a46      	ldr	r2, [pc, #280]	; (8000b74 <HAL_GPIO_Init+0x2ec>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d101      	bne.n	8000a64 <HAL_GPIO_Init+0x1dc>
 8000a60:	2304      	movs	r3, #4
 8000a62:	e008      	b.n	8000a76 <HAL_GPIO_Init+0x1ee>
 8000a64:	2305      	movs	r3, #5
 8000a66:	e006      	b.n	8000a76 <HAL_GPIO_Init+0x1ee>
 8000a68:	2303      	movs	r3, #3
 8000a6a:	e004      	b.n	8000a76 <HAL_GPIO_Init+0x1ee>
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	e002      	b.n	8000a76 <HAL_GPIO_Init+0x1ee>
 8000a70:	2301      	movs	r3, #1
 8000a72:	e000      	b.n	8000a76 <HAL_GPIO_Init+0x1ee>
 8000a74:	2300      	movs	r3, #0
 8000a76:	697a      	ldr	r2, [r7, #20]
 8000a78:	f002 0203 	and.w	r2, r2, #3
 8000a7c:	0092      	lsls	r2, r2, #2
 8000a7e:	4093      	lsls	r3, r2
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	4937      	ldr	r1, [pc, #220]	; (8000b64 <HAL_GPIO_Init+0x2dc>)
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	089b      	lsrs	r3, r3, #2
 8000a8c:	3302      	adds	r3, #2
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000a94:	4b38      	ldr	r3, [pc, #224]	; (8000b78 <HAL_GPIO_Init+0x2f0>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d003      	beq.n	8000ab8 <HAL_GPIO_Init+0x230>
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	4a2f      	ldr	r2, [pc, #188]	; (8000b78 <HAL_GPIO_Init+0x2f0>)
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	6013      	str	r3, [r2, #0]
 8000abe:	4b2e      	ldr	r3, [pc, #184]	; (8000b78 <HAL_GPIO_Init+0x2f0>)
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	4013      	ands	r3, r2
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d003      	beq.n	8000ae2 <HAL_GPIO_Init+0x25a>
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	4a25      	ldr	r2, [pc, #148]	; (8000b78 <HAL_GPIO_Init+0x2f0>)
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	6053      	str	r3, [r2, #4]
 8000ae8:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <HAL_GPIO_Init+0x2f0>)
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	43db      	mvns	r3, r3
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4013      	ands	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d003      	beq.n	8000b0c <HAL_GPIO_Init+0x284>
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	4a1a      	ldr	r2, [pc, #104]	; (8000b78 <HAL_GPIO_Init+0x2f0>)
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	6093      	str	r3, [r2, #8]
 8000b12:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_GPIO_Init+0x2f0>)
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d003      	beq.n	8000b36 <HAL_GPIO_Init+0x2ae>
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	4a10      	ldr	r2, [pc, #64]	; (8000b78 <HAL_GPIO_Init+0x2f0>)
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	60d3      	str	r3, [r2, #12]
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	617b      	str	r3, [r7, #20]
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	fa22 f303 	lsr.w	r3, r2, r3
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	f47f aea3 	bne.w	8000898 <HAL_GPIO_Init+0x10>
 8000b52:	bf00      	nop
 8000b54:	bf00      	nop
 8000b56:	371c      	adds	r7, #28
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	40021000 	.word	0x40021000
 8000b64:	40010000 	.word	0x40010000
 8000b68:	48000400 	.word	0x48000400
 8000b6c:	48000800 	.word	0x48000800
 8000b70:	48000c00 	.word	0x48000c00
 8000b74:	48001000 	.word	0x48001000
 8000b78:	40010400 	.word	0x40010400

08000b7c <HAL_GPIO_WritePin>:
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	807b      	strh	r3, [r7, #2]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	707b      	strb	r3, [r7, #1]
 8000b8c:	787b      	ldrb	r3, [r7, #1]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d003      	beq.n	8000b9a <HAL_GPIO_WritePin+0x1e>
 8000b92:	887a      	ldrh	r2, [r7, #2]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	619a      	str	r2, [r3, #24]
 8000b98:	e002      	b.n	8000ba0 <HAL_GPIO_WritePin+0x24>
 8000b9a:	887a      	ldrh	r2, [r7, #2]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	629a      	str	r2, [r3, #40]	; 0x28
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <HAL_RCC_OscConfig>:
 8000bac:	b580      	push	{r7, lr}
 8000bae:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	6018      	str	r0, [r3, #0]
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d102      	bne.n	8000bc6 <HAL_RCC_OscConfig+0x1a>
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	f000 bef4 	b.w	80019ae <HAL_RCC_OscConfig+0xe02>
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	f000 816a 	beq.w	8000eaa <HAL_RCC_OscConfig+0x2fe>
 8000bd6:	4bb3      	ldr	r3, [pc, #716]	; (8000ea4 <HAL_RCC_OscConfig+0x2f8>)
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f003 030c 	and.w	r3, r3, #12
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	d00c      	beq.n	8000bfc <HAL_RCC_OscConfig+0x50>
 8000be2:	4bb0      	ldr	r3, [pc, #704]	; (8000ea4 <HAL_RCC_OscConfig+0x2f8>)
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f003 030c 	and.w	r3, r3, #12
 8000bea:	2b08      	cmp	r3, #8
 8000bec:	d159      	bne.n	8000ca2 <HAL_RCC_OscConfig+0xf6>
 8000bee:	4bad      	ldr	r3, [pc, #692]	; (8000ea4 <HAL_RCC_OscConfig+0x2f8>)
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bfa:	d152      	bne.n	8000ca2 <HAL_RCC_OscConfig+0xf6>
 8000bfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c00:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8000c04:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000c08:	fa93 f3a3 	rbit	r3, r3
 8000c0c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8000c10:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000c14:	fab3 f383 	clz	r3, r3
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	095b      	lsrs	r3, r3, #5
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	f043 0301 	orr.w	r3, r3, #1
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d102      	bne.n	8000c2e <HAL_RCC_OscConfig+0x82>
 8000c28:	4b9e      	ldr	r3, [pc, #632]	; (8000ea4 <HAL_RCC_OscConfig+0x2f8>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	e015      	b.n	8000c5a <HAL_RCC_OscConfig+0xae>
 8000c2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c32:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000c36:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000c3a:	fa93 f3a3 	rbit	r3, r3
 8000c3e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000c42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c46:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000c4a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000c4e:	fa93 f3a3 	rbit	r3, r3
 8000c52:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000c56:	4b93      	ldr	r3, [pc, #588]	; (8000ea4 <HAL_RCC_OscConfig+0x2f8>)
 8000c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c5e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000c62:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000c66:	fa92 f2a2 	rbit	r2, r2
 8000c6a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
 8000c6e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000c72:	fab2 f282 	clz	r2, r2
 8000c76:	b2d2      	uxtb	r2, r2
 8000c78:	f042 0220 	orr.w	r2, r2, #32
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	f002 021f 	and.w	r2, r2, #31
 8000c82:	2101      	movs	r1, #1
 8000c84:	fa01 f202 	lsl.w	r2, r1, r2
 8000c88:	4013      	ands	r3, r2
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	f000 810c 	beq.w	8000ea8 <HAL_RCC_OscConfig+0x2fc>
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f040 8106 	bne.w	8000ea8 <HAL_RCC_OscConfig+0x2fc>
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	f000 be86 	b.w	80019ae <HAL_RCC_OscConfig+0xe02>
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cac:	d106      	bne.n	8000cbc <HAL_RCC_OscConfig+0x110>
 8000cae:	4b7d      	ldr	r3, [pc, #500]	; (8000ea4 <HAL_RCC_OscConfig+0x2f8>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a7c      	ldr	r2, [pc, #496]	; (8000ea4 <HAL_RCC_OscConfig+0x2f8>)
 8000cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cb8:	6013      	str	r3, [r2, #0]
 8000cba:	e030      	b.n	8000d1e <HAL_RCC_OscConfig+0x172>
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d10c      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x134>
 8000cc6:	4b77      	ldr	r3, [pc, #476]	; (8000ea4 <HAL_RCC_OscConfig+0x2f8>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a76      	ldr	r2, [pc, #472]	; (8000ea4 <HAL_RCC_OscConfig+0x2f8>)
 8000ccc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cd0:	6013      	str	r3, [r2, #0]
 8000cd2:	4b74      	ldr	r3, [pc, #464]	; (8000ea4 <HAL_RCC_OscConfig+0x2f8>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a73      	ldr	r2, [pc, #460]	; (8000ea4 <HAL_RCC_OscConfig+0x2f8>)
 8000cd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cdc:	6013      	str	r3, [r2, #0]
 8000cde:	e01e      	b.n	8000d1e <HAL_RCC_OscConfig+0x172>
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cea:	d10c      	bne.n	8000d06 <HAL_RCC_OscConfig+0x15a>
 8000cec:	4b6d      	ldr	r3, [pc, #436]	; (8000ea4 <HAL_RCC_OscConfig+0x2f8>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a6c      	ldr	r2, [pc, #432]	; (8000ea4 <HAL_RCC_OscConfig+0x2f8>)
 8000cf2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cf6:	6013      	str	r3, [r2, #0]
 8000cf8:	4b6a      	ldr	r3, [pc, #424]	; (8000ea4 <HAL_RCC_OscConfig+0x2f8>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a69      	ldr	r2, [pc, #420]	; (8000ea4 <HAL_RCC_OscConfig+0x2f8>)
 8000cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d02:	6013      	str	r3, [r2, #0]
 8000d04:	e00b      	b.n	8000d1e <HAL_RCC_OscConfig+0x172>
 8000d06:	4b67      	ldr	r3, [pc, #412]	; (8000ea4 <HAL_RCC_OscConfig+0x2f8>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a66      	ldr	r2, [pc, #408]	; (8000ea4 <HAL_RCC_OscConfig+0x2f8>)
 8000d0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d10:	6013      	str	r3, [r2, #0]
 8000d12:	4b64      	ldr	r3, [pc, #400]	; (8000ea4 <HAL_RCC_OscConfig+0x2f8>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a63      	ldr	r2, [pc, #396]	; (8000ea4 <HAL_RCC_OscConfig+0x2f8>)
 8000d18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d1c:	6013      	str	r3, [r2, #0]
 8000d1e:	4b61      	ldr	r3, [pc, #388]	; (8000ea4 <HAL_RCC_OscConfig+0x2f8>)
 8000d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d22:	f023 020f 	bic.w	r2, r3, #15
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	495d      	ldr	r1, [pc, #372]	; (8000ea4 <HAL_RCC_OscConfig+0x2f8>)
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	62cb      	str	r3, [r1, #44]	; 0x2c
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d059      	beq.n	8000df0 <HAL_RCC_OscConfig+0x244>
 8000d3c:	f7ff fcb6 	bl	80006ac <HAL_GetTick>
 8000d40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 8000d44:	e00a      	b.n	8000d5c <HAL_RCC_OscConfig+0x1b0>
 8000d46:	f7ff fcb1 	bl	80006ac <HAL_GetTick>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	2b64      	cmp	r3, #100	; 0x64
 8000d54:	d902      	bls.n	8000d5c <HAL_RCC_OscConfig+0x1b0>
 8000d56:	2303      	movs	r3, #3
 8000d58:	f000 be29 	b.w	80019ae <HAL_RCC_OscConfig+0xe02>
 8000d5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d60:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8000d64:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000d68:	fa93 f3a3 	rbit	r3, r3
 8000d6c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8000d70:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000d74:	fab3 f383 	clz	r3, r3
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	095b      	lsrs	r3, r3, #5
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d102      	bne.n	8000d8e <HAL_RCC_OscConfig+0x1e2>
 8000d88:	4b46      	ldr	r3, [pc, #280]	; (8000ea4 <HAL_RCC_OscConfig+0x2f8>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	e015      	b.n	8000dba <HAL_RCC_OscConfig+0x20e>
 8000d8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d92:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000d96:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000d9a:	fa93 f3a3 	rbit	r3, r3
 8000d9e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000da2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000da6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000daa:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000dae:	fa93 f3a3 	rbit	r3, r3
 8000db2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000db6:	4b3b      	ldr	r3, [pc, #236]	; (8000ea4 <HAL_RCC_OscConfig+0x2f8>)
 8000db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dbe:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000dc2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000dc6:	fa92 f2a2 	rbit	r2, r2
 8000dca:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8000dce:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000dd2:	fab2 f282 	clz	r2, r2
 8000dd6:	b2d2      	uxtb	r2, r2
 8000dd8:	f042 0220 	orr.w	r2, r2, #32
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	f002 021f 	and.w	r2, r2, #31
 8000de2:	2101      	movs	r1, #1
 8000de4:	fa01 f202 	lsl.w	r2, r1, r2
 8000de8:	4013      	ands	r3, r2
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d0ab      	beq.n	8000d46 <HAL_RCC_OscConfig+0x19a>
 8000dee:	e05c      	b.n	8000eaa <HAL_RCC_OscConfig+0x2fe>
 8000df0:	f7ff fc5c 	bl	80006ac <HAL_GetTick>
 8000df4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 8000df8:	e00a      	b.n	8000e10 <HAL_RCC_OscConfig+0x264>
 8000dfa:	f7ff fc57 	bl	80006ac <HAL_GetTick>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	2b64      	cmp	r3, #100	; 0x64
 8000e08:	d902      	bls.n	8000e10 <HAL_RCC_OscConfig+0x264>
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	f000 bdcf 	b.w	80019ae <HAL_RCC_OscConfig+0xe02>
 8000e10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e14:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8000e18:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000e1c:	fa93 f3a3 	rbit	r3, r3
 8000e20:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8000e24:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000e28:	fab3 f383 	clz	r3, r3
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	095b      	lsrs	r3, r3, #5
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d102      	bne.n	8000e42 <HAL_RCC_OscConfig+0x296>
 8000e3c:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <HAL_RCC_OscConfig+0x2f8>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	e015      	b.n	8000e6e <HAL_RCC_OscConfig+0x2c2>
 8000e42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e46:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000e4a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000e4e:	fa93 f3a3 	rbit	r3, r3
 8000e52:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000e56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e5a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000e5e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000e62:	fa93 f3a3 	rbit	r3, r3
 8000e66:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <HAL_RCC_OscConfig+0x2f8>)
 8000e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e72:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000e76:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000e7a:	fa92 f2a2 	rbit	r2, r2
 8000e7e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8000e82:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000e86:	fab2 f282 	clz	r2, r2
 8000e8a:	b2d2      	uxtb	r2, r2
 8000e8c:	f042 0220 	orr.w	r2, r2, #32
 8000e90:	b2d2      	uxtb	r2, r2
 8000e92:	f002 021f 	and.w	r2, r2, #31
 8000e96:	2101      	movs	r1, #1
 8000e98:	fa01 f202 	lsl.w	r2, r1, r2
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d1ab      	bne.n	8000dfa <HAL_RCC_OscConfig+0x24e>
 8000ea2:	e002      	b.n	8000eaa <HAL_RCC_OscConfig+0x2fe>
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	bf00      	nop
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	f000 816f 	beq.w	8001198 <HAL_RCC_OscConfig+0x5ec>
 8000eba:	4bd0      	ldr	r3, [pc, #832]	; (80011fc <HAL_RCC_OscConfig+0x650>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f003 030c 	and.w	r3, r3, #12
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d00b      	beq.n	8000ede <HAL_RCC_OscConfig+0x332>
 8000ec6:	4bcd      	ldr	r3, [pc, #820]	; (80011fc <HAL_RCC_OscConfig+0x650>)
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f003 030c 	and.w	r3, r3, #12
 8000ece:	2b08      	cmp	r3, #8
 8000ed0:	d16c      	bne.n	8000fac <HAL_RCC_OscConfig+0x400>
 8000ed2:	4bca      	ldr	r3, [pc, #808]	; (80011fc <HAL_RCC_OscConfig+0x650>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d166      	bne.n	8000fac <HAL_RCC_OscConfig+0x400>
 8000ede:	2302      	movs	r3, #2
 8000ee0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8000ee4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000ee8:	fa93 f3a3 	rbit	r3, r3
 8000eec:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8000ef0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000ef4:	fab3 f383 	clz	r3, r3
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	095b      	lsrs	r3, r3, #5
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	f043 0301 	orr.w	r3, r3, #1
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d102      	bne.n	8000f0e <HAL_RCC_OscConfig+0x362>
 8000f08:	4bbc      	ldr	r3, [pc, #752]	; (80011fc <HAL_RCC_OscConfig+0x650>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	e013      	b.n	8000f36 <HAL_RCC_OscConfig+0x38a>
 8000f0e:	2302      	movs	r3, #2
 8000f10:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000f14:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000f18:	fa93 f3a3 	rbit	r3, r3
 8000f1c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000f20:	2302      	movs	r3, #2
 8000f22:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000f26:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000f2a:	fa93 f3a3 	rbit	r3, r3
 8000f2e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000f32:	4bb2      	ldr	r3, [pc, #712]	; (80011fc <HAL_RCC_OscConfig+0x650>)
 8000f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f36:	2202      	movs	r2, #2
 8000f38:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000f3c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000f40:	fa92 f2a2 	rbit	r2, r2
 8000f44:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8000f48:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000f4c:	fab2 f282 	clz	r2, r2
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	f042 0220 	orr.w	r2, r2, #32
 8000f56:	b2d2      	uxtb	r2, r2
 8000f58:	f002 021f 	and.w	r2, r2, #31
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f62:	4013      	ands	r3, r2
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d007      	beq.n	8000f78 <HAL_RCC_OscConfig+0x3cc>
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d002      	beq.n	8000f78 <HAL_RCC_OscConfig+0x3cc>
 8000f72:	2301      	movs	r3, #1
 8000f74:	f000 bd1b 	b.w	80019ae <HAL_RCC_OscConfig+0xe02>
 8000f78:	4ba0      	ldr	r3, [pc, #640]	; (80011fc <HAL_RCC_OscConfig+0x650>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	21f8      	movs	r1, #248	; 0xf8
 8000f88:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 8000f8c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000f90:	fa91 f1a1 	rbit	r1, r1
 8000f94:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
 8000f98:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8000f9c:	fab1 f181 	clz	r1, r1
 8000fa0:	b2c9      	uxtb	r1, r1
 8000fa2:	408b      	lsls	r3, r1
 8000fa4:	4995      	ldr	r1, [pc, #596]	; (80011fc <HAL_RCC_OscConfig+0x650>)
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	600b      	str	r3, [r1, #0]
 8000faa:	e0f5      	b.n	8001198 <HAL_RCC_OscConfig+0x5ec>
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	691b      	ldr	r3, [r3, #16]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f000 8085 	beq.w	80010c2 <HAL_RCC_OscConfig+0x516>
 8000fb8:	2301      	movs	r3, #1
 8000fba:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8000fbe:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000fc2:	fa93 f3a3 	rbit	r3, r3
 8000fc6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8000fca:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000fce:	fab3 f383 	clz	r3, r3
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fd8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	461a      	mov	r2, r3
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	f7ff fb62 	bl	80006ac <HAL_GetTick>
 8000fe8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 8000fec:	e00a      	b.n	8001004 <HAL_RCC_OscConfig+0x458>
 8000fee:	f7ff fb5d 	bl	80006ac <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d902      	bls.n	8001004 <HAL_RCC_OscConfig+0x458>
 8000ffe:	2303      	movs	r3, #3
 8001000:	f000 bcd5 	b.w	80019ae <HAL_RCC_OscConfig+0xe02>
 8001004:	2302      	movs	r3, #2
 8001006:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800100a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800100e:	fa93 f3a3 	rbit	r3, r3
 8001012:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001016:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800101a:	fab3 f383 	clz	r3, r3
 800101e:	b2db      	uxtb	r3, r3
 8001020:	095b      	lsrs	r3, r3, #5
 8001022:	b2db      	uxtb	r3, r3
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b01      	cmp	r3, #1
 800102c:	d102      	bne.n	8001034 <HAL_RCC_OscConfig+0x488>
 800102e:	4b73      	ldr	r3, [pc, #460]	; (80011fc <HAL_RCC_OscConfig+0x650>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	e013      	b.n	800105c <HAL_RCC_OscConfig+0x4b0>
 8001034:	2302      	movs	r3, #2
 8001036:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800103a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800103e:	fa93 f3a3 	rbit	r3, r3
 8001042:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001046:	2302      	movs	r3, #2
 8001048:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800104c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001050:	fa93 f3a3 	rbit	r3, r3
 8001054:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001058:	4b68      	ldr	r3, [pc, #416]	; (80011fc <HAL_RCC_OscConfig+0x650>)
 800105a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105c:	2202      	movs	r2, #2
 800105e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001062:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001066:	fa92 f2a2 	rbit	r2, r2
 800106a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 800106e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001072:	fab2 f282 	clz	r2, r2
 8001076:	b2d2      	uxtb	r2, r2
 8001078:	f042 0220 	orr.w	r2, r2, #32
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	f002 021f 	and.w	r2, r2, #31
 8001082:	2101      	movs	r1, #1
 8001084:	fa01 f202 	lsl.w	r2, r1, r2
 8001088:	4013      	ands	r3, r2
 800108a:	2b00      	cmp	r3, #0
 800108c:	d0af      	beq.n	8000fee <HAL_RCC_OscConfig+0x442>
 800108e:	4b5b      	ldr	r3, [pc, #364]	; (80011fc <HAL_RCC_OscConfig+0x650>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	695b      	ldr	r3, [r3, #20]
 800109c:	21f8      	movs	r1, #248	; 0xf8
 800109e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 80010a2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80010a6:	fa91 f1a1 	rbit	r1, r1
 80010aa:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
 80010ae:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80010b2:	fab1 f181 	clz	r1, r1
 80010b6:	b2c9      	uxtb	r1, r1
 80010b8:	408b      	lsls	r3, r1
 80010ba:	4950      	ldr	r1, [pc, #320]	; (80011fc <HAL_RCC_OscConfig+0x650>)
 80010bc:	4313      	orrs	r3, r2
 80010be:	600b      	str	r3, [r1, #0]
 80010c0:	e06a      	b.n	8001198 <HAL_RCC_OscConfig+0x5ec>
 80010c2:	2301      	movs	r3, #1
 80010c4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80010c8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80010cc:	fa93 f3a3 	rbit	r3, r3
 80010d0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80010d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80010d8:	fab3 f383 	clz	r3, r3
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	461a      	mov	r2, r3
 80010ea:	2300      	movs	r3, #0
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	f7ff fadd 	bl	80006ac <HAL_GetTick>
 80010f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 80010f6:	e00a      	b.n	800110e <HAL_RCC_OscConfig+0x562>
 80010f8:	f7ff fad8 	bl	80006ac <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	2b02      	cmp	r3, #2
 8001106:	d902      	bls.n	800110e <HAL_RCC_OscConfig+0x562>
 8001108:	2303      	movs	r3, #3
 800110a:	f000 bc50 	b.w	80019ae <HAL_RCC_OscConfig+0xe02>
 800110e:	2302      	movs	r3, #2
 8001110:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001114:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001118:	fa93 f3a3 	rbit	r3, r3
 800111c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001120:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001124:	fab3 f383 	clz	r3, r3
 8001128:	b2db      	uxtb	r3, r3
 800112a:	095b      	lsrs	r3, r3, #5
 800112c:	b2db      	uxtb	r3, r3
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b01      	cmp	r3, #1
 8001136:	d102      	bne.n	800113e <HAL_RCC_OscConfig+0x592>
 8001138:	4b30      	ldr	r3, [pc, #192]	; (80011fc <HAL_RCC_OscConfig+0x650>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	e013      	b.n	8001166 <HAL_RCC_OscConfig+0x5ba>
 800113e:	2302      	movs	r3, #2
 8001140:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001144:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001148:	fa93 f3a3 	rbit	r3, r3
 800114c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001150:	2302      	movs	r3, #2
 8001152:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001156:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800115a:	fa93 f3a3 	rbit	r3, r3
 800115e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001162:	4b26      	ldr	r3, [pc, #152]	; (80011fc <HAL_RCC_OscConfig+0x650>)
 8001164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001166:	2202      	movs	r2, #2
 8001168:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800116c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001170:	fa92 f2a2 	rbit	r2, r2
 8001174:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8001178:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800117c:	fab2 f282 	clz	r2, r2
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	f042 0220 	orr.w	r2, r2, #32
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	f002 021f 	and.w	r2, r2, #31
 800118c:	2101      	movs	r1, #1
 800118e:	fa01 f202 	lsl.w	r2, r1, r2
 8001192:	4013      	ands	r3, r2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1af      	bne.n	80010f8 <HAL_RCC_OscConfig+0x54c>
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0308 	and.w	r3, r3, #8
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f000 80da 	beq.w	800135c <HAL_RCC_OscConfig+0x7b0>
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d069      	beq.n	8001286 <HAL_RCC_OscConfig+0x6da>
 80011b2:	2301      	movs	r3, #1
 80011b4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80011b8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80011bc:	fa93 f3a3 	rbit	r3, r3
 80011c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80011c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80011c8:	fab3 f383 	clz	r3, r3
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	461a      	mov	r2, r3
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <HAL_RCC_OscConfig+0x654>)
 80011d2:	4413      	add	r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	461a      	mov	r2, r3
 80011d8:	2301      	movs	r3, #1
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	f7ff fa66 	bl	80006ac <HAL_GetTick>
 80011e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 80011e4:	e00e      	b.n	8001204 <HAL_RCC_OscConfig+0x658>
 80011e6:	f7ff fa61 	bl	80006ac <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d906      	bls.n	8001204 <HAL_RCC_OscConfig+0x658>
 80011f6:	2303      	movs	r3, #3
 80011f8:	e3d9      	b.n	80019ae <HAL_RCC_OscConfig+0xe02>
 80011fa:	bf00      	nop
 80011fc:	40021000 	.word	0x40021000
 8001200:	10908120 	.word	0x10908120
 8001204:	2302      	movs	r3, #2
 8001206:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800120a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800120e:	fa93 f3a3 	rbit	r3, r3
 8001212:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001216:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800121a:	2202      	movs	r2, #2
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	fa93 f2a3 	rbit	r2, r3
 8001228:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001232:	2202      	movs	r2, #2
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	fa93 f2a3 	rbit	r2, r3
 8001240:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	4ba5      	ldr	r3, [pc, #660]	; (80014dc <HAL_RCC_OscConfig+0x930>)
 8001248:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800124a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800124e:	2102      	movs	r1, #2
 8001250:	6019      	str	r1, [r3, #0]
 8001252:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	fa93 f1a3 	rbit	r1, r3
 800125c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001260:	6019      	str	r1, [r3, #0]
 8001262:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	fab3 f383 	clz	r3, r3
 800126c:	b2db      	uxtb	r3, r3
 800126e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001272:	b2db      	uxtb	r3, r3
 8001274:	f003 031f 	and.w	r3, r3, #31
 8001278:	2101      	movs	r1, #1
 800127a:	fa01 f303 	lsl.w	r3, r1, r3
 800127e:	4013      	ands	r3, r2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d0b0      	beq.n	80011e6 <HAL_RCC_OscConfig+0x63a>
 8001284:	e06a      	b.n	800135c <HAL_RCC_OscConfig+0x7b0>
 8001286:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800128a:	2201      	movs	r2, #1
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	fa93 f2a3 	rbit	r2, r3
 8001298:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	fab3 f383 	clz	r3, r3
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	461a      	mov	r2, r3
 80012ac:	4b8c      	ldr	r3, [pc, #560]	; (80014e0 <HAL_RCC_OscConfig+0x934>)
 80012ae:	4413      	add	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	461a      	mov	r2, r3
 80012b4:	2300      	movs	r3, #0
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	f7ff f9f8 	bl	80006ac <HAL_GetTick>
 80012bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 80012c0:	e009      	b.n	80012d6 <HAL_RCC_OscConfig+0x72a>
 80012c2:	f7ff f9f3 	bl	80006ac <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x72a>
 80012d2:	2303      	movs	r3, #3
 80012d4:	e36b      	b.n	80019ae <HAL_RCC_OscConfig+0xe02>
 80012d6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80012da:	2202      	movs	r2, #2
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	fa93 f2a3 	rbit	r2, r3
 80012e8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80012f2:	2202      	movs	r2, #2
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	fa93 f2a3 	rbit	r2, r3
 8001300:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800130a:	2202      	movs	r2, #2
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	fa93 f2a3 	rbit	r2, r3
 8001318:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	4b6f      	ldr	r3, [pc, #444]	; (80014dc <HAL_RCC_OscConfig+0x930>)
 8001320:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001322:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001326:	2102      	movs	r1, #2
 8001328:	6019      	str	r1, [r3, #0]
 800132a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	fa93 f1a3 	rbit	r1, r3
 8001334:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001338:	6019      	str	r1, [r3, #0]
 800133a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	fab3 f383 	clz	r3, r3
 8001344:	b2db      	uxtb	r3, r3
 8001346:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800134a:	b2db      	uxtb	r3, r3
 800134c:	f003 031f 	and.w	r3, r3, #31
 8001350:	2101      	movs	r1, #1
 8001352:	fa01 f303 	lsl.w	r3, r1, r3
 8001356:	4013      	ands	r3, r2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1b2      	bne.n	80012c2 <HAL_RCC_OscConfig+0x716>
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0304 	and.w	r3, r3, #4
 8001366:	2b00      	cmp	r3, #0
 8001368:	f000 8158 	beq.w	800161c <HAL_RCC_OscConfig+0xa70>
 800136c:	2300      	movs	r3, #0
 800136e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
 8001372:	4b5a      	ldr	r3, [pc, #360]	; (80014dc <HAL_RCC_OscConfig+0x930>)
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d112      	bne.n	80013a4 <HAL_RCC_OscConfig+0x7f8>
 800137e:	4b57      	ldr	r3, [pc, #348]	; (80014dc <HAL_RCC_OscConfig+0x930>)
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	4a56      	ldr	r2, [pc, #344]	; (80014dc <HAL_RCC_OscConfig+0x930>)
 8001384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001388:	61d3      	str	r3, [r2, #28]
 800138a:	4b54      	ldr	r3, [pc, #336]	; (80014dc <HAL_RCC_OscConfig+0x930>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001392:	f107 0308 	add.w	r3, r7, #8
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	f107 0308 	add.w	r3, r7, #8
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2301      	movs	r3, #1
 80013a0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
 80013a4:	4b4f      	ldr	r3, [pc, #316]	; (80014e4 <HAL_RCC_OscConfig+0x938>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d11a      	bne.n	80013e6 <HAL_RCC_OscConfig+0x83a>
 80013b0:	4b4c      	ldr	r3, [pc, #304]	; (80014e4 <HAL_RCC_OscConfig+0x938>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a4b      	ldr	r2, [pc, #300]	; (80014e4 <HAL_RCC_OscConfig+0x938>)
 80013b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	f7ff f976 	bl	80006ac <HAL_GetTick>
 80013c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 80013c4:	e009      	b.n	80013da <HAL_RCC_OscConfig+0x82e>
 80013c6:	f7ff f971 	bl	80006ac <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b64      	cmp	r3, #100	; 0x64
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x82e>
 80013d6:	2303      	movs	r3, #3
 80013d8:	e2e9      	b.n	80019ae <HAL_RCC_OscConfig+0xe02>
 80013da:	4b42      	ldr	r3, [pc, #264]	; (80014e4 <HAL_RCC_OscConfig+0x938>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d0ef      	beq.n	80013c6 <HAL_RCC_OscConfig+0x81a>
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d106      	bne.n	80013fe <HAL_RCC_OscConfig+0x852>
 80013f0:	4b3a      	ldr	r3, [pc, #232]	; (80014dc <HAL_RCC_OscConfig+0x930>)
 80013f2:	6a1b      	ldr	r3, [r3, #32]
 80013f4:	4a39      	ldr	r2, [pc, #228]	; (80014dc <HAL_RCC_OscConfig+0x930>)
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	6213      	str	r3, [r2, #32]
 80013fc:	e02f      	b.n	800145e <HAL_RCC_OscConfig+0x8b2>
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d10c      	bne.n	8001422 <HAL_RCC_OscConfig+0x876>
 8001408:	4b34      	ldr	r3, [pc, #208]	; (80014dc <HAL_RCC_OscConfig+0x930>)
 800140a:	6a1b      	ldr	r3, [r3, #32]
 800140c:	4a33      	ldr	r2, [pc, #204]	; (80014dc <HAL_RCC_OscConfig+0x930>)
 800140e:	f023 0301 	bic.w	r3, r3, #1
 8001412:	6213      	str	r3, [r2, #32]
 8001414:	4b31      	ldr	r3, [pc, #196]	; (80014dc <HAL_RCC_OscConfig+0x930>)
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	4a30      	ldr	r2, [pc, #192]	; (80014dc <HAL_RCC_OscConfig+0x930>)
 800141a:	f023 0304 	bic.w	r3, r3, #4
 800141e:	6213      	str	r3, [r2, #32]
 8001420:	e01d      	b.n	800145e <HAL_RCC_OscConfig+0x8b2>
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	2b05      	cmp	r3, #5
 800142a:	d10c      	bne.n	8001446 <HAL_RCC_OscConfig+0x89a>
 800142c:	4b2b      	ldr	r3, [pc, #172]	; (80014dc <HAL_RCC_OscConfig+0x930>)
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	4a2a      	ldr	r2, [pc, #168]	; (80014dc <HAL_RCC_OscConfig+0x930>)
 8001432:	f043 0304 	orr.w	r3, r3, #4
 8001436:	6213      	str	r3, [r2, #32]
 8001438:	4b28      	ldr	r3, [pc, #160]	; (80014dc <HAL_RCC_OscConfig+0x930>)
 800143a:	6a1b      	ldr	r3, [r3, #32]
 800143c:	4a27      	ldr	r2, [pc, #156]	; (80014dc <HAL_RCC_OscConfig+0x930>)
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	6213      	str	r3, [r2, #32]
 8001444:	e00b      	b.n	800145e <HAL_RCC_OscConfig+0x8b2>
 8001446:	4b25      	ldr	r3, [pc, #148]	; (80014dc <HAL_RCC_OscConfig+0x930>)
 8001448:	6a1b      	ldr	r3, [r3, #32]
 800144a:	4a24      	ldr	r2, [pc, #144]	; (80014dc <HAL_RCC_OscConfig+0x930>)
 800144c:	f023 0301 	bic.w	r3, r3, #1
 8001450:	6213      	str	r3, [r2, #32]
 8001452:	4b22      	ldr	r3, [pc, #136]	; (80014dc <HAL_RCC_OscConfig+0x930>)
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	4a21      	ldr	r2, [pc, #132]	; (80014dc <HAL_RCC_OscConfig+0x930>)
 8001458:	f023 0304 	bic.w	r3, r3, #4
 800145c:	6213      	str	r3, [r2, #32]
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d06b      	beq.n	8001540 <HAL_RCC_OscConfig+0x994>
 8001468:	f7ff f920 	bl	80006ac <HAL_GetTick>
 800146c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 8001470:	e00b      	b.n	800148a <HAL_RCC_OscConfig+0x8de>
 8001472:	f7ff f91b 	bl	80006ac <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001482:	4293      	cmp	r3, r2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x8de>
 8001486:	2303      	movs	r3, #3
 8001488:	e291      	b.n	80019ae <HAL_RCC_OscConfig+0xe02>
 800148a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800148e:	2202      	movs	r2, #2
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	fa93 f2a3 	rbit	r2, r3
 800149c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80014a6:	2202      	movs	r2, #2
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	fa93 f2a3 	rbit	r2, r3
 80014b4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	fab3 f383 	clz	r3, r3
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	095b      	lsrs	r3, r3, #5
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	f043 0302 	orr.w	r3, r3, #2
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d109      	bne.n	80014e8 <HAL_RCC_OscConfig+0x93c>
 80014d4:	4b01      	ldr	r3, [pc, #4]	; (80014dc <HAL_RCC_OscConfig+0x930>)
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	e014      	b.n	8001504 <HAL_RCC_OscConfig+0x958>
 80014da:	bf00      	nop
 80014dc:	40021000 	.word	0x40021000
 80014e0:	10908120 	.word	0x10908120
 80014e4:	40007000 	.word	0x40007000
 80014e8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80014ec:	2202      	movs	r2, #2
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	fa93 f2a3 	rbit	r2, r3
 80014fa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	4bbb      	ldr	r3, [pc, #748]	; (80017f0 <HAL_RCC_OscConfig+0xc44>)
 8001502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001504:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001508:	2102      	movs	r1, #2
 800150a:	6011      	str	r1, [r2, #0]
 800150c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001510:	6812      	ldr	r2, [r2, #0]
 8001512:	fa92 f1a2 	rbit	r1, r2
 8001516:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800151a:	6011      	str	r1, [r2, #0]
 800151c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001520:	6812      	ldr	r2, [r2, #0]
 8001522:	fab2 f282 	clz	r2, r2
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800152c:	b2d2      	uxtb	r2, r2
 800152e:	f002 021f 	and.w	r2, r2, #31
 8001532:	2101      	movs	r1, #1
 8001534:	fa01 f202 	lsl.w	r2, r1, r2
 8001538:	4013      	ands	r3, r2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d099      	beq.n	8001472 <HAL_RCC_OscConfig+0x8c6>
 800153e:	e063      	b.n	8001608 <HAL_RCC_OscConfig+0xa5c>
 8001540:	f7ff f8b4 	bl	80006ac <HAL_GetTick>
 8001544:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 8001548:	e00b      	b.n	8001562 <HAL_RCC_OscConfig+0x9b6>
 800154a:	f7ff f8af 	bl	80006ac <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	f241 3288 	movw	r2, #5000	; 0x1388
 800155a:	4293      	cmp	r3, r2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x9b6>
 800155e:	2303      	movs	r3, #3
 8001560:	e225      	b.n	80019ae <HAL_RCC_OscConfig+0xe02>
 8001562:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001566:	2202      	movs	r2, #2
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	fa93 f2a3 	rbit	r2, r3
 8001574:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800157e:	2202      	movs	r2, #2
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	fa93 f2a3 	rbit	r2, r3
 800158c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	fab3 f383 	clz	r3, r3
 800159c:	b2db      	uxtb	r3, r3
 800159e:	095b      	lsrs	r3, r3, #5
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	f043 0302 	orr.w	r3, r3, #2
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d102      	bne.n	80015b2 <HAL_RCC_OscConfig+0xa06>
 80015ac:	4b90      	ldr	r3, [pc, #576]	; (80017f0 <HAL_RCC_OscConfig+0xc44>)
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	e00d      	b.n	80015ce <HAL_RCC_OscConfig+0xa22>
 80015b2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80015b6:	2202      	movs	r2, #2
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	fa93 f2a3 	rbit	r2, r3
 80015c4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	4b89      	ldr	r3, [pc, #548]	; (80017f0 <HAL_RCC_OscConfig+0xc44>)
 80015cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ce:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80015d2:	2102      	movs	r1, #2
 80015d4:	6011      	str	r1, [r2, #0]
 80015d6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80015da:	6812      	ldr	r2, [r2, #0]
 80015dc:	fa92 f1a2 	rbit	r1, r2
 80015e0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80015e4:	6011      	str	r1, [r2, #0]
 80015e6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80015ea:	6812      	ldr	r2, [r2, #0]
 80015ec:	fab2 f282 	clz	r2, r2
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	f002 021f 	and.w	r2, r2, #31
 80015fc:	2101      	movs	r1, #1
 80015fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001602:	4013      	ands	r3, r2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1a0      	bne.n	800154a <HAL_RCC_OscConfig+0x99e>
 8001608:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800160c:	2b01      	cmp	r3, #1
 800160e:	d105      	bne.n	800161c <HAL_RCC_OscConfig+0xa70>
 8001610:	4b77      	ldr	r3, [pc, #476]	; (80017f0 <HAL_RCC_OscConfig+0xc44>)
 8001612:	69db      	ldr	r3, [r3, #28]
 8001614:	4a76      	ldr	r2, [pc, #472]	; (80017f0 <HAL_RCC_OscConfig+0xc44>)
 8001616:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800161a:	61d3      	str	r3, [r2, #28]
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	2b00      	cmp	r3, #0
 8001624:	f000 81c2 	beq.w	80019ac <HAL_RCC_OscConfig+0xe00>
 8001628:	4b71      	ldr	r3, [pc, #452]	; (80017f0 <HAL_RCC_OscConfig+0xc44>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 030c 	and.w	r3, r3, #12
 8001630:	2b08      	cmp	r3, #8
 8001632:	f000 819c 	beq.w	800196e <HAL_RCC_OscConfig+0xdc2>
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	69db      	ldr	r3, [r3, #28]
 800163c:	2b02      	cmp	r3, #2
 800163e:	f040 8114 	bne.w	800186a <HAL_RCC_OscConfig+0xcbe>
 8001642:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001646:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	fa93 f2a3 	rbit	r2, r3
 8001656:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	fab3 f383 	clz	r3, r3
 8001666:	b2db      	uxtb	r3, r3
 8001668:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800166c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	461a      	mov	r2, r3
 8001674:	2300      	movs	r3, #0
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	f7ff f818 	bl	80006ac <HAL_GetTick>
 800167c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 8001680:	e009      	b.n	8001696 <HAL_RCC_OscConfig+0xaea>
 8001682:	f7ff f813 	bl	80006ac <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0xaea>
 8001692:	2303      	movs	r3, #3
 8001694:	e18b      	b.n	80019ae <HAL_RCC_OscConfig+0xe02>
 8001696:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800169a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	fa93 f2a3 	rbit	r2, r3
 80016aa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	fab3 f383 	clz	r3, r3
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	095b      	lsrs	r3, r3, #5
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d102      	bne.n	80016d0 <HAL_RCC_OscConfig+0xb24>
 80016ca:	4b49      	ldr	r3, [pc, #292]	; (80017f0 <HAL_RCC_OscConfig+0xc44>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	e01b      	b.n	8001708 <HAL_RCC_OscConfig+0xb5c>
 80016d0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	fa93 f2a3 	rbit	r2, r3
 80016e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80016ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	fa93 f2a3 	rbit	r2, r3
 80016fe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	4b3a      	ldr	r3, [pc, #232]	; (80017f0 <HAL_RCC_OscConfig+0xc44>)
 8001706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001708:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800170c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001710:	6011      	str	r1, [r2, #0]
 8001712:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001716:	6812      	ldr	r2, [r2, #0]
 8001718:	fa92 f1a2 	rbit	r1, r2
 800171c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001720:	6011      	str	r1, [r2, #0]
 8001722:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001726:	6812      	ldr	r2, [r2, #0]
 8001728:	fab2 f282 	clz	r2, r2
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	f042 0220 	orr.w	r2, r2, #32
 8001732:	b2d2      	uxtb	r2, r2
 8001734:	f002 021f 	and.w	r2, r2, #31
 8001738:	2101      	movs	r1, #1
 800173a:	fa01 f202 	lsl.w	r2, r1, r2
 800173e:	4013      	ands	r3, r2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d19e      	bne.n	8001682 <HAL_RCC_OscConfig+0xad6>
 8001744:	4b2a      	ldr	r3, [pc, #168]	; (80017f0 <HAL_RCC_OscConfig+0xc44>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001752:	1d3b      	adds	r3, r7, #4
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6a1b      	ldr	r3, [r3, #32]
 8001758:	430b      	orrs	r3, r1
 800175a:	4925      	ldr	r1, [pc, #148]	; (80017f0 <HAL_RCC_OscConfig+0xc44>)
 800175c:	4313      	orrs	r3, r2
 800175e:	604b      	str	r3, [r1, #4]
 8001760:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001764:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	fa93 f2a3 	rbit	r2, r3
 8001774:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	fab3 f383 	clz	r3, r3
 8001784:	b2db      	uxtb	r3, r3
 8001786:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800178a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	461a      	mov	r2, r3
 8001792:	2301      	movs	r3, #1
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	f7fe ff89 	bl	80006ac <HAL_GetTick>
 800179a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 800179e:	e009      	b.n	80017b4 <HAL_RCC_OscConfig+0xc08>
 80017a0:	f7fe ff84 	bl	80006ac <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0xc08>
 80017b0:	2303      	movs	r3, #3
 80017b2:	e0fc      	b.n	80019ae <HAL_RCC_OscConfig+0xe02>
 80017b4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	fa93 f2a3 	rbit	r2, r3
 80017c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	fab3 f383 	clz	r3, r3
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	095b      	lsrs	r3, r3, #5
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d105      	bne.n	80017f4 <HAL_RCC_OscConfig+0xc48>
 80017e8:	4b01      	ldr	r3, [pc, #4]	; (80017f0 <HAL_RCC_OscConfig+0xc44>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	e01e      	b.n	800182c <HAL_RCC_OscConfig+0xc80>
 80017ee:	bf00      	nop
 80017f0:	40021000 	.word	0x40021000
 80017f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	fa93 f2a3 	rbit	r2, r3
 8001808:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001812:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	fa93 f2a3 	rbit	r2, r3
 8001822:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	4b63      	ldr	r3, [pc, #396]	; (80019b8 <HAL_RCC_OscConfig+0xe0c>)
 800182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001830:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001834:	6011      	str	r1, [r2, #0]
 8001836:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800183a:	6812      	ldr	r2, [r2, #0]
 800183c:	fa92 f1a2 	rbit	r1, r2
 8001840:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001844:	6011      	str	r1, [r2, #0]
 8001846:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800184a:	6812      	ldr	r2, [r2, #0]
 800184c:	fab2 f282 	clz	r2, r2
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	f042 0220 	orr.w	r2, r2, #32
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	f002 021f 	and.w	r2, r2, #31
 800185c:	2101      	movs	r1, #1
 800185e:	fa01 f202 	lsl.w	r2, r1, r2
 8001862:	4013      	ands	r3, r2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d09b      	beq.n	80017a0 <HAL_RCC_OscConfig+0xbf4>
 8001868:	e0a0      	b.n	80019ac <HAL_RCC_OscConfig+0xe00>
 800186a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800186e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	fa93 f2a3 	rbit	r2, r3
 800187e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	fab3 f383 	clz	r3, r3
 800188e:	b2db      	uxtb	r3, r3
 8001890:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001894:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	461a      	mov	r2, r3
 800189c:	2300      	movs	r3, #0
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	f7fe ff04 	bl	80006ac <HAL_GetTick>
 80018a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 80018a8:	e009      	b.n	80018be <HAL_RCC_OscConfig+0xd12>
 80018aa:	f7fe feff 	bl	80006ac <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0xd12>
 80018ba:	2303      	movs	r3, #3
 80018bc:	e077      	b.n	80019ae <HAL_RCC_OscConfig+0xe02>
 80018be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	fa93 f2a3 	rbit	r2, r3
 80018d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	fab3 f383 	clz	r3, r3
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	095b      	lsrs	r3, r3, #5
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d102      	bne.n	80018f8 <HAL_RCC_OscConfig+0xd4c>
 80018f2:	4b31      	ldr	r3, [pc, #196]	; (80019b8 <HAL_RCC_OscConfig+0xe0c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	e01b      	b.n	8001930 <HAL_RCC_OscConfig+0xd84>
 80018f8:	f107 0320 	add.w	r3, r7, #32
 80018fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	f107 0320 	add.w	r3, r7, #32
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	fa93 f2a3 	rbit	r2, r3
 800190c:	f107 031c 	add.w	r3, r7, #28
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	f107 0318 	add.w	r3, r7, #24
 8001916:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	f107 0318 	add.w	r3, r7, #24
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	fa93 f2a3 	rbit	r2, r3
 8001926:	f107 0314 	add.w	r3, r7, #20
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	4b22      	ldr	r3, [pc, #136]	; (80019b8 <HAL_RCC_OscConfig+0xe0c>)
 800192e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001930:	f107 0210 	add.w	r2, r7, #16
 8001934:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001938:	6011      	str	r1, [r2, #0]
 800193a:	f107 0210 	add.w	r2, r7, #16
 800193e:	6812      	ldr	r2, [r2, #0]
 8001940:	fa92 f1a2 	rbit	r1, r2
 8001944:	f107 020c 	add.w	r2, r7, #12
 8001948:	6011      	str	r1, [r2, #0]
 800194a:	f107 020c 	add.w	r2, r7, #12
 800194e:	6812      	ldr	r2, [r2, #0]
 8001950:	fab2 f282 	clz	r2, r2
 8001954:	b2d2      	uxtb	r2, r2
 8001956:	f042 0220 	orr.w	r2, r2, #32
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	f002 021f 	and.w	r2, r2, #31
 8001960:	2101      	movs	r1, #1
 8001962:	fa01 f202 	lsl.w	r2, r1, r2
 8001966:	4013      	ands	r3, r2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d19e      	bne.n	80018aa <HAL_RCC_OscConfig+0xcfe>
 800196c:	e01e      	b.n	80019ac <HAL_RCC_OscConfig+0xe00>
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	69db      	ldr	r3, [r3, #28]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d101      	bne.n	800197c <HAL_RCC_OscConfig+0xdd0>
 8001978:	2301      	movs	r3, #1
 800197a:	e018      	b.n	80019ae <HAL_RCC_OscConfig+0xe02>
 800197c:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <HAL_RCC_OscConfig+0xe0c>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8001984:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001988:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800198c:	1d3b      	adds	r3, r7, #4
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	429a      	cmp	r2, r3
 8001994:	d108      	bne.n	80019a8 <HAL_RCC_OscConfig+0xdfc>
 8001996:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800199a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d001      	beq.n	80019ac <HAL_RCC_OscConfig+0xe00>
 80019a8:	2301      	movs	r3, #1
 80019aa:	e000      	b.n	80019ae <HAL_RCC_OscConfig+0xe02>
 80019ac:	2300      	movs	r3, #0
 80019ae:	4618      	mov	r0, r3
 80019b0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40021000 	.word	0x40021000

080019bc <HAL_RCC_ClockConfig>:
 80019bc:	b580      	push	{r7, lr}
 80019be:	b09e      	sub	sp, #120	; 0x78
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
 80019c6:	2300      	movs	r3, #0
 80019c8:	677b      	str	r3, [r7, #116]	; 0x74
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_RCC_ClockConfig+0x18>
 80019d0:	2301      	movs	r3, #1
 80019d2:	e162      	b.n	8001c9a <HAL_RCC_ClockConfig+0x2de>
 80019d4:	4b90      	ldr	r3, [pc, #576]	; (8001c18 <HAL_RCC_ClockConfig+0x25c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d910      	bls.n	8001a04 <HAL_RCC_ClockConfig+0x48>
 80019e2:	4b8d      	ldr	r3, [pc, #564]	; (8001c18 <HAL_RCC_ClockConfig+0x25c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f023 0207 	bic.w	r2, r3, #7
 80019ea:	498b      	ldr	r1, [pc, #556]	; (8001c18 <HAL_RCC_ClockConfig+0x25c>)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	600b      	str	r3, [r1, #0]
 80019f2:	4b89      	ldr	r3, [pc, #548]	; (8001c18 <HAL_RCC_ClockConfig+0x25c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d001      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x48>
 8001a00:	2301      	movs	r3, #1
 8001a02:	e14a      	b.n	8001c9a <HAL_RCC_ClockConfig+0x2de>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d008      	beq.n	8001a22 <HAL_RCC_ClockConfig+0x66>
 8001a10:	4b82      	ldr	r3, [pc, #520]	; (8001c1c <HAL_RCC_ClockConfig+0x260>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	497f      	ldr	r1, [pc, #508]	; (8001c1c <HAL_RCC_ClockConfig+0x260>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	604b      	str	r3, [r1, #4]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f000 80dc 	beq.w	8001be8 <HAL_RCC_ClockConfig+0x22c>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d13c      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xf6>
 8001a38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a3c:	673b      	str	r3, [r7, #112]	; 0x70
 8001a3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a40:	fa93 f3a3 	rbit	r3, r3
 8001a44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a48:	fab3 f383 	clz	r3, r3
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	095b      	lsrs	r3, r3, #5
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d102      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xa6>
 8001a5c:	4b6f      	ldr	r3, [pc, #444]	; (8001c1c <HAL_RCC_ClockConfig+0x260>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	e00f      	b.n	8001a82 <HAL_RCC_ClockConfig+0xc6>
 8001a62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a66:	66bb      	str	r3, [r7, #104]	; 0x68
 8001a68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a6a:	fa93 f3a3 	rbit	r3, r3
 8001a6e:	667b      	str	r3, [r7, #100]	; 0x64
 8001a70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a74:	663b      	str	r3, [r7, #96]	; 0x60
 8001a76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a78:	fa93 f3a3 	rbit	r3, r3
 8001a7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a7e:	4b67      	ldr	r3, [pc, #412]	; (8001c1c <HAL_RCC_ClockConfig+0x260>)
 8001a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a86:	65ba      	str	r2, [r7, #88]	; 0x58
 8001a88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a8a:	fa92 f2a2 	rbit	r2, r2
 8001a8e:	657a      	str	r2, [r7, #84]	; 0x54
 8001a90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001a92:	fab2 f282 	clz	r2, r2
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	f042 0220 	orr.w	r2, r2, #32
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	f002 021f 	and.w	r2, r2, #31
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d17b      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0x1ea>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e0f3      	b.n	8001c9a <HAL_RCC_ClockConfig+0x2de>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d13c      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x178>
 8001aba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001abe:	653b      	str	r3, [r7, #80]	; 0x50
 8001ac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ac2:	fa93 f3a3 	rbit	r3, r3
 8001ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001aca:	fab3 f383 	clz	r3, r3
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	095b      	lsrs	r3, r3, #5
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d102      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0x128>
 8001ade:	4b4f      	ldr	r3, [pc, #316]	; (8001c1c <HAL_RCC_ClockConfig+0x260>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	e00f      	b.n	8001b04 <HAL_RCC_ClockConfig+0x148>
 8001ae4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ae8:	64bb      	str	r3, [r7, #72]	; 0x48
 8001aea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001aec:	fa93 f3a3 	rbit	r3, r3
 8001af0:	647b      	str	r3, [r7, #68]	; 0x44
 8001af2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001af6:	643b      	str	r3, [r7, #64]	; 0x40
 8001af8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001afa:	fa93 f3a3 	rbit	r3, r3
 8001afe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b00:	4b46      	ldr	r3, [pc, #280]	; (8001c1c <HAL_RCC_ClockConfig+0x260>)
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b08:	63ba      	str	r2, [r7, #56]	; 0x38
 8001b0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b0c:	fa92 f2a2 	rbit	r2, r2
 8001b10:	637a      	str	r2, [r7, #52]	; 0x34
 8001b12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b14:	fab2 f282 	clz	r2, r2
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	f042 0220 	orr.w	r2, r2, #32
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	f002 021f 	and.w	r2, r2, #31
 8001b24:	2101      	movs	r1, #1
 8001b26:	fa01 f202 	lsl.w	r2, r1, r2
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d13a      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0x1ea>
 8001b30:	2301      	movs	r3, #1
 8001b32:	e0b2      	b.n	8001c9a <HAL_RCC_ClockConfig+0x2de>
 8001b34:	2302      	movs	r3, #2
 8001b36:	633b      	str	r3, [r7, #48]	; 0x30
 8001b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b3a:	fa93 f3a3 	rbit	r3, r3
 8001b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b42:	fab3 f383 	clz	r3, r3
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	095b      	lsrs	r3, r3, #5
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d102      	bne.n	8001b5c <HAL_RCC_ClockConfig+0x1a0>
 8001b56:	4b31      	ldr	r3, [pc, #196]	; (8001c1c <HAL_RCC_ClockConfig+0x260>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	e00d      	b.n	8001b78 <HAL_RCC_ClockConfig+0x1bc>
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b62:	fa93 f3a3 	rbit	r3, r3
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
 8001b68:	2302      	movs	r3, #2
 8001b6a:	623b      	str	r3, [r7, #32]
 8001b6c:	6a3b      	ldr	r3, [r7, #32]
 8001b6e:	fa93 f3a3 	rbit	r3, r3
 8001b72:	61fb      	str	r3, [r7, #28]
 8001b74:	4b29      	ldr	r3, [pc, #164]	; (8001c1c <HAL_RCC_ClockConfig+0x260>)
 8001b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b78:	2202      	movs	r2, #2
 8001b7a:	61ba      	str	r2, [r7, #24]
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	fa92 f2a2 	rbit	r2, r2
 8001b82:	617a      	str	r2, [r7, #20]
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	fab2 f282 	clz	r2, r2
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	f042 0220 	orr.w	r2, r2, #32
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	f002 021f 	and.w	r2, r2, #31
 8001b96:	2101      	movs	r1, #1
 8001b98:	fa01 f202 	lsl.w	r2, r1, r2
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0x1ea>
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e079      	b.n	8001c9a <HAL_RCC_ClockConfig+0x2de>
 8001ba6:	4b1d      	ldr	r3, [pc, #116]	; (8001c1c <HAL_RCC_ClockConfig+0x260>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f023 0203 	bic.w	r2, r3, #3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	491a      	ldr	r1, [pc, #104]	; (8001c1c <HAL_RCC_ClockConfig+0x260>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	604b      	str	r3, [r1, #4]
 8001bb8:	f7fe fd78 	bl	80006ac <HAL_GetTick>
 8001bbc:	6778      	str	r0, [r7, #116]	; 0x74
 8001bbe:	e00a      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x21a>
 8001bc0:	f7fe fd74 	bl	80006ac <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_ClockConfig+0x21a>
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e061      	b.n	8001c9a <HAL_RCC_ClockConfig+0x2de>
 8001bd6:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <HAL_RCC_ClockConfig+0x260>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 020c 	and.w	r2, r3, #12
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d1eb      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0x204>
 8001be8:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <HAL_RCC_ClockConfig+0x25c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d214      	bcs.n	8001c20 <HAL_RCC_ClockConfig+0x264>
 8001bf6:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <HAL_RCC_ClockConfig+0x25c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f023 0207 	bic.w	r2, r3, #7
 8001bfe:	4906      	ldr	r1, [pc, #24]	; (8001c18 <HAL_RCC_ClockConfig+0x25c>)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	600b      	str	r3, [r1, #0]
 8001c06:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <HAL_RCC_ClockConfig+0x25c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d005      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x264>
 8001c14:	2301      	movs	r3, #1
 8001c16:	e040      	b.n	8001c9a <HAL_RCC_ClockConfig+0x2de>
 8001c18:	40022000 	.word	0x40022000
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d008      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x282>
 8001c2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ca4 <HAL_RCC_ClockConfig+0x2e8>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	491a      	ldr	r1, [pc, #104]	; (8001ca4 <HAL_RCC_ClockConfig+0x2e8>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	604b      	str	r3, [r1, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0308 	and.w	r3, r3, #8
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d009      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x2a2>
 8001c4a:	4b16      	ldr	r3, [pc, #88]	; (8001ca4 <HAL_RCC_ClockConfig+0x2e8>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	4912      	ldr	r1, [pc, #72]	; (8001ca4 <HAL_RCC_ClockConfig+0x2e8>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	604b      	str	r3, [r1, #4]
 8001c5e:	f000 f829 	bl	8001cb4 <HAL_RCC_GetSysClockFreq>
 8001c62:	4601      	mov	r1, r0
 8001c64:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <HAL_RCC_ClockConfig+0x2e8>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c6c:	22f0      	movs	r2, #240	; 0xf0
 8001c6e:	613a      	str	r2, [r7, #16]
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	fa92 f2a2 	rbit	r2, r2
 8001c76:	60fa      	str	r2, [r7, #12]
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	fab2 f282 	clz	r2, r2
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	40d3      	lsrs	r3, r2
 8001c82:	4a09      	ldr	r2, [pc, #36]	; (8001ca8 <HAL_RCC_ClockConfig+0x2ec>)
 8001c84:	5cd3      	ldrb	r3, [r2, r3]
 8001c86:	fa21 f303 	lsr.w	r3, r1, r3
 8001c8a:	4a08      	ldr	r2, [pc, #32]	; (8001cac <HAL_RCC_ClockConfig+0x2f0>)
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <HAL_RCC_ClockConfig+0x2f4>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe fc2c 	bl	80004f0 <HAL_InitTick>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3778      	adds	r7, #120	; 0x78
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	0800642c 	.word	0x0800642c
 8001cac:	20000000 	.word	0x20000000
 8001cb0:	20000004 	.word	0x20000004

08001cb4 <HAL_RCC_GetSysClockFreq>:
 8001cb4:	b480      	push	{r7}
 8001cb6:	b08b      	sub	sp, #44	; 0x2c
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61bb      	str	r3, [r7, #24]
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	2300      	movs	r3, #0
 8001ccc:	623b      	str	r3, [r7, #32]
 8001cce:	4b29      	ldr	r3, [pc, #164]	; (8001d74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	61fb      	str	r3, [r7, #28]
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f003 030c 	and.w	r3, r3, #12
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	d002      	beq.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x30>
 8001cde:	2b08      	cmp	r3, #8
 8001ce0:	d003      	beq.n	8001cea <HAL_RCC_GetSysClockFreq+0x36>
 8001ce2:	e03c      	b.n	8001d5e <HAL_RCC_GetSysClockFreq+0xaa>
 8001ce4:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ce6:	623b      	str	r3, [r7, #32]
 8001ce8:	e03c      	b.n	8001d64 <HAL_RCC_GetSysClockFreq+0xb0>
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001cf0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001cf4:	60ba      	str	r2, [r7, #8]
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	fa92 f2a2 	rbit	r2, r2
 8001cfc:	607a      	str	r2, [r7, #4]
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	fab2 f282 	clz	r2, r2
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	40d3      	lsrs	r3, r2
 8001d08:	4a1c      	ldr	r2, [pc, #112]	; (8001d7c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001d0a:	5cd3      	ldrb	r3, [r2, r3]
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	220f      	movs	r2, #15
 8001d18:	613a      	str	r2, [r7, #16]
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	fa92 f2a2 	rbit	r2, r2
 8001d20:	60fa      	str	r2, [r7, #12]
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	fab2 f282 	clz	r2, r2
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	40d3      	lsrs	r3, r2
 8001d2c:	4a14      	ldr	r2, [pc, #80]	; (8001d80 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001d2e:	5cd3      	ldrb	r3, [r2, r3]
 8001d30:	61bb      	str	r3, [r7, #24]
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d008      	beq.n	8001d4e <HAL_RCC_GetSysClockFreq+0x9a>
 8001d3c:	4a0e      	ldr	r2, [pc, #56]	; (8001d78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	fb02 f303 	mul.w	r3, r2, r3
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d4c:	e004      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0xa4>
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	4a0c      	ldr	r2, [pc, #48]	; (8001d84 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001d52:	fb02 f303 	mul.w	r3, r2, r3
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	623b      	str	r3, [r7, #32]
 8001d5c:	e002      	b.n	8001d64 <HAL_RCC_GetSysClockFreq+0xb0>
 8001d5e:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d60:	623b      	str	r3, [r7, #32]
 8001d62:	bf00      	nop
 8001d64:	6a3b      	ldr	r3, [r7, #32]
 8001d66:	4618      	mov	r0, r3
 8001d68:	372c      	adds	r7, #44	; 0x2c
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40021000 	.word	0x40021000
 8001d78:	007a1200 	.word	0x007a1200
 8001d7c:	08006444 	.word	0x08006444
 8001d80:	08006454 	.word	0x08006454
 8001d84:	003d0900 	.word	0x003d0900

08001d88 <HAL_RCC_GetHCLKFreq>:
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	4b03      	ldr	r3, [pc, #12]	; (8001d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	20000000 	.word	0x20000000

08001da0 <HAL_RCC_GetPCLK1Freq>:
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	f7ff ffef 	bl	8001d88 <HAL_RCC_GetHCLKFreq>
 8001daa:	4601      	mov	r1, r0
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001db4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001db8:	607a      	str	r2, [r7, #4]
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	fa92 f2a2 	rbit	r2, r2
 8001dc0:	603a      	str	r2, [r7, #0]
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	fab2 f282 	clz	r2, r2
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	40d3      	lsrs	r3, r2
 8001dcc:	4a04      	ldr	r2, [pc, #16]	; (8001de0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001dce:	5cd3      	ldrb	r3, [r2, r3]
 8001dd0:	fa21 f303 	lsr.w	r3, r1, r3
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	0800643c 	.word	0x0800643c

08001de4 <HAL_RCC_GetClockConfig>:
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	220f      	movs	r2, #15
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <HAL_RCC_GetClockConfig+0x5c>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 0203 	and.w	r2, r3, #3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	605a      	str	r2, [r3, #4]
 8001e00:	4b0f      	ldr	r3, [pc, #60]	; (8001e40 <HAL_RCC_GetClockConfig+0x5c>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <HAL_RCC_GetClockConfig+0x5c>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	60da      	str	r2, [r3, #12]
 8001e18:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <HAL_RCC_GetClockConfig+0x5c>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	08db      	lsrs	r3, r3, #3
 8001e1e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	611a      	str	r2, [r3, #16]
 8001e26:	4b07      	ldr	r3, [pc, #28]	; (8001e44 <HAL_RCC_GetClockConfig+0x60>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0207 	and.w	r2, r3, #7
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	40021000 	.word	0x40021000
 8001e44:	40022000 	.word	0x40022000

08001e48 <HAL_TIM_Base_Init>:
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_TIM_Base_Init+0x12>
 8001e56:	2301      	movs	r3, #1
 8001e58:	e049      	b.n	8001eee <HAL_TIM_Base_Init+0xa6>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d106      	bne.n	8001e74 <HAL_TIM_Base_Init+0x2c>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f841 	bl	8001ef6 <HAL_TIM_Base_MspInit>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2202      	movs	r2, #2
 8001e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3304      	adds	r3, #4
 8001e84:	4619      	mov	r1, r3
 8001e86:	4610      	mov	r0, r2
 8001e88:	f000 f9f2 	bl	8002270 <TIM_Base_SetConfig>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001eec:	2300      	movs	r3, #0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_TIM_Base_MspInit>:
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
	...

08001f0c <HAL_TIM_Base_Start_IT>:
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d001      	beq.n	8001f24 <HAL_TIM_Base_Start_IT+0x18>
 8001f20:	2301      	movs	r3, #1
 8001f22:	e04a      	b.n	8001fba <HAL_TIM_Base_Start_IT+0xae>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2202      	movs	r2, #2
 8001f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0201 	orr.w	r2, r2, #1
 8001f3a:	60da      	str	r2, [r3, #12]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a21      	ldr	r2, [pc, #132]	; (8001fc8 <HAL_TIM_Base_Start_IT+0xbc>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d018      	beq.n	8001f78 <HAL_TIM_Base_Start_IT+0x6c>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f4e:	d013      	beq.n	8001f78 <HAL_TIM_Base_Start_IT+0x6c>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a1d      	ldr	r2, [pc, #116]	; (8001fcc <HAL_TIM_Base_Start_IT+0xc0>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d00e      	beq.n	8001f78 <HAL_TIM_Base_Start_IT+0x6c>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a1c      	ldr	r2, [pc, #112]	; (8001fd0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d009      	beq.n	8001f78 <HAL_TIM_Base_Start_IT+0x6c>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a1a      	ldr	r2, [pc, #104]	; (8001fd4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d004      	beq.n	8001f78 <HAL_TIM_Base_Start_IT+0x6c>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a19      	ldr	r2, [pc, #100]	; (8001fd8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d115      	bne.n	8001fa4 <HAL_TIM_Base_Start_IT+0x98>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689a      	ldr	r2, [r3, #8]
 8001f7e:	4b17      	ldr	r3, [pc, #92]	; (8001fdc <HAL_TIM_Base_Start_IT+0xd0>)
 8001f80:	4013      	ands	r3, r2
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2b06      	cmp	r3, #6
 8001f88:	d015      	beq.n	8001fb6 <HAL_TIM_Base_Start_IT+0xaa>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f90:	d011      	beq.n	8001fb6 <HAL_TIM_Base_Start_IT+0xaa>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f042 0201 	orr.w	r2, r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	e008      	b.n	8001fb6 <HAL_TIM_Base_Start_IT+0xaa>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0201 	orr.w	r2, r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	e000      	b.n	8001fb8 <HAL_TIM_Base_Start_IT+0xac>
 8001fb6:	bf00      	nop
 8001fb8:	2300      	movs	r3, #0
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	40012c00 	.word	0x40012c00
 8001fcc:	40000400 	.word	0x40000400
 8001fd0:	40000800 	.word	0x40000800
 8001fd4:	40013400 	.word	0x40013400
 8001fd8:	40014000 	.word	0x40014000
 8001fdc:	00010007 	.word	0x00010007

08001fe0 <HAL_TIM_IRQHandler>:
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d122      	bne.n	800203c <HAL_TIM_IRQHandler+0x5c>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b02      	cmp	r3, #2
 8002002:	d11b      	bne.n	800203c <HAL_TIM_IRQHandler+0x5c>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f06f 0202 	mvn.w	r2, #2
 800200c:	611a      	str	r2, [r3, #16]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	771a      	strb	r2, [r3, #28]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_TIM_IRQHandler+0x4a>
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f905 	bl	8002232 <HAL_TIM_IC_CaptureCallback>
 8002028:	e005      	b.n	8002036 <HAL_TIM_IRQHandler+0x56>
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f8f7 	bl	800221e <HAL_TIM_OC_DelayElapsedCallback>
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f908 	bl	8002246 <HAL_TIM_PWM_PulseFinishedCallback>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	771a      	strb	r2, [r3, #28]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	f003 0304 	and.w	r3, r3, #4
 8002046:	2b04      	cmp	r3, #4
 8002048:	d122      	bne.n	8002090 <HAL_TIM_IRQHandler+0xb0>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b04      	cmp	r3, #4
 8002056:	d11b      	bne.n	8002090 <HAL_TIM_IRQHandler+0xb0>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f06f 0204 	mvn.w	r2, #4
 8002060:	611a      	str	r2, [r3, #16]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2202      	movs	r2, #2
 8002066:	771a      	strb	r2, [r3, #28]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_TIM_IRQHandler+0x9e>
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f8db 	bl	8002232 <HAL_TIM_IC_CaptureCallback>
 800207c:	e005      	b.n	800208a <HAL_TIM_IRQHandler+0xaa>
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f8cd 	bl	800221e <HAL_TIM_OC_DelayElapsedCallback>
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f8de 	bl	8002246 <HAL_TIM_PWM_PulseFinishedCallback>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	771a      	strb	r2, [r3, #28]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	2b08      	cmp	r3, #8
 800209c:	d122      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x104>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	2b08      	cmp	r3, #8
 80020aa:	d11b      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x104>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f06f 0208 	mvn.w	r2, #8
 80020b4:	611a      	str	r2, [r3, #16]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2204      	movs	r2, #4
 80020ba:	771a      	strb	r2, [r3, #28]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_TIM_IRQHandler+0xf2>
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f8b1 	bl	8002232 <HAL_TIM_IC_CaptureCallback>
 80020d0:	e005      	b.n	80020de <HAL_TIM_IRQHandler+0xfe>
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f8a3 	bl	800221e <HAL_TIM_OC_DelayElapsedCallback>
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f8b4 	bl	8002246 <HAL_TIM_PWM_PulseFinishedCallback>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	771a      	strb	r2, [r3, #28]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f003 0310 	and.w	r3, r3, #16
 80020ee:	2b10      	cmp	r3, #16
 80020f0:	d122      	bne.n	8002138 <HAL_TIM_IRQHandler+0x158>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f003 0310 	and.w	r3, r3, #16
 80020fc:	2b10      	cmp	r3, #16
 80020fe:	d11b      	bne.n	8002138 <HAL_TIM_IRQHandler+0x158>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f06f 0210 	mvn.w	r2, #16
 8002108:	611a      	str	r2, [r3, #16]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2208      	movs	r2, #8
 800210e:	771a      	strb	r2, [r3, #28]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_TIM_IRQHandler+0x146>
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f887 	bl	8002232 <HAL_TIM_IC_CaptureCallback>
 8002124:	e005      	b.n	8002132 <HAL_TIM_IRQHandler+0x152>
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f879 	bl	800221e <HAL_TIM_OC_DelayElapsedCallback>
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 f88a 	bl	8002246 <HAL_TIM_PWM_PulseFinishedCallback>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	771a      	strb	r2, [r3, #28]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b01      	cmp	r3, #1
 8002144:	d10e      	bne.n	8002164 <HAL_TIM_IRQHandler+0x184>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	2b01      	cmp	r3, #1
 8002152:	d107      	bne.n	8002164 <HAL_TIM_IRQHandler+0x184>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f06f 0201 	mvn.w	r2, #1
 800215c:	611a      	str	r2, [r3, #16]
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7fe f98a 	bl	8000478 <HAL_TIM_PeriodElapsedCallback>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800216e:	2b80      	cmp	r3, #128	; 0x80
 8002170:	d10e      	bne.n	8002190 <HAL_TIM_IRQHandler+0x1b0>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217c:	2b80      	cmp	r3, #128	; 0x80
 800217e:	d107      	bne.n	8002190 <HAL_TIM_IRQHandler+0x1b0>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002188:	611a      	str	r2, [r3, #16]
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f90a 	bl	80023a4 <HAL_TIMEx_BreakCallback>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800219e:	d10e      	bne.n	80021be <HAL_TIM_IRQHandler+0x1de>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021aa:	2b80      	cmp	r3, #128	; 0x80
 80021ac:	d107      	bne.n	80021be <HAL_TIM_IRQHandler+0x1de>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80021b6:	611a      	str	r2, [r3, #16]
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 f8fd 	bl	80023b8 <HAL_TIMEx_Break2Callback>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c8:	2b40      	cmp	r3, #64	; 0x40
 80021ca:	d10e      	bne.n	80021ea <HAL_TIM_IRQHandler+0x20a>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d6:	2b40      	cmp	r3, #64	; 0x40
 80021d8:	d107      	bne.n	80021ea <HAL_TIM_IRQHandler+0x20a>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021e2:	611a      	str	r2, [r3, #16]
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f838 	bl	800225a <HAL_TIM_TriggerCallback>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	f003 0320 	and.w	r3, r3, #32
 80021f4:	2b20      	cmp	r3, #32
 80021f6:	d10e      	bne.n	8002216 <HAL_TIM_IRQHandler+0x236>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	f003 0320 	and.w	r3, r3, #32
 8002202:	2b20      	cmp	r3, #32
 8002204:	d107      	bne.n	8002216 <HAL_TIM_IRQHandler+0x236>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f06f 0220 	mvn.w	r2, #32
 800220e:	611a      	str	r2, [r3, #16]
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 f8bd 	bl	8002390 <HAL_TIMEx_CommutCallback>
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_TIM_OC_DelayElapsedCallback>:
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <HAL_TIM_IC_CaptureCallback>:
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <HAL_TIM_TriggerCallback>:
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
	...

08002270 <TIM_Base_SetConfig>:
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a3c      	ldr	r2, [pc, #240]	; (8002374 <TIM_Base_SetConfig+0x104>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d00f      	beq.n	80022a8 <TIM_Base_SetConfig+0x38>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800228e:	d00b      	beq.n	80022a8 <TIM_Base_SetConfig+0x38>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a39      	ldr	r2, [pc, #228]	; (8002378 <TIM_Base_SetConfig+0x108>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d007      	beq.n	80022a8 <TIM_Base_SetConfig+0x38>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a38      	ldr	r2, [pc, #224]	; (800237c <TIM_Base_SetConfig+0x10c>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d003      	beq.n	80022a8 <TIM_Base_SetConfig+0x38>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a37      	ldr	r2, [pc, #220]	; (8002380 <TIM_Base_SetConfig+0x110>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d108      	bne.n	80022ba <TIM_Base_SetConfig+0x4a>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a2d      	ldr	r2, [pc, #180]	; (8002374 <TIM_Base_SetConfig+0x104>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d01b      	beq.n	80022fa <TIM_Base_SetConfig+0x8a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c8:	d017      	beq.n	80022fa <TIM_Base_SetConfig+0x8a>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a2a      	ldr	r2, [pc, #168]	; (8002378 <TIM_Base_SetConfig+0x108>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d013      	beq.n	80022fa <TIM_Base_SetConfig+0x8a>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a29      	ldr	r2, [pc, #164]	; (800237c <TIM_Base_SetConfig+0x10c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d00f      	beq.n	80022fa <TIM_Base_SetConfig+0x8a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a28      	ldr	r2, [pc, #160]	; (8002380 <TIM_Base_SetConfig+0x110>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d00b      	beq.n	80022fa <TIM_Base_SetConfig+0x8a>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a27      	ldr	r2, [pc, #156]	; (8002384 <TIM_Base_SetConfig+0x114>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d007      	beq.n	80022fa <TIM_Base_SetConfig+0x8a>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a26      	ldr	r2, [pc, #152]	; (8002388 <TIM_Base_SetConfig+0x118>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d003      	beq.n	80022fa <TIM_Base_SetConfig+0x8a>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a25      	ldr	r2, [pc, #148]	; (800238c <TIM_Base_SetConfig+0x11c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d108      	bne.n	800230c <TIM_Base_SetConfig+0x9c>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	4313      	orrs	r3, r2
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	4313      	orrs	r3, r2
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	62da      	str	r2, [r3, #44]	; 0x2c
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	629a      	str	r2, [r3, #40]	; 0x28
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a10      	ldr	r2, [pc, #64]	; (8002374 <TIM_Base_SetConfig+0x104>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d00f      	beq.n	8002358 <TIM_Base_SetConfig+0xe8>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a11      	ldr	r2, [pc, #68]	; (8002380 <TIM_Base_SetConfig+0x110>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d00b      	beq.n	8002358 <TIM_Base_SetConfig+0xe8>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a10      	ldr	r2, [pc, #64]	; (8002384 <TIM_Base_SetConfig+0x114>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d007      	beq.n	8002358 <TIM_Base_SetConfig+0xe8>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a0f      	ldr	r2, [pc, #60]	; (8002388 <TIM_Base_SetConfig+0x118>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d003      	beq.n	8002358 <TIM_Base_SetConfig+0xe8>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a0e      	ldr	r2, [pc, #56]	; (800238c <TIM_Base_SetConfig+0x11c>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d103      	bne.n	8002360 <TIM_Base_SetConfig+0xf0>
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	691a      	ldr	r2, [r3, #16]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	631a      	str	r2, [r3, #48]	; 0x30
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	615a      	str	r2, [r3, #20]
 8002366:	bf00      	nop
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	40012c00 	.word	0x40012c00
 8002378:	40000400 	.word	0x40000400
 800237c:	40000800 	.word	0x40000800
 8002380:	40013400 	.word	0x40013400
 8002384:	40014000 	.word	0x40014000
 8002388:	40014400 	.word	0x40014400
 800238c:	40014800 	.word	0x40014800

08002390 <HAL_TIMEx_CommutCallback>:
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_TIMEx_BreakCallback>:
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <HAL_TIMEx_Break2Callback>:
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f103 0208 	add.w	r2, r3, #8
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023e4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f103 0208 	add.w	r2, r3, #8
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f103 0208 	add.w	r2, r3, #8
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002426:	b480      	push	{r7}
 8002428:	b085      	sub	sp, #20
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
 800242e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	1c5a      	adds	r2, r3, #1
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	601a      	str	r2, [r3, #0]
}
 8002462:	bf00      	nop
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800246e:	b480      	push	{r7}
 8002470:	b085      	sub	sp, #20
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002484:	d103      	bne.n	800248e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	e00c      	b.n	80024a8 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3308      	adds	r3, #8
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	e002      	b.n	800249c <vListInsert+0x2e>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d2f6      	bcs.n	8002496 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	1c5a      	adds	r2, r3, #1
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	601a      	str	r2, [r3, #0]
}
 80024d4:	bf00      	nop
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6892      	ldr	r2, [r2, #8]
 80024f6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6852      	ldr	r2, [r2, #4]
 8002500:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	429a      	cmp	r2, r3
 800250a:	d103      	bne.n	8002514 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	1e5a      	subs	r2, r3, #1
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10a      	bne.n	800255e <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800254c:	f383 8811 	msr	BASEPRI, r3
 8002550:	f3bf 8f6f 	isb	sy
 8002554:	f3bf 8f4f 	dsb	sy
 8002558:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800255a:	bf00      	nop
 800255c:	e7fe      	b.n	800255c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800255e:	f002 f8b1 	bl	80046c4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256a:	68f9      	ldr	r1, [r7, #12]
 800256c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800256e:	fb01 f303 	mul.w	r3, r1, r3
 8002572:	441a      	add	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800258e:	3b01      	subs	r3, #1
 8002590:	68f9      	ldr	r1, [r7, #12]
 8002592:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002594:	fb01 f303 	mul.w	r3, r1, r3
 8002598:	441a      	add	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	22ff      	movs	r2, #255	; 0xff
 80025a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	22ff      	movs	r2, #255	; 0xff
 80025aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d114      	bne.n	80025de <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d01a      	beq.n	80025f2 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	3310      	adds	r3, #16
 80025c0:	4618      	mov	r0, r3
 80025c2:	f001 f90d 	bl	80037e0 <xTaskRemoveFromEventList>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d012      	beq.n	80025f2 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80025cc:	4b0c      	ldr	r3, [pc, #48]	; (8002600 <xQueueGenericReset+0xcc>)
 80025ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	f3bf 8f4f 	dsb	sy
 80025d8:	f3bf 8f6f 	isb	sy
 80025dc:	e009      	b.n	80025f2 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	3310      	adds	r3, #16
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff fef2 	bl	80023cc <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	3324      	adds	r3, #36	; 0x24
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff feed 	bl	80023cc <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80025f2:	f002 f897 	bl	8004724 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80025f6:	2301      	movs	r3, #1
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	e000ed04 	.word	0xe000ed04

08002604 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002604:	b580      	push	{r7, lr}
 8002606:	b08c      	sub	sp, #48	; 0x30
 8002608:	af02      	add	r7, sp, #8
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	4613      	mov	r3, r2
 8002610:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10a      	bne.n	800262e <xQueueGenericCreate+0x2a>
        __asm volatile
 8002618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800261c:	f383 8811 	msr	BASEPRI, r3
 8002620:	f3bf 8f6f 	isb	sy
 8002624:	f3bf 8f4f 	dsb	sy
 8002628:	61bb      	str	r3, [r7, #24]
    }
 800262a:	bf00      	nop
 800262c:	e7fe      	b.n	800262c <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	fb02 f303 	mul.w	r3, r2, r3
 8002636:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d006      	beq.n	800264c <xQueueGenericCreate+0x48>
 800263e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	fbb2 f3f3 	udiv	r3, r2, r3
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	429a      	cmp	r2, r3
 800264a:	d101      	bne.n	8002650 <xQueueGenericCreate+0x4c>
 800264c:	2301      	movs	r3, #1
 800264e:	e000      	b.n	8002652 <xQueueGenericCreate+0x4e>
 8002650:	2300      	movs	r3, #0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10a      	bne.n	800266c <xQueueGenericCreate+0x68>
        __asm volatile
 8002656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800265a:	f383 8811 	msr	BASEPRI, r3
 800265e:	f3bf 8f6f 	isb	sy
 8002662:	f3bf 8f4f 	dsb	sy
 8002666:	617b      	str	r3, [r7, #20]
    }
 8002668:	bf00      	nop
 800266a:	e7fe      	b.n	800266a <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002672:	d90a      	bls.n	800268a <xQueueGenericCreate+0x86>
        __asm volatile
 8002674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002678:	f383 8811 	msr	BASEPRI, r3
 800267c:	f3bf 8f6f 	isb	sy
 8002680:	f3bf 8f4f 	dsb	sy
 8002684:	613b      	str	r3, [r7, #16]
    }
 8002686:	bf00      	nop
 8002688:	e7fe      	b.n	8002688 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	3350      	adds	r3, #80	; 0x50
 800268e:	4618      	mov	r0, r3
 8002690:	f002 f944 	bl	800491c <pvPortMalloc>
 8002694:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002696:	6a3b      	ldr	r3, [r7, #32]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00d      	beq.n	80026b8 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	3350      	adds	r3, #80	; 0x50
 80026a4:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80026a6:	79fa      	ldrb	r2, [r7, #7]
 80026a8:	6a3b      	ldr	r3, [r7, #32]
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	4613      	mov	r3, r2
 80026ae:	69fa      	ldr	r2, [r7, #28]
 80026b0:	68b9      	ldr	r1, [r7, #8]
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 f805 	bl	80026c2 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80026b8:	6a3b      	ldr	r3, [r7, #32]
    }
 80026ba:	4618      	mov	r0, r3
 80026bc:	3728      	adds	r7, #40	; 0x28
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b084      	sub	sp, #16
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	60f8      	str	r0, [r7, #12]
 80026ca:	60b9      	str	r1, [r7, #8]
 80026cc:	607a      	str	r2, [r7, #4]
 80026ce:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d103      	bne.n	80026de <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	e002      	b.n	80026e4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80026f0:	2101      	movs	r1, #1
 80026f2:	69b8      	ldr	r0, [r7, #24]
 80026f4:	f7ff ff1e 	bl	8002534 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	78fa      	ldrb	r2, [r7, #3]
 80026fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	68f9      	ldr	r1, [r7, #12]
 8002706:	2073      	movs	r0, #115	; 0x73
 8002708:	f002 ff48 	bl	800559c <SEGGER_SYSVIEW_RecordU32x3>
}
 800270c:	bf00      	nop
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b090      	sub	sp, #64	; 0x40
 8002718:	af02      	add	r7, sp, #8
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
 8002720:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002722:	2300      	movs	r3, #0
 8002724:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800272a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10a      	bne.n	8002746 <xQueueGenericSend+0x32>
        __asm volatile
 8002730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002734:	f383 8811 	msr	BASEPRI, r3
 8002738:	f3bf 8f6f 	isb	sy
 800273c:	f3bf 8f4f 	dsb	sy
 8002740:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002742:	bf00      	nop
 8002744:	e7fe      	b.n	8002744 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d103      	bne.n	8002754 <xQueueGenericSend+0x40>
 800274c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <xQueueGenericSend+0x44>
 8002754:	2301      	movs	r3, #1
 8002756:	e000      	b.n	800275a <xQueueGenericSend+0x46>
 8002758:	2300      	movs	r3, #0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10a      	bne.n	8002774 <xQueueGenericSend+0x60>
        __asm volatile
 800275e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002762:	f383 8811 	msr	BASEPRI, r3
 8002766:	f3bf 8f6f 	isb	sy
 800276a:	f3bf 8f4f 	dsb	sy
 800276e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002770:	bf00      	nop
 8002772:	e7fe      	b.n	8002772 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	2b02      	cmp	r3, #2
 8002778:	d103      	bne.n	8002782 <xQueueGenericSend+0x6e>
 800277a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277e:	2b01      	cmp	r3, #1
 8002780:	d101      	bne.n	8002786 <xQueueGenericSend+0x72>
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <xQueueGenericSend+0x74>
 8002786:	2300      	movs	r3, #0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10a      	bne.n	80027a2 <xQueueGenericSend+0x8e>
        __asm volatile
 800278c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002790:	f383 8811 	msr	BASEPRI, r3
 8002794:	f3bf 8f6f 	isb	sy
 8002798:	f3bf 8f4f 	dsb	sy
 800279c:	623b      	str	r3, [r7, #32]
    }
 800279e:	bf00      	nop
 80027a0:	e7fe      	b.n	80027a0 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027a2:	f001 f9bd 	bl	8003b20 <xTaskGetSchedulerState>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d102      	bne.n	80027b2 <xQueueGenericSend+0x9e>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <xQueueGenericSend+0xa2>
 80027b2:	2301      	movs	r3, #1
 80027b4:	e000      	b.n	80027b8 <xQueueGenericSend+0xa4>
 80027b6:	2300      	movs	r3, #0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10a      	bne.n	80027d2 <xQueueGenericSend+0xbe>
        __asm volatile
 80027bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c0:	f383 8811 	msr	BASEPRI, r3
 80027c4:	f3bf 8f6f 	isb	sy
 80027c8:	f3bf 8f4f 	dsb	sy
 80027cc:	61fb      	str	r3, [r7, #28]
    }
 80027ce:	bf00      	nop
 80027d0:	e7fe      	b.n	80027d0 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80027d2:	f001 ff77 	bl	80046c4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027de:	429a      	cmp	r2, r3
 80027e0:	d302      	bcc.n	80027e8 <xQueueGenericSend+0xd4>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d136      	bne.n	8002856 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 80027e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ea:	4618      	mov	r0, r3
 80027ec:	f003 fc3e 	bl	800606c <SEGGER_SYSVIEW_ShrinkId>
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	460b      	mov	r3, r1
 80027fa:	4601      	mov	r1, r0
 80027fc:	205a      	movs	r0, #90	; 0x5a
 80027fe:	f002 ff43 	bl	8005688 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	68b9      	ldr	r1, [r7, #8]
 8002806:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002808:	f000 fa78 	bl	8002cfc <prvCopyDataToQueue>
 800280c:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800280e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	2b00      	cmp	r3, #0
 8002814:	d010      	beq.n	8002838 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002818:	3324      	adds	r3, #36	; 0x24
 800281a:	4618      	mov	r0, r3
 800281c:	f000 ffe0 	bl	80037e0 <xTaskRemoveFromEventList>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d013      	beq.n	800284e <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002826:	4b4d      	ldr	r3, [pc, #308]	; (800295c <xQueueGenericSend+0x248>)
 8002828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	f3bf 8f4f 	dsb	sy
 8002832:	f3bf 8f6f 	isb	sy
 8002836:	e00a      	b.n	800284e <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800283a:	2b00      	cmp	r3, #0
 800283c:	d007      	beq.n	800284e <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800283e:	4b47      	ldr	r3, [pc, #284]	; (800295c <xQueueGenericSend+0x248>)
 8002840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	f3bf 8f4f 	dsb	sy
 800284a:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800284e:	f001 ff69 	bl	8004724 <vPortExitCritical>
                return pdPASS;
 8002852:	2301      	movs	r3, #1
 8002854:	e07d      	b.n	8002952 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d110      	bne.n	800287e <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800285c:	f001 ff62 	bl	8004724 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002862:	4618      	mov	r0, r3
 8002864:	f003 fc02 	bl	800606c <SEGGER_SYSVIEW_ShrinkId>
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	460b      	mov	r3, r1
 8002872:	4601      	mov	r1, r0
 8002874:	205a      	movs	r0, #90	; 0x5a
 8002876:	f002 ff07 	bl	8005688 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 800287a:	2300      	movs	r3, #0
 800287c:	e069      	b.n	8002952 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 800287e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002880:	2b00      	cmp	r3, #0
 8002882:	d106      	bne.n	8002892 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002884:	f107 0314 	add.w	r3, r7, #20
 8002888:	4618      	mov	r0, r3
 800288a:	f001 f80f 	bl	80038ac <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800288e:	2301      	movs	r3, #1
 8002890:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002892:	f001 ff47 	bl	8004724 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002896:	f000 fd6d 	bl	8003374 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800289a:	f001 ff13 	bl	80046c4 <vPortEnterCritical>
 800289e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028a4:	b25b      	sxtb	r3, r3
 80028a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028aa:	d103      	bne.n	80028b4 <xQueueGenericSend+0x1a0>
 80028ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028ba:	b25b      	sxtb	r3, r3
 80028bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028c0:	d103      	bne.n	80028ca <xQueueGenericSend+0x1b6>
 80028c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028ca:	f001 ff2b 	bl	8004724 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028ce:	1d3a      	adds	r2, r7, #4
 80028d0:	f107 0314 	add.w	r3, r7, #20
 80028d4:	4611      	mov	r1, r2
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 fffe 	bl	80038d8 <xTaskCheckForTimeOut>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d124      	bne.n	800292c <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80028e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028e4:	f000 fb02 	bl	8002eec <prvIsQueueFull>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d018      	beq.n	8002920 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80028ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f0:	3310      	adds	r3, #16
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	4611      	mov	r1, r2
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 ff20 	bl	800373c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80028fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028fe:	f000 fa8d 	bl	8002e1c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002902:	f000 fd45 	bl	8003390 <xTaskResumeAll>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	f47f af62 	bne.w	80027d2 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800290e:	4b13      	ldr	r3, [pc, #76]	; (800295c <xQueueGenericSend+0x248>)
 8002910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	f3bf 8f4f 	dsb	sy
 800291a:	f3bf 8f6f 	isb	sy
 800291e:	e758      	b.n	80027d2 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002920:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002922:	f000 fa7b 	bl	8002e1c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002926:	f000 fd33 	bl	8003390 <xTaskResumeAll>
 800292a:	e752      	b.n	80027d2 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800292c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800292e:	f000 fa75 	bl	8002e1c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002932:	f000 fd2d 	bl	8003390 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002938:	4618      	mov	r0, r3
 800293a:	f003 fb97 	bl	800606c <SEGGER_SYSVIEW_ShrinkId>
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	460b      	mov	r3, r1
 8002948:	4601      	mov	r1, r0
 800294a:	205a      	movs	r0, #90	; 0x5a
 800294c:	f002 fe9c 	bl	8005688 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002950:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002952:	4618      	mov	r0, r3
 8002954:	3738      	adds	r7, #56	; 0x38
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	e000ed04 	.word	0xe000ed04

08002960 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b090      	sub	sp, #64	; 0x40
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
 800296c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10a      	bne.n	800298e <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800297c:	f383 8811 	msr	BASEPRI, r3
 8002980:	f3bf 8f6f 	isb	sy
 8002984:	f3bf 8f4f 	dsb	sy
 8002988:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800298a:	bf00      	nop
 800298c:	e7fe      	b.n	800298c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d103      	bne.n	800299c <xQueueGenericSendFromISR+0x3c>
 8002994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <xQueueGenericSendFromISR+0x40>
 800299c:	2301      	movs	r3, #1
 800299e:	e000      	b.n	80029a2 <xQueueGenericSendFromISR+0x42>
 80029a0:	2300      	movs	r3, #0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10a      	bne.n	80029bc <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80029a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029aa:	f383 8811 	msr	BASEPRI, r3
 80029ae:	f3bf 8f6f 	isb	sy
 80029b2:	f3bf 8f4f 	dsb	sy
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80029b8:	bf00      	nop
 80029ba:	e7fe      	b.n	80029ba <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d103      	bne.n	80029ca <xQueueGenericSendFromISR+0x6a>
 80029c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d101      	bne.n	80029ce <xQueueGenericSendFromISR+0x6e>
 80029ca:	2301      	movs	r3, #1
 80029cc:	e000      	b.n	80029d0 <xQueueGenericSendFromISR+0x70>
 80029ce:	2300      	movs	r3, #0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10a      	bne.n	80029ea <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80029d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d8:	f383 8811 	msr	BASEPRI, r3
 80029dc:	f3bf 8f6f 	isb	sy
 80029e0:	f3bf 8f4f 	dsb	sy
 80029e4:	623b      	str	r3, [r7, #32]
    }
 80029e6:	bf00      	nop
 80029e8:	e7fe      	b.n	80029e8 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80029ea:	f001 ff57 	bl	800489c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80029ee:	f3ef 8211 	mrs	r2, BASEPRI
 80029f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f6:	f383 8811 	msr	BASEPRI, r3
 80029fa:	f3bf 8f6f 	isb	sy
 80029fe:	f3bf 8f4f 	dsb	sy
 8002a02:	61fa      	str	r2, [r7, #28]
 8002a04:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002a06:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a08:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d302      	bcc.n	8002a1c <xQueueGenericSendFromISR+0xbc>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d148      	bne.n	8002aae <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2a:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f003 fb1c 	bl	800606c <SEGGER_SYSVIEW_ShrinkId>
 8002a34:	4601      	mov	r1, r0
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	2060      	movs	r0, #96	; 0x60
 8002a3c:	f002 fd54 	bl	80054e8 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	68b9      	ldr	r1, [r7, #8]
 8002a44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a46:	f000 f959 	bl	8002cfc <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002a4a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002a4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a52:	d112      	bne.n	8002a7a <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d025      	beq.n	8002aa8 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5e:	3324      	adds	r3, #36	; 0x24
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 febd 	bl	80037e0 <xTaskRemoveFromEventList>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d01d      	beq.n	8002aa8 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d01a      	beq.n	8002aa8 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	e016      	b.n	8002aa8 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002a7a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002a7e:	2b7f      	cmp	r3, #127	; 0x7f
 8002a80:	d10a      	bne.n	8002a98 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a86:	f383 8811 	msr	BASEPRI, r3
 8002a8a:	f3bf 8f6f 	isb	sy
 8002a8e:	f3bf 8f4f 	dsb	sy
 8002a92:	617b      	str	r3, [r7, #20]
    }
 8002a94:	bf00      	nop
 8002a96:	e7fe      	b.n	8002a96 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002a98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	b25a      	sxtb	r2, r3
 8002aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002aac:	e00b      	b.n	8002ac6 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f003 fadb 	bl	800606c <SEGGER_SYSVIEW_ShrinkId>
 8002ab6:	4601      	mov	r1, r0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	461a      	mov	r2, r3
 8002abc:	2060      	movs	r0, #96	; 0x60
 8002abe:	f002 fd13 	bl	80054e8 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac8:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002ad0:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3740      	adds	r7, #64	; 0x40
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002adc:	b590      	push	{r4, r7, lr}
 8002ade:	b08f      	sub	sp, #60	; 0x3c
 8002ae0:	af02      	add	r7, sp, #8
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10a      	bne.n	8002b0c <xQueueReceive+0x30>
        __asm volatile
 8002af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afa:	f383 8811 	msr	BASEPRI, r3
 8002afe:	f3bf 8f6f 	isb	sy
 8002b02:	f3bf 8f4f 	dsb	sy
 8002b06:	623b      	str	r3, [r7, #32]
    }
 8002b08:	bf00      	nop
 8002b0a:	e7fe      	b.n	8002b0a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d103      	bne.n	8002b1a <xQueueReceive+0x3e>
 8002b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <xQueueReceive+0x42>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <xQueueReceive+0x44>
 8002b1e:	2300      	movs	r3, #0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10a      	bne.n	8002b3a <xQueueReceive+0x5e>
        __asm volatile
 8002b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b28:	f383 8811 	msr	BASEPRI, r3
 8002b2c:	f3bf 8f6f 	isb	sy
 8002b30:	f3bf 8f4f 	dsb	sy
 8002b34:	61fb      	str	r3, [r7, #28]
    }
 8002b36:	bf00      	nop
 8002b38:	e7fe      	b.n	8002b38 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b3a:	f000 fff1 	bl	8003b20 <xTaskGetSchedulerState>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d102      	bne.n	8002b4a <xQueueReceive+0x6e>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <xQueueReceive+0x72>
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <xQueueReceive+0x74>
 8002b4e:	2300      	movs	r3, #0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10a      	bne.n	8002b6a <xQueueReceive+0x8e>
        __asm volatile
 8002b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b58:	f383 8811 	msr	BASEPRI, r3
 8002b5c:	f3bf 8f6f 	isb	sy
 8002b60:	f3bf 8f4f 	dsb	sy
 8002b64:	61bb      	str	r3, [r7, #24]
    }
 8002b66:	bf00      	nop
 8002b68:	e7fe      	b.n	8002b68 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002b6a:	f001 fdab 	bl	80046c4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b72:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d02f      	beq.n	8002bda <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b7a:	68b9      	ldr	r1, [r7, #8]
 8002b7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b7e:	f000 f927 	bl	8002dd0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b84:	4618      	mov	r0, r3
 8002b86:	f003 fa71 	bl	800606c <SEGGER_SYSVIEW_ShrinkId>
 8002b8a:	4604      	mov	r4, r0
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	f003 fa6d 	bl	800606c <SEGGER_SYSVIEW_ShrinkId>
 8002b92:	4602      	mov	r2, r0
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2101      	movs	r1, #1
 8002b98:	9100      	str	r1, [sp, #0]
 8002b9a:	4621      	mov	r1, r4
 8002b9c:	205c      	movs	r0, #92	; 0x5c
 8002b9e:	f002 fd73 	bl	8005688 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	1e5a      	subs	r2, r3, #1
 8002ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00f      	beq.n	8002bd2 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb4:	3310      	adds	r3, #16
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 fe12 	bl	80037e0 <xTaskRemoveFromEventList>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d007      	beq.n	8002bd2 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002bc2:	4b4d      	ldr	r3, [pc, #308]	; (8002cf8 <xQueueReceive+0x21c>)
 8002bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	f3bf 8f4f 	dsb	sy
 8002bce:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002bd2:	f001 fda7 	bl	8004724 <vPortExitCritical>
                return pdPASS;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e08a      	b.n	8002cf0 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d113      	bne.n	8002c08 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002be0:	f001 fda0 	bl	8004724 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be6:	4618      	mov	r0, r3
 8002be8:	f003 fa40 	bl	800606c <SEGGER_SYSVIEW_ShrinkId>
 8002bec:	4604      	mov	r4, r0
 8002bee:	2000      	movs	r0, #0
 8002bf0:	f003 fa3c 	bl	800606c <SEGGER_SYSVIEW_ShrinkId>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	9100      	str	r1, [sp, #0]
 8002bfc:	4621      	mov	r1, r4
 8002bfe:	205c      	movs	r0, #92	; 0x5c
 8002c00:	f002 fd42 	bl	8005688 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002c04:	2300      	movs	r3, #0
 8002c06:	e073      	b.n	8002cf0 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d106      	bne.n	8002c1c <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002c0e:	f107 0310 	add.w	r3, r7, #16
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 fe4a 	bl	80038ac <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002c1c:	f001 fd82 	bl	8004724 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002c20:	f000 fba8 	bl	8003374 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002c24:	f001 fd4e 	bl	80046c4 <vPortEnterCritical>
 8002c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c2e:	b25b      	sxtb	r3, r3
 8002c30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c34:	d103      	bne.n	8002c3e <xQueueReceive+0x162>
 8002c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c44:	b25b      	sxtb	r3, r3
 8002c46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c4a:	d103      	bne.n	8002c54 <xQueueReceive+0x178>
 8002c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c54:	f001 fd66 	bl	8004724 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c58:	1d3a      	adds	r2, r7, #4
 8002c5a:	f107 0310 	add.w	r3, r7, #16
 8002c5e:	4611      	mov	r1, r2
 8002c60:	4618      	mov	r0, r3
 8002c62:	f000 fe39 	bl	80038d8 <xTaskCheckForTimeOut>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d124      	bne.n	8002cb6 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c6e:	f000 f927 	bl	8002ec0 <prvIsQueueEmpty>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d018      	beq.n	8002caa <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7a:	3324      	adds	r3, #36	; 0x24
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	4611      	mov	r1, r2
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 fd5b 	bl	800373c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002c86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c88:	f000 f8c8 	bl	8002e1c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002c8c:	f000 fb80 	bl	8003390 <xTaskResumeAll>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f47f af69 	bne.w	8002b6a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002c98:	4b17      	ldr	r3, [pc, #92]	; (8002cf8 <xQueueReceive+0x21c>)
 8002c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	f3bf 8f4f 	dsb	sy
 8002ca4:	f3bf 8f6f 	isb	sy
 8002ca8:	e75f      	b.n	8002b6a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002caa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cac:	f000 f8b6 	bl	8002e1c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002cb0:	f000 fb6e 	bl	8003390 <xTaskResumeAll>
 8002cb4:	e759      	b.n	8002b6a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002cb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cb8:	f000 f8b0 	bl	8002e1c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002cbc:	f000 fb68 	bl	8003390 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002cc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cc2:	f000 f8fd 	bl	8002ec0 <prvIsQueueEmpty>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f43f af4e 	beq.w	8002b6a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f003 f9cb 	bl	800606c <SEGGER_SYSVIEW_ShrinkId>
 8002cd6:	4604      	mov	r4, r0
 8002cd8:	2000      	movs	r0, #0
 8002cda:	f003 f9c7 	bl	800606c <SEGGER_SYSVIEW_ShrinkId>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	9100      	str	r1, [sp, #0]
 8002ce6:	4621      	mov	r1, r4
 8002ce8:	205c      	movs	r0, #92	; 0x5c
 8002cea:	f002 fccd 	bl	8005688 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002cee:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3734      	adds	r7, #52	; 0x34
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd90      	pop	{r4, r7, pc}
 8002cf8:	e000ed04 	.word	0xe000ed04

08002cfc <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d10:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10d      	bne.n	8002d36 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d14d      	bne.n	8002dbe <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 ff18 	bl	8003b5c <xTaskPriorityDisinherit>
 8002d2c:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	609a      	str	r2, [r3, #8]
 8002d34:	e043      	b.n	8002dbe <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d119      	bne.n	8002d70 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6858      	ldr	r0, [r3, #4]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d44:	461a      	mov	r2, r3
 8002d46:	68b9      	ldr	r1, [r7, #8]
 8002d48:	f003 fb0a 	bl	8006360 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	441a      	add	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d32b      	bcc.n	8002dbe <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	605a      	str	r2, [r3, #4]
 8002d6e:	e026      	b.n	8002dbe <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	68d8      	ldr	r0, [r3, #12]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	461a      	mov	r2, r3
 8002d7a:	68b9      	ldr	r1, [r7, #8]
 8002d7c:	f003 faf0 	bl	8006360 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	425b      	negs	r3, r3
 8002d8a:	441a      	add	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d207      	bcs.n	8002dac <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	425b      	negs	r3, r3
 8002da6:	441a      	add	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d105      	bne.n	8002dbe <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d002      	beq.n	8002dbe <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1c5a      	adds	r2, r3, #1
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002dc6:	697b      	ldr	r3, [r7, #20]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d018      	beq.n	8002e14 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68da      	ldr	r2, [r3, #12]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	441a      	add	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d303      	bcc.n	8002e04 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68d9      	ldr	r1, [r3, #12]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	6838      	ldr	r0, [r7, #0]
 8002e10:	f003 faa6 	bl	8006360 <memcpy>
    }
}
 8002e14:	bf00      	nop
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002e24:	f001 fc4e 	bl	80046c4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e2e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e30:	e011      	b.n	8002e56 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d012      	beq.n	8002e60 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3324      	adds	r3, #36	; 0x24
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 fcce 	bl	80037e0 <xTaskRemoveFromEventList>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002e4a:	f000 fdab 	bl	80039a4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	dce9      	bgt.n	8002e32 <prvUnlockQueue+0x16>
 8002e5e:	e000      	b.n	8002e62 <prvUnlockQueue+0x46>
                        break;
 8002e60:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	22ff      	movs	r2, #255	; 0xff
 8002e66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002e6a:	f001 fc5b 	bl	8004724 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002e6e:	f001 fc29 	bl	80046c4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e78:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e7a:	e011      	b.n	8002ea0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d012      	beq.n	8002eaa <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3310      	adds	r3, #16
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 fca9 	bl	80037e0 <xTaskRemoveFromEventList>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002e94:	f000 fd86 	bl	80039a4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002e98:	7bbb      	ldrb	r3, [r7, #14]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ea0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	dce9      	bgt.n	8002e7c <prvUnlockQueue+0x60>
 8002ea8:	e000      	b.n	8002eac <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002eaa:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	22ff      	movs	r2, #255	; 0xff
 8002eb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002eb4:	f001 fc36 	bl	8004724 <vPortExitCritical>
}
 8002eb8:	bf00      	nop
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002ec8:	f001 fbfc 	bl	80046c4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d102      	bne.n	8002eda <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	e001      	b.n	8002ede <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002eda:	2300      	movs	r3, #0
 8002edc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002ede:	f001 fc21 	bl	8004724 <vPortExitCritical>

    return xReturn;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002ef4:	f001 fbe6 	bl	80046c4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d102      	bne.n	8002f0a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002f04:	2301      	movs	r3, #1
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	e001      	b.n	8002f0e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002f0e:	f001 fc09 	bl	8004724 <vPortExitCritical>

    return xReturn;
 8002f12:	68fb      	ldr	r3, [r7, #12]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	e01e      	b.n	8002f6a <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002f2c:	4a13      	ldr	r2, [pc, #76]	; (8002f7c <vQueueAddToRegistry+0x60>)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d115      	bne.n	8002f64 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002f38:	4910      	ldr	r1, [pc, #64]	; (8002f7c <vQueueAddToRegistry+0x60>)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002f42:	4a0e      	ldr	r2, [pc, #56]	; (8002f7c <vQueueAddToRegistry+0x60>)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4413      	add	r3, r2
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f003 f88b 	bl	800606c <SEGGER_SYSVIEW_ShrinkId>
 8002f56:	4601      	mov	r1, r0
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	2071      	movs	r0, #113	; 0x71
 8002f5e:	f002 fac3 	bl	80054e8 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002f62:	e006      	b.n	8002f72 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	3301      	adds	r3, #1
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2b07      	cmp	r3, #7
 8002f6e:	d9dd      	bls.n	8002f2c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002f70:	bf00      	nop
 8002f72:	bf00      	nop
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	20002fb0 	.word	0x20002fb0

08002f80 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002f90:	f001 fb98 	bl	80046c4 <vPortEnterCritical>
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f9a:	b25b      	sxtb	r3, r3
 8002f9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fa0:	d103      	bne.n	8002faa <vQueueWaitForMessageRestricted+0x2a>
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fb0:	b25b      	sxtb	r3, r3
 8002fb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fb6:	d103      	bne.n	8002fc0 <vQueueWaitForMessageRestricted+0x40>
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fc0:	f001 fbb0 	bl	8004724 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d106      	bne.n	8002fda <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	3324      	adds	r3, #36	; 0x24
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	68b9      	ldr	r1, [r7, #8]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 fbd5 	bl	8003784 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002fda:	6978      	ldr	r0, [r7, #20]
 8002fdc:	f7ff ff1e 	bl	8002e1c <prvUnlockQueue>
    }
 8002fe0:	bf00      	nop
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08c      	sub	sp, #48	; 0x30
 8002fec:	af04      	add	r7, sp, #16
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	603b      	str	r3, [r7, #0]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ff8:	88fb      	ldrh	r3, [r7, #6]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f001 fc8d 	bl	800491c <pvPortMalloc>
 8003002:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00e      	beq.n	8003028 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800300a:	2058      	movs	r0, #88	; 0x58
 800300c:	f001 fc86 	bl	800491c <pvPortMalloc>
 8003010:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	631a      	str	r2, [r3, #48]	; 0x30
 800301e:	e005      	b.n	800302c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003020:	6978      	ldr	r0, [r7, #20]
 8003022:	f001 fd5b 	bl	8004adc <vPortFree>
 8003026:	e001      	b.n	800302c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003028:	2300      	movs	r3, #0
 800302a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d013      	beq.n	800305a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003032:	88fa      	ldrh	r2, [r7, #6]
 8003034:	2300      	movs	r3, #0
 8003036:	9303      	str	r3, [sp, #12]
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	9302      	str	r3, [sp, #8]
 800303c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303e:	9301      	str	r3, [sp, #4]
 8003040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	68b9      	ldr	r1, [r7, #8]
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 f80e 	bl	800306a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800304e:	69f8      	ldr	r0, [r7, #28]
 8003050:	f000 f8a2 	bl	8003198 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003054:	2301      	movs	r3, #1
 8003056:	61bb      	str	r3, [r7, #24]
 8003058:	e002      	b.n	8003060 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800305a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800305e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003060:	69bb      	ldr	r3, [r7, #24]
    }
 8003062:	4618      	mov	r0, r3
 8003064:	3720      	adds	r7, #32
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b088      	sub	sp, #32
 800306e:	af00      	add	r7, sp, #0
 8003070:	60f8      	str	r0, [r7, #12]
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	607a      	str	r2, [r7, #4]
 8003076:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	461a      	mov	r2, r3
 8003082:	21a5      	movs	r1, #165	; 0xa5
 8003084:	f003 f97a 	bl	800637c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003092:	3b01      	subs	r3, #1
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	f023 0307 	bic.w	r3, r3, #7
 80030a0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00a      	beq.n	80030c2 <prvInitialiseNewTask+0x58>
        __asm volatile
 80030ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b0:	f383 8811 	msr	BASEPRI, r3
 80030b4:	f3bf 8f6f 	isb	sy
 80030b8:	f3bf 8f4f 	dsb	sy
 80030bc:	617b      	str	r3, [r7, #20]
    }
 80030be:	bf00      	nop
 80030c0:	e7fe      	b.n	80030c0 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d01f      	beq.n	8003108 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030c8:	2300      	movs	r3, #0
 80030ca:	61fb      	str	r3, [r7, #28]
 80030cc:	e012      	b.n	80030f4 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	4413      	add	r3, r2
 80030d4:	7819      	ldrb	r1, [r3, #0]
 80030d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	4413      	add	r3, r2
 80030dc:	3334      	adds	r3, #52	; 0x34
 80030de:	460a      	mov	r2, r1
 80030e0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	4413      	add	r3, r2
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d006      	beq.n	80030fc <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	3301      	adds	r3, #1
 80030f2:	61fb      	str	r3, [r7, #28]
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	2b09      	cmp	r3, #9
 80030f8:	d9e9      	bls.n	80030ce <prvInitialiseNewTask+0x64>
 80030fa:	e000      	b.n	80030fe <prvInitialiseNewTask+0x94>
            {
                break;
 80030fc:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80030fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003100:	2200      	movs	r2, #0
 8003102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003106:	e003      	b.n	8003110 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003112:	2b04      	cmp	r3, #4
 8003114:	d901      	bls.n	800311a <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003116:	2304      	movs	r3, #4
 8003118:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800311a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800311e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003122:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003124:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003128:	2200      	movs	r2, #0
 800312a:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800312c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312e:	3304      	adds	r3, #4
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff f96b 	bl	800240c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003138:	3318      	adds	r3, #24
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff f966 	bl	800240c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003142:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003144:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003148:	f1c3 0205 	rsb	r2, r3, #5
 800314c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003152:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003154:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003158:	3350      	adds	r3, #80	; 0x50
 800315a:	2204      	movs	r2, #4
 800315c:	2100      	movs	r1, #0
 800315e:	4618      	mov	r0, r3
 8003160:	f003 f90c 	bl	800637c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003166:	3354      	adds	r3, #84	; 0x54
 8003168:	2201      	movs	r2, #1
 800316a:	2100      	movs	r1, #0
 800316c:	4618      	mov	r0, r3
 800316e:	f003 f905 	bl	800637c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	68f9      	ldr	r1, [r7, #12]
 8003176:	69b8      	ldr	r0, [r7, #24]
 8003178:	f001 f8fa 	bl	8004370 <pxPortInitialiseStack>
 800317c:	4602      	mov	r2, r0
 800317e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003180:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003184:	2b00      	cmp	r3, #0
 8003186:	d002      	beq.n	800318e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800318c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800318e:	bf00      	nop
 8003190:	3720      	adds	r7, #32
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003198:	b5b0      	push	{r4, r5, r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af02      	add	r7, sp, #8
 800319e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80031a0:	f001 fa90 	bl	80046c4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80031a4:	4b3b      	ldr	r3, [pc, #236]	; (8003294 <prvAddNewTaskToReadyList+0xfc>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	3301      	adds	r3, #1
 80031aa:	4a3a      	ldr	r2, [pc, #232]	; (8003294 <prvAddNewTaskToReadyList+0xfc>)
 80031ac:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80031ae:	4b3a      	ldr	r3, [pc, #232]	; (8003298 <prvAddNewTaskToReadyList+0x100>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d109      	bne.n	80031ca <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80031b6:	4a38      	ldr	r2, [pc, #224]	; (8003298 <prvAddNewTaskToReadyList+0x100>)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80031bc:	4b35      	ldr	r3, [pc, #212]	; (8003294 <prvAddNewTaskToReadyList+0xfc>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d110      	bne.n	80031e6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80031c4:	f000 fc12 	bl	80039ec <prvInitialiseTaskLists>
 80031c8:	e00d      	b.n	80031e6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80031ca:	4b34      	ldr	r3, [pc, #208]	; (800329c <prvAddNewTaskToReadyList+0x104>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d109      	bne.n	80031e6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80031d2:	4b31      	ldr	r3, [pc, #196]	; (8003298 <prvAddNewTaskToReadyList+0x100>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031dc:	429a      	cmp	r2, r3
 80031de:	d802      	bhi.n	80031e6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80031e0:	4a2d      	ldr	r2, [pc, #180]	; (8003298 <prvAddNewTaskToReadyList+0x100>)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80031e6:	4b2e      	ldr	r3, [pc, #184]	; (80032a0 <prvAddNewTaskToReadyList+0x108>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	3301      	adds	r3, #1
 80031ec:	4a2c      	ldr	r2, [pc, #176]	; (80032a0 <prvAddNewTaskToReadyList+0x108>)
 80031ee:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80031f0:	4b2b      	ldr	r3, [pc, #172]	; (80032a0 <prvAddNewTaskToReadyList+0x108>)
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d016      	beq.n	800322c <prvAddNewTaskToReadyList+0x94>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4618      	mov	r0, r3
 8003202:	f002 fe0d 	bl	8005e20 <SEGGER_SYSVIEW_OnTaskCreate>
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	461d      	mov	r5, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	461c      	mov	r4, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	1ae3      	subs	r3, r4, r3
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	462b      	mov	r3, r5
 8003228:	f001 fd76 	bl	8004d18 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4618      	mov	r0, r3
 8003230:	f002 fe7a 	bl	8005f28 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003238:	2201      	movs	r2, #1
 800323a:	409a      	lsls	r2, r3
 800323c:	4b19      	ldr	r3, [pc, #100]	; (80032a4 <prvAddNewTaskToReadyList+0x10c>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4313      	orrs	r3, r2
 8003242:	4a18      	ldr	r2, [pc, #96]	; (80032a4 <prvAddNewTaskToReadyList+0x10c>)
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4a15      	ldr	r2, [pc, #84]	; (80032a8 <prvAddNewTaskToReadyList+0x110>)
 8003254:	441a      	add	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	3304      	adds	r3, #4
 800325a:	4619      	mov	r1, r3
 800325c:	4610      	mov	r0, r2
 800325e:	f7ff f8e2 	bl	8002426 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003262:	f001 fa5f 	bl	8004724 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003266:	4b0d      	ldr	r3, [pc, #52]	; (800329c <prvAddNewTaskToReadyList+0x104>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00e      	beq.n	800328c <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800326e:	4b0a      	ldr	r3, [pc, #40]	; (8003298 <prvAddNewTaskToReadyList+0x100>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003278:	429a      	cmp	r2, r3
 800327a:	d207      	bcs.n	800328c <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800327c:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <prvAddNewTaskToReadyList+0x114>)
 800327e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	f3bf 8f4f 	dsb	sy
 8003288:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800328c:	bf00      	nop
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bdb0      	pop	{r4, r5, r7, pc}
 8003294:	20000108 	.word	0x20000108
 8003298:	20000030 	.word	0x20000030
 800329c:	20000114 	.word	0x20000114
 80032a0:	20000124 	.word	0x20000124
 80032a4:	20000110 	.word	0x20000110
 80032a8:	20000034 	.word	0x20000034
 80032ac:	e000ed04 	.word	0xe000ed04

080032b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80032b6:	4b27      	ldr	r3, [pc, #156]	; (8003354 <vTaskStartScheduler+0xa4>)
 80032b8:	9301      	str	r3, [sp, #4]
 80032ba:	2300      	movs	r3, #0
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	2300      	movs	r3, #0
 80032c0:	2282      	movs	r2, #130	; 0x82
 80032c2:	4925      	ldr	r1, [pc, #148]	; (8003358 <vTaskStartScheduler+0xa8>)
 80032c4:	4825      	ldr	r0, [pc, #148]	; (800335c <vTaskStartScheduler+0xac>)
 80032c6:	f7ff fe8f 	bl	8002fe8 <xTaskCreate>
 80032ca:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d102      	bne.n	80032d8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80032d2:	f000 fd3b 	bl	8003d4c <xTimerCreateTimerTask>
 80032d6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d124      	bne.n	8003328 <vTaskStartScheduler+0x78>
        __asm volatile
 80032de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e2:	f383 8811 	msr	BASEPRI, r3
 80032e6:	f3bf 8f6f 	isb	sy
 80032ea:	f3bf 8f4f 	dsb	sy
 80032ee:	60bb      	str	r3, [r7, #8]
    }
 80032f0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80032f2:	4b1b      	ldr	r3, [pc, #108]	; (8003360 <vTaskStartScheduler+0xb0>)
 80032f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032f8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80032fa:	4b1a      	ldr	r3, [pc, #104]	; (8003364 <vTaskStartScheduler+0xb4>)
 80032fc:	2201      	movs	r2, #1
 80032fe:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003300:	4b19      	ldr	r3, [pc, #100]	; (8003368 <vTaskStartScheduler+0xb8>)
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003306:	4b19      	ldr	r3, [pc, #100]	; (800336c <vTaskStartScheduler+0xbc>)
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	4b12      	ldr	r3, [pc, #72]	; (8003354 <vTaskStartScheduler+0xa4>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	429a      	cmp	r2, r3
 8003310:	d102      	bne.n	8003318 <vTaskStartScheduler+0x68>
 8003312:	f002 fd69 	bl	8005de8 <SEGGER_SYSVIEW_OnIdle>
 8003316:	e004      	b.n	8003322 <vTaskStartScheduler+0x72>
 8003318:	4b14      	ldr	r3, [pc, #80]	; (800336c <vTaskStartScheduler+0xbc>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	f002 fdc1 	bl	8005ea4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003322:	f001 f8af 	bl	8004484 <xPortStartScheduler>
 8003326:	e00e      	b.n	8003346 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800332e:	d10a      	bne.n	8003346 <vTaskStartScheduler+0x96>
        __asm volatile
 8003330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003334:	f383 8811 	msr	BASEPRI, r3
 8003338:	f3bf 8f6f 	isb	sy
 800333c:	f3bf 8f4f 	dsb	sy
 8003340:	607b      	str	r3, [r7, #4]
    }
 8003342:	bf00      	nop
 8003344:	e7fe      	b.n	8003344 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003346:	4b0a      	ldr	r3, [pc, #40]	; (8003370 <vTaskStartScheduler+0xc0>)
 8003348:	681b      	ldr	r3, [r3, #0]
}
 800334a:	bf00      	nop
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	2000012c 	.word	0x2000012c
 8003358:	080063a4 	.word	0x080063a4
 800335c:	080039bd 	.word	0x080039bd
 8003360:	20000128 	.word	0x20000128
 8003364:	20000114 	.word	0x20000114
 8003368:	2000010c 	.word	0x2000010c
 800336c:	20000030 	.word	0x20000030
 8003370:	2000000c 	.word	0x2000000c

08003374 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003378:	4b04      	ldr	r3, [pc, #16]	; (800338c <vTaskSuspendAll+0x18>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	3301      	adds	r3, #1
 800337e:	4a03      	ldr	r2, [pc, #12]	; (800338c <vTaskSuspendAll+0x18>)
 8003380:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003382:	bf00      	nop
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	20000130 	.word	0x20000130

08003390 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003396:	2300      	movs	r3, #0
 8003398:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800339a:	2300      	movs	r3, #0
 800339c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800339e:	4b43      	ldr	r3, [pc, #268]	; (80034ac <xTaskResumeAll+0x11c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10a      	bne.n	80033bc <xTaskResumeAll+0x2c>
        __asm volatile
 80033a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033aa:	f383 8811 	msr	BASEPRI, r3
 80033ae:	f3bf 8f6f 	isb	sy
 80033b2:	f3bf 8f4f 	dsb	sy
 80033b6:	603b      	str	r3, [r7, #0]
    }
 80033b8:	bf00      	nop
 80033ba:	e7fe      	b.n	80033ba <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80033bc:	f001 f982 	bl	80046c4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80033c0:	4b3a      	ldr	r3, [pc, #232]	; (80034ac <xTaskResumeAll+0x11c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	3b01      	subs	r3, #1
 80033c6:	4a39      	ldr	r2, [pc, #228]	; (80034ac <xTaskResumeAll+0x11c>)
 80033c8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033ca:	4b38      	ldr	r3, [pc, #224]	; (80034ac <xTaskResumeAll+0x11c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d165      	bne.n	800349e <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80033d2:	4b37      	ldr	r3, [pc, #220]	; (80034b0 <xTaskResumeAll+0x120>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d061      	beq.n	800349e <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033da:	e032      	b.n	8003442 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033dc:	4b35      	ldr	r3, [pc, #212]	; (80034b4 <xTaskResumeAll+0x124>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	3318      	adds	r3, #24
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff f879 	bl	80024e0 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	3304      	adds	r3, #4
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff f874 	bl	80024e0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f002 fd94 	bl	8005f28 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003404:	2201      	movs	r2, #1
 8003406:	409a      	lsls	r2, r3
 8003408:	4b2b      	ldr	r3, [pc, #172]	; (80034b8 <xTaskResumeAll+0x128>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4313      	orrs	r3, r2
 800340e:	4a2a      	ldr	r2, [pc, #168]	; (80034b8 <xTaskResumeAll+0x128>)
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003416:	4613      	mov	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4a27      	ldr	r2, [pc, #156]	; (80034bc <xTaskResumeAll+0x12c>)
 8003420:	441a      	add	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	3304      	adds	r3, #4
 8003426:	4619      	mov	r1, r3
 8003428:	4610      	mov	r0, r2
 800342a:	f7fe fffc 	bl	8002426 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003432:	4b23      	ldr	r3, [pc, #140]	; (80034c0 <xTaskResumeAll+0x130>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003438:	429a      	cmp	r2, r3
 800343a:	d302      	bcc.n	8003442 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 800343c:	4b21      	ldr	r3, [pc, #132]	; (80034c4 <xTaskResumeAll+0x134>)
 800343e:	2201      	movs	r2, #1
 8003440:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003442:	4b1c      	ldr	r3, [pc, #112]	; (80034b4 <xTaskResumeAll+0x124>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1c8      	bne.n	80033dc <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003450:	f000 fb4a 	bl	8003ae8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003454:	4b1c      	ldr	r3, [pc, #112]	; (80034c8 <xTaskResumeAll+0x138>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d010      	beq.n	8003482 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003460:	f000 f846 	bl	80034f0 <xTaskIncrementTick>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d002      	beq.n	8003470 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800346a:	4b16      	ldr	r3, [pc, #88]	; (80034c4 <xTaskResumeAll+0x134>)
 800346c:	2201      	movs	r2, #1
 800346e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3b01      	subs	r3, #1
 8003474:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1f1      	bne.n	8003460 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 800347c:	4b12      	ldr	r3, [pc, #72]	; (80034c8 <xTaskResumeAll+0x138>)
 800347e:	2200      	movs	r2, #0
 8003480:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003482:	4b10      	ldr	r3, [pc, #64]	; (80034c4 <xTaskResumeAll+0x134>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d009      	beq.n	800349e <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800348a:	2301      	movs	r3, #1
 800348c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800348e:	4b0f      	ldr	r3, [pc, #60]	; (80034cc <xTaskResumeAll+0x13c>)
 8003490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	f3bf 8f4f 	dsb	sy
 800349a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800349e:	f001 f941 	bl	8004724 <vPortExitCritical>

    return xAlreadyYielded;
 80034a2:	68bb      	ldr	r3, [r7, #8]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	20000130 	.word	0x20000130
 80034b0:	20000108 	.word	0x20000108
 80034b4:	200000c8 	.word	0x200000c8
 80034b8:	20000110 	.word	0x20000110
 80034bc:	20000034 	.word	0x20000034
 80034c0:	20000030 	.word	0x20000030
 80034c4:	2000011c 	.word	0x2000011c
 80034c8:	20000118 	.word	0x20000118
 80034cc:	e000ed04 	.word	0xe000ed04

080034d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80034d6:	4b05      	ldr	r3, [pc, #20]	; (80034ec <xTaskGetTickCount+0x1c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80034dc:	687b      	ldr	r3, [r7, #4]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	2000010c 	.word	0x2000010c

080034f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80034f6:	2300      	movs	r3, #0
 80034f8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034fa:	4b50      	ldr	r3, [pc, #320]	; (800363c <xTaskIncrementTick+0x14c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f040 8092 	bne.w	8003628 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003504:	4b4e      	ldr	r3, [pc, #312]	; (8003640 <xTaskIncrementTick+0x150>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	3301      	adds	r3, #1
 800350a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800350c:	4a4c      	ldr	r2, [pc, #304]	; (8003640 <xTaskIncrementTick+0x150>)
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d120      	bne.n	800355a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003518:	4b4a      	ldr	r3, [pc, #296]	; (8003644 <xTaskIncrementTick+0x154>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <xTaskIncrementTick+0x48>
        __asm volatile
 8003522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003526:	f383 8811 	msr	BASEPRI, r3
 800352a:	f3bf 8f6f 	isb	sy
 800352e:	f3bf 8f4f 	dsb	sy
 8003532:	603b      	str	r3, [r7, #0]
    }
 8003534:	bf00      	nop
 8003536:	e7fe      	b.n	8003536 <xTaskIncrementTick+0x46>
 8003538:	4b42      	ldr	r3, [pc, #264]	; (8003644 <xTaskIncrementTick+0x154>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	4b42      	ldr	r3, [pc, #264]	; (8003648 <xTaskIncrementTick+0x158>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a40      	ldr	r2, [pc, #256]	; (8003644 <xTaskIncrementTick+0x154>)
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	4a40      	ldr	r2, [pc, #256]	; (8003648 <xTaskIncrementTick+0x158>)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6013      	str	r3, [r2, #0]
 800354c:	4b3f      	ldr	r3, [pc, #252]	; (800364c <xTaskIncrementTick+0x15c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	3301      	adds	r3, #1
 8003552:	4a3e      	ldr	r2, [pc, #248]	; (800364c <xTaskIncrementTick+0x15c>)
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	f000 fac7 	bl	8003ae8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800355a:	4b3d      	ldr	r3, [pc, #244]	; (8003650 <xTaskIncrementTick+0x160>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	429a      	cmp	r2, r3
 8003562:	d34c      	bcc.n	80035fe <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003564:	4b37      	ldr	r3, [pc, #220]	; (8003644 <xTaskIncrementTick+0x154>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d104      	bne.n	8003578 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800356e:	4b38      	ldr	r3, [pc, #224]	; (8003650 <xTaskIncrementTick+0x160>)
 8003570:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003574:	601a      	str	r2, [r3, #0]
                    break;
 8003576:	e042      	b.n	80035fe <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003578:	4b32      	ldr	r3, [pc, #200]	; (8003644 <xTaskIncrementTick+0x154>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	429a      	cmp	r2, r3
 800358e:	d203      	bcs.n	8003598 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003590:	4a2f      	ldr	r2, [pc, #188]	; (8003650 <xTaskIncrementTick+0x160>)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003596:	e032      	b.n	80035fe <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	3304      	adds	r3, #4
 800359c:	4618      	mov	r0, r3
 800359e:	f7fe ff9f 	bl	80024e0 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d004      	beq.n	80035b4 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	3318      	adds	r3, #24
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fe ff96 	bl	80024e0 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f002 fcb6 	bl	8005f28 <SEGGER_SYSVIEW_OnTaskStartReady>
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c0:	2201      	movs	r2, #1
 80035c2:	409a      	lsls	r2, r3
 80035c4:	4b23      	ldr	r3, [pc, #140]	; (8003654 <xTaskIncrementTick+0x164>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	4a22      	ldr	r2, [pc, #136]	; (8003654 <xTaskIncrementTick+0x164>)
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d2:	4613      	mov	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4413      	add	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4a1f      	ldr	r2, [pc, #124]	; (8003658 <xTaskIncrementTick+0x168>)
 80035dc:	441a      	add	r2, r3
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	3304      	adds	r3, #4
 80035e2:	4619      	mov	r1, r3
 80035e4:	4610      	mov	r0, r2
 80035e6:	f7fe ff1e 	bl	8002426 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ee:	4b1b      	ldr	r3, [pc, #108]	; (800365c <xTaskIncrementTick+0x16c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d3b5      	bcc.n	8003564 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80035f8:	2301      	movs	r3, #1
 80035fa:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035fc:	e7b2      	b.n	8003564 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80035fe:	4b17      	ldr	r3, [pc, #92]	; (800365c <xTaskIncrementTick+0x16c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003604:	4914      	ldr	r1, [pc, #80]	; (8003658 <xTaskIncrementTick+0x168>)
 8003606:	4613      	mov	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d901      	bls.n	800361a <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8003616:	2301      	movs	r3, #1
 8003618:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800361a:	4b11      	ldr	r3, [pc, #68]	; (8003660 <xTaskIncrementTick+0x170>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d007      	beq.n	8003632 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8003622:	2301      	movs	r3, #1
 8003624:	617b      	str	r3, [r7, #20]
 8003626:	e004      	b.n	8003632 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003628:	4b0e      	ldr	r3, [pc, #56]	; (8003664 <xTaskIncrementTick+0x174>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	3301      	adds	r3, #1
 800362e:	4a0d      	ldr	r2, [pc, #52]	; (8003664 <xTaskIncrementTick+0x174>)
 8003630:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003632:	697b      	ldr	r3, [r7, #20]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	20000130 	.word	0x20000130
 8003640:	2000010c 	.word	0x2000010c
 8003644:	200000c0 	.word	0x200000c0
 8003648:	200000c4 	.word	0x200000c4
 800364c:	20000120 	.word	0x20000120
 8003650:	20000128 	.word	0x20000128
 8003654:	20000110 	.word	0x20000110
 8003658:	20000034 	.word	0x20000034
 800365c:	20000030 	.word	0x20000030
 8003660:	2000011c 	.word	0x2000011c
 8003664:	20000118 	.word	0x20000118

08003668 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800366e:	4b2d      	ldr	r3, [pc, #180]	; (8003724 <vTaskSwitchContext+0xbc>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003676:	4b2c      	ldr	r3, [pc, #176]	; (8003728 <vTaskSwitchContext+0xc0>)
 8003678:	2201      	movs	r2, #1
 800367a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800367c:	e04d      	b.n	800371a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800367e:	4b2a      	ldr	r3, [pc, #168]	; (8003728 <vTaskSwitchContext+0xc0>)
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003684:	4b29      	ldr	r3, [pc, #164]	; (800372c <vTaskSwitchContext+0xc4>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	fab3 f383 	clz	r3, r3
 8003690:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003692:	7afb      	ldrb	r3, [r7, #11]
 8003694:	f1c3 031f 	rsb	r3, r3, #31
 8003698:	617b      	str	r3, [r7, #20]
 800369a:	4925      	ldr	r1, [pc, #148]	; (8003730 <vTaskSwitchContext+0xc8>)
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	4613      	mov	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	440b      	add	r3, r1
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10a      	bne.n	80036c4 <vTaskSwitchContext+0x5c>
        __asm volatile
 80036ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b2:	f383 8811 	msr	BASEPRI, r3
 80036b6:	f3bf 8f6f 	isb	sy
 80036ba:	f3bf 8f4f 	dsb	sy
 80036be:	607b      	str	r3, [r7, #4]
    }
 80036c0:	bf00      	nop
 80036c2:	e7fe      	b.n	80036c2 <vTaskSwitchContext+0x5a>
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	4613      	mov	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4a18      	ldr	r2, [pc, #96]	; (8003730 <vTaskSwitchContext+0xc8>)
 80036d0:	4413      	add	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	605a      	str	r2, [r3, #4]
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	3308      	adds	r3, #8
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d104      	bne.n	80036f4 <vTaskSwitchContext+0x8c>
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	605a      	str	r2, [r3, #4]
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	4a0e      	ldr	r2, [pc, #56]	; (8003734 <vTaskSwitchContext+0xcc>)
 80036fc:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80036fe:	4b0d      	ldr	r3, [pc, #52]	; (8003734 <vTaskSwitchContext+0xcc>)
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	4b0d      	ldr	r3, [pc, #52]	; (8003738 <vTaskSwitchContext+0xd0>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	429a      	cmp	r2, r3
 8003708:	d102      	bne.n	8003710 <vTaskSwitchContext+0xa8>
 800370a:	f002 fb6d 	bl	8005de8 <SEGGER_SYSVIEW_OnIdle>
}
 800370e:	e004      	b.n	800371a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003710:	4b08      	ldr	r3, [pc, #32]	; (8003734 <vTaskSwitchContext+0xcc>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4618      	mov	r0, r3
 8003716:	f002 fbc5 	bl	8005ea4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800371a:	bf00      	nop
 800371c:	3718      	adds	r7, #24
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	20000130 	.word	0x20000130
 8003728:	2000011c 	.word	0x2000011c
 800372c:	20000110 	.word	0x20000110
 8003730:	20000034 	.word	0x20000034
 8003734:	20000030 	.word	0x20000030
 8003738:	2000012c 	.word	0x2000012c

0800373c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10a      	bne.n	8003762 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800374c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003750:	f383 8811 	msr	BASEPRI, r3
 8003754:	f3bf 8f6f 	isb	sy
 8003758:	f3bf 8f4f 	dsb	sy
 800375c:	60fb      	str	r3, [r7, #12]
    }
 800375e:	bf00      	nop
 8003760:	e7fe      	b.n	8003760 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003762:	4b07      	ldr	r3, [pc, #28]	; (8003780 <vTaskPlaceOnEventList+0x44>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	3318      	adds	r3, #24
 8003768:	4619      	mov	r1, r3
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7fe fe7f 	bl	800246e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003770:	2101      	movs	r1, #1
 8003772:	6838      	ldr	r0, [r7, #0]
 8003774:	f000 fa72 	bl	8003c5c <prvAddCurrentTaskToDelayedList>
}
 8003778:	bf00      	nop
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	20000030 	.word	0x20000030

08003784 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10a      	bne.n	80037ac <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379a:	f383 8811 	msr	BASEPRI, r3
 800379e:	f3bf 8f6f 	isb	sy
 80037a2:	f3bf 8f4f 	dsb	sy
 80037a6:	617b      	str	r3, [r7, #20]
    }
 80037a8:	bf00      	nop
 80037aa:	e7fe      	b.n	80037aa <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037ac:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <vTaskPlaceOnEventListRestricted+0x58>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	3318      	adds	r3, #24
 80037b2:	4619      	mov	r1, r3
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f7fe fe36 	bl	8002426 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d002      	beq.n	80037c6 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80037c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037c4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80037c6:	2024      	movs	r0, #36	; 0x24
 80037c8:	f001 fe34 	bl	8005434 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	68b8      	ldr	r0, [r7, #8]
 80037d0:	f000 fa44 	bl	8003c5c <prvAddCurrentTaskToDelayedList>
    }
 80037d4:	bf00      	nop
 80037d6:	3718      	adds	r7, #24
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	20000030 	.word	0x20000030

080037e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10a      	bne.n	800380c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80037f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fa:	f383 8811 	msr	BASEPRI, r3
 80037fe:	f3bf 8f6f 	isb	sy
 8003802:	f3bf 8f4f 	dsb	sy
 8003806:	60fb      	str	r3, [r7, #12]
    }
 8003808:	bf00      	nop
 800380a:	e7fe      	b.n	800380a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	3318      	adds	r3, #24
 8003810:	4618      	mov	r0, r3
 8003812:	f7fe fe65 	bl	80024e0 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003816:	4b1f      	ldr	r3, [pc, #124]	; (8003894 <xTaskRemoveFromEventList+0xb4>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d120      	bne.n	8003860 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	3304      	adds	r3, #4
 8003822:	4618      	mov	r0, r3
 8003824:	f7fe fe5c 	bl	80024e0 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	4618      	mov	r0, r3
 800382c:	f002 fb7c 	bl	8005f28 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003834:	2201      	movs	r2, #1
 8003836:	409a      	lsls	r2, r3
 8003838:	4b17      	ldr	r3, [pc, #92]	; (8003898 <xTaskRemoveFromEventList+0xb8>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4313      	orrs	r3, r2
 800383e:	4a16      	ldr	r2, [pc, #88]	; (8003898 <xTaskRemoveFromEventList+0xb8>)
 8003840:	6013      	str	r3, [r2, #0]
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003846:	4613      	mov	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4413      	add	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4a13      	ldr	r2, [pc, #76]	; (800389c <xTaskRemoveFromEventList+0xbc>)
 8003850:	441a      	add	r2, r3
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	3304      	adds	r3, #4
 8003856:	4619      	mov	r1, r3
 8003858:	4610      	mov	r0, r2
 800385a:	f7fe fde4 	bl	8002426 <vListInsertEnd>
 800385e:	e005      	b.n	800386c <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	3318      	adds	r3, #24
 8003864:	4619      	mov	r1, r3
 8003866:	480e      	ldr	r0, [pc, #56]	; (80038a0 <xTaskRemoveFromEventList+0xc0>)
 8003868:	f7fe fddd 	bl	8002426 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003870:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <xTaskRemoveFromEventList+0xc4>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003876:	429a      	cmp	r2, r3
 8003878:	d905      	bls.n	8003886 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800387a:	2301      	movs	r3, #1
 800387c:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800387e:	4b0a      	ldr	r3, [pc, #40]	; (80038a8 <xTaskRemoveFromEventList+0xc8>)
 8003880:	2201      	movs	r2, #1
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	e001      	b.n	800388a <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003886:	2300      	movs	r3, #0
 8003888:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800388a:	697b      	ldr	r3, [r7, #20]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	20000130 	.word	0x20000130
 8003898:	20000110 	.word	0x20000110
 800389c:	20000034 	.word	0x20000034
 80038a0:	200000c8 	.word	0x200000c8
 80038a4:	20000030 	.word	0x20000030
 80038a8:	2000011c 	.word	0x2000011c

080038ac <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80038b4:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <vTaskInternalSetTimeOutState+0x24>)
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80038bc:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <vTaskInternalSetTimeOutState+0x28>)
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	605a      	str	r2, [r3, #4]
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	20000120 	.word	0x20000120
 80038d4:	2000010c 	.word	0x2000010c

080038d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b088      	sub	sp, #32
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10a      	bne.n	80038fe <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80038e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ec:	f383 8811 	msr	BASEPRI, r3
 80038f0:	f3bf 8f6f 	isb	sy
 80038f4:	f3bf 8f4f 	dsb	sy
 80038f8:	613b      	str	r3, [r7, #16]
    }
 80038fa:	bf00      	nop
 80038fc:	e7fe      	b.n	80038fc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10a      	bne.n	800391a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003908:	f383 8811 	msr	BASEPRI, r3
 800390c:	f3bf 8f6f 	isb	sy
 8003910:	f3bf 8f4f 	dsb	sy
 8003914:	60fb      	str	r3, [r7, #12]
    }
 8003916:	bf00      	nop
 8003918:	e7fe      	b.n	8003918 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800391a:	f000 fed3 	bl	80046c4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800391e:	4b1f      	ldr	r3, [pc, #124]	; (800399c <xTaskCheckForTimeOut+0xc4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003936:	d102      	bne.n	800393e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003938:	2300      	movs	r3, #0
 800393a:	61fb      	str	r3, [r7, #28]
 800393c:	e026      	b.n	800398c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	4b17      	ldr	r3, [pc, #92]	; (80039a0 <xTaskCheckForTimeOut+0xc8>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	429a      	cmp	r2, r3
 8003948:	d00a      	beq.n	8003960 <xTaskCheckForTimeOut+0x88>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	429a      	cmp	r2, r3
 8003952:	d305      	bcc.n	8003960 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003954:	2301      	movs	r3, #1
 8003956:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	e015      	b.n	800398c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	429a      	cmp	r2, r3
 8003968:	d20b      	bcs.n	8003982 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	1ad2      	subs	r2, r2, r3
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff ff98 	bl	80038ac <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800397c:	2300      	movs	r3, #0
 800397e:	61fb      	str	r3, [r7, #28]
 8003980:	e004      	b.n	800398c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003988:	2301      	movs	r3, #1
 800398a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800398c:	f000 feca 	bl	8004724 <vPortExitCritical>

    return xReturn;
 8003990:	69fb      	ldr	r3, [r7, #28]
}
 8003992:	4618      	mov	r0, r3
 8003994:	3720      	adds	r7, #32
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	2000010c 	.word	0x2000010c
 80039a0:	20000120 	.word	0x20000120

080039a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80039a8:	4b03      	ldr	r3, [pc, #12]	; (80039b8 <vTaskMissedYield+0x14>)
 80039aa:	2201      	movs	r2, #1
 80039ac:	601a      	str	r2, [r3, #0]
}
 80039ae:	bf00      	nop
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	2000011c 	.word	0x2000011c

080039bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80039c4:	f000 f852 	bl	8003a6c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80039c8:	4b06      	ldr	r3, [pc, #24]	; (80039e4 <prvIdleTask+0x28>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d9f9      	bls.n	80039c4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80039d0:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <prvIdleTask+0x2c>)
 80039d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	f3bf 8f4f 	dsb	sy
 80039dc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80039e0:	e7f0      	b.n	80039c4 <prvIdleTask+0x8>
 80039e2:	bf00      	nop
 80039e4:	20000034 	.word	0x20000034
 80039e8:	e000ed04 	.word	0xe000ed04

080039ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039f2:	2300      	movs	r3, #0
 80039f4:	607b      	str	r3, [r7, #4]
 80039f6:	e00c      	b.n	8003a12 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4a12      	ldr	r2, [pc, #72]	; (8003a4c <prvInitialiseTaskLists+0x60>)
 8003a04:	4413      	add	r3, r2
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fe fce0 	bl	80023cc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	607b      	str	r3, [r7, #4]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b04      	cmp	r3, #4
 8003a16:	d9ef      	bls.n	80039f8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003a18:	480d      	ldr	r0, [pc, #52]	; (8003a50 <prvInitialiseTaskLists+0x64>)
 8003a1a:	f7fe fcd7 	bl	80023cc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003a1e:	480d      	ldr	r0, [pc, #52]	; (8003a54 <prvInitialiseTaskLists+0x68>)
 8003a20:	f7fe fcd4 	bl	80023cc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003a24:	480c      	ldr	r0, [pc, #48]	; (8003a58 <prvInitialiseTaskLists+0x6c>)
 8003a26:	f7fe fcd1 	bl	80023cc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003a2a:	480c      	ldr	r0, [pc, #48]	; (8003a5c <prvInitialiseTaskLists+0x70>)
 8003a2c:	f7fe fcce 	bl	80023cc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003a30:	480b      	ldr	r0, [pc, #44]	; (8003a60 <prvInitialiseTaskLists+0x74>)
 8003a32:	f7fe fccb 	bl	80023cc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003a36:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <prvInitialiseTaskLists+0x78>)
 8003a38:	4a05      	ldr	r2, [pc, #20]	; (8003a50 <prvInitialiseTaskLists+0x64>)
 8003a3a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a3c:	4b0a      	ldr	r3, [pc, #40]	; (8003a68 <prvInitialiseTaskLists+0x7c>)
 8003a3e:	4a05      	ldr	r2, [pc, #20]	; (8003a54 <prvInitialiseTaskLists+0x68>)
 8003a40:	601a      	str	r2, [r3, #0]
}
 8003a42:	bf00      	nop
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	20000034 	.word	0x20000034
 8003a50:	20000098 	.word	0x20000098
 8003a54:	200000ac 	.word	0x200000ac
 8003a58:	200000c8 	.word	0x200000c8
 8003a5c:	200000dc 	.word	0x200000dc
 8003a60:	200000f4 	.word	0x200000f4
 8003a64:	200000c0 	.word	0x200000c0
 8003a68:	200000c4 	.word	0x200000c4

08003a6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a72:	e019      	b.n	8003aa8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003a74:	f000 fe26 	bl	80046c4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a78:	4b10      	ldr	r3, [pc, #64]	; (8003abc <prvCheckTasksWaitingTermination+0x50>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3304      	adds	r3, #4
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fe fd2b 	bl	80024e0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003a8a:	4b0d      	ldr	r3, [pc, #52]	; (8003ac0 <prvCheckTasksWaitingTermination+0x54>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	4a0b      	ldr	r2, [pc, #44]	; (8003ac0 <prvCheckTasksWaitingTermination+0x54>)
 8003a92:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003a94:	4b0b      	ldr	r3, [pc, #44]	; (8003ac4 <prvCheckTasksWaitingTermination+0x58>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	4a0a      	ldr	r2, [pc, #40]	; (8003ac4 <prvCheckTasksWaitingTermination+0x58>)
 8003a9c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003a9e:	f000 fe41 	bl	8004724 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f810 	bl	8003ac8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003aa8:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <prvCheckTasksWaitingTermination+0x58>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1e1      	bne.n	8003a74 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003ab0:	bf00      	nop
 8003ab2:	bf00      	nop
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	200000dc 	.word	0x200000dc
 8003ac0:	20000108 	.word	0x20000108
 8003ac4:	200000f0 	.word	0x200000f0

08003ac8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f001 f801 	bl	8004adc <vPortFree>
                vPortFree( pxTCB );
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 fffe 	bl	8004adc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003ae0:	bf00      	nop
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003aec:	4b0a      	ldr	r3, [pc, #40]	; (8003b18 <prvResetNextTaskUnblockTime+0x30>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d104      	bne.n	8003b00 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003af6:	4b09      	ldr	r3, [pc, #36]	; (8003b1c <prvResetNextTaskUnblockTime+0x34>)
 8003af8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003afc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003afe:	e005      	b.n	8003b0c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b00:	4b05      	ldr	r3, [pc, #20]	; (8003b18 <prvResetNextTaskUnblockTime+0x30>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a04      	ldr	r2, [pc, #16]	; (8003b1c <prvResetNextTaskUnblockTime+0x34>)
 8003b0a:	6013      	str	r3, [r2, #0]
}
 8003b0c:	bf00      	nop
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	200000c0 	.word	0x200000c0
 8003b1c:	20000128 	.word	0x20000128

08003b20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003b26:	4b0b      	ldr	r3, [pc, #44]	; (8003b54 <xTaskGetSchedulerState+0x34>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d102      	bne.n	8003b34 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	607b      	str	r3, [r7, #4]
 8003b32:	e008      	b.n	8003b46 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b34:	4b08      	ldr	r3, [pc, #32]	; (8003b58 <xTaskGetSchedulerState+0x38>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d102      	bne.n	8003b42 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	607b      	str	r3, [r7, #4]
 8003b40:	e001      	b.n	8003b46 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003b42:	2300      	movs	r3, #0
 8003b44:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003b46:	687b      	ldr	r3, [r7, #4]
    }
 8003b48:	4618      	mov	r0, r3
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr
 8003b54:	20000114 	.word	0x20000114
 8003b58:	20000130 	.word	0x20000130

08003b5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d068      	beq.n	8003c44 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003b72:	4b37      	ldr	r3, [pc, #220]	; (8003c50 <xTaskPriorityDisinherit+0xf4>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d00a      	beq.n	8003b92 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b80:	f383 8811 	msr	BASEPRI, r3
 8003b84:	f3bf 8f6f 	isb	sy
 8003b88:	f3bf 8f4f 	dsb	sy
 8003b8c:	60fb      	str	r3, [r7, #12]
    }
 8003b8e:	bf00      	nop
 8003b90:	e7fe      	b.n	8003b90 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10a      	bne.n	8003bb0 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9e:	f383 8811 	msr	BASEPRI, r3
 8003ba2:	f3bf 8f6f 	isb	sy
 8003ba6:	f3bf 8f4f 	dsb	sy
 8003baa:	60bb      	str	r3, [r7, #8]
    }
 8003bac:	bf00      	nop
 8003bae:	e7fe      	b.n	8003bae <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb4:	1e5a      	subs	r2, r3, #1
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d03e      	beq.n	8003c44 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d13a      	bne.n	8003c44 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	3304      	adds	r3, #4
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fe fc84 	bl	80024e0 <uxListRemove>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10a      	bne.n	8003bf4 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be2:	2201      	movs	r2, #1
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	43da      	mvns	r2, r3
 8003bea:	4b1a      	ldr	r3, [pc, #104]	; (8003c54 <xTaskPriorityDisinherit+0xf8>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	4a18      	ldr	r2, [pc, #96]	; (8003c54 <xTaskPriorityDisinherit+0xf8>)
 8003bf2:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	204a      	movs	r0, #74	; 0x4a
 8003bfa:	f001 fc39 	bl	8005470 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0a:	f1c3 0205 	rsb	r2, r3, #5
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c16:	2201      	movs	r2, #1
 8003c18:	409a      	lsls	r2, r3
 8003c1a:	4b0e      	ldr	r3, [pc, #56]	; (8003c54 <xTaskPriorityDisinherit+0xf8>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	4a0c      	ldr	r2, [pc, #48]	; (8003c54 <xTaskPriorityDisinherit+0xf8>)
 8003c22:	6013      	str	r3, [r2, #0]
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c28:	4613      	mov	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4a09      	ldr	r2, [pc, #36]	; (8003c58 <xTaskPriorityDisinherit+0xfc>)
 8003c32:	441a      	add	r2, r3
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	3304      	adds	r3, #4
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4610      	mov	r0, r2
 8003c3c:	f7fe fbf3 	bl	8002426 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003c40:	2301      	movs	r3, #1
 8003c42:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003c44:	697b      	ldr	r3, [r7, #20]
    }
 8003c46:	4618      	mov	r0, r3
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	20000030 	.word	0x20000030
 8003c54:	20000110 	.word	0x20000110
 8003c58:	20000034 	.word	0x20000034

08003c5c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003c66:	4b32      	ldr	r3, [pc, #200]	; (8003d30 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c6c:	4b31      	ldr	r3, [pc, #196]	; (8003d34 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	3304      	adds	r3, #4
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fe fc34 	bl	80024e0 <uxListRemove>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10b      	bne.n	8003c96 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003c7e:	4b2d      	ldr	r3, [pc, #180]	; (8003d34 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c84:	2201      	movs	r2, #1
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	43da      	mvns	r2, r3
 8003c8c:	4b2a      	ldr	r3, [pc, #168]	; (8003d38 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4013      	ands	r3, r2
 8003c92:	4a29      	ldr	r2, [pc, #164]	; (8003d38 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003c94:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c9c:	d110      	bne.n	8003cc0 <prvAddCurrentTaskToDelayedList+0x64>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00d      	beq.n	8003cc0 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003ca4:	4b23      	ldr	r3, [pc, #140]	; (8003d34 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	211b      	movs	r1, #27
 8003caa:	4618      	mov	r0, r3
 8003cac:	f002 f97e 	bl	8005fac <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cb0:	4b20      	ldr	r3, [pc, #128]	; (8003d34 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	4820      	ldr	r0, [pc, #128]	; (8003d3c <prvAddCurrentTaskToDelayedList+0xe0>)
 8003cba:	f7fe fbb4 	bl	8002426 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003cbe:	e032      	b.n	8003d26 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003cc8:	4b1a      	ldr	r3, [pc, #104]	; (8003d34 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d20f      	bcs.n	8003cf8 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003cd8:	4b16      	ldr	r3, [pc, #88]	; (8003d34 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2104      	movs	r1, #4
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f002 f964 	bl	8005fac <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ce4:	4b16      	ldr	r3, [pc, #88]	; (8003d40 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	4b12      	ldr	r3, [pc, #72]	; (8003d34 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	3304      	adds	r3, #4
 8003cee:	4619      	mov	r1, r3
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	f7fe fbbc 	bl	800246e <vListInsert>
}
 8003cf6:	e016      	b.n	8003d26 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003cf8:	4b0e      	ldr	r3, [pc, #56]	; (8003d34 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2104      	movs	r1, #4
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f002 f954 	bl	8005fac <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d04:	4b0f      	ldr	r3, [pc, #60]	; (8003d44 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	3304      	adds	r3, #4
 8003d0e:	4619      	mov	r1, r3
 8003d10:	4610      	mov	r0, r2
 8003d12:	f7fe fbac 	bl	800246e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003d16:	4b0c      	ldr	r3, [pc, #48]	; (8003d48 <prvAddCurrentTaskToDelayedList+0xec>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68ba      	ldr	r2, [r7, #8]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d202      	bcs.n	8003d26 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003d20:	4a09      	ldr	r2, [pc, #36]	; (8003d48 <prvAddCurrentTaskToDelayedList+0xec>)
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	6013      	str	r3, [r2, #0]
}
 8003d26:	bf00      	nop
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	2000010c 	.word	0x2000010c
 8003d34:	20000030 	.word	0x20000030
 8003d38:	20000110 	.word	0x20000110
 8003d3c:	200000f4 	.word	0x200000f4
 8003d40:	200000c4 	.word	0x200000c4
 8003d44:	200000c0 	.word	0x200000c0
 8003d48:	20000128 	.word	0x20000128

08003d4c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003d52:	2300      	movs	r3, #0
 8003d54:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003d56:	f000 fad5 	bl	8004304 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003d5a:	4b11      	ldr	r3, [pc, #68]	; (8003da0 <xTimerCreateTimerTask+0x54>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00b      	beq.n	8003d7a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003d62:	4b10      	ldr	r3, [pc, #64]	; (8003da4 <xTimerCreateTimerTask+0x58>)
 8003d64:	9301      	str	r3, [sp, #4]
 8003d66:	2302      	movs	r3, #2
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d70:	490d      	ldr	r1, [pc, #52]	; (8003da8 <xTimerCreateTimerTask+0x5c>)
 8003d72:	480e      	ldr	r0, [pc, #56]	; (8003dac <xTimerCreateTimerTask+0x60>)
 8003d74:	f7ff f938 	bl	8002fe8 <xTaskCreate>
 8003d78:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10a      	bne.n	8003d96 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d84:	f383 8811 	msr	BASEPRI, r3
 8003d88:	f3bf 8f6f 	isb	sy
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	603b      	str	r3, [r7, #0]
    }
 8003d92:	bf00      	nop
 8003d94:	e7fe      	b.n	8003d94 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003d96:	687b      	ldr	r3, [r7, #4]
    }
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3708      	adds	r7, #8
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	20000164 	.word	0x20000164
 8003da4:	20000168 	.word	0x20000168
 8003da8:	080063ac 	.word	0x080063ac
 8003dac:	08003ee5 	.word	0x08003ee5

08003db0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b08a      	sub	sp, #40	; 0x28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
 8003dbc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10a      	bne.n	8003dde <xTimerGenericCommand+0x2e>
        __asm volatile
 8003dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dcc:	f383 8811 	msr	BASEPRI, r3
 8003dd0:	f3bf 8f6f 	isb	sy
 8003dd4:	f3bf 8f4f 	dsb	sy
 8003dd8:	623b      	str	r3, [r7, #32]
    }
 8003dda:	bf00      	nop
 8003ddc:	e7fe      	b.n	8003ddc <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003dde:	4b1a      	ldr	r3, [pc, #104]	; (8003e48 <xTimerGenericCommand+0x98>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d02a      	beq.n	8003e3c <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	2b05      	cmp	r3, #5
 8003df6:	dc18      	bgt.n	8003e2a <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003df8:	f7ff fe92 	bl	8003b20 <xTaskGetSchedulerState>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d109      	bne.n	8003e16 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003e02:	4b11      	ldr	r3, [pc, #68]	; (8003e48 <xTimerGenericCommand+0x98>)
 8003e04:	6818      	ldr	r0, [r3, #0]
 8003e06:	f107 0114 	add.w	r1, r7, #20
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e0e:	f7fe fc81 	bl	8002714 <xQueueGenericSend>
 8003e12:	6278      	str	r0, [r7, #36]	; 0x24
 8003e14:	e012      	b.n	8003e3c <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003e16:	4b0c      	ldr	r3, [pc, #48]	; (8003e48 <xTimerGenericCommand+0x98>)
 8003e18:	6818      	ldr	r0, [r3, #0]
 8003e1a:	f107 0114 	add.w	r1, r7, #20
 8003e1e:	2300      	movs	r3, #0
 8003e20:	2200      	movs	r2, #0
 8003e22:	f7fe fc77 	bl	8002714 <xQueueGenericSend>
 8003e26:	6278      	str	r0, [r7, #36]	; 0x24
 8003e28:	e008      	b.n	8003e3c <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003e2a:	4b07      	ldr	r3, [pc, #28]	; (8003e48 <xTimerGenericCommand+0x98>)
 8003e2c:	6818      	ldr	r0, [r3, #0]
 8003e2e:	f107 0114 	add.w	r1, r7, #20
 8003e32:	2300      	movs	r3, #0
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	f7fe fd93 	bl	8002960 <xQueueGenericSendFromISR>
 8003e3a:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3728      	adds	r7, #40	; 0x28
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	20000164 	.word	0x20000164

08003e4c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b088      	sub	sp, #32
 8003e50:	af02      	add	r7, sp, #8
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e56:	4b22      	ldr	r3, [pc, #136]	; (8003ee0 <prvProcessExpiredTimer+0x94>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	3304      	adds	r3, #4
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fe fb3b 	bl	80024e0 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d022      	beq.n	8003ebe <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	699a      	ldr	r2, [r3, #24]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	18d1      	adds	r1, r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	6978      	ldr	r0, [r7, #20]
 8003e86:	f000 f8d1 	bl	800402c <prvInsertTimerInActiveList>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d01f      	beq.n	8003ed0 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003e90:	2300      	movs	r3, #0
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	2300      	movs	r3, #0
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	2100      	movs	r1, #0
 8003e9a:	6978      	ldr	r0, [r7, #20]
 8003e9c:	f7ff ff88 	bl	8003db0 <xTimerGenericCommand>
 8003ea0:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d113      	bne.n	8003ed0 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eac:	f383 8811 	msr	BASEPRI, r3
 8003eb0:	f3bf 8f6f 	isb	sy
 8003eb4:	f3bf 8f4f 	dsb	sy
 8003eb8:	60fb      	str	r3, [r7, #12]
    }
 8003eba:	bf00      	nop
 8003ebc:	e7fe      	b.n	8003ebc <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ec4:	f023 0301 	bic.w	r3, r3, #1
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	6978      	ldr	r0, [r7, #20]
 8003ed6:	4798      	blx	r3
    }
 8003ed8:	bf00      	nop
 8003eda:	3718      	adds	r7, #24
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	2000015c 	.word	0x2000015c

08003ee4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003eec:	f107 0308 	add.w	r3, r7, #8
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 f857 	bl	8003fa4 <prvGetNextExpireTime>
 8003ef6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	4619      	mov	r1, r3
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 f803 	bl	8003f08 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003f02:	f000 f8d5 	bl	80040b0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f06:	e7f1      	b.n	8003eec <prvTimerTask+0x8>

08003f08 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003f12:	f7ff fa2f 	bl	8003374 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f16:	f107 0308 	add.w	r3, r7, #8
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 f866 	bl	8003fec <prvSampleTimeNow>
 8003f20:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d130      	bne.n	8003f8a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10a      	bne.n	8003f44 <prvProcessTimerOrBlockTask+0x3c>
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d806      	bhi.n	8003f44 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003f36:	f7ff fa2b 	bl	8003390 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003f3a:	68f9      	ldr	r1, [r7, #12]
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7ff ff85 	bl	8003e4c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003f42:	e024      	b.n	8003f8e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d008      	beq.n	8003f5c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003f4a:	4b13      	ldr	r3, [pc, #76]	; (8003f98 <prvProcessTimerOrBlockTask+0x90>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <prvProcessTimerOrBlockTask+0x50>
 8003f54:	2301      	movs	r3, #1
 8003f56:	e000      	b.n	8003f5a <prvProcessTimerOrBlockTask+0x52>
 8003f58:	2300      	movs	r3, #0
 8003f5a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003f5c:	4b0f      	ldr	r3, [pc, #60]	; (8003f9c <prvProcessTimerOrBlockTask+0x94>)
 8003f5e:	6818      	ldr	r0, [r3, #0]
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	4619      	mov	r1, r3
 8003f6a:	f7ff f809 	bl	8002f80 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003f6e:	f7ff fa0f 	bl	8003390 <xTaskResumeAll>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10a      	bne.n	8003f8e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003f78:	4b09      	ldr	r3, [pc, #36]	; (8003fa0 <prvProcessTimerOrBlockTask+0x98>)
 8003f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f7e:	601a      	str	r2, [r3, #0]
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	f3bf 8f6f 	isb	sy
    }
 8003f88:	e001      	b.n	8003f8e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003f8a:	f7ff fa01 	bl	8003390 <xTaskResumeAll>
    }
 8003f8e:	bf00      	nop
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	20000160 	.word	0x20000160
 8003f9c:	20000164 	.word	0x20000164
 8003fa0:	e000ed04 	.word	0xe000ed04

08003fa4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003fac:	4b0e      	ldr	r3, [pc, #56]	; (8003fe8 <prvGetNextExpireTime+0x44>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <prvGetNextExpireTime+0x16>
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	e000      	b.n	8003fbc <prvGetNextExpireTime+0x18>
 8003fba:	2200      	movs	r2, #0
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d105      	bne.n	8003fd4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fc8:	4b07      	ldr	r3, [pc, #28]	; (8003fe8 <prvGetNextExpireTime+0x44>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	60fb      	str	r3, [r7, #12]
 8003fd2:	e001      	b.n	8003fd8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
    }
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3714      	adds	r7, #20
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	2000015c 	.word	0x2000015c

08003fec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003ff4:	f7ff fa6c 	bl	80034d0 <xTaskGetTickCount>
 8003ff8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003ffa:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <prvSampleTimeNow+0x3c>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	429a      	cmp	r2, r3
 8004002:	d205      	bcs.n	8004010 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004004:	f000 f91a 	bl	800423c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	e002      	b.n	8004016 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004016:	4a04      	ldr	r2, [pc, #16]	; (8004028 <prvSampleTimeNow+0x3c>)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800401c:	68fb      	ldr	r3, [r7, #12]
    }
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	2000016c 	.word	0x2000016c

0800402c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
 8004038:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800403a:	2300      	movs	r3, #0
 800403c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	429a      	cmp	r2, r3
 8004050:	d812      	bhi.n	8004078 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	1ad2      	subs	r2, r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	429a      	cmp	r2, r3
 800405e:	d302      	bcc.n	8004066 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004060:	2301      	movs	r3, #1
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	e01b      	b.n	800409e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004066:	4b10      	ldr	r3, [pc, #64]	; (80040a8 <prvInsertTimerInActiveList+0x7c>)
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	3304      	adds	r3, #4
 800406e:	4619      	mov	r1, r3
 8004070:	4610      	mov	r0, r2
 8004072:	f7fe f9fc 	bl	800246e <vListInsert>
 8004076:	e012      	b.n	800409e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	429a      	cmp	r2, r3
 800407e:	d206      	bcs.n	800408e <prvInsertTimerInActiveList+0x62>
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	429a      	cmp	r2, r3
 8004086:	d302      	bcc.n	800408e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004088:	2301      	movs	r3, #1
 800408a:	617b      	str	r3, [r7, #20]
 800408c:	e007      	b.n	800409e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800408e:	4b07      	ldr	r3, [pc, #28]	; (80040ac <prvInsertTimerInActiveList+0x80>)
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	3304      	adds	r3, #4
 8004096:	4619      	mov	r1, r3
 8004098:	4610      	mov	r0, r2
 800409a:	f7fe f9e8 	bl	800246e <vListInsert>
            }
        }

        return xProcessTimerNow;
 800409e:	697b      	ldr	r3, [r7, #20]
    }
 80040a0:	4618      	mov	r0, r3
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	20000160 	.word	0x20000160
 80040ac:	2000015c 	.word	0x2000015c

080040b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b08c      	sub	sp, #48	; 0x30
 80040b4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040b6:	e0ae      	b.n	8004216 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f2c0 80aa 	blt.w	8004214 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d004      	beq.n	80040d6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	3304      	adds	r3, #4
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7fe fa05 	bl	80024e0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040d6:	1d3b      	adds	r3, r7, #4
 80040d8:	4618      	mov	r0, r3
 80040da:	f7ff ff87 	bl	8003fec <prvSampleTimeNow>
 80040de:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	2b09      	cmp	r3, #9
 80040e4:	f200 8097 	bhi.w	8004216 <prvProcessReceivedCommands+0x166>
 80040e8:	a201      	add	r2, pc, #4	; (adr r2, 80040f0 <prvProcessReceivedCommands+0x40>)
 80040ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ee:	bf00      	nop
 80040f0:	08004119 	.word	0x08004119
 80040f4:	08004119 	.word	0x08004119
 80040f8:	08004119 	.word	0x08004119
 80040fc:	0800418d 	.word	0x0800418d
 8004100:	080041a1 	.word	0x080041a1
 8004104:	080041eb 	.word	0x080041eb
 8004108:	08004119 	.word	0x08004119
 800410c:	08004119 	.word	0x08004119
 8004110:	0800418d 	.word	0x0800418d
 8004114:	080041a1 	.word	0x080041a1
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800411e:	f043 0301 	orr.w	r3, r3, #1
 8004122:	b2da      	uxtb	r2, r3
 8004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004126:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	18d1      	adds	r1, r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6a3a      	ldr	r2, [r7, #32]
 8004136:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004138:	f7ff ff78 	bl	800402c <prvInsertTimerInActiveList>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d069      	beq.n	8004216 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004148:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004150:	f003 0304 	and.w	r3, r3, #4
 8004154:	2b00      	cmp	r3, #0
 8004156:	d05e      	beq.n	8004216 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	441a      	add	r2, r3
 8004160:	2300      	movs	r3, #0
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	2300      	movs	r3, #0
 8004166:	2100      	movs	r1, #0
 8004168:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800416a:	f7ff fe21 	bl	8003db0 <xTimerGenericCommand>
 800416e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d14f      	bne.n	8004216 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8004176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417a:	f383 8811 	msr	BASEPRI, r3
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	f3bf 8f4f 	dsb	sy
 8004186:	61bb      	str	r3, [r7, #24]
    }
 8004188:	bf00      	nop
 800418a:	e7fe      	b.n	800418a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004192:	f023 0301 	bic.w	r3, r3, #1
 8004196:	b2da      	uxtb	r2, r3
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800419e:	e03a      	b.n	8004216 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80041a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041a6:	f043 0301 	orr.w	r3, r3, #1
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80041b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10a      	bne.n	80041d6 <prvProcessReceivedCommands+0x126>
        __asm volatile
 80041c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c4:	f383 8811 	msr	BASEPRI, r3
 80041c8:	f3bf 8f6f 	isb	sy
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	617b      	str	r3, [r7, #20]
    }
 80041d2:	bf00      	nop
 80041d4:	e7fe      	b.n	80041d4 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	699a      	ldr	r2, [r3, #24]
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	18d1      	adds	r1, r2, r3
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	6a3a      	ldr	r2, [r7, #32]
 80041e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041e4:	f7ff ff22 	bl	800402c <prvInsertTimerInActiveList>
                        break;
 80041e8:	e015      	b.n	8004216 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d103      	bne.n	8004200 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80041f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041fa:	f000 fc6f 	bl	8004adc <vPortFree>
 80041fe:	e00a      	b.n	8004216 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004206:	f023 0301 	bic.w	r3, r3, #1
 800420a:	b2da      	uxtb	r2, r3
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004212:	e000      	b.n	8004216 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004214:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004216:	4b08      	ldr	r3, [pc, #32]	; (8004238 <prvProcessReceivedCommands+0x188>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f107 0108 	add.w	r1, r7, #8
 800421e:	2200      	movs	r2, #0
 8004220:	4618      	mov	r0, r3
 8004222:	f7fe fc5b 	bl	8002adc <xQueueReceive>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	f47f af45 	bne.w	80040b8 <prvProcessReceivedCommands+0x8>
        }
    }
 800422e:	bf00      	nop
 8004230:	bf00      	nop
 8004232:	3728      	adds	r7, #40	; 0x28
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	20000164 	.word	0x20000164

0800423c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800423c:	b580      	push	{r7, lr}
 800423e:	b088      	sub	sp, #32
 8004240:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004242:	e048      	b.n	80042d6 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004244:	4b2d      	ldr	r3, [pc, #180]	; (80042fc <prvSwitchTimerLists+0xc0>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800424e:	4b2b      	ldr	r3, [pc, #172]	; (80042fc <prvSwitchTimerLists+0xc0>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	3304      	adds	r3, #4
 800425c:	4618      	mov	r0, r3
 800425e:	f7fe f93f 	bl	80024e0 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	d02e      	beq.n	80042d6 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4413      	add	r3, r2
 8004280:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	429a      	cmp	r2, r3
 8004288:	d90e      	bls.n	80042a8 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004296:	4b19      	ldr	r3, [pc, #100]	; (80042fc <prvSwitchTimerLists+0xc0>)
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	3304      	adds	r3, #4
 800429e:	4619      	mov	r1, r3
 80042a0:	4610      	mov	r0, r2
 80042a2:	f7fe f8e4 	bl	800246e <vListInsert>
 80042a6:	e016      	b.n	80042d6 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80042a8:	2300      	movs	r3, #0
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	2300      	movs	r3, #0
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	2100      	movs	r1, #0
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f7ff fd7c 	bl	8003db0 <xTimerGenericCommand>
 80042b8:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10a      	bne.n	80042d6 <prvSwitchTimerLists+0x9a>
        __asm volatile
 80042c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c4:	f383 8811 	msr	BASEPRI, r3
 80042c8:	f3bf 8f6f 	isb	sy
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	603b      	str	r3, [r7, #0]
    }
 80042d2:	bf00      	nop
 80042d4:	e7fe      	b.n	80042d4 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042d6:	4b09      	ldr	r3, [pc, #36]	; (80042fc <prvSwitchTimerLists+0xc0>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1b1      	bne.n	8004244 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80042e0:	4b06      	ldr	r3, [pc, #24]	; (80042fc <prvSwitchTimerLists+0xc0>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80042e6:	4b06      	ldr	r3, [pc, #24]	; (8004300 <prvSwitchTimerLists+0xc4>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a04      	ldr	r2, [pc, #16]	; (80042fc <prvSwitchTimerLists+0xc0>)
 80042ec:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80042ee:	4a04      	ldr	r2, [pc, #16]	; (8004300 <prvSwitchTimerLists+0xc4>)
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	6013      	str	r3, [r2, #0]
    }
 80042f4:	bf00      	nop
 80042f6:	3718      	adds	r7, #24
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	2000015c 	.word	0x2000015c
 8004300:	20000160 	.word	0x20000160

08004304 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004304:	b580      	push	{r7, lr}
 8004306:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004308:	f000 f9dc 	bl	80046c4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800430c:	4b12      	ldr	r3, [pc, #72]	; (8004358 <prvCheckForValidListAndQueue+0x54>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d11d      	bne.n	8004350 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004314:	4811      	ldr	r0, [pc, #68]	; (800435c <prvCheckForValidListAndQueue+0x58>)
 8004316:	f7fe f859 	bl	80023cc <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800431a:	4811      	ldr	r0, [pc, #68]	; (8004360 <prvCheckForValidListAndQueue+0x5c>)
 800431c:	f7fe f856 	bl	80023cc <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004320:	4b10      	ldr	r3, [pc, #64]	; (8004364 <prvCheckForValidListAndQueue+0x60>)
 8004322:	4a0e      	ldr	r2, [pc, #56]	; (800435c <prvCheckForValidListAndQueue+0x58>)
 8004324:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004326:	4b10      	ldr	r3, [pc, #64]	; (8004368 <prvCheckForValidListAndQueue+0x64>)
 8004328:	4a0d      	ldr	r2, [pc, #52]	; (8004360 <prvCheckForValidListAndQueue+0x5c>)
 800432a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800432c:	2200      	movs	r2, #0
 800432e:	210c      	movs	r1, #12
 8004330:	200a      	movs	r0, #10
 8004332:	f7fe f967 	bl	8002604 <xQueueGenericCreate>
 8004336:	4603      	mov	r3, r0
 8004338:	4a07      	ldr	r2, [pc, #28]	; (8004358 <prvCheckForValidListAndQueue+0x54>)
 800433a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800433c:	4b06      	ldr	r3, [pc, #24]	; (8004358 <prvCheckForValidListAndQueue+0x54>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d005      	beq.n	8004350 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004344:	4b04      	ldr	r3, [pc, #16]	; (8004358 <prvCheckForValidListAndQueue+0x54>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4908      	ldr	r1, [pc, #32]	; (800436c <prvCheckForValidListAndQueue+0x68>)
 800434a:	4618      	mov	r0, r3
 800434c:	f7fe fde6 	bl	8002f1c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004350:	f000 f9e8 	bl	8004724 <vPortExitCritical>
    }
 8004354:	bf00      	nop
 8004356:	bd80      	pop	{r7, pc}
 8004358:	20000164 	.word	0x20000164
 800435c:	20000134 	.word	0x20000134
 8004360:	20000148 	.word	0x20000148
 8004364:	2000015c 	.word	0x2000015c
 8004368:	20000160 	.word	0x20000160
 800436c:	080063b4 	.word	0x080063b4

08004370 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	3b04      	subs	r3, #4
 8004380:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004388:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	3b04      	subs	r3, #4
 800438e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	f023 0201 	bic.w	r2, r3, #1
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	3b04      	subs	r3, #4
 800439e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80043a0:	4a0c      	ldr	r2, [pc, #48]	; (80043d4 <pxPortInitialiseStack+0x64>)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	3b14      	subs	r3, #20
 80043aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	3b04      	subs	r3, #4
 80043b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f06f 0202 	mvn.w	r2, #2
 80043be:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	3b20      	subs	r3, #32
 80043c4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80043c6:	68fb      	ldr	r3, [r7, #12]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3714      	adds	r7, #20
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	080043d9 	.word	0x080043d9

080043d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80043de:	2300      	movs	r3, #0
 80043e0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80043e2:	4b12      	ldr	r3, [pc, #72]	; (800442c <prvTaskExitError+0x54>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043ea:	d00a      	beq.n	8004402 <prvTaskExitError+0x2a>
        __asm volatile
 80043ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f0:	f383 8811 	msr	BASEPRI, r3
 80043f4:	f3bf 8f6f 	isb	sy
 80043f8:	f3bf 8f4f 	dsb	sy
 80043fc:	60fb      	str	r3, [r7, #12]
    }
 80043fe:	bf00      	nop
 8004400:	e7fe      	b.n	8004400 <prvTaskExitError+0x28>
        __asm volatile
 8004402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004406:	f383 8811 	msr	BASEPRI, r3
 800440a:	f3bf 8f6f 	isb	sy
 800440e:	f3bf 8f4f 	dsb	sy
 8004412:	60bb      	str	r3, [r7, #8]
    }
 8004414:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004416:	bf00      	nop
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0fc      	beq.n	8004418 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800441e:	bf00      	nop
 8004420:	bf00      	nop
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	20000010 	.word	0x20000010

08004430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004430:	4b07      	ldr	r3, [pc, #28]	; (8004450 <pxCurrentTCBConst2>)
 8004432:	6819      	ldr	r1, [r3, #0]
 8004434:	6808      	ldr	r0, [r1, #0]
 8004436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800443a:	f380 8809 	msr	PSP, r0
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	f04f 0000 	mov.w	r0, #0
 8004446:	f380 8811 	msr	BASEPRI, r0
 800444a:	4770      	bx	lr
 800444c:	f3af 8000 	nop.w

08004450 <pxCurrentTCBConst2>:
 8004450:	20000030 	.word	0x20000030
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004454:	bf00      	nop
 8004456:	bf00      	nop

08004458 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004458:	4808      	ldr	r0, [pc, #32]	; (800447c <prvPortStartFirstTask+0x24>)
 800445a:	6800      	ldr	r0, [r0, #0]
 800445c:	6800      	ldr	r0, [r0, #0]
 800445e:	f380 8808 	msr	MSP, r0
 8004462:	f04f 0000 	mov.w	r0, #0
 8004466:	f380 8814 	msr	CONTROL, r0
 800446a:	b662      	cpsie	i
 800446c:	b661      	cpsie	f
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	f3bf 8f6f 	isb	sy
 8004476:	df00      	svc	0
 8004478:	bf00      	nop
 800447a:	0000      	.short	0x0000
 800447c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004480:	bf00      	nop
 8004482:	bf00      	nop

08004484 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800448a:	4b46      	ldr	r3, [pc, #280]	; (80045a4 <xPortStartScheduler+0x120>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a46      	ldr	r2, [pc, #280]	; (80045a8 <xPortStartScheduler+0x124>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d10a      	bne.n	80044aa <xPortStartScheduler+0x26>
        __asm volatile
 8004494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004498:	f383 8811 	msr	BASEPRI, r3
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	f3bf 8f4f 	dsb	sy
 80044a4:	613b      	str	r3, [r7, #16]
    }
 80044a6:	bf00      	nop
 80044a8:	e7fe      	b.n	80044a8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80044aa:	4b3e      	ldr	r3, [pc, #248]	; (80045a4 <xPortStartScheduler+0x120>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a3f      	ldr	r2, [pc, #252]	; (80045ac <xPortStartScheduler+0x128>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d10a      	bne.n	80044ca <xPortStartScheduler+0x46>
        __asm volatile
 80044b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	60fb      	str	r3, [r7, #12]
    }
 80044c6:	bf00      	nop
 80044c8:	e7fe      	b.n	80044c8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044ca:	4b39      	ldr	r3, [pc, #228]	; (80045b0 <xPortStartScheduler+0x12c>)
 80044cc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	22ff      	movs	r2, #255	; 0xff
 80044da:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80044e4:	78fb      	ldrb	r3, [r7, #3]
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	4b31      	ldr	r3, [pc, #196]	; (80045b4 <xPortStartScheduler+0x130>)
 80044f0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80044f2:	4b31      	ldr	r3, [pc, #196]	; (80045b8 <xPortStartScheduler+0x134>)
 80044f4:	2207      	movs	r2, #7
 80044f6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044f8:	e009      	b.n	800450e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80044fa:	4b2f      	ldr	r3, [pc, #188]	; (80045b8 <xPortStartScheduler+0x134>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3b01      	subs	r3, #1
 8004500:	4a2d      	ldr	r2, [pc, #180]	; (80045b8 <xPortStartScheduler+0x134>)
 8004502:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004504:	78fb      	ldrb	r3, [r7, #3]
 8004506:	b2db      	uxtb	r3, r3
 8004508:	005b      	lsls	r3, r3, #1
 800450a:	b2db      	uxtb	r3, r3
 800450c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800450e:	78fb      	ldrb	r3, [r7, #3]
 8004510:	b2db      	uxtb	r3, r3
 8004512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004516:	2b80      	cmp	r3, #128	; 0x80
 8004518:	d0ef      	beq.n	80044fa <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800451a:	4b27      	ldr	r3, [pc, #156]	; (80045b8 <xPortStartScheduler+0x134>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f1c3 0307 	rsb	r3, r3, #7
 8004522:	2b04      	cmp	r3, #4
 8004524:	d00a      	beq.n	800453c <xPortStartScheduler+0xb8>
        __asm volatile
 8004526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452a:	f383 8811 	msr	BASEPRI, r3
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	60bb      	str	r3, [r7, #8]
    }
 8004538:	bf00      	nop
 800453a:	e7fe      	b.n	800453a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800453c:	4b1e      	ldr	r3, [pc, #120]	; (80045b8 <xPortStartScheduler+0x134>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	021b      	lsls	r3, r3, #8
 8004542:	4a1d      	ldr	r2, [pc, #116]	; (80045b8 <xPortStartScheduler+0x134>)
 8004544:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004546:	4b1c      	ldr	r3, [pc, #112]	; (80045b8 <xPortStartScheduler+0x134>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800454e:	4a1a      	ldr	r2, [pc, #104]	; (80045b8 <xPortStartScheduler+0x134>)
 8004550:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	b2da      	uxtb	r2, r3
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800455a:	4b18      	ldr	r3, [pc, #96]	; (80045bc <xPortStartScheduler+0x138>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a17      	ldr	r2, [pc, #92]	; (80045bc <xPortStartScheduler+0x138>)
 8004560:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004564:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004566:	4b15      	ldr	r3, [pc, #84]	; (80045bc <xPortStartScheduler+0x138>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a14      	ldr	r2, [pc, #80]	; (80045bc <xPortStartScheduler+0x138>)
 800456c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004570:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004572:	f000 f963 	bl	800483c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004576:	4b12      	ldr	r3, [pc, #72]	; (80045c0 <xPortStartScheduler+0x13c>)
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800457c:	f000 f982 	bl	8004884 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004580:	4b10      	ldr	r3, [pc, #64]	; (80045c4 <xPortStartScheduler+0x140>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a0f      	ldr	r2, [pc, #60]	; (80045c4 <xPortStartScheduler+0x140>)
 8004586:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800458a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800458c:	f7ff ff64 	bl	8004458 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004590:	f7ff f86a 	bl	8003668 <vTaskSwitchContext>
    prvTaskExitError();
 8004594:	f7ff ff20 	bl	80043d8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3718      	adds	r7, #24
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	e000ed00 	.word	0xe000ed00
 80045a8:	410fc271 	.word	0x410fc271
 80045ac:	410fc270 	.word	0x410fc270
 80045b0:	e000e400 	.word	0xe000e400
 80045b4:	20000170 	.word	0x20000170
 80045b8:	20000174 	.word	0x20000174
 80045bc:	e000ed20 	.word	0xe000ed20
 80045c0:	20000010 	.word	0x20000010
 80045c4:	e000ef34 	.word	0xe000ef34

080045c8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b087      	sub	sp, #28
 80045cc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80045ce:	4b37      	ldr	r3, [pc, #220]	; (80046ac <vInitPrioGroupValue+0xe4>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a37      	ldr	r2, [pc, #220]	; (80046b0 <vInitPrioGroupValue+0xe8>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d10a      	bne.n	80045ee <vInitPrioGroupValue+0x26>
        __asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	613b      	str	r3, [r7, #16]
    }
 80045ea:	bf00      	nop
 80045ec:	e7fe      	b.n	80045ec <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80045ee:	4b2f      	ldr	r3, [pc, #188]	; (80046ac <vInitPrioGroupValue+0xe4>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a30      	ldr	r2, [pc, #192]	; (80046b4 <vInitPrioGroupValue+0xec>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d10a      	bne.n	800460e <vInitPrioGroupValue+0x46>
        __asm volatile
 80045f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fc:	f383 8811 	msr	BASEPRI, r3
 8004600:	f3bf 8f6f 	isb	sy
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	60fb      	str	r3, [r7, #12]
    }
 800460a:	bf00      	nop
 800460c:	e7fe      	b.n	800460c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800460e:	4b2a      	ldr	r3, [pc, #168]	; (80046b8 <vInitPrioGroupValue+0xf0>)
 8004610:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	b2db      	uxtb	r3, r3
 8004618:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	22ff      	movs	r2, #255	; 0xff
 800461e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	b2db      	uxtb	r3, r3
 8004626:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004628:	78fb      	ldrb	r3, [r7, #3]
 800462a:	b2db      	uxtb	r3, r3
 800462c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004630:	b2da      	uxtb	r2, r3
 8004632:	4b22      	ldr	r3, [pc, #136]	; (80046bc <vInitPrioGroupValue+0xf4>)
 8004634:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004636:	4b22      	ldr	r3, [pc, #136]	; (80046c0 <vInitPrioGroupValue+0xf8>)
 8004638:	2207      	movs	r2, #7
 800463a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800463c:	e009      	b.n	8004652 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800463e:	4b20      	ldr	r3, [pc, #128]	; (80046c0 <vInitPrioGroupValue+0xf8>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3b01      	subs	r3, #1
 8004644:	4a1e      	ldr	r2, [pc, #120]	; (80046c0 <vInitPrioGroupValue+0xf8>)
 8004646:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004648:	78fb      	ldrb	r3, [r7, #3]
 800464a:	b2db      	uxtb	r3, r3
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	b2db      	uxtb	r3, r3
 8004650:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004652:	78fb      	ldrb	r3, [r7, #3]
 8004654:	b2db      	uxtb	r3, r3
 8004656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800465a:	2b80      	cmp	r3, #128	; 0x80
 800465c:	d0ef      	beq.n	800463e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800465e:	4b18      	ldr	r3, [pc, #96]	; (80046c0 <vInitPrioGroupValue+0xf8>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f1c3 0307 	rsb	r3, r3, #7
 8004666:	2b04      	cmp	r3, #4
 8004668:	d00a      	beq.n	8004680 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800466a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466e:	f383 8811 	msr	BASEPRI, r3
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	60bb      	str	r3, [r7, #8]
    }
 800467c:	bf00      	nop
 800467e:	e7fe      	b.n	800467e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004680:	4b0f      	ldr	r3, [pc, #60]	; (80046c0 <vInitPrioGroupValue+0xf8>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	021b      	lsls	r3, r3, #8
 8004686:	4a0e      	ldr	r2, [pc, #56]	; (80046c0 <vInitPrioGroupValue+0xf8>)
 8004688:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800468a:	4b0d      	ldr	r3, [pc, #52]	; (80046c0 <vInitPrioGroupValue+0xf8>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004692:	4a0b      	ldr	r2, [pc, #44]	; (80046c0 <vInitPrioGroupValue+0xf8>)
 8004694:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	b2da      	uxtb	r2, r3
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800469e:	bf00      	nop
 80046a0:	371c      	adds	r7, #28
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	e000ed00 	.word	0xe000ed00
 80046b0:	410fc271 	.word	0x410fc271
 80046b4:	410fc270 	.word	0x410fc270
 80046b8:	e000e400 	.word	0xe000e400
 80046bc:	20000170 	.word	0x20000170
 80046c0:	20000174 	.word	0x20000174

080046c4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
        __asm volatile
 80046ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ce:	f383 8811 	msr	BASEPRI, r3
 80046d2:	f3bf 8f6f 	isb	sy
 80046d6:	f3bf 8f4f 	dsb	sy
 80046da:	607b      	str	r3, [r7, #4]
    }
 80046dc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80046de:	4b0f      	ldr	r3, [pc, #60]	; (800471c <vPortEnterCritical+0x58>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	3301      	adds	r3, #1
 80046e4:	4a0d      	ldr	r2, [pc, #52]	; (800471c <vPortEnterCritical+0x58>)
 80046e6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80046e8:	4b0c      	ldr	r3, [pc, #48]	; (800471c <vPortEnterCritical+0x58>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d10f      	bne.n	8004710 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80046f0:	4b0b      	ldr	r3, [pc, #44]	; (8004720 <vPortEnterCritical+0x5c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00a      	beq.n	8004710 <vPortEnterCritical+0x4c>
        __asm volatile
 80046fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	603b      	str	r3, [r7, #0]
    }
 800470c:	bf00      	nop
 800470e:	e7fe      	b.n	800470e <vPortEnterCritical+0x4a>
    }
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	20000010 	.word	0x20000010
 8004720:	e000ed04 	.word	0xe000ed04

08004724 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800472a:	4b12      	ldr	r3, [pc, #72]	; (8004774 <vPortExitCritical+0x50>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10a      	bne.n	8004748 <vPortExitCritical+0x24>
        __asm volatile
 8004732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	607b      	str	r3, [r7, #4]
    }
 8004744:	bf00      	nop
 8004746:	e7fe      	b.n	8004746 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004748:	4b0a      	ldr	r3, [pc, #40]	; (8004774 <vPortExitCritical+0x50>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	3b01      	subs	r3, #1
 800474e:	4a09      	ldr	r2, [pc, #36]	; (8004774 <vPortExitCritical+0x50>)
 8004750:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004752:	4b08      	ldr	r3, [pc, #32]	; (8004774 <vPortExitCritical+0x50>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d105      	bne.n	8004766 <vPortExitCritical+0x42>
 800475a:	2300      	movs	r3, #0
 800475c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	f383 8811 	msr	BASEPRI, r3
    }
 8004764:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004766:	bf00      	nop
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	20000010 	.word	0x20000010
	...

08004780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004780:	f3ef 8009 	mrs	r0, PSP
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	4b15      	ldr	r3, [pc, #84]	; (80047e0 <pxCurrentTCBConst>)
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	f01e 0f10 	tst.w	lr, #16
 8004790:	bf08      	it	eq
 8004792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800479a:	6010      	str	r0, [r2, #0]
 800479c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80047a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80047a4:	f380 8811 	msr	BASEPRI, r0
 80047a8:	f3bf 8f4f 	dsb	sy
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	f7fe ff5a 	bl	8003668 <vTaskSwitchContext>
 80047b4:	f04f 0000 	mov.w	r0, #0
 80047b8:	f380 8811 	msr	BASEPRI, r0
 80047bc:	bc09      	pop	{r0, r3}
 80047be:	6819      	ldr	r1, [r3, #0]
 80047c0:	6808      	ldr	r0, [r1, #0]
 80047c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047c6:	f01e 0f10 	tst.w	lr, #16
 80047ca:	bf08      	it	eq
 80047cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80047d0:	f380 8809 	msr	PSP, r0
 80047d4:	f3bf 8f6f 	isb	sy
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	f3af 8000 	nop.w

080047e0 <pxCurrentTCBConst>:
 80047e0:	20000030 	.word	0x20000030
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80047e4:	bf00      	nop
 80047e6:	bf00      	nop

080047e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
        __asm volatile
 80047ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f2:	f383 8811 	msr	BASEPRI, r3
 80047f6:	f3bf 8f6f 	isb	sy
 80047fa:	f3bf 8f4f 	dsb	sy
 80047fe:	607b      	str	r3, [r7, #4]
    }
 8004800:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004802:	f001 fa77 	bl	8005cf4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004806:	f7fe fe73 	bl	80034f0 <xTaskIncrementTick>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d006      	beq.n	800481e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004810:	f001 face 	bl	8005db0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004814:	4b08      	ldr	r3, [pc, #32]	; (8004838 <SysTick_Handler+0x50>)
 8004816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	e001      	b.n	8004822 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800481e:	f001 faab 	bl	8005d78 <SEGGER_SYSVIEW_RecordExitISR>
 8004822:	2300      	movs	r3, #0
 8004824:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	f383 8811 	msr	BASEPRI, r3
    }
 800482c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800482e:	bf00      	nop
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	e000ed04 	.word	0xe000ed04

0800483c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004840:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <vPortSetupTimerInterrupt+0x34>)
 8004842:	2200      	movs	r2, #0
 8004844:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004846:	4b0b      	ldr	r3, [pc, #44]	; (8004874 <vPortSetupTimerInterrupt+0x38>)
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800484c:	4b0a      	ldr	r3, [pc, #40]	; (8004878 <vPortSetupTimerInterrupt+0x3c>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a0a      	ldr	r2, [pc, #40]	; (800487c <vPortSetupTimerInterrupt+0x40>)
 8004852:	fba2 2303 	umull	r2, r3, r2, r3
 8004856:	099b      	lsrs	r3, r3, #6
 8004858:	4a09      	ldr	r2, [pc, #36]	; (8004880 <vPortSetupTimerInterrupt+0x44>)
 800485a:	3b01      	subs	r3, #1
 800485c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800485e:	4b04      	ldr	r3, [pc, #16]	; (8004870 <vPortSetupTimerInterrupt+0x34>)
 8004860:	2207      	movs	r2, #7
 8004862:	601a      	str	r2, [r3, #0]
}
 8004864:	bf00      	nop
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	e000e010 	.word	0xe000e010
 8004874:	e000e018 	.word	0xe000e018
 8004878:	20000000 	.word	0x20000000
 800487c:	10624dd3 	.word	0x10624dd3
 8004880:	e000e014 	.word	0xe000e014

08004884 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004884:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004894 <vPortEnableVFP+0x10>
 8004888:	6801      	ldr	r1, [r0, #0]
 800488a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800488e:	6001      	str	r1, [r0, #0]
 8004890:	4770      	bx	lr
 8004892:	0000      	.short	0x0000
 8004894:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004898:	bf00      	nop
 800489a:	bf00      	nop

0800489c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80048a2:	f3ef 8305 	mrs	r3, IPSR
 80048a6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2b0f      	cmp	r3, #15
 80048ac:	d914      	bls.n	80048d8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80048ae:	4a17      	ldr	r2, [pc, #92]	; (800490c <vPortValidateInterruptPriority+0x70>)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4413      	add	r3, r2
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80048b8:	4b15      	ldr	r3, [pc, #84]	; (8004910 <vPortValidateInterruptPriority+0x74>)
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	7afa      	ldrb	r2, [r7, #11]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d20a      	bcs.n	80048d8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80048c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	607b      	str	r3, [r7, #4]
    }
 80048d4:	bf00      	nop
 80048d6:	e7fe      	b.n	80048d6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80048d8:	4b0e      	ldr	r3, [pc, #56]	; (8004914 <vPortValidateInterruptPriority+0x78>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048e0:	4b0d      	ldr	r3, [pc, #52]	; (8004918 <vPortValidateInterruptPriority+0x7c>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d90a      	bls.n	80048fe <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80048e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ec:	f383 8811 	msr	BASEPRI, r3
 80048f0:	f3bf 8f6f 	isb	sy
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	603b      	str	r3, [r7, #0]
    }
 80048fa:	bf00      	nop
 80048fc:	e7fe      	b.n	80048fc <vPortValidateInterruptPriority+0x60>
    }
 80048fe:	bf00      	nop
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	e000e3f0 	.word	0xe000e3f0
 8004910:	20000170 	.word	0x20000170
 8004914:	e000ed0c 	.word	0xe000ed0c
 8004918:	20000174 	.word	0x20000174

0800491c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b08a      	sub	sp, #40	; 0x28
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004924:	2300      	movs	r3, #0
 8004926:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004928:	f7fe fd24 	bl	8003374 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800492c:	4b65      	ldr	r3, [pc, #404]	; (8004ac4 <pvPortMalloc+0x1a8>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d101      	bne.n	8004938 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004934:	f000 f934 	bl	8004ba0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004938:	4b63      	ldr	r3, [pc, #396]	; (8004ac8 <pvPortMalloc+0x1ac>)
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4013      	ands	r3, r2
 8004940:	2b00      	cmp	r3, #0
 8004942:	f040 80a7 	bne.w	8004a94 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d02d      	beq.n	80049a8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800494c:	2208      	movs	r2, #8
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	429a      	cmp	r2, r3
 8004956:	d227      	bcs.n	80049a8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004958:	2208      	movs	r2, #8
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4413      	add	r3, r2
 800495e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	2b00      	cmp	r3, #0
 8004968:	d021      	beq.n	80049ae <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f023 0307 	bic.w	r3, r3, #7
 8004970:	3308      	adds	r3, #8
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	429a      	cmp	r2, r3
 8004976:	d214      	bcs.n	80049a2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f023 0307 	bic.w	r3, r3, #7
 800497e:	3308      	adds	r3, #8
 8004980:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	2b00      	cmp	r3, #0
 800498a:	d010      	beq.n	80049ae <pvPortMalloc+0x92>
        __asm volatile
 800498c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	617b      	str	r3, [r7, #20]
    }
 800499e:	bf00      	nop
 80049a0:	e7fe      	b.n	80049a0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80049a2:	2300      	movs	r3, #0
 80049a4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049a6:	e002      	b.n	80049ae <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80049a8:	2300      	movs	r3, #0
 80049aa:	607b      	str	r3, [r7, #4]
 80049ac:	e000      	b.n	80049b0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049ae:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d06e      	beq.n	8004a94 <pvPortMalloc+0x178>
 80049b6:	4b45      	ldr	r3, [pc, #276]	; (8004acc <pvPortMalloc+0x1b0>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d869      	bhi.n	8004a94 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80049c0:	4b43      	ldr	r3, [pc, #268]	; (8004ad0 <pvPortMalloc+0x1b4>)
 80049c2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80049c4:	4b42      	ldr	r3, [pc, #264]	; (8004ad0 <pvPortMalloc+0x1b4>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049ca:	e004      	b.n	80049d6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80049cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ce:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d903      	bls.n	80049e8 <pvPortMalloc+0xcc>
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1f1      	bne.n	80049cc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80049e8:	4b36      	ldr	r3, [pc, #216]	; (8004ac4 <pvPortMalloc+0x1a8>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d050      	beq.n	8004a94 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80049f2:	6a3b      	ldr	r3, [r7, #32]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2208      	movs	r2, #8
 80049f8:	4413      	add	r3, r2
 80049fa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	6a3b      	ldr	r3, [r7, #32]
 8004a02:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	1ad2      	subs	r2, r2, r3
 8004a0c:	2308      	movs	r3, #8
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d91f      	bls.n	8004a54 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4413      	add	r3, r2
 8004a1a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	f003 0307 	and.w	r3, r3, #7
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00a      	beq.n	8004a3c <pvPortMalloc+0x120>
        __asm volatile
 8004a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2a:	f383 8811 	msr	BASEPRI, r3
 8004a2e:	f3bf 8f6f 	isb	sy
 8004a32:	f3bf 8f4f 	dsb	sy
 8004a36:	613b      	str	r3, [r7, #16]
    }
 8004a38:	bf00      	nop
 8004a3a:	e7fe      	b.n	8004a3a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	1ad2      	subs	r2, r2, r3
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a4e:	69b8      	ldr	r0, [r7, #24]
 8004a50:	f000 f908 	bl	8004c64 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a54:	4b1d      	ldr	r3, [pc, #116]	; (8004acc <pvPortMalloc+0x1b0>)
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	4a1b      	ldr	r2, [pc, #108]	; (8004acc <pvPortMalloc+0x1b0>)
 8004a60:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a62:	4b1a      	ldr	r3, [pc, #104]	; (8004acc <pvPortMalloc+0x1b0>)
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	4b1b      	ldr	r3, [pc, #108]	; (8004ad4 <pvPortMalloc+0x1b8>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d203      	bcs.n	8004a76 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a6e:	4b17      	ldr	r3, [pc, #92]	; (8004acc <pvPortMalloc+0x1b0>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a18      	ldr	r2, [pc, #96]	; (8004ad4 <pvPortMalloc+0x1b8>)
 8004a74:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	4b13      	ldr	r3, [pc, #76]	; (8004ac8 <pvPortMalloc+0x1ac>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	2200      	movs	r2, #0
 8004a88:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004a8a:	4b13      	ldr	r3, [pc, #76]	; (8004ad8 <pvPortMalloc+0x1bc>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	4a11      	ldr	r2, [pc, #68]	; (8004ad8 <pvPortMalloc+0x1bc>)
 8004a92:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004a94:	f7fe fc7c 	bl	8003390 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <pvPortMalloc+0x19c>
        __asm volatile
 8004aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa6:	f383 8811 	msr	BASEPRI, r3
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	60fb      	str	r3, [r7, #12]
    }
 8004ab4:	bf00      	nop
 8004ab6:	e7fe      	b.n	8004ab6 <pvPortMalloc+0x19a>
    return pvReturn;
 8004ab8:	69fb      	ldr	r3, [r7, #28]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3728      	adds	r7, #40	; 0x28
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	20002980 	.word	0x20002980
 8004ac8:	20002994 	.word	0x20002994
 8004acc:	20002984 	.word	0x20002984
 8004ad0:	20002978 	.word	0x20002978
 8004ad4:	20002988 	.word	0x20002988
 8004ad8:	2000298c 	.word	0x2000298c

08004adc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d04d      	beq.n	8004b8a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004aee:	2308      	movs	r3, #8
 8004af0:	425b      	negs	r3, r3
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	4413      	add	r3, r2
 8004af6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	4b24      	ldr	r3, [pc, #144]	; (8004b94 <vPortFree+0xb8>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4013      	ands	r3, r2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10a      	bne.n	8004b20 <vPortFree+0x44>
        __asm volatile
 8004b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	60fb      	str	r3, [r7, #12]
    }
 8004b1c:	bf00      	nop
 8004b1e:	e7fe      	b.n	8004b1e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00a      	beq.n	8004b3e <vPortFree+0x62>
        __asm volatile
 8004b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2c:	f383 8811 	msr	BASEPRI, r3
 8004b30:	f3bf 8f6f 	isb	sy
 8004b34:	f3bf 8f4f 	dsb	sy
 8004b38:	60bb      	str	r3, [r7, #8]
    }
 8004b3a:	bf00      	nop
 8004b3c:	e7fe      	b.n	8004b3c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	4b14      	ldr	r3, [pc, #80]	; (8004b94 <vPortFree+0xb8>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4013      	ands	r3, r2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d01e      	beq.n	8004b8a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d11a      	bne.n	8004b8a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	4b0e      	ldr	r3, [pc, #56]	; (8004b94 <vPortFree+0xb8>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	43db      	mvns	r3, r3
 8004b5e:	401a      	ands	r2, r3
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004b64:	f7fe fc06 	bl	8003374 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	4b0a      	ldr	r3, [pc, #40]	; (8004b98 <vPortFree+0xbc>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4413      	add	r3, r2
 8004b72:	4a09      	ldr	r2, [pc, #36]	; (8004b98 <vPortFree+0xbc>)
 8004b74:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b76:	6938      	ldr	r0, [r7, #16]
 8004b78:	f000 f874 	bl	8004c64 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004b7c:	4b07      	ldr	r3, [pc, #28]	; (8004b9c <vPortFree+0xc0>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	3301      	adds	r3, #1
 8004b82:	4a06      	ldr	r2, [pc, #24]	; (8004b9c <vPortFree+0xc0>)
 8004b84:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004b86:	f7fe fc03 	bl	8003390 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004b8a:	bf00      	nop
 8004b8c:	3718      	adds	r7, #24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	20002994 	.word	0x20002994
 8004b98:	20002984 	.word	0x20002984
 8004b9c:	20002990 	.word	0x20002990

08004ba0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004ba6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004baa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004bac:	4b27      	ldr	r3, [pc, #156]	; (8004c4c <prvHeapInit+0xac>)
 8004bae:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f003 0307 	and.w	r3, r3, #7
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00c      	beq.n	8004bd4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	3307      	adds	r3, #7
 8004bbe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0307 	bic.w	r3, r3, #7
 8004bc6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	4a1f      	ldr	r2, [pc, #124]	; (8004c4c <prvHeapInit+0xac>)
 8004bd0:	4413      	add	r3, r2
 8004bd2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004bd8:	4a1d      	ldr	r2, [pc, #116]	; (8004c50 <prvHeapInit+0xb0>)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004bde:	4b1c      	ldr	r3, [pc, #112]	; (8004c50 <prvHeapInit+0xb0>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	4413      	add	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004bec:	2208      	movs	r2, #8
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	1a9b      	subs	r3, r3, r2
 8004bf2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f023 0307 	bic.w	r3, r3, #7
 8004bfa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4a15      	ldr	r2, [pc, #84]	; (8004c54 <prvHeapInit+0xb4>)
 8004c00:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004c02:	4b14      	ldr	r3, [pc, #80]	; (8004c54 <prvHeapInit+0xb4>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2200      	movs	r2, #0
 8004c08:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004c0a:	4b12      	ldr	r3, [pc, #72]	; (8004c54 <prvHeapInit+0xb4>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	1ad2      	subs	r2, r2, r3
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c20:	4b0c      	ldr	r3, [pc, #48]	; (8004c54 <prvHeapInit+0xb4>)
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	4a0a      	ldr	r2, [pc, #40]	; (8004c58 <prvHeapInit+0xb8>)
 8004c2e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	4a09      	ldr	r2, [pc, #36]	; (8004c5c <prvHeapInit+0xbc>)
 8004c36:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004c38:	4b09      	ldr	r3, [pc, #36]	; (8004c60 <prvHeapInit+0xc0>)
 8004c3a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004c3e:	601a      	str	r2, [r3, #0]
}
 8004c40:	bf00      	nop
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	20000178 	.word	0x20000178
 8004c50:	20002978 	.word	0x20002978
 8004c54:	20002980 	.word	0x20002980
 8004c58:	20002988 	.word	0x20002988
 8004c5c:	20002984 	.word	0x20002984
 8004c60:	20002994 	.word	0x20002994

08004c64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c6c:	4b28      	ldr	r3, [pc, #160]	; (8004d10 <prvInsertBlockIntoFreeList+0xac>)
 8004c6e:	60fb      	str	r3, [r7, #12]
 8004c70:	e002      	b.n	8004c78 <prvInsertBlockIntoFreeList+0x14>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	60fb      	str	r3, [r7, #12]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d8f7      	bhi.n	8004c72 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d108      	bne.n	8004ca6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	441a      	add	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	441a      	add	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d118      	bne.n	8004cec <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	4b15      	ldr	r3, [pc, #84]	; (8004d14 <prvInsertBlockIntoFreeList+0xb0>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d00d      	beq.n	8004ce2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	441a      	add	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	e008      	b.n	8004cf4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ce2:	4b0c      	ldr	r3, [pc, #48]	; (8004d14 <prvInsertBlockIntoFreeList+0xb0>)
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	e003      	b.n	8004cf4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d002      	beq.n	8004d02 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004d02:	bf00      	nop
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	20002978 	.word	0x20002978
 8004d14:	20002980 	.word	0x20002980

08004d18 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af02      	add	r7, sp, #8
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
 8004d24:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004d26:	2205      	movs	r2, #5
 8004d28:	492b      	ldr	r1, [pc, #172]	; (8004dd8 <SYSVIEW_AddTask+0xc0>)
 8004d2a:	68b8      	ldr	r0, [r7, #8]
 8004d2c:	f001 fb0a 	bl	8006344 <memcmp>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d04b      	beq.n	8004dce <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004d36:	4b29      	ldr	r3, [pc, #164]	; (8004ddc <SYSVIEW_AddTask+0xc4>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2b07      	cmp	r3, #7
 8004d3c:	d903      	bls.n	8004d46 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004d3e:	4828      	ldr	r0, [pc, #160]	; (8004de0 <SYSVIEW_AddTask+0xc8>)
 8004d40:	f001 fa80 	bl	8006244 <SEGGER_SYSVIEW_Warn>
    return;
 8004d44:	e044      	b.n	8004dd0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004d46:	4b25      	ldr	r3, [pc, #148]	; (8004ddc <SYSVIEW_AddTask+0xc4>)
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	4926      	ldr	r1, [pc, #152]	; (8004de4 <SYSVIEW_AddTask+0xcc>)
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4413      	add	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	440b      	add	r3, r1
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004d5a:	4b20      	ldr	r3, [pc, #128]	; (8004ddc <SYSVIEW_AddTask+0xc4>)
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	4921      	ldr	r1, [pc, #132]	; (8004de4 <SYSVIEW_AddTask+0xcc>)
 8004d60:	4613      	mov	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	440b      	add	r3, r1
 8004d6a:	3304      	adds	r3, #4
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004d70:	4b1a      	ldr	r3, [pc, #104]	; (8004ddc <SYSVIEW_AddTask+0xc4>)
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	491b      	ldr	r1, [pc, #108]	; (8004de4 <SYSVIEW_AddTask+0xcc>)
 8004d76:	4613      	mov	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	440b      	add	r3, r1
 8004d80:	3308      	adds	r3, #8
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004d86:	4b15      	ldr	r3, [pc, #84]	; (8004ddc <SYSVIEW_AddTask+0xc4>)
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	4916      	ldr	r1, [pc, #88]	; (8004de4 <SYSVIEW_AddTask+0xcc>)
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	440b      	add	r3, r1
 8004d96:	330c      	adds	r3, #12
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004d9c:	4b0f      	ldr	r3, [pc, #60]	; (8004ddc <SYSVIEW_AddTask+0xc4>)
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	4910      	ldr	r1, [pc, #64]	; (8004de4 <SYSVIEW_AddTask+0xcc>)
 8004da2:	4613      	mov	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	440b      	add	r3, r1
 8004dac:	3310      	adds	r3, #16
 8004dae:	69ba      	ldr	r2, [r7, #24]
 8004db0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004db2:	4b0a      	ldr	r3, [pc, #40]	; (8004ddc <SYSVIEW_AddTask+0xc4>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	3301      	adds	r3, #1
 8004db8:	4a08      	ldr	r2, [pc, #32]	; (8004ddc <SYSVIEW_AddTask+0xc4>)
 8004dba:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	68b9      	ldr	r1, [r7, #8]
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f000 f80e 	bl	8004de8 <SYSVIEW_SendTaskInfo>
 8004dcc:	e000      	b.n	8004dd0 <SYSVIEW_AddTask+0xb8>
    return;
 8004dce:	bf00      	nop

}
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	080063bc 	.word	0x080063bc
 8004ddc:	20002a38 	.word	0x20002a38
 8004de0:	080063c4 	.word	0x080063c4
 8004de4:	20002998 	.word	0x20002998

08004de8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b08a      	sub	sp, #40	; 0x28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
 8004df4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004df6:	f107 0314 	add.w	r3, r7, #20
 8004dfa:	2214      	movs	r2, #20
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f001 fabc 	bl	800637c <memset>
  TaskInfo.TaskID     = TaskID;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e16:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004e18:	f107 0314 	add.w	r3, r7, #20
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 fe3f 	bl	8005aa0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004e22:	bf00      	nop
 8004e24:	3728      	adds	r7, #40	; 0x28
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
	...

08004e2c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004e32:	4b24      	ldr	r3, [pc, #144]	; (8004ec4 <_DoInit+0x98>)
 8004e34:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2203      	movs	r2, #3
 8004e3a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2203      	movs	r2, #3
 8004e40:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a20      	ldr	r2, [pc, #128]	; (8004ec8 <_DoInit+0x9c>)
 8004e46:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a20      	ldr	r2, [pc, #128]	; (8004ecc <_DoInit+0xa0>)
 8004e4c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e54:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a17      	ldr	r2, [pc, #92]	; (8004ec8 <_DoInit+0x9c>)
 8004e6c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a17      	ldr	r2, [pc, #92]	; (8004ed0 <_DoInit+0xa4>)
 8004e72:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2210      	movs	r2, #16
 8004e78:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	3307      	adds	r3, #7
 8004e90:	4a10      	ldr	r2, [pc, #64]	; (8004ed4 <_DoInit+0xa8>)
 8004e92:	6810      	ldr	r0, [r2, #0]
 8004e94:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004e96:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a0e      	ldr	r2, [pc, #56]	; (8004ed8 <_DoInit+0xac>)
 8004e9e:	6810      	ldr	r0, [r2, #0]
 8004ea0:	6018      	str	r0, [r3, #0]
 8004ea2:	8891      	ldrh	r1, [r2, #4]
 8004ea4:	7992      	ldrb	r2, [r2, #6]
 8004ea6:	8099      	strh	r1, [r3, #4]
 8004ea8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004eaa:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004eb4:	f3bf 8f5f 	dmb	sy
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	20002ff0 	.word	0x20002ff0
 8004ec8:	08006414 	.word	0x08006414
 8004ecc:	20002a3c 	.word	0x20002a3c
 8004ed0:	20002e3c 	.word	0x20002e3c
 8004ed4:	08006420 	.word	0x08006420
 8004ed8:	08006424 	.word	0x08006424

08004edc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08c      	sub	sp, #48	; 0x30
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004ee8:	4b3e      	ldr	r3, [pc, #248]	; (8004fe4 <SEGGER_RTT_ReadNoLock+0x108>)
 8004eea:	623b      	str	r3, [r7, #32]
 8004eec:	6a3b      	ldr	r3, [r7, #32]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <SEGGER_RTT_ReadNoLock+0x1e>
 8004ef6:	f7ff ff99 	bl	8004e2c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	4613      	mov	r3, r2
 8004efe:	005b      	lsls	r3, r3, #1
 8004f00:	4413      	add	r3, r2
 8004f02:	00db      	lsls	r3, r3, #3
 8004f04:	3360      	adds	r3, #96	; 0x60
 8004f06:	4a37      	ldr	r2, [pc, #220]	; (8004fe4 <SEGGER_RTT_ReadNoLock+0x108>)
 8004f08:	4413      	add	r3, r2
 8004f0a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004f20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d92b      	bls.n	8004f80 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	689a      	ldr	r2, [r3, #8]
 8004f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4293      	cmp	r3, r2
 8004f38:	bf28      	it	cs
 8004f3a:	4613      	movcs	r3, r2
 8004f3c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	685a      	ldr	r2, [r3, #4]
 8004f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f44:	4413      	add	r3, r2
 8004f46:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	6939      	ldr	r1, [r7, #16]
 8004f4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f4e:	f001 fa07 	bl	8006360 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	4413      	add	r3, r2
 8004f58:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	4413      	add	r3, r2
 8004f60:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	4413      	add	r3, r2
 8004f70:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d101      	bne.n	8004f80 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004f80:	69ba      	ldr	r2, [r7, #24]
 8004f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	bf28      	it	cs
 8004f90:	4613      	movcs	r3, r2
 8004f92:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d019      	beq.n	8004fce <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	685a      	ldr	r2, [r3, #4]
 8004f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa0:	4413      	add	r3, r2
 8004fa2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	6939      	ldr	r1, [r7, #16]
 8004fa8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004faa:	f001 f9d9 	bl	8006360 <memcpy>
    NumBytesRead += NumBytesRem;
 8004fae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	4413      	add	r3, r2
 8004fbc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004fc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	4413      	add	r3, r2
 8004fcc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d002      	beq.n	8004fda <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fd8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3730      	adds	r7, #48	; 0x30
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	20002ff0 	.word	0x20002ff0

08004fe8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004fe8:	b480      	push	{r7}
 8004fea:	b087      	sub	sp, #28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00f      	beq.n	800501e <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8004ffe:	e002      	b.n	8005006 <_EncodeStr+0x1e>
      Len++;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	3301      	adds	r3, #1
 8005004:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	4413      	add	r3, r2
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1f6      	bne.n	8005000 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	429a      	cmp	r2, r3
 8005018:	d901      	bls.n	800501e <_EncodeStr+0x36>
      Len = Limit;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	2bfe      	cmp	r3, #254	; 0xfe
 8005022:	d806      	bhi.n	8005032 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	1c5a      	adds	r2, r3, #1
 8005028:	60fa      	str	r2, [r7, #12]
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	b2d2      	uxtb	r2, r2
 800502e:	701a      	strb	r2, [r3, #0]
 8005030:	e011      	b.n	8005056 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	1c5a      	adds	r2, r3, #1
 8005036:	60fa      	str	r2, [r7, #12]
 8005038:	22ff      	movs	r2, #255	; 0xff
 800503a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	1c5a      	adds	r2, r3, #1
 8005040:	60fa      	str	r2, [r7, #12]
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	b2d2      	uxtb	r2, r2
 8005046:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	0a19      	lsrs	r1, r3, #8
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	1c5a      	adds	r2, r3, #1
 8005050:	60fa      	str	r2, [r7, #12]
 8005052:	b2ca      	uxtb	r2, r1
 8005054:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005056:	2300      	movs	r3, #0
 8005058:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800505a:	e00a      	b.n	8005072 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	1c53      	adds	r3, r2, #1
 8005060:	60bb      	str	r3, [r7, #8]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	1c59      	adds	r1, r3, #1
 8005066:	60f9      	str	r1, [r7, #12]
 8005068:	7812      	ldrb	r2, [r2, #0]
 800506a:	701a      	strb	r2, [r3, #0]
    n++;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	3301      	adds	r3, #1
 8005070:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	429a      	cmp	r2, r3
 8005078:	d3f0      	bcc.n	800505c <_EncodeStr+0x74>
  }
  return pPayload;
 800507a:	68fb      	ldr	r3, [r7, #12]
}
 800507c:	4618      	mov	r0, r3
 800507e:	371c      	adds	r7, #28
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	3304      	adds	r3, #4
}
 8005094:	4618      	mov	r0, r3
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80050a6:	4b36      	ldr	r3, [pc, #216]	; (8005180 <_HandleIncomingPacket+0xe0>)
 80050a8:	7e1b      	ldrb	r3, [r3, #24]
 80050aa:	4618      	mov	r0, r3
 80050ac:	1cfb      	adds	r3, r7, #3
 80050ae:	2201      	movs	r2, #1
 80050b0:	4619      	mov	r1, r3
 80050b2:	f7ff ff13 	bl	8004edc <SEGGER_RTT_ReadNoLock>
 80050b6:	4603      	mov	r3, r0
 80050b8:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	dd54      	ble.n	800516a <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80050c0:	78fb      	ldrb	r3, [r7, #3]
 80050c2:	2b80      	cmp	r3, #128	; 0x80
 80050c4:	d032      	beq.n	800512c <_HandleIncomingPacket+0x8c>
 80050c6:	2b80      	cmp	r3, #128	; 0x80
 80050c8:	dc42      	bgt.n	8005150 <_HandleIncomingPacket+0xb0>
 80050ca:	2b07      	cmp	r3, #7
 80050cc:	dc16      	bgt.n	80050fc <_HandleIncomingPacket+0x5c>
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	dd3e      	ble.n	8005150 <_HandleIncomingPacket+0xb0>
 80050d2:	3b01      	subs	r3, #1
 80050d4:	2b06      	cmp	r3, #6
 80050d6:	d83b      	bhi.n	8005150 <_HandleIncomingPacket+0xb0>
 80050d8:	a201      	add	r2, pc, #4	; (adr r2, 80050e0 <_HandleIncomingPacket+0x40>)
 80050da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050de:	bf00      	nop
 80050e0:	08005103 	.word	0x08005103
 80050e4:	08005109 	.word	0x08005109
 80050e8:	0800510f 	.word	0x0800510f
 80050ec:	08005115 	.word	0x08005115
 80050f0:	0800511b 	.word	0x0800511b
 80050f4:	08005121 	.word	0x08005121
 80050f8:	08005127 	.word	0x08005127
 80050fc:	2b7f      	cmp	r3, #127	; 0x7f
 80050fe:	d036      	beq.n	800516e <_HandleIncomingPacket+0xce>
 8005100:	e026      	b.n	8005150 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005102:	f000 fb53 	bl	80057ac <SEGGER_SYSVIEW_Start>
      break;
 8005106:	e037      	b.n	8005178 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005108:	f000 fc0a 	bl	8005920 <SEGGER_SYSVIEW_Stop>
      break;
 800510c:	e034      	b.n	8005178 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800510e:	f000 fdbf 	bl	8005c90 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005112:	e031      	b.n	8005178 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005114:	f000 fda8 	bl	8005c68 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005118:	e02e      	b.n	8005178 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800511a:	f000 fc27 	bl	800596c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800511e:	e02b      	b.n	8005178 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005120:	f001 f852 	bl	80061c8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005124:	e028      	b.n	8005178 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005126:	f001 f831 	bl	800618c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800512a:	e025      	b.n	8005178 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800512c:	4b14      	ldr	r3, [pc, #80]	; (8005180 <_HandleIncomingPacket+0xe0>)
 800512e:	7e1b      	ldrb	r3, [r3, #24]
 8005130:	4618      	mov	r0, r3
 8005132:	1cfb      	adds	r3, r7, #3
 8005134:	2201      	movs	r2, #1
 8005136:	4619      	mov	r1, r3
 8005138:	f7ff fed0 	bl	8004edc <SEGGER_RTT_ReadNoLock>
 800513c:	4603      	mov	r3, r0
 800513e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	dd15      	ble.n	8005172 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005146:	78fb      	ldrb	r3, [r7, #3]
 8005148:	4618      	mov	r0, r3
 800514a:	f000 ff9f 	bl	800608c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800514e:	e010      	b.n	8005172 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005150:	78fb      	ldrb	r3, [r7, #3]
 8005152:	b25b      	sxtb	r3, r3
 8005154:	2b00      	cmp	r3, #0
 8005156:	da0e      	bge.n	8005176 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005158:	4b09      	ldr	r3, [pc, #36]	; (8005180 <_HandleIncomingPacket+0xe0>)
 800515a:	7e1b      	ldrb	r3, [r3, #24]
 800515c:	4618      	mov	r0, r3
 800515e:	1cfb      	adds	r3, r7, #3
 8005160:	2201      	movs	r2, #1
 8005162:	4619      	mov	r1, r3
 8005164:	f7ff feba 	bl	8004edc <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005168:	e005      	b.n	8005176 <_HandleIncomingPacket+0xd6>
    }
  }
 800516a:	bf00      	nop
 800516c:	e004      	b.n	8005178 <_HandleIncomingPacket+0xd8>
      break;
 800516e:	bf00      	nop
 8005170:	e002      	b.n	8005178 <_HandleIncomingPacket+0xd8>
      break;
 8005172:	bf00      	nop
 8005174:	e000      	b.n	8005178 <_HandleIncomingPacket+0xd8>
      break;
 8005176:	bf00      	nop
}
 8005178:	bf00      	nop
 800517a:	3708      	adds	r7, #8
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	20002e4c 	.word	0x20002e4c

08005184 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005184:	b580      	push	{r7, lr}
 8005186:	b08c      	sub	sp, #48	; 0x30
 8005188:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800518a:	2301      	movs	r3, #1
 800518c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800518e:	1d3b      	adds	r3, r7, #4
 8005190:	3301      	adds	r3, #1
 8005192:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005198:	4b31      	ldr	r3, [pc, #196]	; (8005260 <_TrySendOverflowPacket+0xdc>)
 800519a:	695b      	ldr	r3, [r3, #20]
 800519c:	62bb      	str	r3, [r7, #40]	; 0x28
 800519e:	e00b      	b.n	80051b8 <_TrySendOverflowPacket+0x34>
 80051a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a2:	b2da      	uxtb	r2, r3
 80051a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a6:	1c59      	adds	r1, r3, #1
 80051a8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80051aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051ae:	b2d2      	uxtb	r2, r2
 80051b0:	701a      	strb	r2, [r3, #0]
 80051b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b4:	09db      	lsrs	r3, r3, #7
 80051b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80051b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ba:	2b7f      	cmp	r3, #127	; 0x7f
 80051bc:	d8f0      	bhi.n	80051a0 <_TrySendOverflowPacket+0x1c>
 80051be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c0:	1c5a      	adds	r2, r3, #1
 80051c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051c6:	b2d2      	uxtb	r2, r2
 80051c8:	701a      	strb	r2, [r3, #0]
 80051ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051cc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80051ce:	4b25      	ldr	r3, [pc, #148]	; (8005264 <_TrySendOverflowPacket+0xe0>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80051d4:	4b22      	ldr	r3, [pc, #136]	; (8005260 <_TrySendOverflowPacket+0xdc>)
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	627b      	str	r3, [r7, #36]	; 0x24
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	623b      	str	r3, [r7, #32]
 80051e6:	e00b      	b.n	8005200 <_TrySendOverflowPacket+0x7c>
 80051e8:	6a3b      	ldr	r3, [r7, #32]
 80051ea:	b2da      	uxtb	r2, r3
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	1c59      	adds	r1, r3, #1
 80051f0:	6279      	str	r1, [r7, #36]	; 0x24
 80051f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051f6:	b2d2      	uxtb	r2, r2
 80051f8:	701a      	strb	r2, [r3, #0]
 80051fa:	6a3b      	ldr	r3, [r7, #32]
 80051fc:	09db      	lsrs	r3, r3, #7
 80051fe:	623b      	str	r3, [r7, #32]
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	2b7f      	cmp	r3, #127	; 0x7f
 8005204:	d8f0      	bhi.n	80051e8 <_TrySendOverflowPacket+0x64>
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005208:	1c5a      	adds	r2, r3, #1
 800520a:	627a      	str	r2, [r7, #36]	; 0x24
 800520c:	6a3a      	ldr	r2, [r7, #32]
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	701a      	strb	r2, [r3, #0]
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005216:	4b12      	ldr	r3, [pc, #72]	; (8005260 <_TrySendOverflowPacket+0xdc>)
 8005218:	785b      	ldrb	r3, [r3, #1]
 800521a:	4618      	mov	r0, r3
 800521c:	1d3b      	adds	r3, r7, #4
 800521e:	69fa      	ldr	r2, [r7, #28]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	461a      	mov	r2, r3
 8005224:	1d3b      	adds	r3, r7, #4
 8005226:	4619      	mov	r1, r3
 8005228:	f7fa ffd2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800522c:	4603      	mov	r3, r0
 800522e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d009      	beq.n	800524a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005236:	4a0a      	ldr	r2, [pc, #40]	; (8005260 <_TrySendOverflowPacket+0xdc>)
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800523c:	4b08      	ldr	r3, [pc, #32]	; (8005260 <_TrySendOverflowPacket+0xdc>)
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	3b01      	subs	r3, #1
 8005242:	b2da      	uxtb	r2, r3
 8005244:	4b06      	ldr	r3, [pc, #24]	; (8005260 <_TrySendOverflowPacket+0xdc>)
 8005246:	701a      	strb	r2, [r3, #0]
 8005248:	e004      	b.n	8005254 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800524a:	4b05      	ldr	r3, [pc, #20]	; (8005260 <_TrySendOverflowPacket+0xdc>)
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	3301      	adds	r3, #1
 8005250:	4a03      	ldr	r2, [pc, #12]	; (8005260 <_TrySendOverflowPacket+0xdc>)
 8005252:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005254:	693b      	ldr	r3, [r7, #16]
}
 8005256:	4618      	mov	r0, r3
 8005258:	3730      	adds	r7, #48	; 0x30
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	20002e4c 	.word	0x20002e4c
 8005264:	e0001004 	.word	0xe0001004

08005268 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005268:	b580      	push	{r7, lr}
 800526a:	b08a      	sub	sp, #40	; 0x28
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005274:	4b6c      	ldr	r3, [pc, #432]	; (8005428 <_SendPacket+0x1c0>)
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d010      	beq.n	800529e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800527c:	4b6a      	ldr	r3, [pc, #424]	; (8005428 <_SendPacket+0x1c0>)
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 80a3 	beq.w	80053cc <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005286:	4b68      	ldr	r3, [pc, #416]	; (8005428 <_SendPacket+0x1c0>)
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	2b02      	cmp	r3, #2
 800528c:	d109      	bne.n	80052a2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800528e:	f7ff ff79 	bl	8005184 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005292:	4b65      	ldr	r3, [pc, #404]	; (8005428 <_SendPacket+0x1c0>)
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	2b01      	cmp	r3, #1
 8005298:	f040 809a 	bne.w	80053d0 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800529c:	e001      	b.n	80052a2 <_SendPacket+0x3a>
    goto Send;
 800529e:	bf00      	nop
 80052a0:	e000      	b.n	80052a4 <_SendPacket+0x3c>
Send:
 80052a2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b1f      	cmp	r3, #31
 80052a8:	d809      	bhi.n	80052be <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80052aa:	4b5f      	ldr	r3, [pc, #380]	; (8005428 <_SendPacket+0x1c0>)
 80052ac:	69da      	ldr	r2, [r3, #28]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	fa22 f303 	lsr.w	r3, r2, r3
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f040 808b 	bne.w	80053d4 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b17      	cmp	r3, #23
 80052c2:	d807      	bhi.n	80052d4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	3b01      	subs	r3, #1
 80052c8:	60fb      	str	r3, [r7, #12]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	b2da      	uxtb	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	701a      	strb	r2, [r3, #0]
 80052d2:	e03d      	b.n	8005350 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	2b7f      	cmp	r3, #127	; 0x7f
 80052e0:	d912      	bls.n	8005308 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	09da      	lsrs	r2, r3, #7
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	3b01      	subs	r3, #1
 80052ea:	60fb      	str	r3, [r7, #12]
 80052ec:	b2d2      	uxtb	r2, r2
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	3a01      	subs	r2, #1
 80052fa:	60fa      	str	r2, [r7, #12]
 80052fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005300:	b2da      	uxtb	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	701a      	strb	r2, [r3, #0]
 8005306:	e006      	b.n	8005316 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	3b01      	subs	r3, #1
 800530c:	60fb      	str	r3, [r7, #12]
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	b2da      	uxtb	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2b7f      	cmp	r3, #127	; 0x7f
 800531a:	d912      	bls.n	8005342 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	09da      	lsrs	r2, r3, #7
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	3b01      	subs	r3, #1
 8005324:	60fb      	str	r3, [r7, #12]
 8005326:	b2d2      	uxtb	r2, r2
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	b2db      	uxtb	r3, r3
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	3a01      	subs	r2, #1
 8005334:	60fa      	str	r2, [r7, #12]
 8005336:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800533a:	b2da      	uxtb	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	701a      	strb	r2, [r3, #0]
 8005340:	e006      	b.n	8005350 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	3b01      	subs	r3, #1
 8005346:	60fb      	str	r3, [r7, #12]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	b2da      	uxtb	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005350:	4b36      	ldr	r3, [pc, #216]	; (800542c <_SendPacket+0x1c4>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005356:	4b34      	ldr	r3, [pc, #208]	; (8005428 <_SendPacket+0x1c0>)
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	69ba      	ldr	r2, [r7, #24]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	627b      	str	r3, [r7, #36]	; 0x24
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	623b      	str	r3, [r7, #32]
 8005368:	e00b      	b.n	8005382 <_SendPacket+0x11a>
 800536a:	6a3b      	ldr	r3, [r7, #32]
 800536c:	b2da      	uxtb	r2, r3
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	1c59      	adds	r1, r3, #1
 8005372:	6279      	str	r1, [r7, #36]	; 0x24
 8005374:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005378:	b2d2      	uxtb	r2, r2
 800537a:	701a      	strb	r2, [r3, #0]
 800537c:	6a3b      	ldr	r3, [r7, #32]
 800537e:	09db      	lsrs	r3, r3, #7
 8005380:	623b      	str	r3, [r7, #32]
 8005382:	6a3b      	ldr	r3, [r7, #32]
 8005384:	2b7f      	cmp	r3, #127	; 0x7f
 8005386:	d8f0      	bhi.n	800536a <_SendPacket+0x102>
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	1c5a      	adds	r2, r3, #1
 800538c:	627a      	str	r2, [r7, #36]	; 0x24
 800538e:	6a3a      	ldr	r2, [r7, #32]
 8005390:	b2d2      	uxtb	r2, r2
 8005392:	701a      	strb	r2, [r3, #0]
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005398:	4b23      	ldr	r3, [pc, #140]	; (8005428 <_SendPacket+0x1c0>)
 800539a:	785b      	ldrb	r3, [r3, #1]
 800539c:	4618      	mov	r0, r3
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	461a      	mov	r2, r3
 80053a6:	68f9      	ldr	r1, [r7, #12]
 80053a8:	f7fa ff12 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80053ac:	4603      	mov	r3, r0
 80053ae:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d003      	beq.n	80053be <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80053b6:	4a1c      	ldr	r2, [pc, #112]	; (8005428 <_SendPacket+0x1c0>)
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	60d3      	str	r3, [r2, #12]
 80053bc:	e00b      	b.n	80053d6 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80053be:	4b1a      	ldr	r3, [pc, #104]	; (8005428 <_SendPacket+0x1c0>)
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	3301      	adds	r3, #1
 80053c4:	b2da      	uxtb	r2, r3
 80053c6:	4b18      	ldr	r3, [pc, #96]	; (8005428 <_SendPacket+0x1c0>)
 80053c8:	701a      	strb	r2, [r3, #0]
 80053ca:	e004      	b.n	80053d6 <_SendPacket+0x16e>
    goto SendDone;
 80053cc:	bf00      	nop
 80053ce:	e002      	b.n	80053d6 <_SendPacket+0x16e>
      goto SendDone;
 80053d0:	bf00      	nop
 80053d2:	e000      	b.n	80053d6 <_SendPacket+0x16e>
      goto SendDone;
 80053d4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80053d6:	4b14      	ldr	r3, [pc, #80]	; (8005428 <_SendPacket+0x1c0>)
 80053d8:	7e1b      	ldrb	r3, [r3, #24]
 80053da:	4619      	mov	r1, r3
 80053dc:	4a14      	ldr	r2, [pc, #80]	; (8005430 <_SendPacket+0x1c8>)
 80053de:	460b      	mov	r3, r1
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	440b      	add	r3, r1
 80053e4:	00db      	lsls	r3, r3, #3
 80053e6:	4413      	add	r3, r2
 80053e8:	336c      	adds	r3, #108	; 0x6c
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	4b0e      	ldr	r3, [pc, #56]	; (8005428 <_SendPacket+0x1c0>)
 80053ee:	7e1b      	ldrb	r3, [r3, #24]
 80053f0:	4618      	mov	r0, r3
 80053f2:	490f      	ldr	r1, [pc, #60]	; (8005430 <_SendPacket+0x1c8>)
 80053f4:	4603      	mov	r3, r0
 80053f6:	005b      	lsls	r3, r3, #1
 80053f8:	4403      	add	r3, r0
 80053fa:	00db      	lsls	r3, r3, #3
 80053fc:	440b      	add	r3, r1
 80053fe:	3370      	adds	r3, #112	; 0x70
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	429a      	cmp	r2, r3
 8005404:	d00b      	beq.n	800541e <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005406:	4b08      	ldr	r3, [pc, #32]	; (8005428 <_SendPacket+0x1c0>)
 8005408:	789b      	ldrb	r3, [r3, #2]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d107      	bne.n	800541e <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800540e:	4b06      	ldr	r3, [pc, #24]	; (8005428 <_SendPacket+0x1c0>)
 8005410:	2201      	movs	r2, #1
 8005412:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005414:	f7ff fe44 	bl	80050a0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005418:	4b03      	ldr	r3, [pc, #12]	; (8005428 <_SendPacket+0x1c0>)
 800541a:	2200      	movs	r2, #0
 800541c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800541e:	bf00      	nop
 8005420:	3728      	adds	r7, #40	; 0x28
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	20002e4c 	.word	0x20002e4c
 800542c:	e0001004 	.word	0xe0001004
 8005430:	20002ff0 	.word	0x20002ff0

08005434 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800543c:	f3ef 8311 	mrs	r3, BASEPRI
 8005440:	f04f 0120 	mov.w	r1, #32
 8005444:	f381 8811 	msr	BASEPRI, r1
 8005448:	60fb      	str	r3, [r7, #12]
 800544a:	4808      	ldr	r0, [pc, #32]	; (800546c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800544c:	f7ff fe1c 	bl	8005088 <_PreparePacket>
 8005450:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	68b9      	ldr	r1, [r7, #8]
 8005456:	68b8      	ldr	r0, [r7, #8]
 8005458:	f7ff ff06 	bl	8005268 <_SendPacket>
  RECORD_END();
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f383 8811 	msr	BASEPRI, r3
}
 8005462:	bf00      	nop
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	20002e7c 	.word	0x20002e7c

08005470 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005470:	b580      	push	{r7, lr}
 8005472:	b088      	sub	sp, #32
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800547a:	f3ef 8311 	mrs	r3, BASEPRI
 800547e:	f04f 0120 	mov.w	r1, #32
 8005482:	f381 8811 	msr	BASEPRI, r1
 8005486:	617b      	str	r3, [r7, #20]
 8005488:	4816      	ldr	r0, [pc, #88]	; (80054e4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800548a:	f7ff fdfd 	bl	8005088 <_PreparePacket>
 800548e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	61fb      	str	r3, [r7, #28]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	61bb      	str	r3, [r7, #24]
 800549c:	e00b      	b.n	80054b6 <SEGGER_SYSVIEW_RecordU32+0x46>
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	b2da      	uxtb	r2, r3
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	1c59      	adds	r1, r3, #1
 80054a6:	61f9      	str	r1, [r7, #28]
 80054a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054ac:	b2d2      	uxtb	r2, r2
 80054ae:	701a      	strb	r2, [r3, #0]
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	09db      	lsrs	r3, r3, #7
 80054b4:	61bb      	str	r3, [r7, #24]
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	2b7f      	cmp	r3, #127	; 0x7f
 80054ba:	d8f0      	bhi.n	800549e <SEGGER_SYSVIEW_RecordU32+0x2e>
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	1c5a      	adds	r2, r3, #1
 80054c0:	61fa      	str	r2, [r7, #28]
 80054c2:	69ba      	ldr	r2, [r7, #24]
 80054c4:	b2d2      	uxtb	r2, r2
 80054c6:	701a      	strb	r2, [r3, #0]
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	68f9      	ldr	r1, [r7, #12]
 80054d0:	6938      	ldr	r0, [r7, #16]
 80054d2:	f7ff fec9 	bl	8005268 <_SendPacket>
  RECORD_END();
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f383 8811 	msr	BASEPRI, r3
}
 80054dc:	bf00      	nop
 80054de:	3720      	adds	r7, #32
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	20002e7c 	.word	0x20002e7c

080054e8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b08c      	sub	sp, #48	; 0x30
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80054f4:	f3ef 8311 	mrs	r3, BASEPRI
 80054f8:	f04f 0120 	mov.w	r1, #32
 80054fc:	f381 8811 	msr	BASEPRI, r1
 8005500:	61fb      	str	r3, [r7, #28]
 8005502:	4825      	ldr	r0, [pc, #148]	; (8005598 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005504:	f7ff fdc0 	bl	8005088 <_PreparePacket>
 8005508:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	62bb      	str	r3, [r7, #40]	; 0x28
 8005516:	e00b      	b.n	8005530 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551a:	b2da      	uxtb	r2, r3
 800551c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800551e:	1c59      	adds	r1, r3, #1
 8005520:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005522:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005526:	b2d2      	uxtb	r2, r2
 8005528:	701a      	strb	r2, [r3, #0]
 800552a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552c:	09db      	lsrs	r3, r3, #7
 800552e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005532:	2b7f      	cmp	r3, #127	; 0x7f
 8005534:	d8f0      	bhi.n	8005518 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005538:	1c5a      	adds	r2, r3, #1
 800553a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800553c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800553e:	b2d2      	uxtb	r2, r2
 8005540:	701a      	strb	r2, [r3, #0]
 8005542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005544:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	627b      	str	r3, [r7, #36]	; 0x24
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	623b      	str	r3, [r7, #32]
 800554e:	e00b      	b.n	8005568 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	b2da      	uxtb	r2, r3
 8005554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005556:	1c59      	adds	r1, r3, #1
 8005558:	6279      	str	r1, [r7, #36]	; 0x24
 800555a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800555e:	b2d2      	uxtb	r2, r2
 8005560:	701a      	strb	r2, [r3, #0]
 8005562:	6a3b      	ldr	r3, [r7, #32]
 8005564:	09db      	lsrs	r3, r3, #7
 8005566:	623b      	str	r3, [r7, #32]
 8005568:	6a3b      	ldr	r3, [r7, #32]
 800556a:	2b7f      	cmp	r3, #127	; 0x7f
 800556c:	d8f0      	bhi.n	8005550 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	627a      	str	r2, [r7, #36]	; 0x24
 8005574:	6a3a      	ldr	r2, [r7, #32]
 8005576:	b2d2      	uxtb	r2, r2
 8005578:	701a      	strb	r2, [r3, #0]
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	6979      	ldr	r1, [r7, #20]
 8005582:	69b8      	ldr	r0, [r7, #24]
 8005584:	f7ff fe70 	bl	8005268 <_SendPacket>
  RECORD_END();
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	f383 8811 	msr	BASEPRI, r3
}
 800558e:	bf00      	nop
 8005590:	3730      	adds	r7, #48	; 0x30
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	20002e7c 	.word	0x20002e7c

0800559c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800559c:	b580      	push	{r7, lr}
 800559e:	b08e      	sub	sp, #56	; 0x38
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
 80055a8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80055aa:	f3ef 8311 	mrs	r3, BASEPRI
 80055ae:	f04f 0120 	mov.w	r1, #32
 80055b2:	f381 8811 	msr	BASEPRI, r1
 80055b6:	61fb      	str	r3, [r7, #28]
 80055b8:	4832      	ldr	r0, [pc, #200]	; (8005684 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80055ba:	f7ff fd65 	bl	8005088 <_PreparePacket>
 80055be:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	637b      	str	r3, [r7, #52]	; 0x34
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	633b      	str	r3, [r7, #48]	; 0x30
 80055cc:	e00b      	b.n	80055e6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80055ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d0:	b2da      	uxtb	r2, r3
 80055d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d4:	1c59      	adds	r1, r3, #1
 80055d6:	6379      	str	r1, [r7, #52]	; 0x34
 80055d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055dc:	b2d2      	uxtb	r2, r2
 80055de:	701a      	strb	r2, [r3, #0]
 80055e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e2:	09db      	lsrs	r3, r3, #7
 80055e4:	633b      	str	r3, [r7, #48]	; 0x30
 80055e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e8:	2b7f      	cmp	r3, #127	; 0x7f
 80055ea:	d8f0      	bhi.n	80055ce <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80055ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ee:	1c5a      	adds	r2, r3, #1
 80055f0:	637a      	str	r2, [r7, #52]	; 0x34
 80055f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055f4:	b2d2      	uxtb	r2, r2
 80055f6:	701a      	strb	r2, [r3, #0]
 80055f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055fa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	62bb      	str	r3, [r7, #40]	; 0x28
 8005604:	e00b      	b.n	800561e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005608:	b2da      	uxtb	r2, r3
 800560a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560c:	1c59      	adds	r1, r3, #1
 800560e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005610:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005614:	b2d2      	uxtb	r2, r2
 8005616:	701a      	strb	r2, [r3, #0]
 8005618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561a:	09db      	lsrs	r3, r3, #7
 800561c:	62bb      	str	r3, [r7, #40]	; 0x28
 800561e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005620:	2b7f      	cmp	r3, #127	; 0x7f
 8005622:	d8f0      	bhi.n	8005606 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005626:	1c5a      	adds	r2, r3, #1
 8005628:	62fa      	str	r2, [r7, #44]	; 0x2c
 800562a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800562c:	b2d2      	uxtb	r2, r2
 800562e:	701a      	strb	r2, [r3, #0]
 8005630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005632:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	627b      	str	r3, [r7, #36]	; 0x24
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	623b      	str	r3, [r7, #32]
 800563c:	e00b      	b.n	8005656 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	b2da      	uxtb	r2, r3
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	1c59      	adds	r1, r3, #1
 8005646:	6279      	str	r1, [r7, #36]	; 0x24
 8005648:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800564c:	b2d2      	uxtb	r2, r2
 800564e:	701a      	strb	r2, [r3, #0]
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	09db      	lsrs	r3, r3, #7
 8005654:	623b      	str	r3, [r7, #32]
 8005656:	6a3b      	ldr	r3, [r7, #32]
 8005658:	2b7f      	cmp	r3, #127	; 0x7f
 800565a:	d8f0      	bhi.n	800563e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	1c5a      	adds	r2, r3, #1
 8005660:	627a      	str	r2, [r7, #36]	; 0x24
 8005662:	6a3a      	ldr	r2, [r7, #32]
 8005664:	b2d2      	uxtb	r2, r2
 8005666:	701a      	strb	r2, [r3, #0]
 8005668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	6979      	ldr	r1, [r7, #20]
 8005670:	69b8      	ldr	r0, [r7, #24]
 8005672:	f7ff fdf9 	bl	8005268 <_SendPacket>
  RECORD_END();
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	f383 8811 	msr	BASEPRI, r3
}
 800567c:	bf00      	nop
 800567e:	3738      	adds	r7, #56	; 0x38
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	20002e7c 	.word	0x20002e7c

08005688 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005688:	b580      	push	{r7, lr}
 800568a:	b090      	sub	sp, #64	; 0x40
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
 8005694:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005696:	f3ef 8311 	mrs	r3, BASEPRI
 800569a:	f04f 0120 	mov.w	r1, #32
 800569e:	f381 8811 	msr	BASEPRI, r1
 80056a2:	61fb      	str	r3, [r7, #28]
 80056a4:	4840      	ldr	r0, [pc, #256]	; (80057a8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80056a6:	f7ff fcef 	bl	8005088 <_PreparePacket>
 80056aa:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80056b8:	e00b      	b.n	80056d2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80056ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056bc:	b2da      	uxtb	r2, r3
 80056be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056c0:	1c59      	adds	r1, r3, #1
 80056c2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80056c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056c8:	b2d2      	uxtb	r2, r2
 80056ca:	701a      	strb	r2, [r3, #0]
 80056cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ce:	09db      	lsrs	r3, r3, #7
 80056d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80056d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d4:	2b7f      	cmp	r3, #127	; 0x7f
 80056d6:	d8f0      	bhi.n	80056ba <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80056d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056da:	1c5a      	adds	r2, r3, #1
 80056dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80056de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056e0:	b2d2      	uxtb	r2, r2
 80056e2:	701a      	strb	r2, [r3, #0]
 80056e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056e6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	637b      	str	r3, [r7, #52]	; 0x34
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	633b      	str	r3, [r7, #48]	; 0x30
 80056f0:	e00b      	b.n	800570a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80056f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f8:	1c59      	adds	r1, r3, #1
 80056fa:	6379      	str	r1, [r7, #52]	; 0x34
 80056fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005700:	b2d2      	uxtb	r2, r2
 8005702:	701a      	strb	r2, [r3, #0]
 8005704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005706:	09db      	lsrs	r3, r3, #7
 8005708:	633b      	str	r3, [r7, #48]	; 0x30
 800570a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570c:	2b7f      	cmp	r3, #127	; 0x7f
 800570e:	d8f0      	bhi.n	80056f2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005712:	1c5a      	adds	r2, r3, #1
 8005714:	637a      	str	r2, [r7, #52]	; 0x34
 8005716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005718:	b2d2      	uxtb	r2, r2
 800571a:	701a      	strb	r2, [r3, #0]
 800571c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800571e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	62bb      	str	r3, [r7, #40]	; 0x28
 8005728:	e00b      	b.n	8005742 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800572a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572c:	b2da      	uxtb	r2, r3
 800572e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005730:	1c59      	adds	r1, r3, #1
 8005732:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005734:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005738:	b2d2      	uxtb	r2, r2
 800573a:	701a      	strb	r2, [r3, #0]
 800573c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573e:	09db      	lsrs	r3, r3, #7
 8005740:	62bb      	str	r3, [r7, #40]	; 0x28
 8005742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005744:	2b7f      	cmp	r3, #127	; 0x7f
 8005746:	d8f0      	bhi.n	800572a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574a:	1c5a      	adds	r2, r3, #1
 800574c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800574e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005750:	b2d2      	uxtb	r2, r2
 8005752:	701a      	strb	r2, [r3, #0]
 8005754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005756:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	627b      	str	r3, [r7, #36]	; 0x24
 800575c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800575e:	623b      	str	r3, [r7, #32]
 8005760:	e00b      	b.n	800577a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005762:	6a3b      	ldr	r3, [r7, #32]
 8005764:	b2da      	uxtb	r2, r3
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005768:	1c59      	adds	r1, r3, #1
 800576a:	6279      	str	r1, [r7, #36]	; 0x24
 800576c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005770:	b2d2      	uxtb	r2, r2
 8005772:	701a      	strb	r2, [r3, #0]
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	09db      	lsrs	r3, r3, #7
 8005778:	623b      	str	r3, [r7, #32]
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	2b7f      	cmp	r3, #127	; 0x7f
 800577e:	d8f0      	bhi.n	8005762 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005782:	1c5a      	adds	r2, r3, #1
 8005784:	627a      	str	r2, [r7, #36]	; 0x24
 8005786:	6a3a      	ldr	r2, [r7, #32]
 8005788:	b2d2      	uxtb	r2, r2
 800578a:	701a      	strb	r2, [r3, #0]
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	6979      	ldr	r1, [r7, #20]
 8005794:	69b8      	ldr	r0, [r7, #24]
 8005796:	f7ff fd67 	bl	8005268 <_SendPacket>
  RECORD_END();
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	f383 8811 	msr	BASEPRI, r3
}
 80057a0:	bf00      	nop
 80057a2:	3740      	adds	r7, #64	; 0x40
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	20002e7c 	.word	0x20002e7c

080057ac <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b08c      	sub	sp, #48	; 0x30
 80057b0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80057b2:	4b58      	ldr	r3, [pc, #352]	; (8005914 <SEGGER_SYSVIEW_Start+0x168>)
 80057b4:	2201      	movs	r2, #1
 80057b6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80057b8:	f3ef 8311 	mrs	r3, BASEPRI
 80057bc:	f04f 0120 	mov.w	r1, #32
 80057c0:	f381 8811 	msr	BASEPRI, r1
 80057c4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80057c6:	4b53      	ldr	r3, [pc, #332]	; (8005914 <SEGGER_SYSVIEW_Start+0x168>)
 80057c8:	785b      	ldrb	r3, [r3, #1]
 80057ca:	220a      	movs	r2, #10
 80057cc:	4952      	ldr	r1, [pc, #328]	; (8005918 <SEGGER_SYSVIEW_Start+0x16c>)
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7fa fcfe 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80057da:	200a      	movs	r0, #10
 80057dc:	f7ff fe2a 	bl	8005434 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80057e0:	f3ef 8311 	mrs	r3, BASEPRI
 80057e4:	f04f 0120 	mov.w	r1, #32
 80057e8:	f381 8811 	msr	BASEPRI, r1
 80057ec:	60bb      	str	r3, [r7, #8]
 80057ee:	484b      	ldr	r0, [pc, #300]	; (800591c <SEGGER_SYSVIEW_Start+0x170>)
 80057f0:	f7ff fc4a 	bl	8005088 <_PreparePacket>
 80057f4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057fe:	4b45      	ldr	r3, [pc, #276]	; (8005914 <SEGGER_SYSVIEW_Start+0x168>)
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	62bb      	str	r3, [r7, #40]	; 0x28
 8005804:	e00b      	b.n	800581e <SEGGER_SYSVIEW_Start+0x72>
 8005806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005808:	b2da      	uxtb	r2, r3
 800580a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580c:	1c59      	adds	r1, r3, #1
 800580e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005810:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005814:	b2d2      	uxtb	r2, r2
 8005816:	701a      	strb	r2, [r3, #0]
 8005818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581a:	09db      	lsrs	r3, r3, #7
 800581c:	62bb      	str	r3, [r7, #40]	; 0x28
 800581e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005820:	2b7f      	cmp	r3, #127	; 0x7f
 8005822:	d8f0      	bhi.n	8005806 <SEGGER_SYSVIEW_Start+0x5a>
 8005824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005826:	1c5a      	adds	r2, r3, #1
 8005828:	62fa      	str	r2, [r7, #44]	; 0x2c
 800582a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800582c:	b2d2      	uxtb	r2, r2
 800582e:	701a      	strb	r2, [r3, #0]
 8005830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005832:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	627b      	str	r3, [r7, #36]	; 0x24
 8005838:	4b36      	ldr	r3, [pc, #216]	; (8005914 <SEGGER_SYSVIEW_Start+0x168>)
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	623b      	str	r3, [r7, #32]
 800583e:	e00b      	b.n	8005858 <SEGGER_SYSVIEW_Start+0xac>
 8005840:	6a3b      	ldr	r3, [r7, #32]
 8005842:	b2da      	uxtb	r2, r3
 8005844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005846:	1c59      	adds	r1, r3, #1
 8005848:	6279      	str	r1, [r7, #36]	; 0x24
 800584a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800584e:	b2d2      	uxtb	r2, r2
 8005850:	701a      	strb	r2, [r3, #0]
 8005852:	6a3b      	ldr	r3, [r7, #32]
 8005854:	09db      	lsrs	r3, r3, #7
 8005856:	623b      	str	r3, [r7, #32]
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	2b7f      	cmp	r3, #127	; 0x7f
 800585c:	d8f0      	bhi.n	8005840 <SEGGER_SYSVIEW_Start+0x94>
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	1c5a      	adds	r2, r3, #1
 8005862:	627a      	str	r2, [r7, #36]	; 0x24
 8005864:	6a3a      	ldr	r2, [r7, #32]
 8005866:	b2d2      	uxtb	r2, r2
 8005868:	701a      	strb	r2, [r3, #0]
 800586a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	61fb      	str	r3, [r7, #28]
 8005872:	4b28      	ldr	r3, [pc, #160]	; (8005914 <SEGGER_SYSVIEW_Start+0x168>)
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	61bb      	str	r3, [r7, #24]
 8005878:	e00b      	b.n	8005892 <SEGGER_SYSVIEW_Start+0xe6>
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	b2da      	uxtb	r2, r3
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	1c59      	adds	r1, r3, #1
 8005882:	61f9      	str	r1, [r7, #28]
 8005884:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005888:	b2d2      	uxtb	r2, r2
 800588a:	701a      	strb	r2, [r3, #0]
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	09db      	lsrs	r3, r3, #7
 8005890:	61bb      	str	r3, [r7, #24]
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	2b7f      	cmp	r3, #127	; 0x7f
 8005896:	d8f0      	bhi.n	800587a <SEGGER_SYSVIEW_Start+0xce>
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	1c5a      	adds	r2, r3, #1
 800589c:	61fa      	str	r2, [r7, #28]
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	b2d2      	uxtb	r2, r2
 80058a2:	701a      	strb	r2, [r3, #0]
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	617b      	str	r3, [r7, #20]
 80058ac:	2300      	movs	r3, #0
 80058ae:	613b      	str	r3, [r7, #16]
 80058b0:	e00b      	b.n	80058ca <SEGGER_SYSVIEW_Start+0x11e>
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	b2da      	uxtb	r2, r3
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	1c59      	adds	r1, r3, #1
 80058ba:	6179      	str	r1, [r7, #20]
 80058bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058c0:	b2d2      	uxtb	r2, r2
 80058c2:	701a      	strb	r2, [r3, #0]
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	09db      	lsrs	r3, r3, #7
 80058c8:	613b      	str	r3, [r7, #16]
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	2b7f      	cmp	r3, #127	; 0x7f
 80058ce:	d8f0      	bhi.n	80058b2 <SEGGER_SYSVIEW_Start+0x106>
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	1c5a      	adds	r2, r3, #1
 80058d4:	617a      	str	r2, [r7, #20]
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	b2d2      	uxtb	r2, r2
 80058da:	701a      	strb	r2, [r3, #0]
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80058e0:	2218      	movs	r2, #24
 80058e2:	6839      	ldr	r1, [r7, #0]
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f7ff fcbf 	bl	8005268 <_SendPacket>
      RECORD_END();
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80058f0:	4b08      	ldr	r3, [pc, #32]	; (8005914 <SEGGER_SYSVIEW_Start+0x168>)
 80058f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d002      	beq.n	80058fe <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80058f8:	4b06      	ldr	r3, [pc, #24]	; (8005914 <SEGGER_SYSVIEW_Start+0x168>)
 80058fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80058fe:	f000 f9c7 	bl	8005c90 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005902:	f000 f9b1 	bl	8005c68 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005906:	f000 fc5f 	bl	80061c8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800590a:	bf00      	nop
 800590c:	3730      	adds	r7, #48	; 0x30
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	20002e4c 	.word	0x20002e4c
 8005918:	08006464 	.word	0x08006464
 800591c:	20002e7c 	.word	0x20002e7c

08005920 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005926:	f3ef 8311 	mrs	r3, BASEPRI
 800592a:	f04f 0120 	mov.w	r1, #32
 800592e:	f381 8811 	msr	BASEPRI, r1
 8005932:	607b      	str	r3, [r7, #4]
 8005934:	480b      	ldr	r0, [pc, #44]	; (8005964 <SEGGER_SYSVIEW_Stop+0x44>)
 8005936:	f7ff fba7 	bl	8005088 <_PreparePacket>
 800593a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800593c:	4b0a      	ldr	r3, [pc, #40]	; (8005968 <SEGGER_SYSVIEW_Stop+0x48>)
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d007      	beq.n	8005954 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005944:	220b      	movs	r2, #11
 8005946:	6839      	ldr	r1, [r7, #0]
 8005948:	6838      	ldr	r0, [r7, #0]
 800594a:	f7ff fc8d 	bl	8005268 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800594e:	4b06      	ldr	r3, [pc, #24]	; (8005968 <SEGGER_SYSVIEW_Stop+0x48>)
 8005950:	2200      	movs	r2, #0
 8005952:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f383 8811 	msr	BASEPRI, r3
}
 800595a:	bf00      	nop
 800595c:	3708      	adds	r7, #8
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	20002e7c 	.word	0x20002e7c
 8005968:	20002e4c 	.word	0x20002e4c

0800596c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800596c:	b580      	push	{r7, lr}
 800596e:	b08c      	sub	sp, #48	; 0x30
 8005970:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005972:	f3ef 8311 	mrs	r3, BASEPRI
 8005976:	f04f 0120 	mov.w	r1, #32
 800597a:	f381 8811 	msr	BASEPRI, r1
 800597e:	60fb      	str	r3, [r7, #12]
 8005980:	4845      	ldr	r0, [pc, #276]	; (8005a98 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005982:	f7ff fb81 	bl	8005088 <_PreparePacket>
 8005986:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005990:	4b42      	ldr	r3, [pc, #264]	; (8005a9c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	62bb      	str	r3, [r7, #40]	; 0x28
 8005996:	e00b      	b.n	80059b0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599a:	b2da      	uxtb	r2, r3
 800599c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599e:	1c59      	adds	r1, r3, #1
 80059a0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80059a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059a6:	b2d2      	uxtb	r2, r2
 80059a8:	701a      	strb	r2, [r3, #0]
 80059aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ac:	09db      	lsrs	r3, r3, #7
 80059ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80059b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b2:	2b7f      	cmp	r3, #127	; 0x7f
 80059b4:	d8f0      	bhi.n	8005998 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80059b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b8:	1c5a      	adds	r2, r3, #1
 80059ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059be:	b2d2      	uxtb	r2, r2
 80059c0:	701a      	strb	r2, [r3, #0]
 80059c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	627b      	str	r3, [r7, #36]	; 0x24
 80059ca:	4b34      	ldr	r3, [pc, #208]	; (8005a9c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	623b      	str	r3, [r7, #32]
 80059d0:	e00b      	b.n	80059ea <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80059d2:	6a3b      	ldr	r3, [r7, #32]
 80059d4:	b2da      	uxtb	r2, r3
 80059d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d8:	1c59      	adds	r1, r3, #1
 80059da:	6279      	str	r1, [r7, #36]	; 0x24
 80059dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059e0:	b2d2      	uxtb	r2, r2
 80059e2:	701a      	strb	r2, [r3, #0]
 80059e4:	6a3b      	ldr	r3, [r7, #32]
 80059e6:	09db      	lsrs	r3, r3, #7
 80059e8:	623b      	str	r3, [r7, #32]
 80059ea:	6a3b      	ldr	r3, [r7, #32]
 80059ec:	2b7f      	cmp	r3, #127	; 0x7f
 80059ee:	d8f0      	bhi.n	80059d2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80059f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f2:	1c5a      	adds	r2, r3, #1
 80059f4:	627a      	str	r2, [r7, #36]	; 0x24
 80059f6:	6a3a      	ldr	r2, [r7, #32]
 80059f8:	b2d2      	uxtb	r2, r2
 80059fa:	701a      	strb	r2, [r3, #0]
 80059fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	61fb      	str	r3, [r7, #28]
 8005a04:	4b25      	ldr	r3, [pc, #148]	; (8005a9c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	61bb      	str	r3, [r7, #24]
 8005a0a:	e00b      	b.n	8005a24 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	b2da      	uxtb	r2, r3
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	1c59      	adds	r1, r3, #1
 8005a14:	61f9      	str	r1, [r7, #28]
 8005a16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a1a:	b2d2      	uxtb	r2, r2
 8005a1c:	701a      	strb	r2, [r3, #0]
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	09db      	lsrs	r3, r3, #7
 8005a22:	61bb      	str	r3, [r7, #24]
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	2b7f      	cmp	r3, #127	; 0x7f
 8005a28:	d8f0      	bhi.n	8005a0c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	1c5a      	adds	r2, r3, #1
 8005a2e:	61fa      	str	r2, [r7, #28]
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	b2d2      	uxtb	r2, r2
 8005a34:	701a      	strb	r2, [r3, #0]
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	617b      	str	r3, [r7, #20]
 8005a3e:	2300      	movs	r3, #0
 8005a40:	613b      	str	r3, [r7, #16]
 8005a42:	e00b      	b.n	8005a5c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	b2da      	uxtb	r2, r3
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	1c59      	adds	r1, r3, #1
 8005a4c:	6179      	str	r1, [r7, #20]
 8005a4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a52:	b2d2      	uxtb	r2, r2
 8005a54:	701a      	strb	r2, [r3, #0]
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	09db      	lsrs	r3, r3, #7
 8005a5a:	613b      	str	r3, [r7, #16]
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	2b7f      	cmp	r3, #127	; 0x7f
 8005a60:	d8f0      	bhi.n	8005a44 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	1c5a      	adds	r2, r3, #1
 8005a66:	617a      	str	r2, [r7, #20]
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	b2d2      	uxtb	r2, r2
 8005a6c:	701a      	strb	r2, [r3, #0]
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005a72:	2218      	movs	r2, #24
 8005a74:	6879      	ldr	r1, [r7, #4]
 8005a76:	68b8      	ldr	r0, [r7, #8]
 8005a78:	f7ff fbf6 	bl	8005268 <_SendPacket>
  RECORD_END();
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005a82:	4b06      	ldr	r3, [pc, #24]	; (8005a9c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d002      	beq.n	8005a90 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005a8a:	4b04      	ldr	r3, [pc, #16]	; (8005a9c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8e:	4798      	blx	r3
  }
}
 8005a90:	bf00      	nop
 8005a92:	3730      	adds	r7, #48	; 0x30
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	20002e7c 	.word	0x20002e7c
 8005a9c:	20002e4c 	.word	0x20002e4c

08005aa0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b092      	sub	sp, #72	; 0x48
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005aa8:	f3ef 8311 	mrs	r3, BASEPRI
 8005aac:	f04f 0120 	mov.w	r1, #32
 8005ab0:	f381 8811 	msr	BASEPRI, r1
 8005ab4:	617b      	str	r3, [r7, #20]
 8005ab6:	486a      	ldr	r0, [pc, #424]	; (8005c60 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005ab8:	f7ff fae6 	bl	8005088 <_PreparePacket>
 8005abc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	647b      	str	r3, [r7, #68]	; 0x44
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	4b66      	ldr	r3, [pc, #408]	; (8005c64 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	643b      	str	r3, [r7, #64]	; 0x40
 8005ad2:	e00b      	b.n	8005aec <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005ad4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ad6:	b2da      	uxtb	r2, r3
 8005ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ada:	1c59      	adds	r1, r3, #1
 8005adc:	6479      	str	r1, [r7, #68]	; 0x44
 8005ade:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ae2:	b2d2      	uxtb	r2, r2
 8005ae4:	701a      	strb	r2, [r3, #0]
 8005ae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ae8:	09db      	lsrs	r3, r3, #7
 8005aea:	643b      	str	r3, [r7, #64]	; 0x40
 8005aec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aee:	2b7f      	cmp	r3, #127	; 0x7f
 8005af0:	d8f0      	bhi.n	8005ad4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005af2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005af4:	1c5a      	adds	r2, r3, #1
 8005af6:	647a      	str	r2, [r7, #68]	; 0x44
 8005af8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005afa:	b2d2      	uxtb	r2, r2
 8005afc:	701a      	strb	r2, [r3, #0]
 8005afe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b00:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b0c:	e00b      	b.n	8005b26 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b10:	b2da      	uxtb	r2, r3
 8005b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b14:	1c59      	adds	r1, r3, #1
 8005b16:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005b18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b1c:	b2d2      	uxtb	r2, r2
 8005b1e:	701a      	strb	r2, [r3, #0]
 8005b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b22:	09db      	lsrs	r3, r3, #7
 8005b24:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b28:	2b7f      	cmp	r3, #127	; 0x7f
 8005b2a:	d8f0      	bhi.n	8005b0e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b2e:	1c5a      	adds	r2, r3, #1
 8005b30:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005b32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b34:	b2d2      	uxtb	r2, r2
 8005b36:	701a      	strb	r2, [r3, #0]
 8005b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b3a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	2220      	movs	r2, #32
 8005b42:	4619      	mov	r1, r3
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f7ff fa4f 	bl	8004fe8 <_EncodeStr>
 8005b4a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005b4c:	2209      	movs	r2, #9
 8005b4e:	68f9      	ldr	r1, [r7, #12]
 8005b50:	6938      	ldr	r0, [r7, #16]
 8005b52:	f7ff fb89 	bl	8005268 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	4b40      	ldr	r3, [pc, #256]	; (8005c64 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	633b      	str	r3, [r7, #48]	; 0x30
 8005b6a:	e00b      	b.n	8005b84 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6e:	b2da      	uxtb	r2, r3
 8005b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b72:	1c59      	adds	r1, r3, #1
 8005b74:	6379      	str	r1, [r7, #52]	; 0x34
 8005b76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b7a:	b2d2      	uxtb	r2, r2
 8005b7c:	701a      	strb	r2, [r3, #0]
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b80:	09db      	lsrs	r3, r3, #7
 8005b82:	633b      	str	r3, [r7, #48]	; 0x30
 8005b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b86:	2b7f      	cmp	r3, #127	; 0x7f
 8005b88:	d8f0      	bhi.n	8005b6c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b8c:	1c5a      	adds	r2, r3, #1
 8005b8e:	637a      	str	r2, [r7, #52]	; 0x34
 8005b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b92:	b2d2      	uxtb	r2, r2
 8005b94:	701a      	strb	r2, [r3, #0]
 8005b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b98:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ba4:	e00b      	b.n	8005bbe <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bac:	1c59      	adds	r1, r3, #1
 8005bae:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005bb0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bb4:	b2d2      	uxtb	r2, r2
 8005bb6:	701a      	strb	r2, [r3, #0]
 8005bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bba:	09db      	lsrs	r3, r3, #7
 8005bbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc0:	2b7f      	cmp	r3, #127	; 0x7f
 8005bc2:	d8f0      	bhi.n	8005ba6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc6:	1c5a      	adds	r2, r3, #1
 8005bc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bcc:	b2d2      	uxtb	r2, r2
 8005bce:	701a      	strb	r2, [r3, #0]
 8005bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	623b      	str	r3, [r7, #32]
 8005bde:	e00b      	b.n	8005bf8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be6:	1c59      	adds	r1, r3, #1
 8005be8:	6279      	str	r1, [r7, #36]	; 0x24
 8005bea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bee:	b2d2      	uxtb	r2, r2
 8005bf0:	701a      	strb	r2, [r3, #0]
 8005bf2:	6a3b      	ldr	r3, [r7, #32]
 8005bf4:	09db      	lsrs	r3, r3, #7
 8005bf6:	623b      	str	r3, [r7, #32]
 8005bf8:	6a3b      	ldr	r3, [r7, #32]
 8005bfa:	2b7f      	cmp	r3, #127	; 0x7f
 8005bfc:	d8f0      	bhi.n	8005be0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c00:	1c5a      	adds	r2, r3, #1
 8005c02:	627a      	str	r2, [r7, #36]	; 0x24
 8005c04:	6a3a      	ldr	r2, [r7, #32]
 8005c06:	b2d2      	uxtb	r2, r2
 8005c08:	701a      	strb	r2, [r3, #0]
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	61fb      	str	r3, [r7, #28]
 8005c12:	2300      	movs	r3, #0
 8005c14:	61bb      	str	r3, [r7, #24]
 8005c16:	e00b      	b.n	8005c30 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	b2da      	uxtb	r2, r3
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	1c59      	adds	r1, r3, #1
 8005c20:	61f9      	str	r1, [r7, #28]
 8005c22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c26:	b2d2      	uxtb	r2, r2
 8005c28:	701a      	strb	r2, [r3, #0]
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	09db      	lsrs	r3, r3, #7
 8005c2e:	61bb      	str	r3, [r7, #24]
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	2b7f      	cmp	r3, #127	; 0x7f
 8005c34:	d8f0      	bhi.n	8005c18 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	1c5a      	adds	r2, r3, #1
 8005c3a:	61fa      	str	r2, [r7, #28]
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	b2d2      	uxtb	r2, r2
 8005c40:	701a      	strb	r2, [r3, #0]
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005c46:	2215      	movs	r2, #21
 8005c48:	68f9      	ldr	r1, [r7, #12]
 8005c4a:	6938      	ldr	r0, [r7, #16]
 8005c4c:	f7ff fb0c 	bl	8005268 <_SendPacket>
  RECORD_END();
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	f383 8811 	msr	BASEPRI, r3
}
 8005c56:	bf00      	nop
 8005c58:	3748      	adds	r7, #72	; 0x48
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	20002e7c 	.word	0x20002e7c
 8005c64:	20002e4c 	.word	0x20002e4c

08005c68 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005c6c:	4b07      	ldr	r3, [pc, #28]	; (8005c8c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005c6e:	6a1b      	ldr	r3, [r3, #32]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d008      	beq.n	8005c86 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005c74:	4b05      	ldr	r3, [pc, #20]	; (8005c8c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d003      	beq.n	8005c86 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005c7e:	4b03      	ldr	r3, [pc, #12]	; (8005c8c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	4798      	blx	r3
  }
}
 8005c86:	bf00      	nop
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	20002e4c 	.word	0x20002e4c

08005c90 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005c90:	b590      	push	{r4, r7, lr}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005c96:	4b15      	ldr	r3, [pc, #84]	; (8005cec <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d01a      	beq.n	8005cd4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005c9e:	4b13      	ldr	r3, [pc, #76]	; (8005cec <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d015      	beq.n	8005cd4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005ca8:	4b10      	ldr	r3, [pc, #64]	; (8005cec <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005caa:	6a1b      	ldr	r3, [r3, #32]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4798      	blx	r3
 8005cb0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005cb4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005cb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cba:	f04f 0200 	mov.w	r2, #0
 8005cbe:	f04f 0300 	mov.w	r3, #0
 8005cc2:	000a      	movs	r2, r1
 8005cc4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	461a      	mov	r2, r3
 8005cca:	4621      	mov	r1, r4
 8005ccc:	200d      	movs	r0, #13
 8005cce:	f7ff fc0b 	bl	80054e8 <SEGGER_SYSVIEW_RecordU32x2>
 8005cd2:	e006      	b.n	8005ce2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005cd4:	4b06      	ldr	r3, [pc, #24]	; (8005cf0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4619      	mov	r1, r3
 8005cda:	200c      	movs	r0, #12
 8005cdc:	f7ff fbc8 	bl	8005470 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005ce0:	bf00      	nop
 8005ce2:	bf00      	nop
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd90      	pop	{r4, r7, pc}
 8005cea:	bf00      	nop
 8005cec:	20002e4c 	.word	0x20002e4c
 8005cf0:	e0001004 	.word	0xe0001004

08005cf4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005cfa:	f3ef 8311 	mrs	r3, BASEPRI
 8005cfe:	f04f 0120 	mov.w	r1, #32
 8005d02:	f381 8811 	msr	BASEPRI, r1
 8005d06:	60fb      	str	r3, [r7, #12]
 8005d08:	4819      	ldr	r0, [pc, #100]	; (8005d70 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005d0a:	f7ff f9bd 	bl	8005088 <_PreparePacket>
 8005d0e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005d14:	4b17      	ldr	r3, [pc, #92]	; (8005d74 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d1c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	617b      	str	r3, [r7, #20]
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	613b      	str	r3, [r7, #16]
 8005d26:	e00b      	b.n	8005d40 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	1c59      	adds	r1, r3, #1
 8005d30:	6179      	str	r1, [r7, #20]
 8005d32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d36:	b2d2      	uxtb	r2, r2
 8005d38:	701a      	strb	r2, [r3, #0]
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	09db      	lsrs	r3, r3, #7
 8005d3e:	613b      	str	r3, [r7, #16]
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	2b7f      	cmp	r3, #127	; 0x7f
 8005d44:	d8f0      	bhi.n	8005d28 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	1c5a      	adds	r2, r3, #1
 8005d4a:	617a      	str	r2, [r7, #20]
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	b2d2      	uxtb	r2, r2
 8005d50:	701a      	strb	r2, [r3, #0]
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005d56:	2202      	movs	r2, #2
 8005d58:	6879      	ldr	r1, [r7, #4]
 8005d5a:	68b8      	ldr	r0, [r7, #8]
 8005d5c:	f7ff fa84 	bl	8005268 <_SendPacket>
  RECORD_END();
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f383 8811 	msr	BASEPRI, r3
}
 8005d66:	bf00      	nop
 8005d68:	3718      	adds	r7, #24
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	20002e7c 	.word	0x20002e7c
 8005d74:	e000ed04 	.word	0xe000ed04

08005d78 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005d7e:	f3ef 8311 	mrs	r3, BASEPRI
 8005d82:	f04f 0120 	mov.w	r1, #32
 8005d86:	f381 8811 	msr	BASEPRI, r1
 8005d8a:	607b      	str	r3, [r7, #4]
 8005d8c:	4807      	ldr	r0, [pc, #28]	; (8005dac <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005d8e:	f7ff f97b 	bl	8005088 <_PreparePacket>
 8005d92:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005d94:	2203      	movs	r2, #3
 8005d96:	6839      	ldr	r1, [r7, #0]
 8005d98:	6838      	ldr	r0, [r7, #0]
 8005d9a:	f7ff fa65 	bl	8005268 <_SendPacket>
  RECORD_END();
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f383 8811 	msr	BASEPRI, r3
}
 8005da4:	bf00      	nop
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	20002e7c 	.word	0x20002e7c

08005db0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005db6:	f3ef 8311 	mrs	r3, BASEPRI
 8005dba:	f04f 0120 	mov.w	r1, #32
 8005dbe:	f381 8811 	msr	BASEPRI, r1
 8005dc2:	607b      	str	r3, [r7, #4]
 8005dc4:	4807      	ldr	r0, [pc, #28]	; (8005de4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005dc6:	f7ff f95f 	bl	8005088 <_PreparePacket>
 8005dca:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005dcc:	2212      	movs	r2, #18
 8005dce:	6839      	ldr	r1, [r7, #0]
 8005dd0:	6838      	ldr	r0, [r7, #0]
 8005dd2:	f7ff fa49 	bl	8005268 <_SendPacket>
  RECORD_END();
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f383 8811 	msr	BASEPRI, r3
}
 8005ddc:	bf00      	nop
 8005dde:	3708      	adds	r7, #8
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	20002e7c 	.word	0x20002e7c

08005de8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005dee:	f3ef 8311 	mrs	r3, BASEPRI
 8005df2:	f04f 0120 	mov.w	r1, #32
 8005df6:	f381 8811 	msr	BASEPRI, r1
 8005dfa:	607b      	str	r3, [r7, #4]
 8005dfc:	4807      	ldr	r0, [pc, #28]	; (8005e1c <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005dfe:	f7ff f943 	bl	8005088 <_PreparePacket>
 8005e02:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005e04:	2211      	movs	r2, #17
 8005e06:	6839      	ldr	r1, [r7, #0]
 8005e08:	6838      	ldr	r0, [r7, #0]
 8005e0a:	f7ff fa2d 	bl	8005268 <_SendPacket>
  RECORD_END();
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f383 8811 	msr	BASEPRI, r3
}
 8005e14:	bf00      	nop
 8005e16:	3708      	adds	r7, #8
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	20002e7c 	.word	0x20002e7c

08005e20 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b088      	sub	sp, #32
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005e28:	f3ef 8311 	mrs	r3, BASEPRI
 8005e2c:	f04f 0120 	mov.w	r1, #32
 8005e30:	f381 8811 	msr	BASEPRI, r1
 8005e34:	617b      	str	r3, [r7, #20]
 8005e36:	4819      	ldr	r0, [pc, #100]	; (8005e9c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005e38:	f7ff f926 	bl	8005088 <_PreparePacket>
 8005e3c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005e42:	4b17      	ldr	r3, [pc, #92]	; (8005ea0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	61fb      	str	r3, [r7, #28]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	61bb      	str	r3, [r7, #24]
 8005e54:	e00b      	b.n	8005e6e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	1c59      	adds	r1, r3, #1
 8005e5e:	61f9      	str	r1, [r7, #28]
 8005e60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e64:	b2d2      	uxtb	r2, r2
 8005e66:	701a      	strb	r2, [r3, #0]
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	09db      	lsrs	r3, r3, #7
 8005e6c:	61bb      	str	r3, [r7, #24]
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	2b7f      	cmp	r3, #127	; 0x7f
 8005e72:	d8f0      	bhi.n	8005e56 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	1c5a      	adds	r2, r3, #1
 8005e78:	61fa      	str	r2, [r7, #28]
 8005e7a:	69ba      	ldr	r2, [r7, #24]
 8005e7c:	b2d2      	uxtb	r2, r2
 8005e7e:	701a      	strb	r2, [r3, #0]
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005e84:	2208      	movs	r2, #8
 8005e86:	68f9      	ldr	r1, [r7, #12]
 8005e88:	6938      	ldr	r0, [r7, #16]
 8005e8a:	f7ff f9ed 	bl	8005268 <_SendPacket>
  RECORD_END();
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	f383 8811 	msr	BASEPRI, r3
}
 8005e94:	bf00      	nop
 8005e96:	3720      	adds	r7, #32
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	20002e7c 	.word	0x20002e7c
 8005ea0:	20002e4c 	.word	0x20002e4c

08005ea4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b088      	sub	sp, #32
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005eac:	f3ef 8311 	mrs	r3, BASEPRI
 8005eb0:	f04f 0120 	mov.w	r1, #32
 8005eb4:	f381 8811 	msr	BASEPRI, r1
 8005eb8:	617b      	str	r3, [r7, #20]
 8005eba:	4819      	ldr	r0, [pc, #100]	; (8005f20 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005ebc:	f7ff f8e4 	bl	8005088 <_PreparePacket>
 8005ec0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005ec6:	4b17      	ldr	r3, [pc, #92]	; (8005f24 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	61fb      	str	r3, [r7, #28]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	61bb      	str	r3, [r7, #24]
 8005ed8:	e00b      	b.n	8005ef2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	1c59      	adds	r1, r3, #1
 8005ee2:	61f9      	str	r1, [r7, #28]
 8005ee4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ee8:	b2d2      	uxtb	r2, r2
 8005eea:	701a      	strb	r2, [r3, #0]
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	09db      	lsrs	r3, r3, #7
 8005ef0:	61bb      	str	r3, [r7, #24]
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	2b7f      	cmp	r3, #127	; 0x7f
 8005ef6:	d8f0      	bhi.n	8005eda <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	1c5a      	adds	r2, r3, #1
 8005efc:	61fa      	str	r2, [r7, #28]
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	b2d2      	uxtb	r2, r2
 8005f02:	701a      	strb	r2, [r3, #0]
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005f08:	2204      	movs	r2, #4
 8005f0a:	68f9      	ldr	r1, [r7, #12]
 8005f0c:	6938      	ldr	r0, [r7, #16]
 8005f0e:	f7ff f9ab 	bl	8005268 <_SendPacket>
  RECORD_END();
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	f383 8811 	msr	BASEPRI, r3
}
 8005f18:	bf00      	nop
 8005f1a:	3720      	adds	r7, #32
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	20002e7c 	.word	0x20002e7c
 8005f24:	20002e4c 	.word	0x20002e4c

08005f28 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b088      	sub	sp, #32
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005f30:	f3ef 8311 	mrs	r3, BASEPRI
 8005f34:	f04f 0120 	mov.w	r1, #32
 8005f38:	f381 8811 	msr	BASEPRI, r1
 8005f3c:	617b      	str	r3, [r7, #20]
 8005f3e:	4819      	ldr	r0, [pc, #100]	; (8005fa4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005f40:	f7ff f8a2 	bl	8005088 <_PreparePacket>
 8005f44:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005f4a:	4b17      	ldr	r3, [pc, #92]	; (8005fa8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	61fb      	str	r3, [r7, #28]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	61bb      	str	r3, [r7, #24]
 8005f5c:	e00b      	b.n	8005f76 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	1c59      	adds	r1, r3, #1
 8005f66:	61f9      	str	r1, [r7, #28]
 8005f68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f6c:	b2d2      	uxtb	r2, r2
 8005f6e:	701a      	strb	r2, [r3, #0]
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	09db      	lsrs	r3, r3, #7
 8005f74:	61bb      	str	r3, [r7, #24]
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	2b7f      	cmp	r3, #127	; 0x7f
 8005f7a:	d8f0      	bhi.n	8005f5e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	1c5a      	adds	r2, r3, #1
 8005f80:	61fa      	str	r2, [r7, #28]
 8005f82:	69ba      	ldr	r2, [r7, #24]
 8005f84:	b2d2      	uxtb	r2, r2
 8005f86:	701a      	strb	r2, [r3, #0]
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005f8c:	2206      	movs	r2, #6
 8005f8e:	68f9      	ldr	r1, [r7, #12]
 8005f90:	6938      	ldr	r0, [r7, #16]
 8005f92:	f7ff f969 	bl	8005268 <_SendPacket>
  RECORD_END();
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f383 8811 	msr	BASEPRI, r3
}
 8005f9c:	bf00      	nop
 8005f9e:	3720      	adds	r7, #32
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	20002e7c 	.word	0x20002e7c
 8005fa8:	20002e4c 	.word	0x20002e4c

08005fac <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b08a      	sub	sp, #40	; 0x28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005fb6:	f3ef 8311 	mrs	r3, BASEPRI
 8005fba:	f04f 0120 	mov.w	r1, #32
 8005fbe:	f381 8811 	msr	BASEPRI, r1
 8005fc2:	617b      	str	r3, [r7, #20]
 8005fc4:	4827      	ldr	r0, [pc, #156]	; (8006064 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8005fc6:	f7ff f85f 	bl	8005088 <_PreparePacket>
 8005fca:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005fd0:	4b25      	ldr	r3, [pc, #148]	; (8006068 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	623b      	str	r3, [r7, #32]
 8005fe2:	e00b      	b.n	8005ffc <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8005fe4:	6a3b      	ldr	r3, [r7, #32]
 8005fe6:	b2da      	uxtb	r2, r3
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fea:	1c59      	adds	r1, r3, #1
 8005fec:	6279      	str	r1, [r7, #36]	; 0x24
 8005fee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ff2:	b2d2      	uxtb	r2, r2
 8005ff4:	701a      	strb	r2, [r3, #0]
 8005ff6:	6a3b      	ldr	r3, [r7, #32]
 8005ff8:	09db      	lsrs	r3, r3, #7
 8005ffa:	623b      	str	r3, [r7, #32]
 8005ffc:	6a3b      	ldr	r3, [r7, #32]
 8005ffe:	2b7f      	cmp	r3, #127	; 0x7f
 8006000:	d8f0      	bhi.n	8005fe4 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006004:	1c5a      	adds	r2, r3, #1
 8006006:	627a      	str	r2, [r7, #36]	; 0x24
 8006008:	6a3a      	ldr	r2, [r7, #32]
 800600a:	b2d2      	uxtb	r2, r2
 800600c:	701a      	strb	r2, [r3, #0]
 800600e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006010:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	61fb      	str	r3, [r7, #28]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	61bb      	str	r3, [r7, #24]
 800601a:	e00b      	b.n	8006034 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	b2da      	uxtb	r2, r3
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	1c59      	adds	r1, r3, #1
 8006024:	61f9      	str	r1, [r7, #28]
 8006026:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800602a:	b2d2      	uxtb	r2, r2
 800602c:	701a      	strb	r2, [r3, #0]
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	09db      	lsrs	r3, r3, #7
 8006032:	61bb      	str	r3, [r7, #24]
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	2b7f      	cmp	r3, #127	; 0x7f
 8006038:	d8f0      	bhi.n	800601c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	1c5a      	adds	r2, r3, #1
 800603e:	61fa      	str	r2, [r7, #28]
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	b2d2      	uxtb	r2, r2
 8006044:	701a      	strb	r2, [r3, #0]
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800604a:	2207      	movs	r2, #7
 800604c:	68f9      	ldr	r1, [r7, #12]
 800604e:	6938      	ldr	r0, [r7, #16]
 8006050:	f7ff f90a 	bl	8005268 <_SendPacket>
  RECORD_END();
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	f383 8811 	msr	BASEPRI, r3
}
 800605a:	bf00      	nop
 800605c:	3728      	adds	r7, #40	; 0x28
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	20002e7c 	.word	0x20002e7c
 8006068:	20002e4c 	.word	0x20002e4c

0800606c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006074:	4b04      	ldr	r3, [pc, #16]	; (8006088 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	1ad3      	subs	r3, r2, r3
}
 800607c:	4618      	mov	r0, r3
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr
 8006088:	20002e4c 	.word	0x20002e4c

0800608c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800608c:	b580      	push	{r7, lr}
 800608e:	b08c      	sub	sp, #48	; 0x30
 8006090:	af00      	add	r7, sp, #0
 8006092:	4603      	mov	r3, r0
 8006094:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006096:	4b3b      	ldr	r3, [pc, #236]	; (8006184 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d06d      	beq.n	800617a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800609e:	4b39      	ldr	r3, [pc, #228]	; (8006184 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80060a4:	2300      	movs	r3, #0
 80060a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80060a8:	e008      	b.n	80060bc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80060aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80060b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d007      	beq.n	80060c6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80060b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b8:	3301      	adds	r3, #1
 80060ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80060bc:	79fb      	ldrb	r3, [r7, #7]
 80060be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d3f2      	bcc.n	80060aa <SEGGER_SYSVIEW_SendModule+0x1e>
 80060c4:	e000      	b.n	80060c8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80060c6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80060c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d055      	beq.n	800617a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80060ce:	f3ef 8311 	mrs	r3, BASEPRI
 80060d2:	f04f 0120 	mov.w	r1, #32
 80060d6:	f381 8811 	msr	BASEPRI, r1
 80060da:	617b      	str	r3, [r7, #20]
 80060dc:	482a      	ldr	r0, [pc, #168]	; (8006188 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80060de:	f7fe ffd3 	bl	8005088 <_PreparePacket>
 80060e2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	627b      	str	r3, [r7, #36]	; 0x24
 80060ec:	79fb      	ldrb	r3, [r7, #7]
 80060ee:	623b      	str	r3, [r7, #32]
 80060f0:	e00b      	b.n	800610a <SEGGER_SYSVIEW_SendModule+0x7e>
 80060f2:	6a3b      	ldr	r3, [r7, #32]
 80060f4:	b2da      	uxtb	r2, r3
 80060f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f8:	1c59      	adds	r1, r3, #1
 80060fa:	6279      	str	r1, [r7, #36]	; 0x24
 80060fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006100:	b2d2      	uxtb	r2, r2
 8006102:	701a      	strb	r2, [r3, #0]
 8006104:	6a3b      	ldr	r3, [r7, #32]
 8006106:	09db      	lsrs	r3, r3, #7
 8006108:	623b      	str	r3, [r7, #32]
 800610a:	6a3b      	ldr	r3, [r7, #32]
 800610c:	2b7f      	cmp	r3, #127	; 0x7f
 800610e:	d8f0      	bhi.n	80060f2 <SEGGER_SYSVIEW_SendModule+0x66>
 8006110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006112:	1c5a      	adds	r2, r3, #1
 8006114:	627a      	str	r2, [r7, #36]	; 0x24
 8006116:	6a3a      	ldr	r2, [r7, #32]
 8006118:	b2d2      	uxtb	r2, r2
 800611a:	701a      	strb	r2, [r3, #0]
 800611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	61fb      	str	r3, [r7, #28]
 8006124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	61bb      	str	r3, [r7, #24]
 800612a:	e00b      	b.n	8006144 <SEGGER_SYSVIEW_SendModule+0xb8>
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	b2da      	uxtb	r2, r3
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	1c59      	adds	r1, r3, #1
 8006134:	61f9      	str	r1, [r7, #28]
 8006136:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800613a:	b2d2      	uxtb	r2, r2
 800613c:	701a      	strb	r2, [r3, #0]
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	09db      	lsrs	r3, r3, #7
 8006142:	61bb      	str	r3, [r7, #24]
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	2b7f      	cmp	r3, #127	; 0x7f
 8006148:	d8f0      	bhi.n	800612c <SEGGER_SYSVIEW_SendModule+0xa0>
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	1c5a      	adds	r2, r3, #1
 800614e:	61fa      	str	r2, [r7, #28]
 8006150:	69ba      	ldr	r2, [r7, #24]
 8006152:	b2d2      	uxtb	r2, r2
 8006154:	701a      	strb	r2, [r3, #0]
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800615a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2280      	movs	r2, #128	; 0x80
 8006160:	4619      	mov	r1, r3
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f7fe ff40 	bl	8004fe8 <_EncodeStr>
 8006168:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800616a:	2216      	movs	r2, #22
 800616c:	68f9      	ldr	r1, [r7, #12]
 800616e:	6938      	ldr	r0, [r7, #16]
 8006170:	f7ff f87a 	bl	8005268 <_SendPacket>
      RECORD_END();
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800617a:	bf00      	nop
 800617c:	3730      	adds	r7, #48	; 0x30
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	20002e74 	.word	0x20002e74
 8006188:	20002e7c 	.word	0x20002e7c

0800618c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006192:	4b0c      	ldr	r3, [pc, #48]	; (80061c4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00f      	beq.n	80061ba <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800619a:	4b0a      	ldr	r3, [pc, #40]	; (80061c4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d002      	beq.n	80061ae <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1f2      	bne.n	80061a0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80061ba:	bf00      	nop
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	20002e74 	.word	0x20002e74

080061c8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b086      	sub	sp, #24
 80061cc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80061ce:	f3ef 8311 	mrs	r3, BASEPRI
 80061d2:	f04f 0120 	mov.w	r1, #32
 80061d6:	f381 8811 	msr	BASEPRI, r1
 80061da:	60fb      	str	r3, [r7, #12]
 80061dc:	4817      	ldr	r0, [pc, #92]	; (800623c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80061de:	f7fe ff53 	bl	8005088 <_PreparePacket>
 80061e2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	617b      	str	r3, [r7, #20]
 80061ec:	4b14      	ldr	r3, [pc, #80]	; (8006240 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	613b      	str	r3, [r7, #16]
 80061f2:	e00b      	b.n	800620c <SEGGER_SYSVIEW_SendNumModules+0x44>
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	b2da      	uxtb	r2, r3
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	1c59      	adds	r1, r3, #1
 80061fc:	6179      	str	r1, [r7, #20]
 80061fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006202:	b2d2      	uxtb	r2, r2
 8006204:	701a      	strb	r2, [r3, #0]
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	09db      	lsrs	r3, r3, #7
 800620a:	613b      	str	r3, [r7, #16]
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	2b7f      	cmp	r3, #127	; 0x7f
 8006210:	d8f0      	bhi.n	80061f4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	1c5a      	adds	r2, r3, #1
 8006216:	617a      	str	r2, [r7, #20]
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	b2d2      	uxtb	r2, r2
 800621c:	701a      	strb	r2, [r3, #0]
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006222:	221b      	movs	r2, #27
 8006224:	6879      	ldr	r1, [r7, #4]
 8006226:	68b8      	ldr	r0, [r7, #8]
 8006228:	f7ff f81e 	bl	8005268 <_SendPacket>
  RECORD_END();
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f383 8811 	msr	BASEPRI, r3
}
 8006232:	bf00      	nop
 8006234:	3718      	adds	r7, #24
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	20002e7c 	.word	0x20002e7c
 8006240:	20002e78 	.word	0x20002e78

08006244 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006244:	b580      	push	{r7, lr}
 8006246:	b08a      	sub	sp, #40	; 0x28
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800624c:	f3ef 8311 	mrs	r3, BASEPRI
 8006250:	f04f 0120 	mov.w	r1, #32
 8006254:	f381 8811 	msr	BASEPRI, r1
 8006258:	617b      	str	r3, [r7, #20]
 800625a:	4827      	ldr	r0, [pc, #156]	; (80062f8 <SEGGER_SYSVIEW_Warn+0xb4>)
 800625c:	f7fe ff14 	bl	8005088 <_PreparePacket>
 8006260:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006262:	2280      	movs	r2, #128	; 0x80
 8006264:	6879      	ldr	r1, [r7, #4]
 8006266:	6938      	ldr	r0, [r7, #16]
 8006268:	f7fe febe 	bl	8004fe8 <_EncodeStr>
 800626c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	627b      	str	r3, [r7, #36]	; 0x24
 8006272:	2301      	movs	r3, #1
 8006274:	623b      	str	r3, [r7, #32]
 8006276:	e00b      	b.n	8006290 <SEGGER_SYSVIEW_Warn+0x4c>
 8006278:	6a3b      	ldr	r3, [r7, #32]
 800627a:	b2da      	uxtb	r2, r3
 800627c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627e:	1c59      	adds	r1, r3, #1
 8006280:	6279      	str	r1, [r7, #36]	; 0x24
 8006282:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006286:	b2d2      	uxtb	r2, r2
 8006288:	701a      	strb	r2, [r3, #0]
 800628a:	6a3b      	ldr	r3, [r7, #32]
 800628c:	09db      	lsrs	r3, r3, #7
 800628e:	623b      	str	r3, [r7, #32]
 8006290:	6a3b      	ldr	r3, [r7, #32]
 8006292:	2b7f      	cmp	r3, #127	; 0x7f
 8006294:	d8f0      	bhi.n	8006278 <SEGGER_SYSVIEW_Warn+0x34>
 8006296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006298:	1c5a      	adds	r2, r3, #1
 800629a:	627a      	str	r2, [r7, #36]	; 0x24
 800629c:	6a3a      	ldr	r2, [r7, #32]
 800629e:	b2d2      	uxtb	r2, r2
 80062a0:	701a      	strb	r2, [r3, #0]
 80062a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	61fb      	str	r3, [r7, #28]
 80062aa:	2300      	movs	r3, #0
 80062ac:	61bb      	str	r3, [r7, #24]
 80062ae:	e00b      	b.n	80062c8 <SEGGER_SYSVIEW_Warn+0x84>
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	b2da      	uxtb	r2, r3
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	1c59      	adds	r1, r3, #1
 80062b8:	61f9      	str	r1, [r7, #28]
 80062ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062be:	b2d2      	uxtb	r2, r2
 80062c0:	701a      	strb	r2, [r3, #0]
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	09db      	lsrs	r3, r3, #7
 80062c6:	61bb      	str	r3, [r7, #24]
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	2b7f      	cmp	r3, #127	; 0x7f
 80062cc:	d8f0      	bhi.n	80062b0 <SEGGER_SYSVIEW_Warn+0x6c>
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	1c5a      	adds	r2, r3, #1
 80062d2:	61fa      	str	r2, [r7, #28]
 80062d4:	69ba      	ldr	r2, [r7, #24]
 80062d6:	b2d2      	uxtb	r2, r2
 80062d8:	701a      	strb	r2, [r3, #0]
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80062de:	221a      	movs	r2, #26
 80062e0:	68f9      	ldr	r1, [r7, #12]
 80062e2:	6938      	ldr	r0, [r7, #16]
 80062e4:	f7fe ffc0 	bl	8005268 <_SendPacket>
  RECORD_END();
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	f383 8811 	msr	BASEPRI, r3
}
 80062ee:	bf00      	nop
 80062f0:	3728      	adds	r7, #40	; 0x28
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	20002e7c 	.word	0x20002e7c

080062fc <__libc_init_array>:
 80062fc:	b570      	push	{r4, r5, r6, lr}
 80062fe:	4d0d      	ldr	r5, [pc, #52]	; (8006334 <__libc_init_array+0x38>)
 8006300:	4c0d      	ldr	r4, [pc, #52]	; (8006338 <__libc_init_array+0x3c>)
 8006302:	1b64      	subs	r4, r4, r5
 8006304:	10a4      	asrs	r4, r4, #2
 8006306:	2600      	movs	r6, #0
 8006308:	42a6      	cmp	r6, r4
 800630a:	d109      	bne.n	8006320 <__libc_init_array+0x24>
 800630c:	4d0b      	ldr	r5, [pc, #44]	; (800633c <__libc_init_array+0x40>)
 800630e:	4c0c      	ldr	r4, [pc, #48]	; (8006340 <__libc_init_array+0x44>)
 8006310:	f000 f83c 	bl	800638c <_init>
 8006314:	1b64      	subs	r4, r4, r5
 8006316:	10a4      	asrs	r4, r4, #2
 8006318:	2600      	movs	r6, #0
 800631a:	42a6      	cmp	r6, r4
 800631c:	d105      	bne.n	800632a <__libc_init_array+0x2e>
 800631e:	bd70      	pop	{r4, r5, r6, pc}
 8006320:	f855 3b04 	ldr.w	r3, [r5], #4
 8006324:	4798      	blx	r3
 8006326:	3601      	adds	r6, #1
 8006328:	e7ee      	b.n	8006308 <__libc_init_array+0xc>
 800632a:	f855 3b04 	ldr.w	r3, [r5], #4
 800632e:	4798      	blx	r3
 8006330:	3601      	adds	r6, #1
 8006332:	e7f2      	b.n	800631a <__libc_init_array+0x1e>
 8006334:	08006470 	.word	0x08006470
 8006338:	08006470 	.word	0x08006470
 800633c:	08006470 	.word	0x08006470
 8006340:	08006474 	.word	0x08006474

08006344 <memcmp>:
 8006344:	b530      	push	{r4, r5, lr}
 8006346:	3901      	subs	r1, #1
 8006348:	2400      	movs	r4, #0
 800634a:	42a2      	cmp	r2, r4
 800634c:	d101      	bne.n	8006352 <memcmp+0xe>
 800634e:	2000      	movs	r0, #0
 8006350:	e005      	b.n	800635e <memcmp+0x1a>
 8006352:	5d03      	ldrb	r3, [r0, r4]
 8006354:	3401      	adds	r4, #1
 8006356:	5d0d      	ldrb	r5, [r1, r4]
 8006358:	42ab      	cmp	r3, r5
 800635a:	d0f6      	beq.n	800634a <memcmp+0x6>
 800635c:	1b58      	subs	r0, r3, r5
 800635e:	bd30      	pop	{r4, r5, pc}

08006360 <memcpy>:
 8006360:	440a      	add	r2, r1
 8006362:	4291      	cmp	r1, r2
 8006364:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006368:	d100      	bne.n	800636c <memcpy+0xc>
 800636a:	4770      	bx	lr
 800636c:	b510      	push	{r4, lr}
 800636e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006372:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006376:	4291      	cmp	r1, r2
 8006378:	d1f9      	bne.n	800636e <memcpy+0xe>
 800637a:	bd10      	pop	{r4, pc}

0800637c <memset>:
 800637c:	4402      	add	r2, r0
 800637e:	4603      	mov	r3, r0
 8006380:	4293      	cmp	r3, r2
 8006382:	d100      	bne.n	8006386 <memset+0xa>
 8006384:	4770      	bx	lr
 8006386:	f803 1b01 	strb.w	r1, [r3], #1
 800638a:	e7f9      	b.n	8006380 <memset+0x4>

0800638c <_init>:
 800638c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800638e:	bf00      	nop
 8006390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006392:	bc08      	pop	{r3}
 8006394:	469e      	mov	lr, r3
 8006396:	4770      	bx	lr

08006398 <_fini>:
 8006398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800639a:	bf00      	nop
 800639c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800639e:	bc08      	pop	{r3}
 80063a0:	469e      	mov	lr, r3
 80063a2:	4770      	bx	lr
