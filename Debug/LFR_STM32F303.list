
LFR_STM32F303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08007f30  08007f30  00017f30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008058  08008058  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08008058  08008058  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008058  08008058  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008058  08008058  00018058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800805c  0800805c  0001805c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003084  2000007c  080080dc  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003100  080080dc  00023100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018e99  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003148  00000000  00000000  00038f45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  0003c090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001168  00000000  00000000  0003d360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000202ff  00000000  00000000  0003e4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000154e9  00000000  00000000  0005e7c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1c6f  00000000  00000000  00073cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013591f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005308  00000000  00000000  00135974  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007f14 	.word	0x08007f14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08007f14 	.word	0x08007f14

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20003058 	.word	0x20003058

08000264 <__aeabi_drsub>:
 8000264:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000268:	e002      	b.n	8000270 <__adddf3>
 800026a:	bf00      	nop

0800026c <__aeabi_dsub>:
 800026c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000270 <__adddf3>:
 8000270:	b530      	push	{r4, r5, lr}
 8000272:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000276:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800027a:	ea94 0f05 	teq	r4, r5
 800027e:	bf08      	it	eq
 8000280:	ea90 0f02 	teqeq	r0, r2
 8000284:	bf1f      	itttt	ne
 8000286:	ea54 0c00 	orrsne.w	ip, r4, r0
 800028a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800028e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000292:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000296:	f000 80e2 	beq.w	800045e <__adddf3+0x1ee>
 800029a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800029e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002a2:	bfb8      	it	lt
 80002a4:	426d      	neglt	r5, r5
 80002a6:	dd0c      	ble.n	80002c2 <__adddf3+0x52>
 80002a8:	442c      	add	r4, r5
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	ea82 0000 	eor.w	r0, r2, r0
 80002b6:	ea83 0101 	eor.w	r1, r3, r1
 80002ba:	ea80 0202 	eor.w	r2, r0, r2
 80002be:	ea81 0303 	eor.w	r3, r1, r3
 80002c2:	2d36      	cmp	r5, #54	; 0x36
 80002c4:	bf88      	it	hi
 80002c6:	bd30      	pophi	{r4, r5, pc}
 80002c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x70>
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x84>
 80002ee:	4252      	negs	r2, r2
 80002f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f4:	ea94 0f05 	teq	r4, r5
 80002f8:	f000 80a7 	beq.w	800044a <__adddf3+0x1da>
 80002fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000300:	f1d5 0e20 	rsbs	lr, r5, #32
 8000304:	db0d      	blt.n	8000322 <__adddf3+0xb2>
 8000306:	fa02 fc0e 	lsl.w	ip, r2, lr
 800030a:	fa22 f205 	lsr.w	r2, r2, r5
 800030e:	1880      	adds	r0, r0, r2
 8000310:	f141 0100 	adc.w	r1, r1, #0
 8000314:	fa03 f20e 	lsl.w	r2, r3, lr
 8000318:	1880      	adds	r0, r0, r2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	4159      	adcs	r1, r3
 8000320:	e00e      	b.n	8000340 <__adddf3+0xd0>
 8000322:	f1a5 0520 	sub.w	r5, r5, #32
 8000326:	f10e 0e20 	add.w	lr, lr, #32
 800032a:	2a01      	cmp	r2, #1
 800032c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000330:	bf28      	it	cs
 8000332:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	18c0      	adds	r0, r0, r3
 800033c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000344:	d507      	bpl.n	8000356 <__adddf3+0xe6>
 8000346:	f04f 0e00 	mov.w	lr, #0
 800034a:	f1dc 0c00 	rsbs	ip, ip, #0
 800034e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000352:	eb6e 0101 	sbc.w	r1, lr, r1
 8000356:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800035a:	d31b      	bcc.n	8000394 <__adddf3+0x124>
 800035c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000360:	d30c      	bcc.n	800037c <__adddf3+0x10c>
 8000362:	0849      	lsrs	r1, r1, #1
 8000364:	ea5f 0030 	movs.w	r0, r0, rrx
 8000368:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800036c:	f104 0401 	add.w	r4, r4, #1
 8000370:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000374:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000378:	f080 809a 	bcs.w	80004b0 <__adddf3+0x240>
 800037c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000380:	bf08      	it	eq
 8000382:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000386:	f150 0000 	adcs.w	r0, r0, #0
 800038a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800038e:	ea41 0105 	orr.w	r1, r1, r5
 8000392:	bd30      	pop	{r4, r5, pc}
 8000394:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000398:	4140      	adcs	r0, r0
 800039a:	eb41 0101 	adc.w	r1, r1, r1
 800039e:	3c01      	subs	r4, #1
 80003a0:	bf28      	it	cs
 80003a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003a6:	d2e9      	bcs.n	800037c <__adddf3+0x10c>
 80003a8:	f091 0f00 	teq	r1, #0
 80003ac:	bf04      	itt	eq
 80003ae:	4601      	moveq	r1, r0
 80003b0:	2000      	moveq	r0, #0
 80003b2:	fab1 f381 	clz	r3, r1
 80003b6:	bf08      	it	eq
 80003b8:	3320      	addeq	r3, #32
 80003ba:	f1a3 030b 	sub.w	r3, r3, #11
 80003be:	f1b3 0220 	subs.w	r2, r3, #32
 80003c2:	da0c      	bge.n	80003de <__adddf3+0x16e>
 80003c4:	320c      	adds	r2, #12
 80003c6:	dd08      	ble.n	80003da <__adddf3+0x16a>
 80003c8:	f102 0c14 	add.w	ip, r2, #20
 80003cc:	f1c2 020c 	rsb	r2, r2, #12
 80003d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003d4:	fa21 f102 	lsr.w	r1, r1, r2
 80003d8:	e00c      	b.n	80003f4 <__adddf3+0x184>
 80003da:	f102 0214 	add.w	r2, r2, #20
 80003de:	bfd8      	it	le
 80003e0:	f1c2 0c20 	rsble	ip, r2, #32
 80003e4:	fa01 f102 	lsl.w	r1, r1, r2
 80003e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ec:	bfdc      	itt	le
 80003ee:	ea41 010c 	orrle.w	r1, r1, ip
 80003f2:	4090      	lslle	r0, r2
 80003f4:	1ae4      	subs	r4, r4, r3
 80003f6:	bfa2      	ittt	ge
 80003f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003fc:	4329      	orrge	r1, r5
 80003fe:	bd30      	popge	{r4, r5, pc}
 8000400:	ea6f 0404 	mvn.w	r4, r4
 8000404:	3c1f      	subs	r4, #31
 8000406:	da1c      	bge.n	8000442 <__adddf3+0x1d2>
 8000408:	340c      	adds	r4, #12
 800040a:	dc0e      	bgt.n	800042a <__adddf3+0x1ba>
 800040c:	f104 0414 	add.w	r4, r4, #20
 8000410:	f1c4 0220 	rsb	r2, r4, #32
 8000414:	fa20 f004 	lsr.w	r0, r0, r4
 8000418:	fa01 f302 	lsl.w	r3, r1, r2
 800041c:	ea40 0003 	orr.w	r0, r0, r3
 8000420:	fa21 f304 	lsr.w	r3, r1, r4
 8000424:	ea45 0103 	orr.w	r1, r5, r3
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f1c4 040c 	rsb	r4, r4, #12
 800042e:	f1c4 0220 	rsb	r2, r4, #32
 8000432:	fa20 f002 	lsr.w	r0, r0, r2
 8000436:	fa01 f304 	lsl.w	r3, r1, r4
 800043a:	ea40 0003 	orr.w	r0, r0, r3
 800043e:	4629      	mov	r1, r5
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	fa21 f004 	lsr.w	r0, r1, r4
 8000446:	4629      	mov	r1, r5
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	f094 0f00 	teq	r4, #0
 800044e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000452:	bf06      	itte	eq
 8000454:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000458:	3401      	addeq	r4, #1
 800045a:	3d01      	subne	r5, #1
 800045c:	e74e      	b.n	80002fc <__adddf3+0x8c>
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf18      	it	ne
 8000464:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000468:	d029      	beq.n	80004be <__adddf3+0x24e>
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	d005      	beq.n	8000482 <__adddf3+0x212>
 8000476:	ea54 0c00 	orrs.w	ip, r4, r0
 800047a:	bf04      	itt	eq
 800047c:	4619      	moveq	r1, r3
 800047e:	4610      	moveq	r0, r2
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea91 0f03 	teq	r1, r3
 8000486:	bf1e      	ittt	ne
 8000488:	2100      	movne	r1, #0
 800048a:	2000      	movne	r0, #0
 800048c:	bd30      	popne	{r4, r5, pc}
 800048e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000492:	d105      	bne.n	80004a0 <__adddf3+0x230>
 8000494:	0040      	lsls	r0, r0, #1
 8000496:	4149      	adcs	r1, r1
 8000498:	bf28      	it	cs
 800049a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004a4:	bf3c      	itt	cc
 80004a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004aa:	bd30      	popcc	{r4, r5, pc}
 80004ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b8:	f04f 0000 	mov.w	r0, #0
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf1a      	itte	ne
 80004c4:	4619      	movne	r1, r3
 80004c6:	4610      	movne	r0, r2
 80004c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004cc:	bf1c      	itt	ne
 80004ce:	460b      	movne	r3, r1
 80004d0:	4602      	movne	r2, r0
 80004d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004d6:	bf06      	itte	eq
 80004d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004dc:	ea91 0f03 	teqeq	r1, r3
 80004e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	bf00      	nop

080004e8 <__aeabi_ui2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fc:	f04f 0500 	mov.w	r5, #0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e750      	b.n	80003a8 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_i2d>:
 8000508:	f090 0f00 	teq	r0, #0
 800050c:	bf04      	itt	eq
 800050e:	2100      	moveq	r1, #0
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000518:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000520:	bf48      	it	mi
 8000522:	4240      	negmi	r0, r0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e73e      	b.n	80003a8 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_f2d>:
 800052c:	0042      	lsls	r2, r0, #1
 800052e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000532:	ea4f 0131 	mov.w	r1, r1, rrx
 8000536:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800053a:	bf1f      	itttt	ne
 800053c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000540:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000544:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000548:	4770      	bxne	lr
 800054a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800054e:	bf08      	it	eq
 8000550:	4770      	bxeq	lr
 8000552:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000556:	bf04      	itt	eq
 8000558:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000564:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000568:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800056c:	e71c      	b.n	80003a8 <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_ul2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f04f 0500 	mov.w	r5, #0
 800057e:	e00a      	b.n	8000596 <__aeabi_l2d+0x16>

08000580 <__aeabi_l2d>:
 8000580:	ea50 0201 	orrs.w	r2, r0, r1
 8000584:	bf08      	it	eq
 8000586:	4770      	bxeq	lr
 8000588:	b530      	push	{r4, r5, lr}
 800058a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800058e:	d502      	bpl.n	8000596 <__aeabi_l2d+0x16>
 8000590:	4240      	negs	r0, r0
 8000592:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000596:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a2:	f43f aed8 	beq.w	8000356 <__adddf3+0xe6>
 80005a6:	f04f 0203 	mov.w	r2, #3
 80005aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ae:	bf18      	it	ne
 80005b0:	3203      	addne	r2, #3
 80005b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b6:	bf18      	it	ne
 80005b8:	3203      	addne	r2, #3
 80005ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005be:	f1c2 0320 	rsb	r3, r2, #32
 80005c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005c6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ce:	ea40 000e 	orr.w	r0, r0, lr
 80005d2:	fa21 f102 	lsr.w	r1, r1, r2
 80005d6:	4414      	add	r4, r2
 80005d8:	e6bd      	b.n	8000356 <__adddf3+0xe6>
 80005da:	bf00      	nop

080005dc <__aeabi_dmul>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ea:	bf1d      	ittte	ne
 80005ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f0:	ea94 0f0c 	teqne	r4, ip
 80005f4:	ea95 0f0c 	teqne	r5, ip
 80005f8:	f000 f8de 	bleq	80007b8 <__aeabi_dmul+0x1dc>
 80005fc:	442c      	add	r4, r5
 80005fe:	ea81 0603 	eor.w	r6, r1, r3
 8000602:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000606:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800060e:	bf18      	it	ne
 8000610:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800061c:	d038      	beq.n	8000690 <__aeabi_dmul+0xb4>
 800061e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000622:	f04f 0500 	mov.w	r5, #0
 8000626:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800062e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000632:	f04f 0600 	mov.w	r6, #0
 8000636:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063a:	f09c 0f00 	teq	ip, #0
 800063e:	bf18      	it	ne
 8000640:	f04e 0e01 	orrne.w	lr, lr, #1
 8000644:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000648:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800064c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000650:	d204      	bcs.n	800065c <__aeabi_dmul+0x80>
 8000652:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000656:	416d      	adcs	r5, r5
 8000658:	eb46 0606 	adc.w	r6, r6, r6
 800065c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000660:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000664:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000668:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800066c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000670:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000674:	bf88      	it	hi
 8000676:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067a:	d81e      	bhi.n	80006ba <__aeabi_dmul+0xde>
 800067c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000680:	bf08      	it	eq
 8000682:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000686:	f150 0000 	adcs.w	r0, r0, #0
 800068a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000694:	ea46 0101 	orr.w	r1, r6, r1
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	ea81 0103 	eor.w	r1, r1, r3
 80006a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a4:	bfc2      	ittt	gt
 80006a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ae:	bd70      	popgt	{r4, r5, r6, pc}
 80006b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b4:	f04f 0e00 	mov.w	lr, #0
 80006b8:	3c01      	subs	r4, #1
 80006ba:	f300 80ab 	bgt.w	8000814 <__aeabi_dmul+0x238>
 80006be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c2:	bfde      	ittt	le
 80006c4:	2000      	movle	r0, #0
 80006c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ca:	bd70      	pople	{r4, r5, r6, pc}
 80006cc:	f1c4 0400 	rsb	r4, r4, #0
 80006d0:	3c20      	subs	r4, #32
 80006d2:	da35      	bge.n	8000740 <__aeabi_dmul+0x164>
 80006d4:	340c      	adds	r4, #12
 80006d6:	dc1b      	bgt.n	8000710 <__aeabi_dmul+0x134>
 80006d8:	f104 0414 	add.w	r4, r4, #20
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f305 	lsl.w	r3, r0, r5
 80006e4:	fa20 f004 	lsr.w	r0, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000700:	eb42 0106 	adc.w	r1, r2, r6
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f1c4 040c 	rsb	r4, r4, #12
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f304 	lsl.w	r3, r0, r4
 800071c:	fa20 f005 	lsr.w	r0, r0, r5
 8000720:	fa01 f204 	lsl.w	r2, r1, r4
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	f141 0100 	adc.w	r1, r1, #0
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f205 	lsl.w	r2, r0, r5
 8000748:	ea4e 0e02 	orr.w	lr, lr, r2
 800074c:	fa20 f304 	lsr.w	r3, r0, r4
 8000750:	fa01 f205 	lsl.w	r2, r1, r5
 8000754:	ea43 0302 	orr.w	r3, r3, r2
 8000758:	fa21 f004 	lsr.w	r0, r1, r4
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	fa21 f204 	lsr.w	r2, r1, r4
 8000764:	ea20 0002 	bic.w	r0, r0, r2
 8000768:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f094 0f00 	teq	r4, #0
 800077c:	d10f      	bne.n	800079e <__aeabi_dmul+0x1c2>
 800077e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000782:	0040      	lsls	r0, r0, #1
 8000784:	eb41 0101 	adc.w	r1, r1, r1
 8000788:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800078c:	bf08      	it	eq
 800078e:	3c01      	subeq	r4, #1
 8000790:	d0f7      	beq.n	8000782 <__aeabi_dmul+0x1a6>
 8000792:	ea41 0106 	orr.w	r1, r1, r6
 8000796:	f095 0f00 	teq	r5, #0
 800079a:	bf18      	it	ne
 800079c:	4770      	bxne	lr
 800079e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a2:	0052      	lsls	r2, r2, #1
 80007a4:	eb43 0303 	adc.w	r3, r3, r3
 80007a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007ac:	bf08      	it	eq
 80007ae:	3d01      	subeq	r5, #1
 80007b0:	d0f7      	beq.n	80007a2 <__aeabi_dmul+0x1c6>
 80007b2:	ea43 0306 	orr.w	r3, r3, r6
 80007b6:	4770      	bx	lr
 80007b8:	ea94 0f0c 	teq	r4, ip
 80007bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c0:	bf18      	it	ne
 80007c2:	ea95 0f0c 	teqne	r5, ip
 80007c6:	d00c      	beq.n	80007e2 <__aeabi_dmul+0x206>
 80007c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007cc:	bf18      	it	ne
 80007ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d2:	d1d1      	bne.n	8000778 <__aeabi_dmul+0x19c>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e6:	bf06      	itte	eq
 80007e8:	4610      	moveq	r0, r2
 80007ea:	4619      	moveq	r1, r3
 80007ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f0:	d019      	beq.n	8000826 <__aeabi_dmul+0x24a>
 80007f2:	ea94 0f0c 	teq	r4, ip
 80007f6:	d102      	bne.n	80007fe <__aeabi_dmul+0x222>
 80007f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007fc:	d113      	bne.n	8000826 <__aeabi_dmul+0x24a>
 80007fe:	ea95 0f0c 	teq	r5, ip
 8000802:	d105      	bne.n	8000810 <__aeabi_dmul+0x234>
 8000804:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000808:	bf1c      	itt	ne
 800080a:	4610      	movne	r0, r2
 800080c:	4619      	movne	r1, r3
 800080e:	d10a      	bne.n	8000826 <__aeabi_dmul+0x24a>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800082e:	bd70      	pop	{r4, r5, r6, pc}

08000830 <__aeabi_ddiv>:
 8000830:	b570      	push	{r4, r5, r6, lr}
 8000832:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000836:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800083e:	bf1d      	ittte	ne
 8000840:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000844:	ea94 0f0c 	teqne	r4, ip
 8000848:	ea95 0f0c 	teqne	r5, ip
 800084c:	f000 f8a7 	bleq	800099e <__aeabi_ddiv+0x16e>
 8000850:	eba4 0405 	sub.w	r4, r4, r5
 8000854:	ea81 0e03 	eor.w	lr, r1, r3
 8000858:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800085c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000860:	f000 8088 	beq.w	8000974 <__aeabi_ddiv+0x144>
 8000864:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000868:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800086c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000870:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000874:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000878:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800087c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000880:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000884:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000888:	429d      	cmp	r5, r3
 800088a:	bf08      	it	eq
 800088c:	4296      	cmpeq	r6, r2
 800088e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000892:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000896:	d202      	bcs.n	800089e <__aeabi_ddiv+0x6e>
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	1ab6      	subs	r6, r6, r2
 80008a0:	eb65 0503 	sbc.w	r5, r5, r3
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800090c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000910:	d018      	beq.n	8000944 <__aeabi_ddiv+0x114>
 8000912:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000916:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800091e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000922:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000926:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800092e:	d1c0      	bne.n	80008b2 <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	d10b      	bne.n	800094e <__aeabi_ddiv+0x11e>
 8000936:	ea41 0100 	orr.w	r1, r1, r0
 800093a:	f04f 0000 	mov.w	r0, #0
 800093e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000942:	e7b6      	b.n	80008b2 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	bf04      	itt	eq
 800094a:	4301      	orreq	r1, r0
 800094c:	2000      	moveq	r0, #0
 800094e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000952:	bf88      	it	hi
 8000954:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000958:	f63f aeaf 	bhi.w	80006ba <__aeabi_dmul+0xde>
 800095c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000960:	bf04      	itt	eq
 8000962:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000966:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096a:	f150 0000 	adcs.w	r0, r0, #0
 800096e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000972:	bd70      	pop	{r4, r5, r6, pc}
 8000974:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000978:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800097c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000980:	bfc2      	ittt	gt
 8000982:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000986:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098a:	bd70      	popgt	{r4, r5, r6, pc}
 800098c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000990:	f04f 0e00 	mov.w	lr, #0
 8000994:	3c01      	subs	r4, #1
 8000996:	e690      	b.n	80006ba <__aeabi_dmul+0xde>
 8000998:	ea45 0e06 	orr.w	lr, r5, r6
 800099c:	e68d      	b.n	80006ba <__aeabi_dmul+0xde>
 800099e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a2:	ea94 0f0c 	teq	r4, ip
 80009a6:	bf08      	it	eq
 80009a8:	ea95 0f0c 	teqeq	r5, ip
 80009ac:	f43f af3b 	beq.w	8000826 <__aeabi_dmul+0x24a>
 80009b0:	ea94 0f0c 	teq	r4, ip
 80009b4:	d10a      	bne.n	80009cc <__aeabi_ddiv+0x19c>
 80009b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ba:	f47f af34 	bne.w	8000826 <__aeabi_dmul+0x24a>
 80009be:	ea95 0f0c 	teq	r5, ip
 80009c2:	f47f af25 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e72c      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009cc:	ea95 0f0c 	teq	r5, ip
 80009d0:	d106      	bne.n	80009e0 <__aeabi_ddiv+0x1b0>
 80009d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009d6:	f43f aefd 	beq.w	80007d4 <__aeabi_dmul+0x1f8>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e722      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e4:	bf18      	it	ne
 80009e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ea:	f47f aec5 	bne.w	8000778 <__aeabi_dmul+0x19c>
 80009ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f2:	f47f af0d 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fa:	f47f aeeb 	bne.w	80007d4 <__aeabi_dmul+0x1f8>
 80009fe:	e712      	b.n	8000826 <__aeabi_dmul+0x24a>

08000a00 <__gedf2>:
 8000a00:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a04:	e006      	b.n	8000a14 <__cmpdf2+0x4>
 8000a06:	bf00      	nop

08000a08 <__ledf2>:
 8000a08:	f04f 0c01 	mov.w	ip, #1
 8000a0c:	e002      	b.n	8000a14 <__cmpdf2+0x4>
 8000a0e:	bf00      	nop

08000a10 <__cmpdf2>:
 8000a10:	f04f 0c01 	mov.w	ip, #1
 8000a14:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	bf18      	it	ne
 8000a26:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a2a:	d01b      	beq.n	8000a64 <__cmpdf2+0x54>
 8000a2c:	b001      	add	sp, #4
 8000a2e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a32:	bf0c      	ite	eq
 8000a34:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a38:	ea91 0f03 	teqne	r1, r3
 8000a3c:	bf02      	ittt	eq
 8000a3e:	ea90 0f02 	teqeq	r0, r2
 8000a42:	2000      	moveq	r0, #0
 8000a44:	4770      	bxeq	lr
 8000a46:	f110 0f00 	cmn.w	r0, #0
 8000a4a:	ea91 0f03 	teq	r1, r3
 8000a4e:	bf58      	it	pl
 8000a50:	4299      	cmppl	r1, r3
 8000a52:	bf08      	it	eq
 8000a54:	4290      	cmpeq	r0, r2
 8000a56:	bf2c      	ite	cs
 8000a58:	17d8      	asrcs	r0, r3, #31
 8000a5a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a5e:	f040 0001 	orr.w	r0, r0, #1
 8000a62:	4770      	bx	lr
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d102      	bne.n	8000a74 <__cmpdf2+0x64>
 8000a6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a72:	d107      	bne.n	8000a84 <__cmpdf2+0x74>
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d1d6      	bne.n	8000a2c <__cmpdf2+0x1c>
 8000a7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a82:	d0d3      	beq.n	8000a2c <__cmpdf2+0x1c>
 8000a84:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdrcmple>:
 8000a8c:	4684      	mov	ip, r0
 8000a8e:	4610      	mov	r0, r2
 8000a90:	4662      	mov	r2, ip
 8000a92:	468c      	mov	ip, r1
 8000a94:	4619      	mov	r1, r3
 8000a96:	4663      	mov	r3, ip
 8000a98:	e000      	b.n	8000a9c <__aeabi_cdcmpeq>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_cdcmpeq>:
 8000a9c:	b501      	push	{r0, lr}
 8000a9e:	f7ff ffb7 	bl	8000a10 <__cmpdf2>
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	bf48      	it	mi
 8000aa6:	f110 0f00 	cmnmi.w	r0, #0
 8000aaa:	bd01      	pop	{r0, pc}

08000aac <__aeabi_dcmpeq>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff fff4 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ab4:	bf0c      	ite	eq
 8000ab6:	2001      	moveq	r0, #1
 8000ab8:	2000      	movne	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmplt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffea 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmple>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffe0 	bl	8000a9c <__aeabi_cdcmpeq>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpge>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffce 	bl	8000a8c <__aeabi_cdrcmple>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpgt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffc4 	bl	8000a8c <__aeabi_cdrcmple>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpun>:
 8000b10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x10>
 8000b1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b1e:	d10a      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__aeabi_dcmpun+0x20>
 8000b2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b2e:	d102      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	f04f 0001 	mov.w	r0, #1
 8000b3a:	4770      	bx	lr

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b92:	f000 fb4f 	bl	8001234 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b96:	f000 f82b 	bl	8000bf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b9a:	f000 f86b 	bl	8000c74 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL |= (1 << 0);
 8000b9e:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <main+0x58>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a10      	ldr	r2, [pc, #64]	; (8000be4 <main+0x58>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6013      	str	r3, [r2, #0]

//  SEGGER_SYSVIEW_Conf();
//
//  SEGGER_SYSVIEW_Start();

  status = xTaskCreate(svIRSensorReadTask, "IR_Sensor_Reading_Task", 200, NULL, 4, &IR_sensor_task_handle);
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	9301      	str	r3, [sp, #4]
 8000bae:	2304      	movs	r3, #4
 8000bb0:	9300      	str	r3, [sp, #0]
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	22c8      	movs	r2, #200	; 0xc8
 8000bb6:	490c      	ldr	r1, [pc, #48]	; (8000be8 <main+0x5c>)
 8000bb8:	480c      	ldr	r0, [pc, #48]	; (8000bec <main+0x60>)
 8000bba:	f003 f81b 	bl	8003bf4 <xTaskCreate>
 8000bbe:	60f8      	str	r0, [r7, #12]

  configASSERT(status == pdPASS);
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d00a      	beq.n	8000bdc <main+0x50>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bca:	f383 8811 	msr	BASEPRI, r3
 8000bce:	f3bf 8f6f 	isb	sy
 8000bd2:	f3bf 8f4f 	dsb	sy
 8000bd6:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000bd8:	bf00      	nop
 8000bda:	e7fe      	b.n	8000bda <main+0x4e>

  vTaskStartScheduler();
 8000bdc:	f003 f96e 	bl	8003ebc <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <main+0x54>
 8000be2:	bf00      	nop
 8000be4:	e0001000 	.word	0xe0001000
 8000be8:	08007f30 	.word	0x08007f30
 8000bec:	08000ddd 	.word	0x08000ddd

08000bf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b090      	sub	sp, #64	; 0x40
 8000bf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bf6:	f107 0318 	add.w	r3, r7, #24
 8000bfa:	2228      	movs	r2, #40	; 0x28
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f006 f9ca 	bl	8006f98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
 8000c10:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c12:	2302      	movs	r3, #2
 8000c14:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c16:	2301      	movs	r3, #1
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c1a:	2310      	movs	r3, #16
 8000c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c22:	2300      	movs	r3, #0
 8000c24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000c26:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8000c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2c:	f107 0318 	add.w	r3, r7, #24
 8000c30:	4618      	mov	r0, r3
 8000c32:	f000 fdc1 	bl	80017b8 <HAL_RCC_OscConfig>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000c3c:	f000 fa1c 	bl	8001078 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c40:	230f      	movs	r3, #15
 8000c42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c44:	2302      	movs	r3, #2
 8000c46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2101      	movs	r1, #1
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f001 fcb4 	bl	80025c8 <HAL_RCC_ClockConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000c66:	f000 fa07 	bl	8001078 <Error_Handler>
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	3740      	adds	r7, #64	; 0x40
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	; 0x28
 8000c78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
 8000c88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c8a:	4b50      	ldr	r3, [pc, #320]	; (8000dcc <MX_GPIO_Init+0x158>)
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	4a4f      	ldr	r2, [pc, #316]	; (8000dcc <MX_GPIO_Init+0x158>)
 8000c90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c94:	6153      	str	r3, [r2, #20]
 8000c96:	4b4d      	ldr	r3, [pc, #308]	; (8000dcc <MX_GPIO_Init+0x158>)
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca2:	4b4a      	ldr	r3, [pc, #296]	; (8000dcc <MX_GPIO_Init+0x158>)
 8000ca4:	695b      	ldr	r3, [r3, #20]
 8000ca6:	4a49      	ldr	r2, [pc, #292]	; (8000dcc <MX_GPIO_Init+0x158>)
 8000ca8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000cac:	6153      	str	r3, [r2, #20]
 8000cae:	4b47      	ldr	r3, [pc, #284]	; (8000dcc <MX_GPIO_Init+0x158>)
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cba:	4b44      	ldr	r3, [pc, #272]	; (8000dcc <MX_GPIO_Init+0x158>)
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	4a43      	ldr	r2, [pc, #268]	; (8000dcc <MX_GPIO_Init+0x158>)
 8000cc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cc4:	6153      	str	r3, [r2, #20]
 8000cc6:	4b41      	ldr	r3, [pc, #260]	; (8000dcc <MX_GPIO_Init+0x158>)
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd2:	4b3e      	ldr	r3, [pc, #248]	; (8000dcc <MX_GPIO_Init+0x158>)
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	4a3d      	ldr	r2, [pc, #244]	; (8000dcc <MX_GPIO_Init+0x158>)
 8000cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cdc:	6153      	str	r3, [r2, #20]
 8000cde:	4b3b      	ldr	r3, [pc, #236]	; (8000dcc <MX_GPIO_Init+0x158>)
 8000ce0:	695b      	ldr	r3, [r3, #20]
 8000ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cea:	4b38      	ldr	r3, [pc, #224]	; (8000dcc <MX_GPIO_Init+0x158>)
 8000cec:	695b      	ldr	r3, [r3, #20]
 8000cee:	4a37      	ldr	r2, [pc, #220]	; (8000dcc <MX_GPIO_Init+0x158>)
 8000cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cf4:	6153      	str	r3, [r2, #20]
 8000cf6:	4b35      	ldr	r3, [pc, #212]	; (8000dcc <MX_GPIO_Init+0x158>)
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000d02:	2200      	movs	r2, #0
 8000d04:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000d08:	4831      	ldr	r0, [pc, #196]	; (8000dd0 <MX_GPIO_Init+0x15c>)
 8000d0a:	f000 fd3d 	bl	8001788 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000d0e:	2337      	movs	r3, #55	; 0x37
 8000d10:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d12:	4b30      	ldr	r3, [pc, #192]	; (8000dd4 <MX_GPIO_Init+0x160>)
 8000d14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	4619      	mov	r1, r3
 8000d20:	482b      	ldr	r0, [pc, #172]	; (8000dd0 <MX_GPIO_Init+0x15c>)
 8000d22:	f000 fb9f 	bl	8001464 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000d26:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000d2a:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4824      	ldr	r0, [pc, #144]	; (8000dd0 <MX_GPIO_Init+0x15c>)
 8000d40:	f000 fb90 	bl	8001464 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d44:	2301      	movs	r3, #1
 8000d46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	4619      	mov	r1, r3
 8000d56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d5a:	f000 fb83 	bl	8001464 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000d5e:	23e0      	movs	r3, #224	; 0xe0
 8000d60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d62:	2302      	movs	r3, #2
 8000d64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d6e:	2305      	movs	r3, #5
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d72:	f107 0314 	add.w	r3, r7, #20
 8000d76:	4619      	mov	r1, r3
 8000d78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7c:	f000 fb72 	bl	8001464 <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000d80:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000d92:	230e      	movs	r3, #14
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da0:	f000 fb60 	bl	8001464 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000da4:	23c0      	movs	r3, #192	; 0xc0
 8000da6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000da8:	2312      	movs	r3, #18
 8000daa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000db4:	2304      	movs	r3, #4
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4806      	ldr	r0, [pc, #24]	; (8000dd8 <MX_GPIO_Init+0x164>)
 8000dc0:	f000 fb50 	bl	8001464 <HAL_GPIO_Init>

}
 8000dc4:	bf00      	nop
 8000dc6:	3728      	adds	r7, #40	; 0x28
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	48001000 	.word	0x48001000
 8000dd4:	10120000 	.word	0x10120000
 8000dd8:	48000400 	.word	0x48000400

08000ddc <svIRSensorReadTask>:

/* USER CODE BEGIN 4 */
static void svIRSensorReadTask(void* parameters)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		uint8_t sensor_data = ucReadAllIRSensors();
 8000de4:	f000 f80e 	bl	8000e04 <ucReadAllIRSensors>
 8000de8:	4603      	mov	r3, r0
 8000dea:	73fb      	strb	r3, [r7, #15]
		int error = iExponentialWeightedError(0b11110001, 2);
 8000dec:	2102      	movs	r1, #2
 8000dee:	20f1      	movs	r0, #241	; 0xf1
 8000df0:	f000 f84e 	bl	8000e90 <iExponentialWeightedError>
 8000df4:	60b8      	str	r0, [r7, #8]
		error = iEqualWeightedError(0b1111001, 2);
 8000df6:	2102      	movs	r1, #2
 8000df8:	2079      	movs	r0, #121	; 0x79
 8000dfa:	f000 f8e5 	bl	8000fc8 <iEqualWeightedError>
 8000dfe:	60b8      	str	r0, [r7, #8]
	{
 8000e00:	e7f0      	b.n	8000de4 <svIRSensorReadTask+0x8>
	...

08000e04 <ucReadAllIRSensors>:
	}
}

uint8_t ucReadAllIRSensors()
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
	uint8_t sensor_vals = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	71fb      	strb	r3, [r7, #7]

	for(int i = 0; i < TOTAL_IR_SENSORS; i++)
 8000e0e:	2300      	movs	r3, #0
 8000e10:	603b      	str	r3, [r7, #0]
 8000e12:	e033      	b.n	8000e7c <ucReadAllIRSensors+0x78>
	{
		HAL_GPIO_WritePin(S0_PORT, S0, i & (1 << 0));
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	461a      	mov	r2, r3
 8000e20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e24:	4819      	ldr	r0, [pc, #100]	; (8000e8c <ucReadAllIRSensors+0x88>)
 8000e26:	f000 fcaf 	bl	8001788 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S1_PORT, S1, i & (1 << 1));
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	461a      	mov	r2, r3
 8000e36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e3a:	4814      	ldr	r0, [pc, #80]	; (8000e8c <ucReadAllIRSensors+0x88>)
 8000e3c:	f000 fca4 	bl	8001788 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S2_PORT, S2, i & (1 << 2));
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	f003 0304 	and.w	r3, r3, #4
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e50:	480e      	ldr	r0, [pc, #56]	; (8000e8c <ucReadAllIRSensors+0x88>)
 8000e52:	f000 fc99 	bl	8001788 <HAL_GPIO_WritePin>

		sensor_vals |= HAL_GPIO_ReadPin(IR_CHANNEL_PORT, IR_CHANNEL) << i;
 8000e56:	2101      	movs	r1, #1
 8000e58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e5c:	f000 fc7c 	bl	8001758 <HAL_GPIO_ReadPin>
 8000e60:	4603      	mov	r3, r0
 8000e62:	461a      	mov	r2, r3
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	b25a      	sxtb	r2, r3
 8000e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	b25b      	sxtb	r3, r3
 8000e74:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < TOTAL_IR_SENSORS; i++)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	603b      	str	r3, [r7, #0]
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	2b07      	cmp	r3, #7
 8000e80:	ddc8      	ble.n	8000e14 <ucReadAllIRSensors+0x10>
	}

	return sensor_vals;
 8000e82:	79fb      	ldrb	r3, [r7, #7]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	48001000 	.word	0x48001000

08000e90 <iExponentialWeightedError>:
 * 			errors are exponentially increasing from the center
 *
 *
 * */
int iExponentialWeightedError(uint8_t sensor_data, int weight)
{
 8000e90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e94:	b086      	sub	sp, #24
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	4603      	mov	r3, r0
 8000e9a:	6039      	str	r1, [r7, #0]
 8000e9c:	71fb      	strb	r3, [r7, #7]
	int error = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]

	for(int i = 1; i <= TOTAL_IR_SENSORS/2; i++)
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	e03f      	b.n	8000f28 <iExponentialWeightedError+0x98>
	{
		error += ((sensor_data & (1 << (TOTAL_IR_SENSORS/2 - i))) >> (TOTAL_IR_SENSORS/2 - i)) * pow(weight, i);
 8000ea8:	79fa      	ldrb	r2, [r7, #7]
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	f1c3 0304 	rsb	r3, r3, #4
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	401a      	ands	r2, r3
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	f1c3 0304 	rsb	r3, r3, #4
 8000ebe:	fa42 f303 	asr.w	r3, r2, r3
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff fb20 	bl	8000508 <__aeabi_i2d>
 8000ec8:	4604      	mov	r4, r0
 8000eca:	460d      	mov	r5, r1
 8000ecc:	6838      	ldr	r0, [r7, #0]
 8000ece:	f7ff fb1b 	bl	8000508 <__aeabi_i2d>
 8000ed2:	4680      	mov	r8, r0
 8000ed4:	4689      	mov	r9, r1
 8000ed6:	6938      	ldr	r0, [r7, #16]
 8000ed8:	f7ff fb16 	bl	8000508 <__aeabi_i2d>
 8000edc:	4602      	mov	r2, r0
 8000ede:	460b      	mov	r3, r1
 8000ee0:	ec43 2b11 	vmov	d1, r2, r3
 8000ee4:	ec49 8b10 	vmov	d0, r8, r9
 8000ee8:	f006 f85e 	bl	8006fa8 <pow>
 8000eec:	ec53 2b10 	vmov	r2, r3, d0
 8000ef0:	4620      	mov	r0, r4
 8000ef2:	4629      	mov	r1, r5
 8000ef4:	f7ff fb72 	bl	80005dc <__aeabi_dmul>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	460b      	mov	r3, r1
 8000efc:	4614      	mov	r4, r2
 8000efe:	461d      	mov	r5, r3
 8000f00:	6978      	ldr	r0, [r7, #20]
 8000f02:	f7ff fb01 	bl	8000508 <__aeabi_i2d>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	4620      	mov	r0, r4
 8000f0c:	4629      	mov	r1, r5
 8000f0e:	f7ff f9af 	bl	8000270 <__adddf3>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	4610      	mov	r0, r2
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f7ff fe0f 	bl	8000b3c <__aeabi_d2iz>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	617b      	str	r3, [r7, #20]
	for(int i = 1; i <= TOTAL_IR_SENSORS/2; i++)
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	3301      	adds	r3, #1
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	ddbc      	ble.n	8000ea8 <iExponentialWeightedError+0x18>
	}


	for(int i = 0; i < TOTAL_IR_SENSORS/2; i++)
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	e040      	b.n	8000fb6 <iExponentialWeightedError+0x126>
	{
 		error += ((sensor_data & (1 << (TOTAL_IR_SENSORS/2 + i))) >> (TOTAL_IR_SENSORS/2 + i)) * -1* pow(weight, i + 1);
 8000f34:	79fa      	ldrb	r2, [r7, #7]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	3304      	adds	r3, #4
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f40:	401a      	ands	r2, r3
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	3304      	adds	r3, #4
 8000f46:	fa42 f303 	asr.w	r3, r2, r3
 8000f4a:	425b      	negs	r3, r3
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fadb 	bl	8000508 <__aeabi_i2d>
 8000f52:	4604      	mov	r4, r0
 8000f54:	460d      	mov	r5, r1
 8000f56:	6838      	ldr	r0, [r7, #0]
 8000f58:	f7ff fad6 	bl	8000508 <__aeabi_i2d>
 8000f5c:	4680      	mov	r8, r0
 8000f5e:	4689      	mov	r9, r1
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	3301      	adds	r3, #1
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff facf 	bl	8000508 <__aeabi_i2d>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	ec43 2b11 	vmov	d1, r2, r3
 8000f72:	ec49 8b10 	vmov	d0, r8, r9
 8000f76:	f006 f817 	bl	8006fa8 <pow>
 8000f7a:	ec53 2b10 	vmov	r2, r3, d0
 8000f7e:	4620      	mov	r0, r4
 8000f80:	4629      	mov	r1, r5
 8000f82:	f7ff fb2b 	bl	80005dc <__aeabi_dmul>
 8000f86:	4602      	mov	r2, r0
 8000f88:	460b      	mov	r3, r1
 8000f8a:	4614      	mov	r4, r2
 8000f8c:	461d      	mov	r5, r3
 8000f8e:	6978      	ldr	r0, [r7, #20]
 8000f90:	f7ff faba 	bl	8000508 <__aeabi_i2d>
 8000f94:	4602      	mov	r2, r0
 8000f96:	460b      	mov	r3, r1
 8000f98:	4620      	mov	r0, r4
 8000f9a:	4629      	mov	r1, r5
 8000f9c:	f7ff f968 	bl	8000270 <__adddf3>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	f7ff fdc8 	bl	8000b3c <__aeabi_d2iz>
 8000fac:	4603      	mov	r3, r0
 8000fae:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < TOTAL_IR_SENSORS/2; i++)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2b03      	cmp	r3, #3
 8000fba:	ddbb      	ble.n	8000f34 <iExponentialWeightedError+0xa4>
	}

	return error;
 8000fbc:	697b      	ldr	r3, [r7, #20]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08000fc8 <iEqualWeightedError>:
 * 			errors are exponentially increasing from the center
 *
 *
 * */
int iEqualWeightedError(uint8_t sensor_data, int weight)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b087      	sub	sp, #28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	6039      	str	r1, [r7, #0]
 8000fd2:	71fb      	strb	r3, [r7, #7]
	int error = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]

	for(int i = 1; i <= TOTAL_IR_SENSORS/2; i++)
 8000fd8:	2301      	movs	r3, #1
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	e015      	b.n	800100a <iEqualWeightedError+0x42>
	{
		error += ((sensor_data & (1 << (TOTAL_IR_SENSORS/2 - i))) >> (TOTAL_IR_SENSORS/2 - i)) * weight;
 8000fde:	79fa      	ldrb	r2, [r7, #7]
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	f1c3 0304 	rsb	r3, r3, #4
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fec:	401a      	ands	r2, r3
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	f1c3 0304 	rsb	r3, r3, #4
 8000ff4:	fa42 f303 	asr.w	r3, r2, r3
 8000ff8:	683a      	ldr	r2, [r7, #0]
 8000ffa:	fb02 f303 	mul.w	r3, r2, r3
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	4413      	add	r3, r2
 8001002:	617b      	str	r3, [r7, #20]
	for(int i = 1; i <= TOTAL_IR_SENSORS/2; i++)
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	3301      	adds	r3, #1
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	2b04      	cmp	r3, #4
 800100e:	dde6      	ble.n	8000fde <iEqualWeightedError+0x16>
	}


	for(int i = 0; i < TOTAL_IR_SENSORS/2; i++)
 8001010:	2300      	movs	r3, #0
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	e014      	b.n	8001040 <iEqualWeightedError+0x78>
	{
		error += ((sensor_data & (1 << (TOTAL_IR_SENSORS/2 + i))) >> (TOTAL_IR_SENSORS/2 + i)) * -1* weight;
 8001016:	79fa      	ldrb	r2, [r7, #7]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	3304      	adds	r3, #4
 800101c:	2101      	movs	r1, #1
 800101e:	fa01 f303 	lsl.w	r3, r1, r3
 8001022:	401a      	ands	r2, r3
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	3304      	adds	r3, #4
 8001028:	fa42 f303 	asr.w	r3, r2, r3
 800102c:	425b      	negs	r3, r3
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	fb02 f303 	mul.w	r3, r2, r3
 8001034:	697a      	ldr	r2, [r7, #20]
 8001036:	4413      	add	r3, r2
 8001038:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < TOTAL_IR_SENSORS/2; i++)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	3301      	adds	r3, #1
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2b03      	cmp	r3, #3
 8001044:	dde7      	ble.n	8001016 <iEqualWeightedError+0x4e>
	}

	return error;
 8001046:	697b      	ldr	r3, [r7, #20]
}
 8001048:	4618      	mov	r0, r3
 800104a:	371c      	adds	r7, #28
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a04      	ldr	r2, [pc, #16]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d101      	bne.n	800106a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001066:	f000 f8fb 	bl	8001260 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40001000 	.word	0x40001000

08001078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800107c:	b672      	cpsid	i
}
 800107e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001080:	e7fe      	b.n	8001080 <Error_Handler+0x8>
	...

08001084 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108a:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <HAL_MspInit+0x44>)
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	4a0e      	ldr	r2, [pc, #56]	; (80010c8 <HAL_MspInit+0x44>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6193      	str	r3, [r2, #24]
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <HAL_MspInit+0x44>)
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <HAL_MspInit+0x44>)
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	4a08      	ldr	r2, [pc, #32]	; (80010c8 <HAL_MspInit+0x44>)
 80010a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ac:	61d3      	str	r3, [r2, #28]
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_MspInit+0x44>)
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 80010ba:	f004 f88d 	bl	80051d8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40021000 	.word	0x40021000

080010cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08c      	sub	sp, #48	; 0x30
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80010dc:	2200      	movs	r2, #0
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	2036      	movs	r0, #54	; 0x36
 80010e2:	f000 f995 	bl	8001410 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010e6:	2036      	movs	r0, #54	; 0x36
 80010e8:	f000 f9ae 	bl	8001448 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80010ec:	4b1f      	ldr	r3, [pc, #124]	; (800116c <HAL_InitTick+0xa0>)
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	4a1e      	ldr	r2, [pc, #120]	; (800116c <HAL_InitTick+0xa0>)
 80010f2:	f043 0310 	orr.w	r3, r3, #16
 80010f6:	61d3      	str	r3, [r2, #28]
 80010f8:	4b1c      	ldr	r3, [pc, #112]	; (800116c <HAL_InitTick+0xa0>)
 80010fa:	69db      	ldr	r3, [r3, #28]
 80010fc:	f003 0310 	and.w	r3, r3, #16
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001104:	f107 0210 	add.w	r2, r7, #16
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4611      	mov	r1, r2
 800110e:	4618      	mov	r0, r3
 8001110:	f001 fc6e 	bl	80029f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001114:	f001 fc4a 	bl	80029ac <HAL_RCC_GetPCLK1Freq>
 8001118:	4603      	mov	r3, r0
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800111e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001120:	4a13      	ldr	r2, [pc, #76]	; (8001170 <HAL_InitTick+0xa4>)
 8001122:	fba2 2303 	umull	r2, r3, r2, r3
 8001126:	0c9b      	lsrs	r3, r3, #18
 8001128:	3b01      	subs	r3, #1
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <HAL_InitTick+0xa8>)
 800112e:	4a12      	ldr	r2, [pc, #72]	; (8001178 <HAL_InitTick+0xac>)
 8001130:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <HAL_InitTick+0xa8>)
 8001134:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001138:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800113a:	4a0e      	ldr	r2, [pc, #56]	; (8001174 <HAL_InitTick+0xa8>)
 800113c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800113e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <HAL_InitTick+0xa8>)
 8001142:	2200      	movs	r2, #0
 8001144:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <HAL_InitTick+0xa8>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800114c:	4809      	ldr	r0, [pc, #36]	; (8001174 <HAL_InitTick+0xa8>)
 800114e:	f001 fc81 	bl	8002a54 <HAL_TIM_Base_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d104      	bne.n	8001162 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001158:	4806      	ldr	r0, [pc, #24]	; (8001174 <HAL_InitTick+0xa8>)
 800115a:	f001 fcdd 	bl	8002b18 <HAL_TIM_Base_Start_IT>
 800115e:	4603      	mov	r3, r0
 8001160:	e000      	b.n	8001164 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
}
 8001164:	4618      	mov	r0, r3
 8001166:	3730      	adds	r7, #48	; 0x30
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40021000 	.word	0x40021000
 8001170:	431bde83 	.word	0x431bde83
 8001174:	20002fc8 	.word	0x20002fc8
 8001178:	40001000 	.word	0x40001000

0800117c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <NMI_Handler+0x4>

08001182 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <HardFault_Handler+0x4>

08001188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800118c:	e7fe      	b.n	800118c <MemManage_Handler+0x4>

0800118e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001192:	e7fe      	b.n	8001192 <BusFault_Handler+0x4>

08001194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <UsageFault_Handler+0x4>

0800119a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011ac:	4802      	ldr	r0, [pc, #8]	; (80011b8 <TIM6_DAC_IRQHandler+0x10>)
 80011ae:	f001 fd1d 	bl	8002bec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20002fc8 	.word	0x20002fc8

080011bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <SystemInit+0x20>)
 80011c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011c6:	4a05      	ldr	r2, [pc, #20]	; (80011dc <SystemInit+0x20>)
 80011c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001218 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011e4:	480d      	ldr	r0, [pc, #52]	; (800121c <LoopForever+0x6>)
  ldr r1, =_edata
 80011e6:	490e      	ldr	r1, [pc, #56]	; (8001220 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011e8:	4a0e      	ldr	r2, [pc, #56]	; (8001224 <LoopForever+0xe>)
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011ec:	e002      	b.n	80011f4 <LoopCopyDataInit>

080011ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011f2:	3304      	adds	r3, #4

080011f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f8:	d3f9      	bcc.n	80011ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011fa:	4a0b      	ldr	r2, [pc, #44]	; (8001228 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011fc:	4c0b      	ldr	r4, [pc, #44]	; (800122c <LoopForever+0x16>)
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001200:	e001      	b.n	8001206 <LoopFillZerobss>

08001202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001204:	3204      	adds	r2, #4

08001206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001208:	d3fb      	bcc.n	8001202 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800120a:	f7ff ffd7 	bl	80011bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800120e:	f005 fe83 	bl	8006f18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001212:	f7ff fcbb 	bl	8000b8c <main>

08001216 <LoopForever>:

LoopForever:
    b LoopForever
 8001216:	e7fe      	b.n	8001216 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001218:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800121c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001220:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001224:	08008060 	.word	0x08008060
  ldr r2, =_sbss
 8001228:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800122c:	20003100 	.word	0x20003100

08001230 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001230:	e7fe      	b.n	8001230 <ADC1_2_IRQHandler>
	...

08001234 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <HAL_Init+0x28>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a07      	ldr	r2, [pc, #28]	; (800125c <HAL_Init+0x28>)
 800123e:	f043 0310 	orr.w	r3, r3, #16
 8001242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001244:	2003      	movs	r0, #3
 8001246:	f000 f8d8 	bl	80013fa <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124a:	2000      	movs	r0, #0
 800124c:	f7ff ff3e 	bl	80010cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001250:	f7ff ff18 	bl	8001084 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40022000 	.word	0x40022000

08001260 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <HAL_IncTick+0x20>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_IncTick+0x24>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4413      	add	r3, r2
 8001270:	4a04      	ldr	r2, [pc, #16]	; (8001284 <HAL_IncTick+0x24>)
 8001272:	6013      	str	r3, [r2, #0]
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000008 	.word	0x20000008
 8001284:	20003014 	.word	0x20003014

08001288 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  return uwTick;  
 800128c:	4b03      	ldr	r3, [pc, #12]	; (800129c <HAL_GetTick+0x14>)
 800128e:	681b      	ldr	r3, [r3, #0]
}
 8001290:	4618      	mov	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	20003014 	.word	0x20003014

080012a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012bc:	4013      	ands	r3, r2
 80012be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d2:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	60d3      	str	r3, [r2, #12]
}
 80012d8:	bf00      	nop
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ec:	4b04      	ldr	r3, [pc, #16]	; (8001300 <__NVIC_GetPriorityGrouping+0x18>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	0a1b      	lsrs	r3, r3, #8
 80012f2:	f003 0307 	and.w	r3, r3, #7
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	2b00      	cmp	r3, #0
 8001314:	db0b      	blt.n	800132e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	f003 021f 	and.w	r2, r3, #31
 800131c:	4907      	ldr	r1, [pc, #28]	; (800133c <__NVIC_EnableIRQ+0x38>)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	095b      	lsrs	r3, r3, #5
 8001324:	2001      	movs	r0, #1
 8001326:	fa00 f202 	lsl.w	r2, r0, r2
 800132a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000e100 	.word	0xe000e100

08001340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	6039      	str	r1, [r7, #0]
 800134a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001350:	2b00      	cmp	r3, #0
 8001352:	db0a      	blt.n	800136a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	b2da      	uxtb	r2, r3
 8001358:	490c      	ldr	r1, [pc, #48]	; (800138c <__NVIC_SetPriority+0x4c>)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	0112      	lsls	r2, r2, #4
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	440b      	add	r3, r1
 8001364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001368:	e00a      	b.n	8001380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	b2da      	uxtb	r2, r3
 800136e:	4908      	ldr	r1, [pc, #32]	; (8001390 <__NVIC_SetPriority+0x50>)
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	3b04      	subs	r3, #4
 8001378:	0112      	lsls	r2, r2, #4
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	440b      	add	r3, r1
 800137e:	761a      	strb	r2, [r3, #24]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000e100 	.word	0xe000e100
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001394:	b480      	push	{r7}
 8001396:	b089      	sub	sp, #36	; 0x24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f1c3 0307 	rsb	r3, r3, #7
 80013ae:	2b04      	cmp	r3, #4
 80013b0:	bf28      	it	cs
 80013b2:	2304      	movcs	r3, #4
 80013b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3304      	adds	r3, #4
 80013ba:	2b06      	cmp	r3, #6
 80013bc:	d902      	bls.n	80013c4 <NVIC_EncodePriority+0x30>
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3b03      	subs	r3, #3
 80013c2:	e000      	b.n	80013c6 <NVIC_EncodePriority+0x32>
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43da      	mvns	r2, r3
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	401a      	ands	r2, r3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	fa01 f303 	lsl.w	r3, r1, r3
 80013e6:	43d9      	mvns	r1, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	4313      	orrs	r3, r2
         );
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3724      	adds	r7, #36	; 0x24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff ff4c 	bl	80012a0 <__NVIC_SetPriorityGrouping>
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
 800141c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001422:	f7ff ff61 	bl	80012e8 <__NVIC_GetPriorityGrouping>
 8001426:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	68b9      	ldr	r1, [r7, #8]
 800142c:	6978      	ldr	r0, [r7, #20]
 800142e:	f7ff ffb1 	bl	8001394 <NVIC_EncodePriority>
 8001432:	4602      	mov	r2, r0
 8001434:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001438:	4611      	mov	r1, r2
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff ff80 	bl	8001340 <__NVIC_SetPriority>
}
 8001440:	bf00      	nop
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff ff54 	bl	8001304 <__NVIC_EnableIRQ>
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001464:	b480      	push	{r7}
 8001466:	b087      	sub	sp, #28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001472:	e154      	b.n	800171e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	2101      	movs	r1, #1
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	fa01 f303 	lsl.w	r3, r1, r3
 8001480:	4013      	ands	r3, r2
 8001482:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 8146 	beq.w	8001718 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d00b      	beq.n	80014ac <HAL_GPIO_Init+0x48>
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2b02      	cmp	r3, #2
 800149a:	d007      	beq.n	80014ac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014a0:	2b11      	cmp	r3, #17
 80014a2:	d003      	beq.n	80014ac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b12      	cmp	r3, #18
 80014aa:	d130      	bne.n	800150e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	2203      	movs	r2, #3
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4013      	ands	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	68da      	ldr	r2, [r3, #12]
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014e2:	2201      	movs	r2, #1
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43db      	mvns	r3, r3
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	091b      	lsrs	r3, r3, #4
 80014f8:	f003 0201 	and.w	r2, r3, #1
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	2203      	movs	r2, #3
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43db      	mvns	r3, r3
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	4013      	ands	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4313      	orrs	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b02      	cmp	r3, #2
 8001544:	d003      	beq.n	800154e <HAL_GPIO_Init+0xea>
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2b12      	cmp	r3, #18
 800154c:	d123      	bne.n	8001596 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	08da      	lsrs	r2, r3, #3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3208      	adds	r2, #8
 8001556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800155a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	220f      	movs	r2, #15
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43db      	mvns	r3, r3
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	4013      	ands	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	691a      	ldr	r2, [r3, #16]
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	08da      	lsrs	r2, r3, #3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3208      	adds	r2, #8
 8001590:	6939      	ldr	r1, [r7, #16]
 8001592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	2203      	movs	r2, #3
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 0203 	and.w	r2, r3, #3
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 80a0 	beq.w	8001718 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d8:	4b58      	ldr	r3, [pc, #352]	; (800173c <HAL_GPIO_Init+0x2d8>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	4a57      	ldr	r2, [pc, #348]	; (800173c <HAL_GPIO_Init+0x2d8>)
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	6193      	str	r3, [r2, #24]
 80015e4:	4b55      	ldr	r3, [pc, #340]	; (800173c <HAL_GPIO_Init+0x2d8>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015f0:	4a53      	ldr	r2, [pc, #332]	; (8001740 <HAL_GPIO_Init+0x2dc>)
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	089b      	lsrs	r3, r3, #2
 80015f6:	3302      	adds	r3, #2
 80015f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	f003 0303 	and.w	r3, r3, #3
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	220f      	movs	r2, #15
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4013      	ands	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800161a:	d019      	beq.n	8001650 <HAL_GPIO_Init+0x1ec>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a49      	ldr	r2, [pc, #292]	; (8001744 <HAL_GPIO_Init+0x2e0>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d013      	beq.n	800164c <HAL_GPIO_Init+0x1e8>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a48      	ldr	r2, [pc, #288]	; (8001748 <HAL_GPIO_Init+0x2e4>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d00d      	beq.n	8001648 <HAL_GPIO_Init+0x1e4>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a47      	ldr	r2, [pc, #284]	; (800174c <HAL_GPIO_Init+0x2e8>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d007      	beq.n	8001644 <HAL_GPIO_Init+0x1e0>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a46      	ldr	r2, [pc, #280]	; (8001750 <HAL_GPIO_Init+0x2ec>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d101      	bne.n	8001640 <HAL_GPIO_Init+0x1dc>
 800163c:	2304      	movs	r3, #4
 800163e:	e008      	b.n	8001652 <HAL_GPIO_Init+0x1ee>
 8001640:	2305      	movs	r3, #5
 8001642:	e006      	b.n	8001652 <HAL_GPIO_Init+0x1ee>
 8001644:	2303      	movs	r3, #3
 8001646:	e004      	b.n	8001652 <HAL_GPIO_Init+0x1ee>
 8001648:	2302      	movs	r3, #2
 800164a:	e002      	b.n	8001652 <HAL_GPIO_Init+0x1ee>
 800164c:	2301      	movs	r3, #1
 800164e:	e000      	b.n	8001652 <HAL_GPIO_Init+0x1ee>
 8001650:	2300      	movs	r3, #0
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	f002 0203 	and.w	r2, r2, #3
 8001658:	0092      	lsls	r2, r2, #2
 800165a:	4093      	lsls	r3, r2
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	4313      	orrs	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001662:	4937      	ldr	r1, [pc, #220]	; (8001740 <HAL_GPIO_Init+0x2dc>)
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	089b      	lsrs	r3, r3, #2
 8001668:	3302      	adds	r3, #2
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001670:	4b38      	ldr	r3, [pc, #224]	; (8001754 <HAL_GPIO_Init+0x2f0>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	43db      	mvns	r3, r3
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	4013      	ands	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4313      	orrs	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001694:	4a2f      	ldr	r2, [pc, #188]	; (8001754 <HAL_GPIO_Init+0x2f0>)
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800169a:	4b2e      	ldr	r3, [pc, #184]	; (8001754 <HAL_GPIO_Init+0x2f0>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	43db      	mvns	r3, r3
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	4013      	ands	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016be:	4a25      	ldr	r2, [pc, #148]	; (8001754 <HAL_GPIO_Init+0x2f0>)
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016c4:	4b23      	ldr	r3, [pc, #140]	; (8001754 <HAL_GPIO_Init+0x2f0>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	43db      	mvns	r3, r3
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4013      	ands	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016e8:	4a1a      	ldr	r2, [pc, #104]	; (8001754 <HAL_GPIO_Init+0x2f0>)
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016ee:	4b19      	ldr	r3, [pc, #100]	; (8001754 <HAL_GPIO_Init+0x2f0>)
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	43db      	mvns	r3, r3
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4013      	ands	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4313      	orrs	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001712:	4a10      	ldr	r2, [pc, #64]	; (8001754 <HAL_GPIO_Init+0x2f0>)
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	3301      	adds	r3, #1
 800171c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	fa22 f303 	lsr.w	r3, r2, r3
 8001728:	2b00      	cmp	r3, #0
 800172a:	f47f aea3 	bne.w	8001474 <HAL_GPIO_Init+0x10>
  }
}
 800172e:	bf00      	nop
 8001730:	bf00      	nop
 8001732:	371c      	adds	r7, #28
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	40021000 	.word	0x40021000
 8001740:	40010000 	.word	0x40010000
 8001744:	48000400 	.word	0x48000400
 8001748:	48000800 	.word	0x48000800
 800174c:	48000c00 	.word	0x48000c00
 8001750:	48001000 	.word	0x48001000
 8001754:	40010400 	.word	0x40010400

08001758 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	691a      	ldr	r2, [r3, #16]
 8001768:	887b      	ldrh	r3, [r7, #2]
 800176a:	4013      	ands	r3, r2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d002      	beq.n	8001776 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001770:	2301      	movs	r3, #1
 8001772:	73fb      	strb	r3, [r7, #15]
 8001774:	e001      	b.n	800177a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001776:	2300      	movs	r3, #0
 8001778:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800177a:	7bfb      	ldrb	r3, [r7, #15]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	807b      	strh	r3, [r7, #2]
 8001794:	4613      	mov	r3, r2
 8001796:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001798:	787b      	ldrb	r3, [r7, #1]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800179e:	887a      	ldrh	r2, [r7, #2]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017a4:	e002      	b.n	80017ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017a6:	887a      	ldrh	r2, [r7, #2]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80017be:	af00      	add	r7, sp, #0
 80017c0:	1d3b      	adds	r3, r7, #4
 80017c2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017c4:	1d3b      	adds	r3, r7, #4
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d102      	bne.n	80017d2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	f000 bef4 	b.w	80025ba <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017d2:	1d3b      	adds	r3, r7, #4
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 816a 	beq.w	8001ab6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80017e2:	4bb3      	ldr	r3, [pc, #716]	; (8001ab0 <HAL_RCC_OscConfig+0x2f8>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 030c 	and.w	r3, r3, #12
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	d00c      	beq.n	8001808 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017ee:	4bb0      	ldr	r3, [pc, #704]	; (8001ab0 <HAL_RCC_OscConfig+0x2f8>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 030c 	and.w	r3, r3, #12
 80017f6:	2b08      	cmp	r3, #8
 80017f8:	d159      	bne.n	80018ae <HAL_RCC_OscConfig+0xf6>
 80017fa:	4bad      	ldr	r3, [pc, #692]	; (8001ab0 <HAL_RCC_OscConfig+0x2f8>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001806:	d152      	bne.n	80018ae <HAL_RCC_OscConfig+0xf6>
 8001808:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800180c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001810:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001814:	fa93 f3a3 	rbit	r3, r3
 8001818:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800181c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001820:	fab3 f383 	clz	r3, r3
 8001824:	b2db      	uxtb	r3, r3
 8001826:	095b      	lsrs	r3, r3, #5
 8001828:	b2db      	uxtb	r3, r3
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	b2db      	uxtb	r3, r3
 8001830:	2b01      	cmp	r3, #1
 8001832:	d102      	bne.n	800183a <HAL_RCC_OscConfig+0x82>
 8001834:	4b9e      	ldr	r3, [pc, #632]	; (8001ab0 <HAL_RCC_OscConfig+0x2f8>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	e015      	b.n	8001866 <HAL_RCC_OscConfig+0xae>
 800183a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800183e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001842:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001846:	fa93 f3a3 	rbit	r3, r3
 800184a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800184e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001852:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001856:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800185a:	fa93 f3a3 	rbit	r3, r3
 800185e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001862:	4b93      	ldr	r3, [pc, #588]	; (8001ab0 <HAL_RCC_OscConfig+0x2f8>)
 8001864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001866:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800186a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800186e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001872:	fa92 f2a2 	rbit	r2, r2
 8001876:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800187a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800187e:	fab2 f282 	clz	r2, r2
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	f042 0220 	orr.w	r2, r2, #32
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	f002 021f 	and.w	r2, r2, #31
 800188e:	2101      	movs	r1, #1
 8001890:	fa01 f202 	lsl.w	r2, r1, r2
 8001894:	4013      	ands	r3, r2
 8001896:	2b00      	cmp	r3, #0
 8001898:	f000 810c 	beq.w	8001ab4 <HAL_RCC_OscConfig+0x2fc>
 800189c:	1d3b      	adds	r3, r7, #4
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f040 8106 	bne.w	8001ab4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	f000 be86 	b.w	80025ba <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b8:	d106      	bne.n	80018c8 <HAL_RCC_OscConfig+0x110>
 80018ba:	4b7d      	ldr	r3, [pc, #500]	; (8001ab0 <HAL_RCC_OscConfig+0x2f8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a7c      	ldr	r2, [pc, #496]	; (8001ab0 <HAL_RCC_OscConfig+0x2f8>)
 80018c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	e030      	b.n	800192a <HAL_RCC_OscConfig+0x172>
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10c      	bne.n	80018ec <HAL_RCC_OscConfig+0x134>
 80018d2:	4b77      	ldr	r3, [pc, #476]	; (8001ab0 <HAL_RCC_OscConfig+0x2f8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a76      	ldr	r2, [pc, #472]	; (8001ab0 <HAL_RCC_OscConfig+0x2f8>)
 80018d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	4b74      	ldr	r3, [pc, #464]	; (8001ab0 <HAL_RCC_OscConfig+0x2f8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a73      	ldr	r2, [pc, #460]	; (8001ab0 <HAL_RCC_OscConfig+0x2f8>)
 80018e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	e01e      	b.n	800192a <HAL_RCC_OscConfig+0x172>
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018f6:	d10c      	bne.n	8001912 <HAL_RCC_OscConfig+0x15a>
 80018f8:	4b6d      	ldr	r3, [pc, #436]	; (8001ab0 <HAL_RCC_OscConfig+0x2f8>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a6c      	ldr	r2, [pc, #432]	; (8001ab0 <HAL_RCC_OscConfig+0x2f8>)
 80018fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001902:	6013      	str	r3, [r2, #0]
 8001904:	4b6a      	ldr	r3, [pc, #424]	; (8001ab0 <HAL_RCC_OscConfig+0x2f8>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a69      	ldr	r2, [pc, #420]	; (8001ab0 <HAL_RCC_OscConfig+0x2f8>)
 800190a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800190e:	6013      	str	r3, [r2, #0]
 8001910:	e00b      	b.n	800192a <HAL_RCC_OscConfig+0x172>
 8001912:	4b67      	ldr	r3, [pc, #412]	; (8001ab0 <HAL_RCC_OscConfig+0x2f8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a66      	ldr	r2, [pc, #408]	; (8001ab0 <HAL_RCC_OscConfig+0x2f8>)
 8001918:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	4b64      	ldr	r3, [pc, #400]	; (8001ab0 <HAL_RCC_OscConfig+0x2f8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a63      	ldr	r2, [pc, #396]	; (8001ab0 <HAL_RCC_OscConfig+0x2f8>)
 8001924:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001928:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800192a:	4b61      	ldr	r3, [pc, #388]	; (8001ab0 <HAL_RCC_OscConfig+0x2f8>)
 800192c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192e:	f023 020f 	bic.w	r2, r3, #15
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	495d      	ldr	r1, [pc, #372]	; (8001ab0 <HAL_RCC_OscConfig+0x2f8>)
 800193a:	4313      	orrs	r3, r2
 800193c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d059      	beq.n	80019fc <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001948:	f7ff fc9e 	bl	8001288 <HAL_GetTick>
 800194c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001950:	e00a      	b.n	8001968 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001952:	f7ff fc99 	bl	8001288 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b64      	cmp	r3, #100	; 0x64
 8001960:	d902      	bls.n	8001968 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	f000 be29 	b.w	80025ba <HAL_RCC_OscConfig+0xe02>
 8001968:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800196c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001970:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001974:	fa93 f3a3 	rbit	r3, r3
 8001978:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800197c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001980:	fab3 f383 	clz	r3, r3
 8001984:	b2db      	uxtb	r3, r3
 8001986:	095b      	lsrs	r3, r3, #5
 8001988:	b2db      	uxtb	r3, r3
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b01      	cmp	r3, #1
 8001992:	d102      	bne.n	800199a <HAL_RCC_OscConfig+0x1e2>
 8001994:	4b46      	ldr	r3, [pc, #280]	; (8001ab0 <HAL_RCC_OscConfig+0x2f8>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	e015      	b.n	80019c6 <HAL_RCC_OscConfig+0x20e>
 800199a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800199e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80019a6:	fa93 f3a3 	rbit	r3, r3
 80019aa:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80019ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019b2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80019b6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80019ba:	fa93 f3a3 	rbit	r3, r3
 80019be:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80019c2:	4b3b      	ldr	r3, [pc, #236]	; (8001ab0 <HAL_RCC_OscConfig+0x2f8>)
 80019c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019ca:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80019ce:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80019d2:	fa92 f2a2 	rbit	r2, r2
 80019d6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80019da:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80019de:	fab2 f282 	clz	r2, r2
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	f042 0220 	orr.w	r2, r2, #32
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	f002 021f 	and.w	r2, r2, #31
 80019ee:	2101      	movs	r1, #1
 80019f0:	fa01 f202 	lsl.w	r2, r1, r2
 80019f4:	4013      	ands	r3, r2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0ab      	beq.n	8001952 <HAL_RCC_OscConfig+0x19a>
 80019fa:	e05c      	b.n	8001ab6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fc:	f7ff fc44 	bl	8001288 <HAL_GetTick>
 8001a00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a04:	e00a      	b.n	8001a1c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a06:	f7ff fc3f 	bl	8001288 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b64      	cmp	r3, #100	; 0x64
 8001a14:	d902      	bls.n	8001a1c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	f000 bdcf 	b.w	80025ba <HAL_RCC_OscConfig+0xe02>
 8001a1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a20:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a24:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001a28:	fa93 f3a3 	rbit	r3, r3
 8001a2c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001a30:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a34:	fab3 f383 	clz	r3, r3
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	095b      	lsrs	r3, r3, #5
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d102      	bne.n	8001a4e <HAL_RCC_OscConfig+0x296>
 8001a48:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <HAL_RCC_OscConfig+0x2f8>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	e015      	b.n	8001a7a <HAL_RCC_OscConfig+0x2c2>
 8001a4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a52:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a56:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001a5a:	fa93 f3a3 	rbit	r3, r3
 8001a5e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001a62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a66:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001a6a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001a6e:	fa93 f3a3 	rbit	r3, r3
 8001a72:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001a76:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <HAL_RCC_OscConfig+0x2f8>)
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a7e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001a82:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001a86:	fa92 f2a2 	rbit	r2, r2
 8001a8a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001a8e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001a92:	fab2 f282 	clz	r2, r2
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	f042 0220 	orr.w	r2, r2, #32
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	f002 021f 	and.w	r2, r2, #31
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1ab      	bne.n	8001a06 <HAL_RCC_OscConfig+0x24e>
 8001aae:	e002      	b.n	8001ab6 <HAL_RCC_OscConfig+0x2fe>
 8001ab0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f000 816f 	beq.w	8001da4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ac6:	4bd0      	ldr	r3, [pc, #832]	; (8001e08 <HAL_RCC_OscConfig+0x650>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00b      	beq.n	8001aea <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ad2:	4bcd      	ldr	r3, [pc, #820]	; (8001e08 <HAL_RCC_OscConfig+0x650>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 030c 	and.w	r3, r3, #12
 8001ada:	2b08      	cmp	r3, #8
 8001adc:	d16c      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x400>
 8001ade:	4bca      	ldr	r3, [pc, #808]	; (8001e08 <HAL_RCC_OscConfig+0x650>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d166      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x400>
 8001aea:	2302      	movs	r3, #2
 8001aec:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001af4:	fa93 f3a3 	rbit	r3, r3
 8001af8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001afc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b00:	fab3 f383 	clz	r3, r3
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	095b      	lsrs	r3, r3, #5
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d102      	bne.n	8001b1a <HAL_RCC_OscConfig+0x362>
 8001b14:	4bbc      	ldr	r3, [pc, #752]	; (8001e08 <HAL_RCC_OscConfig+0x650>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	e013      	b.n	8001b42 <HAL_RCC_OscConfig+0x38a>
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b20:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001b24:	fa93 f3a3 	rbit	r3, r3
 8001b28:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001b32:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001b36:	fa93 f3a3 	rbit	r3, r3
 8001b3a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001b3e:	4bb2      	ldr	r3, [pc, #712]	; (8001e08 <HAL_RCC_OscConfig+0x650>)
 8001b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b42:	2202      	movs	r2, #2
 8001b44:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001b48:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001b4c:	fa92 f2a2 	rbit	r2, r2
 8001b50:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001b54:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001b58:	fab2 f282 	clz	r2, r2
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	f042 0220 	orr.w	r2, r2, #32
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	f002 021f 	and.w	r2, r2, #31
 8001b68:	2101      	movs	r1, #1
 8001b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d007      	beq.n	8001b84 <HAL_RCC_OscConfig+0x3cc>
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d002      	beq.n	8001b84 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	f000 bd1b 	b.w	80025ba <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b84:	4ba0      	ldr	r3, [pc, #640]	; (8001e08 <HAL_RCC_OscConfig+0x650>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	21f8      	movs	r1, #248	; 0xf8
 8001b94:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b98:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001b9c:	fa91 f1a1 	rbit	r1, r1
 8001ba0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001ba4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001ba8:	fab1 f181 	clz	r1, r1
 8001bac:	b2c9      	uxtb	r1, r1
 8001bae:	408b      	lsls	r3, r1
 8001bb0:	4995      	ldr	r1, [pc, #596]	; (8001e08 <HAL_RCC_OscConfig+0x650>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb6:	e0f5      	b.n	8001da4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 8085 	beq.w	8001cce <HAL_RCC_OscConfig+0x516>
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bca:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001bce:	fa93 f3a3 	rbit	r3, r3
 8001bd2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001bd6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bda:	fab3 f383 	clz	r3, r3
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001be4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	461a      	mov	r2, r3
 8001bec:	2301      	movs	r3, #1
 8001bee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf0:	f7ff fb4a 	bl	8001288 <HAL_GetTick>
 8001bf4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf8:	e00a      	b.n	8001c10 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bfa:	f7ff fb45 	bl	8001288 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d902      	bls.n	8001c10 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	f000 bcd5 	b.w	80025ba <HAL_RCC_OscConfig+0xe02>
 8001c10:	2302      	movs	r3, #2
 8001c12:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c16:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001c1a:	fa93 f3a3 	rbit	r3, r3
 8001c1e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001c22:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c26:	fab3 f383 	clz	r3, r3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	095b      	lsrs	r3, r3, #5
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d102      	bne.n	8001c40 <HAL_RCC_OscConfig+0x488>
 8001c3a:	4b73      	ldr	r3, [pc, #460]	; (8001e08 <HAL_RCC_OscConfig+0x650>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	e013      	b.n	8001c68 <HAL_RCC_OscConfig+0x4b0>
 8001c40:	2302      	movs	r3, #2
 8001c42:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c46:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001c4a:	fa93 f3a3 	rbit	r3, r3
 8001c4e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001c52:	2302      	movs	r3, #2
 8001c54:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001c58:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001c5c:	fa93 f3a3 	rbit	r3, r3
 8001c60:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001c64:	4b68      	ldr	r3, [pc, #416]	; (8001e08 <HAL_RCC_OscConfig+0x650>)
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	2202      	movs	r2, #2
 8001c6a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001c6e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001c72:	fa92 f2a2 	rbit	r2, r2
 8001c76:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001c7a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001c7e:	fab2 f282 	clz	r2, r2
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	f042 0220 	orr.w	r2, r2, #32
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	f002 021f 	and.w	r2, r2, #31
 8001c8e:	2101      	movs	r1, #1
 8001c90:	fa01 f202 	lsl.w	r2, r1, r2
 8001c94:	4013      	ands	r3, r2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0af      	beq.n	8001bfa <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9a:	4b5b      	ldr	r3, [pc, #364]	; (8001e08 <HAL_RCC_OscConfig+0x650>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ca2:	1d3b      	adds	r3, r7, #4
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	21f8      	movs	r1, #248	; 0xf8
 8001caa:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cae:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001cb2:	fa91 f1a1 	rbit	r1, r1
 8001cb6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001cba:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001cbe:	fab1 f181 	clz	r1, r1
 8001cc2:	b2c9      	uxtb	r1, r1
 8001cc4:	408b      	lsls	r3, r1
 8001cc6:	4950      	ldr	r1, [pc, #320]	; (8001e08 <HAL_RCC_OscConfig+0x650>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	600b      	str	r3, [r1, #0]
 8001ccc:	e06a      	b.n	8001da4 <HAL_RCC_OscConfig+0x5ec>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001cd8:	fa93 f3a3 	rbit	r3, r3
 8001cdc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001ce0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ce4:	fab3 f383 	clz	r3, r3
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfa:	f7ff fac5 	bl	8001288 <HAL_GetTick>
 8001cfe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d02:	e00a      	b.n	8001d1a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d04:	f7ff fac0 	bl	8001288 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d902      	bls.n	8001d1a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	f000 bc50 	b.w	80025ba <HAL_RCC_OscConfig+0xe02>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d20:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001d24:	fa93 f3a3 	rbit	r3, r3
 8001d28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001d2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d30:	fab3 f383 	clz	r3, r3
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	095b      	lsrs	r3, r3, #5
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d102      	bne.n	8001d4a <HAL_RCC_OscConfig+0x592>
 8001d44:	4b30      	ldr	r3, [pc, #192]	; (8001e08 <HAL_RCC_OscConfig+0x650>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	e013      	b.n	8001d72 <HAL_RCC_OscConfig+0x5ba>
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001d54:	fa93 f3a3 	rbit	r3, r3
 8001d58:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001d62:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001d66:	fa93 f3a3 	rbit	r3, r3
 8001d6a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001d6e:	4b26      	ldr	r3, [pc, #152]	; (8001e08 <HAL_RCC_OscConfig+0x650>)
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	2202      	movs	r2, #2
 8001d74:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001d78:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001d7c:	fa92 f2a2 	rbit	r2, r2
 8001d80:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001d84:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001d88:	fab2 f282 	clz	r2, r2
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	f042 0220 	orr.w	r2, r2, #32
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	f002 021f 	and.w	r2, r2, #31
 8001d98:	2101      	movs	r1, #1
 8001d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d9e:	4013      	ands	r3, r2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1af      	bne.n	8001d04 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001da4:	1d3b      	adds	r3, r7, #4
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 80da 	beq.w	8001f68 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001db4:	1d3b      	adds	r3, r7, #4
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d069      	beq.n	8001e92 <HAL_RCC_OscConfig+0x6da>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001dc8:	fa93 f3a3 	rbit	r3, r3
 8001dcc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001dd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dd4:	fab3 f383 	clz	r3, r3
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <HAL_RCC_OscConfig+0x654>)
 8001dde:	4413      	add	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	461a      	mov	r2, r3
 8001de4:	2301      	movs	r3, #1
 8001de6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de8:	f7ff fa4e 	bl	8001288 <HAL_GetTick>
 8001dec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df0:	e00e      	b.n	8001e10 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001df2:	f7ff fa49 	bl	8001288 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d906      	bls.n	8001e10 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e3d9      	b.n	80025ba <HAL_RCC_OscConfig+0xe02>
 8001e06:	bf00      	nop
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	10908120 	.word	0x10908120
 8001e10:	2302      	movs	r3, #2
 8001e12:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e16:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001e1a:	fa93 f3a3 	rbit	r3, r3
 8001e1e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001e22:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001e26:	2202      	movs	r2, #2
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	fa93 f2a3 	rbit	r2, r3
 8001e34:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001e3e:	2202      	movs	r2, #2
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	fa93 f2a3 	rbit	r2, r3
 8001e4c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001e50:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e52:	4ba5      	ldr	r3, [pc, #660]	; (80020e8 <HAL_RCC_OscConfig+0x930>)
 8001e54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e56:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001e5a:	2102      	movs	r1, #2
 8001e5c:	6019      	str	r1, [r3, #0]
 8001e5e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	fa93 f1a3 	rbit	r1, r3
 8001e68:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001e6c:	6019      	str	r1, [r3, #0]
  return result;
 8001e6e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	fab3 f383 	clz	r3, r3
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	f003 031f 	and.w	r3, r3, #31
 8001e84:	2101      	movs	r1, #1
 8001e86:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0b0      	beq.n	8001df2 <HAL_RCC_OscConfig+0x63a>
 8001e90:	e06a      	b.n	8001f68 <HAL_RCC_OscConfig+0x7b0>
 8001e92:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e96:	2201      	movs	r2, #1
 8001e98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	fa93 f2a3 	rbit	r2, r3
 8001ea4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ea8:	601a      	str	r2, [r3, #0]
  return result;
 8001eaa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001eae:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eb0:	fab3 f383 	clz	r3, r3
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	4b8c      	ldr	r3, [pc, #560]	; (80020ec <HAL_RCC_OscConfig+0x934>)
 8001eba:	4413      	add	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec4:	f7ff f9e0 	bl	8001288 <HAL_GetTick>
 8001ec8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ecc:	e009      	b.n	8001ee2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ece:	f7ff f9db 	bl	8001288 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e36b      	b.n	80025ba <HAL_RCC_OscConfig+0xe02>
 8001ee2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eea:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	fa93 f2a3 	rbit	r2, r3
 8001ef4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001efe:	2202      	movs	r2, #2
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	fa93 f2a3 	rbit	r2, r3
 8001f0c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001f16:	2202      	movs	r2, #2
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	fa93 f2a3 	rbit	r2, r3
 8001f24:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f28:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f2a:	4b6f      	ldr	r3, [pc, #444]	; (80020e8 <HAL_RCC_OscConfig+0x930>)
 8001f2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f2e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f32:	2102      	movs	r1, #2
 8001f34:	6019      	str	r1, [r3, #0]
 8001f36:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	fa93 f1a3 	rbit	r1, r3
 8001f40:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001f44:	6019      	str	r1, [r3, #0]
  return result;
 8001f46:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	fab3 f383 	clz	r3, r3
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	f003 031f 	and.w	r3, r3, #31
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	4013      	ands	r3, r2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1b2      	bne.n	8001ece <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f68:	1d3b      	adds	r3, r7, #4
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 8158 	beq.w	8002228 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f7e:	4b5a      	ldr	r3, [pc, #360]	; (80020e8 <HAL_RCC_OscConfig+0x930>)
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d112      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f8a:	4b57      	ldr	r3, [pc, #348]	; (80020e8 <HAL_RCC_OscConfig+0x930>)
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	4a56      	ldr	r2, [pc, #344]	; (80020e8 <HAL_RCC_OscConfig+0x930>)
 8001f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f94:	61d3      	str	r3, [r2, #28]
 8001f96:	4b54      	ldr	r3, [pc, #336]	; (80020e8 <HAL_RCC_OscConfig+0x930>)
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001f9e:	f107 0308 	add.w	r3, r7, #8
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	f107 0308 	add.w	r3, r7, #8
 8001fa8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001faa:	2301      	movs	r3, #1
 8001fac:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb0:	4b4f      	ldr	r3, [pc, #316]	; (80020f0 <HAL_RCC_OscConfig+0x938>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d11a      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fbc:	4b4c      	ldr	r3, [pc, #304]	; (80020f0 <HAL_RCC_OscConfig+0x938>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a4b      	ldr	r2, [pc, #300]	; (80020f0 <HAL_RCC_OscConfig+0x938>)
 8001fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fc8:	f7ff f95e 	bl	8001288 <HAL_GetTick>
 8001fcc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd0:	e009      	b.n	8001fe6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd2:	f7ff f959 	bl	8001288 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b64      	cmp	r3, #100	; 0x64
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e2e9      	b.n	80025ba <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe6:	4b42      	ldr	r3, [pc, #264]	; (80020f0 <HAL_RCC_OscConfig+0x938>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0ef      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff2:	1d3b      	adds	r3, r7, #4
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d106      	bne.n	800200a <HAL_RCC_OscConfig+0x852>
 8001ffc:	4b3a      	ldr	r3, [pc, #232]	; (80020e8 <HAL_RCC_OscConfig+0x930>)
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	4a39      	ldr	r2, [pc, #228]	; (80020e8 <HAL_RCC_OscConfig+0x930>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	6213      	str	r3, [r2, #32]
 8002008:	e02f      	b.n	800206a <HAL_RCC_OscConfig+0x8b2>
 800200a:	1d3b      	adds	r3, r7, #4
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d10c      	bne.n	800202e <HAL_RCC_OscConfig+0x876>
 8002014:	4b34      	ldr	r3, [pc, #208]	; (80020e8 <HAL_RCC_OscConfig+0x930>)
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	4a33      	ldr	r2, [pc, #204]	; (80020e8 <HAL_RCC_OscConfig+0x930>)
 800201a:	f023 0301 	bic.w	r3, r3, #1
 800201e:	6213      	str	r3, [r2, #32]
 8002020:	4b31      	ldr	r3, [pc, #196]	; (80020e8 <HAL_RCC_OscConfig+0x930>)
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	4a30      	ldr	r2, [pc, #192]	; (80020e8 <HAL_RCC_OscConfig+0x930>)
 8002026:	f023 0304 	bic.w	r3, r3, #4
 800202a:	6213      	str	r3, [r2, #32]
 800202c:	e01d      	b.n	800206a <HAL_RCC_OscConfig+0x8b2>
 800202e:	1d3b      	adds	r3, r7, #4
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	2b05      	cmp	r3, #5
 8002036:	d10c      	bne.n	8002052 <HAL_RCC_OscConfig+0x89a>
 8002038:	4b2b      	ldr	r3, [pc, #172]	; (80020e8 <HAL_RCC_OscConfig+0x930>)
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	4a2a      	ldr	r2, [pc, #168]	; (80020e8 <HAL_RCC_OscConfig+0x930>)
 800203e:	f043 0304 	orr.w	r3, r3, #4
 8002042:	6213      	str	r3, [r2, #32]
 8002044:	4b28      	ldr	r3, [pc, #160]	; (80020e8 <HAL_RCC_OscConfig+0x930>)
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	4a27      	ldr	r2, [pc, #156]	; (80020e8 <HAL_RCC_OscConfig+0x930>)
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	6213      	str	r3, [r2, #32]
 8002050:	e00b      	b.n	800206a <HAL_RCC_OscConfig+0x8b2>
 8002052:	4b25      	ldr	r3, [pc, #148]	; (80020e8 <HAL_RCC_OscConfig+0x930>)
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	4a24      	ldr	r2, [pc, #144]	; (80020e8 <HAL_RCC_OscConfig+0x930>)
 8002058:	f023 0301 	bic.w	r3, r3, #1
 800205c:	6213      	str	r3, [r2, #32]
 800205e:	4b22      	ldr	r3, [pc, #136]	; (80020e8 <HAL_RCC_OscConfig+0x930>)
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	4a21      	ldr	r2, [pc, #132]	; (80020e8 <HAL_RCC_OscConfig+0x930>)
 8002064:	f023 0304 	bic.w	r3, r3, #4
 8002068:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800206a:	1d3b      	adds	r3, r7, #4
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d06b      	beq.n	800214c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002074:	f7ff f908 	bl	8001288 <HAL_GetTick>
 8002078:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800207c:	e00b      	b.n	8002096 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800207e:	f7ff f903 	bl	8001288 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	f241 3288 	movw	r2, #5000	; 0x1388
 800208e:	4293      	cmp	r3, r2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e291      	b.n	80025ba <HAL_RCC_OscConfig+0xe02>
 8002096:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800209a:	2202      	movs	r2, #2
 800209c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	fa93 f2a3 	rbit	r2, r3
 80020a8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80020b2:	2202      	movs	r2, #2
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	fa93 f2a3 	rbit	r2, r3
 80020c0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80020c4:	601a      	str	r2, [r3, #0]
  return result;
 80020c6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80020ca:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020cc:	fab3 f383 	clz	r3, r3
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	095b      	lsrs	r3, r3, #5
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	f043 0302 	orr.w	r3, r3, #2
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d109      	bne.n	80020f4 <HAL_RCC_OscConfig+0x93c>
 80020e0:	4b01      	ldr	r3, [pc, #4]	; (80020e8 <HAL_RCC_OscConfig+0x930>)
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	e014      	b.n	8002110 <HAL_RCC_OscConfig+0x958>
 80020e6:	bf00      	nop
 80020e8:	40021000 	.word	0x40021000
 80020ec:	10908120 	.word	0x10908120
 80020f0:	40007000 	.word	0x40007000
 80020f4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80020f8:	2202      	movs	r2, #2
 80020fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	fa93 f2a3 	rbit	r2, r3
 8002106:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	4bbb      	ldr	r3, [pc, #748]	; (80023fc <HAL_RCC_OscConfig+0xc44>)
 800210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002110:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002114:	2102      	movs	r1, #2
 8002116:	6011      	str	r1, [r2, #0]
 8002118:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800211c:	6812      	ldr	r2, [r2, #0]
 800211e:	fa92 f1a2 	rbit	r1, r2
 8002122:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002126:	6011      	str	r1, [r2, #0]
  return result;
 8002128:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800212c:	6812      	ldr	r2, [r2, #0]
 800212e:	fab2 f282 	clz	r2, r2
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	f002 021f 	and.w	r2, r2, #31
 800213e:	2101      	movs	r1, #1
 8002140:	fa01 f202 	lsl.w	r2, r1, r2
 8002144:	4013      	ands	r3, r2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d099      	beq.n	800207e <HAL_RCC_OscConfig+0x8c6>
 800214a:	e063      	b.n	8002214 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800214c:	f7ff f89c 	bl	8001288 <HAL_GetTick>
 8002150:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002154:	e00b      	b.n	800216e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002156:	f7ff f897 	bl	8001288 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	f241 3288 	movw	r2, #5000	; 0x1388
 8002166:	4293      	cmp	r3, r2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e225      	b.n	80025ba <HAL_RCC_OscConfig+0xe02>
 800216e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002172:	2202      	movs	r2, #2
 8002174:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002176:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	fa93 f2a3 	rbit	r2, r3
 8002180:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800218a:	2202      	movs	r2, #2
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	fa93 f2a3 	rbit	r2, r3
 8002198:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800219c:	601a      	str	r2, [r3, #0]
  return result;
 800219e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80021a2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a4:	fab3 f383 	clz	r3, r3
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	095b      	lsrs	r3, r3, #5
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	f043 0302 	orr.w	r3, r3, #2
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d102      	bne.n	80021be <HAL_RCC_OscConfig+0xa06>
 80021b8:	4b90      	ldr	r3, [pc, #576]	; (80023fc <HAL_RCC_OscConfig+0xc44>)
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	e00d      	b.n	80021da <HAL_RCC_OscConfig+0xa22>
 80021be:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80021c2:	2202      	movs	r2, #2
 80021c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	fa93 f2a3 	rbit	r2, r3
 80021d0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	4b89      	ldr	r3, [pc, #548]	; (80023fc <HAL_RCC_OscConfig+0xc44>)
 80021d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021da:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80021de:	2102      	movs	r1, #2
 80021e0:	6011      	str	r1, [r2, #0]
 80021e2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80021e6:	6812      	ldr	r2, [r2, #0]
 80021e8:	fa92 f1a2 	rbit	r1, r2
 80021ec:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80021f0:	6011      	str	r1, [r2, #0]
  return result;
 80021f2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	fab2 f282 	clz	r2, r2
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	f002 021f 	and.w	r2, r2, #31
 8002208:	2101      	movs	r1, #1
 800220a:	fa01 f202 	lsl.w	r2, r1, r2
 800220e:	4013      	ands	r3, r2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1a0      	bne.n	8002156 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002214:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002218:	2b01      	cmp	r3, #1
 800221a:	d105      	bne.n	8002228 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800221c:	4b77      	ldr	r3, [pc, #476]	; (80023fc <HAL_RCC_OscConfig+0xc44>)
 800221e:	69db      	ldr	r3, [r3, #28]
 8002220:	4a76      	ldr	r2, [pc, #472]	; (80023fc <HAL_RCC_OscConfig+0xc44>)
 8002222:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002226:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002228:	1d3b      	adds	r3, r7, #4
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 81c2 	beq.w	80025b8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002234:	4b71      	ldr	r3, [pc, #452]	; (80023fc <HAL_RCC_OscConfig+0xc44>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 030c 	and.w	r3, r3, #12
 800223c:	2b08      	cmp	r3, #8
 800223e:	f000 819c 	beq.w	800257a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002242:	1d3b      	adds	r3, r7, #4
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	2b02      	cmp	r3, #2
 800224a:	f040 8114 	bne.w	8002476 <HAL_RCC_OscConfig+0xcbe>
 800224e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002252:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002256:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002258:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	fa93 f2a3 	rbit	r2, r3
 8002262:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002266:	601a      	str	r2, [r3, #0]
  return result;
 8002268:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800226c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800226e:	fab3 f383 	clz	r3, r3
 8002272:	b2db      	uxtb	r3, r3
 8002274:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002278:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	461a      	mov	r2, r3
 8002280:	2300      	movs	r3, #0
 8002282:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002284:	f7ff f800 	bl	8001288 <HAL_GetTick>
 8002288:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800228c:	e009      	b.n	80022a2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800228e:	f7fe fffb 	bl	8001288 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e18b      	b.n	80025ba <HAL_RCC_OscConfig+0xe02>
 80022a2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80022a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ac:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	fa93 f2a3 	rbit	r2, r3
 80022b6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80022ba:	601a      	str	r2, [r3, #0]
  return result;
 80022bc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80022c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c2:	fab3 f383 	clz	r3, r3
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	095b      	lsrs	r3, r3, #5
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d102      	bne.n	80022dc <HAL_RCC_OscConfig+0xb24>
 80022d6:	4b49      	ldr	r3, [pc, #292]	; (80023fc <HAL_RCC_OscConfig+0xc44>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	e01b      	b.n	8002314 <HAL_RCC_OscConfig+0xb5c>
 80022dc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80022e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	fa93 f2a3 	rbit	r2, r3
 80022f0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80022fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	fa93 f2a3 	rbit	r2, r3
 800230a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	4b3a      	ldr	r3, [pc, #232]	; (80023fc <HAL_RCC_OscConfig+0xc44>)
 8002312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002314:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002318:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800231c:	6011      	str	r1, [r2, #0]
 800231e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	fa92 f1a2 	rbit	r1, r2
 8002328:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800232c:	6011      	str	r1, [r2, #0]
  return result;
 800232e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002332:	6812      	ldr	r2, [r2, #0]
 8002334:	fab2 f282 	clz	r2, r2
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	f042 0220 	orr.w	r2, r2, #32
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	f002 021f 	and.w	r2, r2, #31
 8002344:	2101      	movs	r1, #1
 8002346:	fa01 f202 	lsl.w	r2, r1, r2
 800234a:	4013      	ands	r3, r2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d19e      	bne.n	800228e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002350:	4b2a      	ldr	r3, [pc, #168]	; (80023fc <HAL_RCC_OscConfig+0xc44>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002358:	1d3b      	adds	r3, r7, #4
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800235e:	1d3b      	adds	r3, r7, #4
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	430b      	orrs	r3, r1
 8002366:	4925      	ldr	r1, [pc, #148]	; (80023fc <HAL_RCC_OscConfig+0xc44>)
 8002368:	4313      	orrs	r3, r2
 800236a:	604b      	str	r3, [r1, #4]
 800236c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002370:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002374:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002376:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	fa93 f2a3 	rbit	r2, r3
 8002380:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002384:	601a      	str	r2, [r3, #0]
  return result;
 8002386:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800238a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800238c:	fab3 f383 	clz	r3, r3
 8002390:	b2db      	uxtb	r3, r3
 8002392:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002396:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	461a      	mov	r2, r3
 800239e:	2301      	movs	r3, #1
 80023a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a2:	f7fe ff71 	bl	8001288 <HAL_GetTick>
 80023a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023aa:	e009      	b.n	80023c0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ac:	f7fe ff6c 	bl	8001288 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e0fc      	b.n	80025ba <HAL_RCC_OscConfig+0xe02>
 80023c0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80023c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	fa93 f2a3 	rbit	r2, r3
 80023d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80023d8:	601a      	str	r2, [r3, #0]
  return result;
 80023da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80023de:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023e0:	fab3 f383 	clz	r3, r3
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d105      	bne.n	8002400 <HAL_RCC_OscConfig+0xc48>
 80023f4:	4b01      	ldr	r3, [pc, #4]	; (80023fc <HAL_RCC_OscConfig+0xc44>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	e01e      	b.n	8002438 <HAL_RCC_OscConfig+0xc80>
 80023fa:	bf00      	nop
 80023fc:	40021000 	.word	0x40021000
 8002400:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002404:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002408:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	fa93 f2a3 	rbit	r2, r3
 8002414:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800241e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	fa93 f2a3 	rbit	r2, r3
 800242e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	4b63      	ldr	r3, [pc, #396]	; (80025c4 <HAL_RCC_OscConfig+0xe0c>)
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800243c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002440:	6011      	str	r1, [r2, #0]
 8002442:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	fa92 f1a2 	rbit	r1, r2
 800244c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002450:	6011      	str	r1, [r2, #0]
  return result;
 8002452:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002456:	6812      	ldr	r2, [r2, #0]
 8002458:	fab2 f282 	clz	r2, r2
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	f042 0220 	orr.w	r2, r2, #32
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	f002 021f 	and.w	r2, r2, #31
 8002468:	2101      	movs	r1, #1
 800246a:	fa01 f202 	lsl.w	r2, r1, r2
 800246e:	4013      	ands	r3, r2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d09b      	beq.n	80023ac <HAL_RCC_OscConfig+0xbf4>
 8002474:	e0a0      	b.n	80025b8 <HAL_RCC_OscConfig+0xe00>
 8002476:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800247a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800247e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002480:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	fa93 f2a3 	rbit	r2, r3
 800248a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800248e:	601a      	str	r2, [r3, #0]
  return result;
 8002490:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002494:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002496:	fab3 f383 	clz	r3, r3
 800249a:	b2db      	uxtb	r3, r3
 800249c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	461a      	mov	r2, r3
 80024a8:	2300      	movs	r3, #0
 80024aa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ac:	f7fe feec 	bl	8001288 <HAL_GetTick>
 80024b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b4:	e009      	b.n	80024ca <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b6:	f7fe fee7 	bl	8001288 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e077      	b.n	80025ba <HAL_RCC_OscConfig+0xe02>
 80024ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	fa93 f2a3 	rbit	r2, r3
 80024de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024e2:	601a      	str	r2, [r3, #0]
  return result;
 80024e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024e8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ea:	fab3 f383 	clz	r3, r3
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	095b      	lsrs	r3, r3, #5
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d102      	bne.n	8002504 <HAL_RCC_OscConfig+0xd4c>
 80024fe:	4b31      	ldr	r3, [pc, #196]	; (80025c4 <HAL_RCC_OscConfig+0xe0c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	e01b      	b.n	800253c <HAL_RCC_OscConfig+0xd84>
 8002504:	f107 0320 	add.w	r3, r7, #32
 8002508:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800250c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	f107 0320 	add.w	r3, r7, #32
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	fa93 f2a3 	rbit	r2, r3
 8002518:	f107 031c 	add.w	r3, r7, #28
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	f107 0318 	add.w	r3, r7, #24
 8002522:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	f107 0318 	add.w	r3, r7, #24
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	fa93 f2a3 	rbit	r2, r3
 8002532:	f107 0314 	add.w	r3, r7, #20
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	4b22      	ldr	r3, [pc, #136]	; (80025c4 <HAL_RCC_OscConfig+0xe0c>)
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	f107 0210 	add.w	r2, r7, #16
 8002540:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002544:	6011      	str	r1, [r2, #0]
 8002546:	f107 0210 	add.w	r2, r7, #16
 800254a:	6812      	ldr	r2, [r2, #0]
 800254c:	fa92 f1a2 	rbit	r1, r2
 8002550:	f107 020c 	add.w	r2, r7, #12
 8002554:	6011      	str	r1, [r2, #0]
  return result;
 8002556:	f107 020c 	add.w	r2, r7, #12
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	fab2 f282 	clz	r2, r2
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	f042 0220 	orr.w	r2, r2, #32
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	f002 021f 	and.w	r2, r2, #31
 800256c:	2101      	movs	r1, #1
 800256e:	fa01 f202 	lsl.w	r2, r1, r2
 8002572:	4013      	ands	r3, r2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d19e      	bne.n	80024b6 <HAL_RCC_OscConfig+0xcfe>
 8002578:	e01e      	b.n	80025b8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800257a:	1d3b      	adds	r3, r7, #4
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	69db      	ldr	r3, [r3, #28]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e018      	b.n	80025ba <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002588:	4b0e      	ldr	r3, [pc, #56]	; (80025c4 <HAL_RCC_OscConfig+0xe0c>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002590:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002594:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002598:	1d3b      	adds	r3, r7, #4
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d108      	bne.n	80025b4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80025a2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80025a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025aa:	1d3b      	adds	r3, r7, #4
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d001      	beq.n	80025b8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e000      	b.n	80025ba <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40021000 	.word	0x40021000

080025c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b09e      	sub	sp, #120	; 0x78
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e162      	b.n	80028a6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025e0:	4b90      	ldr	r3, [pc, #576]	; (8002824 <HAL_RCC_ClockConfig+0x25c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d910      	bls.n	8002610 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ee:	4b8d      	ldr	r3, [pc, #564]	; (8002824 <HAL_RCC_ClockConfig+0x25c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f023 0207 	bic.w	r2, r3, #7
 80025f6:	498b      	ldr	r1, [pc, #556]	; (8002824 <HAL_RCC_ClockConfig+0x25c>)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fe:	4b89      	ldr	r3, [pc, #548]	; (8002824 <HAL_RCC_ClockConfig+0x25c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	429a      	cmp	r2, r3
 800260a:	d001      	beq.n	8002610 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e14a      	b.n	80028a6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d008      	beq.n	800262e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800261c:	4b82      	ldr	r3, [pc, #520]	; (8002828 <HAL_RCC_ClockConfig+0x260>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	497f      	ldr	r1, [pc, #508]	; (8002828 <HAL_RCC_ClockConfig+0x260>)
 800262a:	4313      	orrs	r3, r2
 800262c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 80dc 	beq.w	80027f4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d13c      	bne.n	80026be <HAL_RCC_ClockConfig+0xf6>
 8002644:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002648:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800264c:	fa93 f3a3 	rbit	r3, r3
 8002650:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002654:	fab3 f383 	clz	r3, r3
 8002658:	b2db      	uxtb	r3, r3
 800265a:	095b      	lsrs	r3, r3, #5
 800265c:	b2db      	uxtb	r3, r3
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b01      	cmp	r3, #1
 8002666:	d102      	bne.n	800266e <HAL_RCC_ClockConfig+0xa6>
 8002668:	4b6f      	ldr	r3, [pc, #444]	; (8002828 <HAL_RCC_ClockConfig+0x260>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	e00f      	b.n	800268e <HAL_RCC_ClockConfig+0xc6>
 800266e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002672:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002674:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002676:	fa93 f3a3 	rbit	r3, r3
 800267a:	667b      	str	r3, [r7, #100]	; 0x64
 800267c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002680:	663b      	str	r3, [r7, #96]	; 0x60
 8002682:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002684:	fa93 f3a3 	rbit	r3, r3
 8002688:	65fb      	str	r3, [r7, #92]	; 0x5c
 800268a:	4b67      	ldr	r3, [pc, #412]	; (8002828 <HAL_RCC_ClockConfig+0x260>)
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002692:	65ba      	str	r2, [r7, #88]	; 0x58
 8002694:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002696:	fa92 f2a2 	rbit	r2, r2
 800269a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800269c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800269e:	fab2 f282 	clz	r2, r2
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	f042 0220 	orr.w	r2, r2, #32
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	f002 021f 	and.w	r2, r2, #31
 80026ae:	2101      	movs	r1, #1
 80026b0:	fa01 f202 	lsl.w	r2, r1, r2
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d17b      	bne.n	80027b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e0f3      	b.n	80028a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d13c      	bne.n	8002740 <HAL_RCC_ClockConfig+0x178>
 80026c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026ce:	fa93 f3a3 	rbit	r3, r3
 80026d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80026d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d6:	fab3 f383 	clz	r3, r3
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	095b      	lsrs	r3, r3, #5
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d102      	bne.n	80026f0 <HAL_RCC_ClockConfig+0x128>
 80026ea:	4b4f      	ldr	r3, [pc, #316]	; (8002828 <HAL_RCC_ClockConfig+0x260>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	e00f      	b.n	8002710 <HAL_RCC_ClockConfig+0x148>
 80026f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026f4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026f8:	fa93 f3a3 	rbit	r3, r3
 80026fc:	647b      	str	r3, [r7, #68]	; 0x44
 80026fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002702:	643b      	str	r3, [r7, #64]	; 0x40
 8002704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002706:	fa93 f3a3 	rbit	r3, r3
 800270a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800270c:	4b46      	ldr	r3, [pc, #280]	; (8002828 <HAL_RCC_ClockConfig+0x260>)
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002714:	63ba      	str	r2, [r7, #56]	; 0x38
 8002716:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002718:	fa92 f2a2 	rbit	r2, r2
 800271c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800271e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002720:	fab2 f282 	clz	r2, r2
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	f042 0220 	orr.w	r2, r2, #32
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	f002 021f 	and.w	r2, r2, #31
 8002730:	2101      	movs	r1, #1
 8002732:	fa01 f202 	lsl.w	r2, r1, r2
 8002736:	4013      	ands	r3, r2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d13a      	bne.n	80027b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0b2      	b.n	80028a6 <HAL_RCC_ClockConfig+0x2de>
 8002740:	2302      	movs	r3, #2
 8002742:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002746:	fa93 f3a3 	rbit	r3, r3
 800274a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800274c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274e:	fab3 f383 	clz	r3, r3
 8002752:	b2db      	uxtb	r3, r3
 8002754:	095b      	lsrs	r3, r3, #5
 8002756:	b2db      	uxtb	r3, r3
 8002758:	f043 0301 	orr.w	r3, r3, #1
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b01      	cmp	r3, #1
 8002760:	d102      	bne.n	8002768 <HAL_RCC_ClockConfig+0x1a0>
 8002762:	4b31      	ldr	r3, [pc, #196]	; (8002828 <HAL_RCC_ClockConfig+0x260>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	e00d      	b.n	8002784 <HAL_RCC_ClockConfig+0x1bc>
 8002768:	2302      	movs	r3, #2
 800276a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276e:	fa93 f3a3 	rbit	r3, r3
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
 8002774:	2302      	movs	r3, #2
 8002776:	623b      	str	r3, [r7, #32]
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	fa93 f3a3 	rbit	r3, r3
 800277e:	61fb      	str	r3, [r7, #28]
 8002780:	4b29      	ldr	r3, [pc, #164]	; (8002828 <HAL_RCC_ClockConfig+0x260>)
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	2202      	movs	r2, #2
 8002786:	61ba      	str	r2, [r7, #24]
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	fa92 f2a2 	rbit	r2, r2
 800278e:	617a      	str	r2, [r7, #20]
  return result;
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	fab2 f282 	clz	r2, r2
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	f042 0220 	orr.w	r2, r2, #32
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	f002 021f 	and.w	r2, r2, #31
 80027a2:	2101      	movs	r1, #1
 80027a4:	fa01 f202 	lsl.w	r2, r1, r2
 80027a8:	4013      	ands	r3, r2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e079      	b.n	80028a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027b2:	4b1d      	ldr	r3, [pc, #116]	; (8002828 <HAL_RCC_ClockConfig+0x260>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f023 0203 	bic.w	r2, r3, #3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	491a      	ldr	r1, [pc, #104]	; (8002828 <HAL_RCC_ClockConfig+0x260>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027c4:	f7fe fd60 	bl	8001288 <HAL_GetTick>
 80027c8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ca:	e00a      	b.n	80027e2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027cc:	f7fe fd5c 	bl	8001288 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027da:	4293      	cmp	r3, r2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e061      	b.n	80028a6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e2:	4b11      	ldr	r3, [pc, #68]	; (8002828 <HAL_RCC_ClockConfig+0x260>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f003 020c 	and.w	r2, r3, #12
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d1eb      	bne.n	80027cc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027f4:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <HAL_RCC_ClockConfig+0x25c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d214      	bcs.n	800282c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002802:	4b08      	ldr	r3, [pc, #32]	; (8002824 <HAL_RCC_ClockConfig+0x25c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f023 0207 	bic.w	r2, r3, #7
 800280a:	4906      	ldr	r1, [pc, #24]	; (8002824 <HAL_RCC_ClockConfig+0x25c>)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	4313      	orrs	r3, r2
 8002810:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002812:	4b04      	ldr	r3, [pc, #16]	; (8002824 <HAL_RCC_ClockConfig+0x25c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d005      	beq.n	800282c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e040      	b.n	80028a6 <HAL_RCC_ClockConfig+0x2de>
 8002824:	40022000 	.word	0x40022000
 8002828:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d008      	beq.n	800284a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002838:	4b1d      	ldr	r3, [pc, #116]	; (80028b0 <HAL_RCC_ClockConfig+0x2e8>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	491a      	ldr	r1, [pc, #104]	; (80028b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002846:	4313      	orrs	r3, r2
 8002848:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d009      	beq.n	800286a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002856:	4b16      	ldr	r3, [pc, #88]	; (80028b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4912      	ldr	r1, [pc, #72]	; (80028b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002866:	4313      	orrs	r3, r2
 8002868:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800286a:	f000 f829 	bl	80028c0 <HAL_RCC_GetSysClockFreq>
 800286e:	4601      	mov	r1, r0
 8002870:	4b0f      	ldr	r3, [pc, #60]	; (80028b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002878:	22f0      	movs	r2, #240	; 0xf0
 800287a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	fa92 f2a2 	rbit	r2, r2
 8002882:	60fa      	str	r2, [r7, #12]
  return result;
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	fab2 f282 	clz	r2, r2
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	40d3      	lsrs	r3, r2
 800288e:	4a09      	ldr	r2, [pc, #36]	; (80028b4 <HAL_RCC_ClockConfig+0x2ec>)
 8002890:	5cd3      	ldrb	r3, [r2, r3]
 8002892:	fa21 f303 	lsr.w	r3, r1, r3
 8002896:	4a08      	ldr	r2, [pc, #32]	; (80028b8 <HAL_RCC_ClockConfig+0x2f0>)
 8002898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800289a:	4b08      	ldr	r3, [pc, #32]	; (80028bc <HAL_RCC_ClockConfig+0x2f4>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fe fc14 	bl	80010cc <HAL_InitTick>
  
  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3778      	adds	r7, #120	; 0x78
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40021000 	.word	0x40021000
 80028b4:	08007fd0 	.word	0x08007fd0
 80028b8:	20000000 	.word	0x20000000
 80028bc:	20000004 	.word	0x20000004

080028c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b08b      	sub	sp, #44	; 0x2c
 80028c4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028c6:	2300      	movs	r3, #0
 80028c8:	61fb      	str	r3, [r7, #28]
 80028ca:	2300      	movs	r3, #0
 80028cc:	61bb      	str	r3, [r7, #24]
 80028ce:	2300      	movs	r3, #0
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
 80028d2:	2300      	movs	r3, #0
 80028d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80028da:	4b29      	ldr	r3, [pc, #164]	; (8002980 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f003 030c 	and.w	r3, r3, #12
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	d002      	beq.n	80028f0 <HAL_RCC_GetSysClockFreq+0x30>
 80028ea:	2b08      	cmp	r3, #8
 80028ec:	d003      	beq.n	80028f6 <HAL_RCC_GetSysClockFreq+0x36>
 80028ee:	e03c      	b.n	800296a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028f0:	4b24      	ldr	r3, [pc, #144]	; (8002984 <HAL_RCC_GetSysClockFreq+0xc4>)
 80028f2:	623b      	str	r3, [r7, #32]
      break;
 80028f4:	e03c      	b.n	8002970 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80028fc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002900:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	fa92 f2a2 	rbit	r2, r2
 8002908:	607a      	str	r2, [r7, #4]
  return result;
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	fab2 f282 	clz	r2, r2
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	40d3      	lsrs	r3, r2
 8002914:	4a1c      	ldr	r2, [pc, #112]	; (8002988 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002916:	5cd3      	ldrb	r3, [r2, r3]
 8002918:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800291a:	4b19      	ldr	r3, [pc, #100]	; (8002980 <HAL_RCC_GetSysClockFreq+0xc0>)
 800291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	220f      	movs	r2, #15
 8002924:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	fa92 f2a2 	rbit	r2, r2
 800292c:	60fa      	str	r2, [r7, #12]
  return result;
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	fab2 f282 	clz	r2, r2
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	40d3      	lsrs	r3, r2
 8002938:	4a14      	ldr	r2, [pc, #80]	; (800298c <HAL_RCC_GetSysClockFreq+0xcc>)
 800293a:	5cd3      	ldrb	r3, [r2, r3]
 800293c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d008      	beq.n	800295a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002948:	4a0e      	ldr	r2, [pc, #56]	; (8002984 <HAL_RCC_GetSysClockFreq+0xc4>)
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	fb02 f303 	mul.w	r3, r2, r3
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
 8002958:	e004      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	4a0c      	ldr	r2, [pc, #48]	; (8002990 <HAL_RCC_GetSysClockFreq+0xd0>)
 800295e:	fb02 f303 	mul.w	r3, r2, r3
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	623b      	str	r3, [r7, #32]
      break;
 8002968:	e002      	b.n	8002970 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800296a:	4b06      	ldr	r3, [pc, #24]	; (8002984 <HAL_RCC_GetSysClockFreq+0xc4>)
 800296c:	623b      	str	r3, [r7, #32]
      break;
 800296e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002970:	6a3b      	ldr	r3, [r7, #32]
}
 8002972:	4618      	mov	r0, r3
 8002974:	372c      	adds	r7, #44	; 0x2c
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40021000 	.word	0x40021000
 8002984:	007a1200 	.word	0x007a1200
 8002988:	08007fe8 	.word	0x08007fe8
 800298c:	08007ff8 	.word	0x08007ff8
 8002990:	003d0900 	.word	0x003d0900

08002994 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002998:	4b03      	ldr	r3, [pc, #12]	; (80029a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800299a:	681b      	ldr	r3, [r3, #0]
}
 800299c:	4618      	mov	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	20000000 	.word	0x20000000

080029ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80029b2:	f7ff ffef 	bl	8002994 <HAL_RCC_GetHCLKFreq>
 80029b6:	4601      	mov	r1, r0
 80029b8:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029c0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80029c4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	fa92 f2a2 	rbit	r2, r2
 80029cc:	603a      	str	r2, [r7, #0]
  return result;
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	fab2 f282 	clz	r2, r2
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	40d3      	lsrs	r3, r2
 80029d8:	4a04      	ldr	r2, [pc, #16]	; (80029ec <HAL_RCC_GetPCLK1Freq+0x40>)
 80029da:	5cd3      	ldrb	r3, [r2, r3]
 80029dc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80029e0:	4618      	mov	r0, r3
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40021000 	.word	0x40021000
 80029ec:	08007fe0 	.word	0x08007fe0

080029f0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	220f      	movs	r2, #15
 80029fe:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a00:	4b12      	ldr	r3, [pc, #72]	; (8002a4c <HAL_RCC_GetClockConfig+0x5c>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 0203 	and.w	r2, r3, #3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002a0c:	4b0f      	ldr	r3, [pc, #60]	; (8002a4c <HAL_RCC_GetClockConfig+0x5c>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002a18:	4b0c      	ldr	r3, [pc, #48]	; (8002a4c <HAL_RCC_GetClockConfig+0x5c>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002a24:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <HAL_RCC_GetClockConfig+0x5c>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	08db      	lsrs	r3, r3, #3
 8002a2a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002a32:	4b07      	ldr	r3, [pc, #28]	; (8002a50 <HAL_RCC_GetClockConfig+0x60>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0207 	and.w	r2, r3, #7
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	601a      	str	r2, [r3, #0]
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40022000 	.word	0x40022000

08002a54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e049      	b.n	8002afa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d106      	bne.n	8002a80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f841 	bl	8002b02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3304      	adds	r3, #4
 8002a90:	4619      	mov	r1, r3
 8002a92:	4610      	mov	r0, r2
 8002a94:	f000 f9f2 	bl	8002e7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
	...

08002b18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d001      	beq.n	8002b30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e04a      	b.n	8002bc6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0201 	orr.w	r2, r2, #1
 8002b46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a21      	ldr	r2, [pc, #132]	; (8002bd4 <HAL_TIM_Base_Start_IT+0xbc>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d018      	beq.n	8002b84 <HAL_TIM_Base_Start_IT+0x6c>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b5a:	d013      	beq.n	8002b84 <HAL_TIM_Base_Start_IT+0x6c>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a1d      	ldr	r2, [pc, #116]	; (8002bd8 <HAL_TIM_Base_Start_IT+0xc0>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d00e      	beq.n	8002b84 <HAL_TIM_Base_Start_IT+0x6c>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a1c      	ldr	r2, [pc, #112]	; (8002bdc <HAL_TIM_Base_Start_IT+0xc4>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d009      	beq.n	8002b84 <HAL_TIM_Base_Start_IT+0x6c>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a1a      	ldr	r2, [pc, #104]	; (8002be0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d004      	beq.n	8002b84 <HAL_TIM_Base_Start_IT+0x6c>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a19      	ldr	r2, [pc, #100]	; (8002be4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d115      	bne.n	8002bb0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689a      	ldr	r2, [r3, #8]
 8002b8a:	4b17      	ldr	r3, [pc, #92]	; (8002be8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2b06      	cmp	r3, #6
 8002b94:	d015      	beq.n	8002bc2 <HAL_TIM_Base_Start_IT+0xaa>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b9c:	d011      	beq.n	8002bc2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f042 0201 	orr.w	r2, r2, #1
 8002bac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bae:	e008      	b.n	8002bc2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0201 	orr.w	r2, r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	e000      	b.n	8002bc4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bc2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	40012c00 	.word	0x40012c00
 8002bd8:	40000400 	.word	0x40000400
 8002bdc:	40000800 	.word	0x40000800
 8002be0:	40013400 	.word	0x40013400
 8002be4:	40014000 	.word	0x40014000
 8002be8:	00010007 	.word	0x00010007

08002bec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d122      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d11b      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f06f 0202 	mvn.w	r2, #2
 8002c18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f905 	bl	8002e3e <HAL_TIM_IC_CaptureCallback>
 8002c34:	e005      	b.n	8002c42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f8f7 	bl	8002e2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f908 	bl	8002e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	f003 0304 	and.w	r3, r3, #4
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d122      	bne.n	8002c9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	d11b      	bne.n	8002c9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f06f 0204 	mvn.w	r2, #4
 8002c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2202      	movs	r2, #2
 8002c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f8db 	bl	8002e3e <HAL_TIM_IC_CaptureCallback>
 8002c88:	e005      	b.n	8002c96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f8cd 	bl	8002e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f8de 	bl	8002e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b08      	cmp	r3, #8
 8002ca8:	d122      	bne.n	8002cf0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f003 0308 	and.w	r3, r3, #8
 8002cb4:	2b08      	cmp	r3, #8
 8002cb6:	d11b      	bne.n	8002cf0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f06f 0208 	mvn.w	r2, #8
 8002cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2204      	movs	r2, #4
 8002cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f8b1 	bl	8002e3e <HAL_TIM_IC_CaptureCallback>
 8002cdc:	e005      	b.n	8002cea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f8a3 	bl	8002e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f8b4 	bl	8002e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	f003 0310 	and.w	r3, r3, #16
 8002cfa:	2b10      	cmp	r3, #16
 8002cfc:	d122      	bne.n	8002d44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f003 0310 	and.w	r3, r3, #16
 8002d08:	2b10      	cmp	r3, #16
 8002d0a:	d11b      	bne.n	8002d44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f06f 0210 	mvn.w	r2, #16
 8002d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2208      	movs	r2, #8
 8002d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f887 	bl	8002e3e <HAL_TIM_IC_CaptureCallback>
 8002d30:	e005      	b.n	8002d3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f879 	bl	8002e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f88a 	bl	8002e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d10e      	bne.n	8002d70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d107      	bne.n	8002d70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f06f 0201 	mvn.w	r2, #1
 8002d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7fe f972 	bl	8001054 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7a:	2b80      	cmp	r3, #128	; 0x80
 8002d7c:	d10e      	bne.n	8002d9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d88:	2b80      	cmp	r3, #128	; 0x80
 8002d8a:	d107      	bne.n	8002d9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f90a 	bl	8002fb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002daa:	d10e      	bne.n	8002dca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db6:	2b80      	cmp	r3, #128	; 0x80
 8002db8:	d107      	bne.n	8002dca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 f8fd 	bl	8002fc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd4:	2b40      	cmp	r3, #64	; 0x40
 8002dd6:	d10e      	bne.n	8002df6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de2:	2b40      	cmp	r3, #64	; 0x40
 8002de4:	d107      	bne.n	8002df6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002dee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f838 	bl	8002e66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	f003 0320 	and.w	r3, r3, #32
 8002e00:	2b20      	cmp	r3, #32
 8002e02:	d10e      	bne.n	8002e22 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f003 0320 	and.w	r3, r3, #32
 8002e0e:	2b20      	cmp	r3, #32
 8002e10:	d107      	bne.n	8002e22 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f06f 0220 	mvn.w	r2, #32
 8002e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 f8bd 	bl	8002f9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e22:	bf00      	nop
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
	...

08002e7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a3c      	ldr	r2, [pc, #240]	; (8002f80 <TIM_Base_SetConfig+0x104>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d00f      	beq.n	8002eb4 <TIM_Base_SetConfig+0x38>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e9a:	d00b      	beq.n	8002eb4 <TIM_Base_SetConfig+0x38>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a39      	ldr	r2, [pc, #228]	; (8002f84 <TIM_Base_SetConfig+0x108>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d007      	beq.n	8002eb4 <TIM_Base_SetConfig+0x38>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a38      	ldr	r2, [pc, #224]	; (8002f88 <TIM_Base_SetConfig+0x10c>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d003      	beq.n	8002eb4 <TIM_Base_SetConfig+0x38>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a37      	ldr	r2, [pc, #220]	; (8002f8c <TIM_Base_SetConfig+0x110>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d108      	bne.n	8002ec6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a2d      	ldr	r2, [pc, #180]	; (8002f80 <TIM_Base_SetConfig+0x104>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d01b      	beq.n	8002f06 <TIM_Base_SetConfig+0x8a>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed4:	d017      	beq.n	8002f06 <TIM_Base_SetConfig+0x8a>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a2a      	ldr	r2, [pc, #168]	; (8002f84 <TIM_Base_SetConfig+0x108>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d013      	beq.n	8002f06 <TIM_Base_SetConfig+0x8a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a29      	ldr	r2, [pc, #164]	; (8002f88 <TIM_Base_SetConfig+0x10c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d00f      	beq.n	8002f06 <TIM_Base_SetConfig+0x8a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a28      	ldr	r2, [pc, #160]	; (8002f8c <TIM_Base_SetConfig+0x110>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d00b      	beq.n	8002f06 <TIM_Base_SetConfig+0x8a>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a27      	ldr	r2, [pc, #156]	; (8002f90 <TIM_Base_SetConfig+0x114>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d007      	beq.n	8002f06 <TIM_Base_SetConfig+0x8a>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a26      	ldr	r2, [pc, #152]	; (8002f94 <TIM_Base_SetConfig+0x118>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d003      	beq.n	8002f06 <TIM_Base_SetConfig+0x8a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a25      	ldr	r2, [pc, #148]	; (8002f98 <TIM_Base_SetConfig+0x11c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d108      	bne.n	8002f18 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a10      	ldr	r2, [pc, #64]	; (8002f80 <TIM_Base_SetConfig+0x104>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d00f      	beq.n	8002f64 <TIM_Base_SetConfig+0xe8>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a11      	ldr	r2, [pc, #68]	; (8002f8c <TIM_Base_SetConfig+0x110>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d00b      	beq.n	8002f64 <TIM_Base_SetConfig+0xe8>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a10      	ldr	r2, [pc, #64]	; (8002f90 <TIM_Base_SetConfig+0x114>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d007      	beq.n	8002f64 <TIM_Base_SetConfig+0xe8>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a0f      	ldr	r2, [pc, #60]	; (8002f94 <TIM_Base_SetConfig+0x118>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d003      	beq.n	8002f64 <TIM_Base_SetConfig+0xe8>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a0e      	ldr	r2, [pc, #56]	; (8002f98 <TIM_Base_SetConfig+0x11c>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d103      	bne.n	8002f6c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	691a      	ldr	r2, [r3, #16]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	615a      	str	r2, [r3, #20]
}
 8002f72:	bf00      	nop
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	40012c00 	.word	0x40012c00
 8002f84:	40000400 	.word	0x40000400
 8002f88:	40000800 	.word	0x40000800
 8002f8c:	40013400 	.word	0x40013400
 8002f90:	40014000 	.word	0x40014000
 8002f94:	40014400 	.word	0x40014400
 8002f98:	40014800 	.word	0x40014800

08002f9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f103 0208 	add.w	r2, r3, #8
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ff0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f103 0208 	add.w	r2, r3, #8
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f103 0208 	add.w	r2, r3, #8
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8003032:	b480      	push	{r7}
 8003034:	b085      	sub	sp, #20
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	601a      	str	r2, [r3, #0]
}
 800306e:	bf00      	nop
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800307a:	b480      	push	{r7}
 800307c:	b085      	sub	sp, #20
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
 8003082:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003090:	d103      	bne.n	800309a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	e00c      	b.n	80030b4 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3308      	adds	r3, #8
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	e002      	b.n	80030a8 <vListInsert+0x2e>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d2f6      	bcs.n	80030a2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	1c5a      	adds	r2, r3, #1
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	601a      	str	r2, [r3, #0]
}
 80030e0:	bf00      	nop
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6892      	ldr	r2, [r2, #8]
 8003102:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6852      	ldr	r2, [r2, #4]
 800310c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	429a      	cmp	r2, r3
 8003116:	d103      	bne.n	8003120 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	1e5a      	subs	r2, r3, #1
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10a      	bne.n	800316a <xQueueGenericReset+0x2a>
        __asm volatile
 8003154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003158:	f383 8811 	msr	BASEPRI, r3
 800315c:	f3bf 8f6f 	isb	sy
 8003160:	f3bf 8f4f 	dsb	sy
 8003164:	60bb      	str	r3, [r7, #8]
    }
 8003166:	bf00      	nop
 8003168:	e7fe      	b.n	8003168 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800316a:	f002 f8b3 	bl	80052d4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003176:	68f9      	ldr	r1, [r7, #12]
 8003178:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800317a:	fb01 f303 	mul.w	r3, r1, r3
 800317e:	441a      	add	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319a:	3b01      	subs	r3, #1
 800319c:	68f9      	ldr	r1, [r7, #12]
 800319e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80031a0:	fb01 f303 	mul.w	r3, r1, r3
 80031a4:	441a      	add	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	22ff      	movs	r2, #255	; 0xff
 80031ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	22ff      	movs	r2, #255	; 0xff
 80031b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d114      	bne.n	80031ea <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d01a      	beq.n	80031fe <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	3310      	adds	r3, #16
 80031cc:	4618      	mov	r0, r3
 80031ce:	f001 f90d 	bl	80043ec <xTaskRemoveFromEventList>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d012      	beq.n	80031fe <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80031d8:	4b0c      	ldr	r3, [pc, #48]	; (800320c <xQueueGenericReset+0xcc>)
 80031da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	f3bf 8f4f 	dsb	sy
 80031e4:	f3bf 8f6f 	isb	sy
 80031e8:	e009      	b.n	80031fe <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	3310      	adds	r3, #16
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff fef2 	bl	8002fd8 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	3324      	adds	r3, #36	; 0x24
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff feed 	bl	8002fd8 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80031fe:	f002 f899 	bl	8005334 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8003202:	2301      	movs	r3, #1
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	e000ed04 	.word	0xe000ed04

08003210 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003210:	b580      	push	{r7, lr}
 8003212:	b08c      	sub	sp, #48	; 0x30
 8003214:	af02      	add	r7, sp, #8
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	4613      	mov	r3, r2
 800321c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10a      	bne.n	800323a <xQueueGenericCreate+0x2a>
        __asm volatile
 8003224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003228:	f383 8811 	msr	BASEPRI, r3
 800322c:	f3bf 8f6f 	isb	sy
 8003230:	f3bf 8f4f 	dsb	sy
 8003234:	61bb      	str	r3, [r7, #24]
    }
 8003236:	bf00      	nop
 8003238:	e7fe      	b.n	8003238 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	fb02 f303 	mul.w	r3, r2, r3
 8003242:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d006      	beq.n	8003258 <xQueueGenericCreate+0x48>
 800324a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	429a      	cmp	r2, r3
 8003256:	d101      	bne.n	800325c <xQueueGenericCreate+0x4c>
 8003258:	2301      	movs	r3, #1
 800325a:	e000      	b.n	800325e <xQueueGenericCreate+0x4e>
 800325c:	2300      	movs	r3, #0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10a      	bne.n	8003278 <xQueueGenericCreate+0x68>
        __asm volatile
 8003262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003266:	f383 8811 	msr	BASEPRI, r3
 800326a:	f3bf 8f6f 	isb	sy
 800326e:	f3bf 8f4f 	dsb	sy
 8003272:	617b      	str	r3, [r7, #20]
    }
 8003274:	bf00      	nop
 8003276:	e7fe      	b.n	8003276 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800327e:	d90a      	bls.n	8003296 <xQueueGenericCreate+0x86>
        __asm volatile
 8003280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003284:	f383 8811 	msr	BASEPRI, r3
 8003288:	f3bf 8f6f 	isb	sy
 800328c:	f3bf 8f4f 	dsb	sy
 8003290:	613b      	str	r3, [r7, #16]
    }
 8003292:	bf00      	nop
 8003294:	e7fe      	b.n	8003294 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003298:	3350      	adds	r3, #80	; 0x50
 800329a:	4618      	mov	r0, r3
 800329c:	f002 f946 	bl	800552c <pvPortMalloc>
 80032a0:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00d      	beq.n	80032c4 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	3350      	adds	r3, #80	; 0x50
 80032b0:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80032b2:	79fa      	ldrb	r2, [r7, #7]
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	4613      	mov	r3, r2
 80032ba:	69fa      	ldr	r2, [r7, #28]
 80032bc:	68b9      	ldr	r1, [r7, #8]
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 f805 	bl	80032ce <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80032c4:	6a3b      	ldr	r3, [r7, #32]
    }
 80032c6:	4618      	mov	r0, r3
 80032c8:	3728      	adds	r7, #40	; 0x28
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b084      	sub	sp, #16
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	60f8      	str	r0, [r7, #12]
 80032d6:	60b9      	str	r1, [r7, #8]
 80032d8:	607a      	str	r2, [r7, #4]
 80032da:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d103      	bne.n	80032ea <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	e002      	b.n	80032f0 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80032fc:	2101      	movs	r1, #1
 80032fe:	69b8      	ldr	r0, [r7, #24]
 8003300:	f7ff ff1e 	bl	8003140 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	78fa      	ldrb	r2, [r7, #3]
 8003308:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800330c:	78fb      	ldrb	r3, [r7, #3]
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	68f9      	ldr	r1, [r7, #12]
 8003312:	2073      	movs	r0, #115	; 0x73
 8003314:	f002 ff4a 	bl	80061ac <SEGGER_SYSVIEW_RecordU32x3>
}
 8003318:	bf00      	nop
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b090      	sub	sp, #64	; 0x40
 8003324:	af02      	add	r7, sp, #8
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
 800332c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800332e:	2300      	movs	r3, #0
 8003330:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8003336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10a      	bne.n	8003352 <xQueueGenericSend+0x32>
        __asm volatile
 800333c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003340:	f383 8811 	msr	BASEPRI, r3
 8003344:	f3bf 8f6f 	isb	sy
 8003348:	f3bf 8f4f 	dsb	sy
 800334c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800334e:	bf00      	nop
 8003350:	e7fe      	b.n	8003350 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d103      	bne.n	8003360 <xQueueGenericSend+0x40>
 8003358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	2b00      	cmp	r3, #0
 800335e:	d101      	bne.n	8003364 <xQueueGenericSend+0x44>
 8003360:	2301      	movs	r3, #1
 8003362:	e000      	b.n	8003366 <xQueueGenericSend+0x46>
 8003364:	2300      	movs	r3, #0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10a      	bne.n	8003380 <xQueueGenericSend+0x60>
        __asm volatile
 800336a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336e:	f383 8811 	msr	BASEPRI, r3
 8003372:	f3bf 8f6f 	isb	sy
 8003376:	f3bf 8f4f 	dsb	sy
 800337a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800337c:	bf00      	nop
 800337e:	e7fe      	b.n	800337e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d103      	bne.n	800338e <xQueueGenericSend+0x6e>
 8003386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338a:	2b01      	cmp	r3, #1
 800338c:	d101      	bne.n	8003392 <xQueueGenericSend+0x72>
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <xQueueGenericSend+0x74>
 8003392:	2300      	movs	r3, #0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10a      	bne.n	80033ae <xQueueGenericSend+0x8e>
        __asm volatile
 8003398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339c:	f383 8811 	msr	BASEPRI, r3
 80033a0:	f3bf 8f6f 	isb	sy
 80033a4:	f3bf 8f4f 	dsb	sy
 80033a8:	623b      	str	r3, [r7, #32]
    }
 80033aa:	bf00      	nop
 80033ac:	e7fe      	b.n	80033ac <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033ae:	f001 f9bd 	bl	800472c <xTaskGetSchedulerState>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d102      	bne.n	80033be <xQueueGenericSend+0x9e>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <xQueueGenericSend+0xa2>
 80033be:	2301      	movs	r3, #1
 80033c0:	e000      	b.n	80033c4 <xQueueGenericSend+0xa4>
 80033c2:	2300      	movs	r3, #0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10a      	bne.n	80033de <xQueueGenericSend+0xbe>
        __asm volatile
 80033c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033cc:	f383 8811 	msr	BASEPRI, r3
 80033d0:	f3bf 8f6f 	isb	sy
 80033d4:	f3bf 8f4f 	dsb	sy
 80033d8:	61fb      	str	r3, [r7, #28]
    }
 80033da:	bf00      	nop
 80033dc:	e7fe      	b.n	80033dc <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80033de:	f001 ff79 	bl	80052d4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80033e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d302      	bcc.n	80033f4 <xQueueGenericSend+0xd4>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d136      	bne.n	8003462 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 80033f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f6:	4618      	mov	r0, r3
 80033f8:	f003 fc40 	bl	8006c7c <SEGGER_SYSVIEW_ShrinkId>
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	460b      	mov	r3, r1
 8003406:	4601      	mov	r1, r0
 8003408:	205a      	movs	r0, #90	; 0x5a
 800340a:	f002 ff45 	bl	8006298 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	68b9      	ldr	r1, [r7, #8]
 8003412:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003414:	f000 fa78 	bl	8003908 <prvCopyDataToQueue>
 8003418:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800341a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	2b00      	cmp	r3, #0
 8003420:	d010      	beq.n	8003444 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003424:	3324      	adds	r3, #36	; 0x24
 8003426:	4618      	mov	r0, r3
 8003428:	f000 ffe0 	bl	80043ec <xTaskRemoveFromEventList>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d013      	beq.n	800345a <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8003432:	4b4d      	ldr	r3, [pc, #308]	; (8003568 <xQueueGenericSend+0x248>)
 8003434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	f3bf 8f4f 	dsb	sy
 800343e:	f3bf 8f6f 	isb	sy
 8003442:	e00a      	b.n	800345a <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8003444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003446:	2b00      	cmp	r3, #0
 8003448:	d007      	beq.n	800345a <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800344a:	4b47      	ldr	r3, [pc, #284]	; (8003568 <xQueueGenericSend+0x248>)
 800344c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003450:	601a      	str	r2, [r3, #0]
 8003452:	f3bf 8f4f 	dsb	sy
 8003456:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800345a:	f001 ff6b 	bl	8005334 <vPortExitCritical>
                return pdPASS;
 800345e:	2301      	movs	r3, #1
 8003460:	e07d      	b.n	800355e <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d110      	bne.n	800348a <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003468:	f001 ff64 	bl	8005334 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 800346c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346e:	4618      	mov	r0, r3
 8003470:	f003 fc04 	bl	8006c7c <SEGGER_SYSVIEW_ShrinkId>
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	460b      	mov	r3, r1
 800347e:	4601      	mov	r1, r0
 8003480:	205a      	movs	r0, #90	; 0x5a
 8003482:	f002 ff09 	bl	8006298 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8003486:	2300      	movs	r3, #0
 8003488:	e069      	b.n	800355e <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 800348a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800348c:	2b00      	cmp	r3, #0
 800348e:	d106      	bne.n	800349e <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003490:	f107 0314 	add.w	r3, r7, #20
 8003494:	4618      	mov	r0, r3
 8003496:	f001 f80f 	bl	80044b8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800349a:	2301      	movs	r3, #1
 800349c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800349e:	f001 ff49 	bl	8005334 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80034a2:	f000 fd6d 	bl	8003f80 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80034a6:	f001 ff15 	bl	80052d4 <vPortEnterCritical>
 80034aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034b0:	b25b      	sxtb	r3, r3
 80034b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034b6:	d103      	bne.n	80034c0 <xQueueGenericSend+0x1a0>
 80034b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034c6:	b25b      	sxtb	r3, r3
 80034c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034cc:	d103      	bne.n	80034d6 <xQueueGenericSend+0x1b6>
 80034ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034d6:	f001 ff2d 	bl	8005334 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034da:	1d3a      	adds	r2, r7, #4
 80034dc:	f107 0314 	add.w	r3, r7, #20
 80034e0:	4611      	mov	r1, r2
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 fffe 	bl	80044e4 <xTaskCheckForTimeOut>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d124      	bne.n	8003538 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80034ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034f0:	f000 fb02 	bl	8003af8 <prvIsQueueFull>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d018      	beq.n	800352c <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80034fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fc:	3310      	adds	r3, #16
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	4611      	mov	r1, r2
 8003502:	4618      	mov	r0, r3
 8003504:	f000 ff20 	bl	8004348 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800350a:	f000 fa8d 	bl	8003a28 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800350e:	f000 fd45 	bl	8003f9c <xTaskResumeAll>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	f47f af62 	bne.w	80033de <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800351a:	4b13      	ldr	r3, [pc, #76]	; (8003568 <xQueueGenericSend+0x248>)
 800351c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	f3bf 8f4f 	dsb	sy
 8003526:	f3bf 8f6f 	isb	sy
 800352a:	e758      	b.n	80033de <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800352c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800352e:	f000 fa7b 	bl	8003a28 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003532:	f000 fd33 	bl	8003f9c <xTaskResumeAll>
 8003536:	e752      	b.n	80033de <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003538:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800353a:	f000 fa75 	bl	8003a28 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800353e:	f000 fd2d 	bl	8003f9c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8003542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003544:	4618      	mov	r0, r3
 8003546:	f003 fb99 	bl	8006c7c <SEGGER_SYSVIEW_ShrinkId>
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	460b      	mov	r3, r1
 8003554:	4601      	mov	r1, r0
 8003556:	205a      	movs	r0, #90	; 0x5a
 8003558:	f002 fe9e 	bl	8006298 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 800355c:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800355e:	4618      	mov	r0, r3
 8003560:	3738      	adds	r7, #56	; 0x38
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	e000ed04 	.word	0xe000ed04

0800356c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b090      	sub	sp, #64	; 0x40
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
 8003578:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800357e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10a      	bne.n	800359a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8003584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003588:	f383 8811 	msr	BASEPRI, r3
 800358c:	f3bf 8f6f 	isb	sy
 8003590:	f3bf 8f4f 	dsb	sy
 8003594:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003596:	bf00      	nop
 8003598:	e7fe      	b.n	8003598 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d103      	bne.n	80035a8 <xQueueGenericSendFromISR+0x3c>
 80035a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d101      	bne.n	80035ac <xQueueGenericSendFromISR+0x40>
 80035a8:	2301      	movs	r3, #1
 80035aa:	e000      	b.n	80035ae <xQueueGenericSendFromISR+0x42>
 80035ac:	2300      	movs	r3, #0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10a      	bne.n	80035c8 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80035b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b6:	f383 8811 	msr	BASEPRI, r3
 80035ba:	f3bf 8f6f 	isb	sy
 80035be:	f3bf 8f4f 	dsb	sy
 80035c2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80035c4:	bf00      	nop
 80035c6:	e7fe      	b.n	80035c6 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d103      	bne.n	80035d6 <xQueueGenericSendFromISR+0x6a>
 80035ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d101      	bne.n	80035da <xQueueGenericSendFromISR+0x6e>
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <xQueueGenericSendFromISR+0x70>
 80035da:	2300      	movs	r3, #0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10a      	bne.n	80035f6 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80035e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e4:	f383 8811 	msr	BASEPRI, r3
 80035e8:	f3bf 8f6f 	isb	sy
 80035ec:	f3bf 8f4f 	dsb	sy
 80035f0:	623b      	str	r3, [r7, #32]
    }
 80035f2:	bf00      	nop
 80035f4:	e7fe      	b.n	80035f4 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80035f6:	f001 ff59 	bl	80054ac <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80035fa:	f3ef 8211 	mrs	r2, BASEPRI
 80035fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003602:	f383 8811 	msr	BASEPRI, r3
 8003606:	f3bf 8f6f 	isb	sy
 800360a:	f3bf 8f4f 	dsb	sy
 800360e:	61fa      	str	r2, [r7, #28]
 8003610:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003612:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003614:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800361a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800361c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361e:	429a      	cmp	r2, r3
 8003620:	d302      	bcc.n	8003628 <xQueueGenericSendFromISR+0xbc>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2b02      	cmp	r3, #2
 8003626:	d148      	bne.n	80036ba <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800362a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800362e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003636:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8003638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800363a:	4618      	mov	r0, r3
 800363c:	f003 fb1e 	bl	8006c7c <SEGGER_SYSVIEW_ShrinkId>
 8003640:	4601      	mov	r1, r0
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	461a      	mov	r2, r3
 8003646:	2060      	movs	r0, #96	; 0x60
 8003648:	f002 fd56 	bl	80060f8 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	68b9      	ldr	r1, [r7, #8]
 8003650:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003652:	f000 f959 	bl	8003908 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003656:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800365a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800365e:	d112      	bne.n	8003686 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	2b00      	cmp	r3, #0
 8003666:	d025      	beq.n	80036b4 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366a:	3324      	adds	r3, #36	; 0x24
 800366c:	4618      	mov	r0, r3
 800366e:	f000 febd 	bl	80043ec <xTaskRemoveFromEventList>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d01d      	beq.n	80036b4 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d01a      	beq.n	80036b4 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	e016      	b.n	80036b4 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003686:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800368a:	2b7f      	cmp	r3, #127	; 0x7f
 800368c:	d10a      	bne.n	80036a4 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 800368e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003692:	f383 8811 	msr	BASEPRI, r3
 8003696:	f3bf 8f6f 	isb	sy
 800369a:	f3bf 8f4f 	dsb	sy
 800369e:	617b      	str	r3, [r7, #20]
    }
 80036a0:	bf00      	nop
 80036a2:	e7fe      	b.n	80036a2 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80036a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80036a8:	3301      	adds	r3, #1
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	b25a      	sxtb	r2, r3
 80036ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80036b4:	2301      	movs	r3, #1
 80036b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80036b8:	e00b      	b.n	80036d2 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80036ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036bc:	4618      	mov	r0, r3
 80036be:	f003 fadd 	bl	8006c7c <SEGGER_SYSVIEW_ShrinkId>
 80036c2:	4601      	mov	r1, r0
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	461a      	mov	r2, r3
 80036c8:	2060      	movs	r0, #96	; 0x60
 80036ca:	f002 fd15 	bl	80060f8 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 80036ce:	2300      	movs	r3, #0
 80036d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d4:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80036dc:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80036de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3740      	adds	r7, #64	; 0x40
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80036e8:	b590      	push	{r4, r7, lr}
 80036ea:	b08f      	sub	sp, #60	; 0x3c
 80036ec:	af02      	add	r7, sp, #8
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80036f4:	2300      	movs	r3, #0
 80036f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80036fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10a      	bne.n	8003718 <xQueueReceive+0x30>
        __asm volatile
 8003702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003706:	f383 8811 	msr	BASEPRI, r3
 800370a:	f3bf 8f6f 	isb	sy
 800370e:	f3bf 8f4f 	dsb	sy
 8003712:	623b      	str	r3, [r7, #32]
    }
 8003714:	bf00      	nop
 8003716:	e7fe      	b.n	8003716 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d103      	bne.n	8003726 <xQueueReceive+0x3e>
 800371e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <xQueueReceive+0x42>
 8003726:	2301      	movs	r3, #1
 8003728:	e000      	b.n	800372c <xQueueReceive+0x44>
 800372a:	2300      	movs	r3, #0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10a      	bne.n	8003746 <xQueueReceive+0x5e>
        __asm volatile
 8003730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003734:	f383 8811 	msr	BASEPRI, r3
 8003738:	f3bf 8f6f 	isb	sy
 800373c:	f3bf 8f4f 	dsb	sy
 8003740:	61fb      	str	r3, [r7, #28]
    }
 8003742:	bf00      	nop
 8003744:	e7fe      	b.n	8003744 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003746:	f000 fff1 	bl	800472c <xTaskGetSchedulerState>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d102      	bne.n	8003756 <xQueueReceive+0x6e>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <xQueueReceive+0x72>
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <xQueueReceive+0x74>
 800375a:	2300      	movs	r3, #0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10a      	bne.n	8003776 <xQueueReceive+0x8e>
        __asm volatile
 8003760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003764:	f383 8811 	msr	BASEPRI, r3
 8003768:	f3bf 8f6f 	isb	sy
 800376c:	f3bf 8f4f 	dsb	sy
 8003770:	61bb      	str	r3, [r7, #24]
    }
 8003772:	bf00      	nop
 8003774:	e7fe      	b.n	8003774 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003776:	f001 fdad 	bl	80052d4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800377a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003782:	2b00      	cmp	r3, #0
 8003784:	d02f      	beq.n	80037e6 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003786:	68b9      	ldr	r1, [r7, #8]
 8003788:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800378a:	f000 f927 	bl	80039dc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800378e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003790:	4618      	mov	r0, r3
 8003792:	f003 fa73 	bl	8006c7c <SEGGER_SYSVIEW_ShrinkId>
 8003796:	4604      	mov	r4, r0
 8003798:	2000      	movs	r0, #0
 800379a:	f003 fa6f 	bl	8006c7c <SEGGER_SYSVIEW_ShrinkId>
 800379e:	4602      	mov	r2, r0
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2101      	movs	r1, #1
 80037a4:	9100      	str	r1, [sp, #0]
 80037a6:	4621      	mov	r1, r4
 80037a8:	205c      	movs	r0, #92	; 0x5c
 80037aa:	f002 fd75 	bl	8006298 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80037ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b0:	1e5a      	subs	r2, r3, #1
 80037b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00f      	beq.n	80037de <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c0:	3310      	adds	r3, #16
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 fe12 	bl	80043ec <xTaskRemoveFromEventList>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d007      	beq.n	80037de <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80037ce:	4b4d      	ldr	r3, [pc, #308]	; (8003904 <xQueueReceive+0x21c>)
 80037d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037d4:	601a      	str	r2, [r3, #0]
 80037d6:	f3bf 8f4f 	dsb	sy
 80037da:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80037de:	f001 fda9 	bl	8005334 <vPortExitCritical>
                return pdPASS;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e08a      	b.n	80038fc <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d113      	bne.n	8003814 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80037ec:	f001 fda2 	bl	8005334 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80037f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f2:	4618      	mov	r0, r3
 80037f4:	f003 fa42 	bl	8006c7c <SEGGER_SYSVIEW_ShrinkId>
 80037f8:	4604      	mov	r4, r0
 80037fa:	2000      	movs	r0, #0
 80037fc:	f003 fa3e 	bl	8006c7c <SEGGER_SYSVIEW_ShrinkId>
 8003800:	4602      	mov	r2, r0
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2101      	movs	r1, #1
 8003806:	9100      	str	r1, [sp, #0]
 8003808:	4621      	mov	r1, r4
 800380a:	205c      	movs	r0, #92	; 0x5c
 800380c:	f002 fd44 	bl	8006298 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8003810:	2300      	movs	r3, #0
 8003812:	e073      	b.n	80038fc <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003816:	2b00      	cmp	r3, #0
 8003818:	d106      	bne.n	8003828 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800381a:	f107 0310 	add.w	r3, r7, #16
 800381e:	4618      	mov	r0, r3
 8003820:	f000 fe4a 	bl	80044b8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003824:	2301      	movs	r3, #1
 8003826:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003828:	f001 fd84 	bl	8005334 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800382c:	f000 fba8 	bl	8003f80 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003830:	f001 fd50 	bl	80052d4 <vPortEnterCritical>
 8003834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003836:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800383a:	b25b      	sxtb	r3, r3
 800383c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003840:	d103      	bne.n	800384a <xQueueReceive+0x162>
 8003842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800384a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003850:	b25b      	sxtb	r3, r3
 8003852:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003856:	d103      	bne.n	8003860 <xQueueReceive+0x178>
 8003858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003860:	f001 fd68 	bl	8005334 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003864:	1d3a      	adds	r2, r7, #4
 8003866:	f107 0310 	add.w	r3, r7, #16
 800386a:	4611      	mov	r1, r2
 800386c:	4618      	mov	r0, r3
 800386e:	f000 fe39 	bl	80044e4 <xTaskCheckForTimeOut>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d124      	bne.n	80038c2 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003878:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800387a:	f000 f927 	bl	8003acc <prvIsQueueEmpty>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d018      	beq.n	80038b6 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003886:	3324      	adds	r3, #36	; 0x24
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	4611      	mov	r1, r2
 800388c:	4618      	mov	r0, r3
 800388e:	f000 fd5b 	bl	8004348 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003892:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003894:	f000 f8c8 	bl	8003a28 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003898:	f000 fb80 	bl	8003f9c <xTaskResumeAll>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f47f af69 	bne.w	8003776 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80038a4:	4b17      	ldr	r3, [pc, #92]	; (8003904 <xQueueReceive+0x21c>)
 80038a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	f3bf 8f4f 	dsb	sy
 80038b0:	f3bf 8f6f 	isb	sy
 80038b4:	e75f      	b.n	8003776 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80038b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038b8:	f000 f8b6 	bl	8003a28 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80038bc:	f000 fb6e 	bl	8003f9c <xTaskResumeAll>
 80038c0:	e759      	b.n	8003776 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80038c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038c4:	f000 f8b0 	bl	8003a28 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80038c8:	f000 fb68 	bl	8003f9c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038ce:	f000 f8fd 	bl	8003acc <prvIsQueueEmpty>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f43f af4e 	beq.w	8003776 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80038da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038dc:	4618      	mov	r0, r3
 80038de:	f003 f9cd 	bl	8006c7c <SEGGER_SYSVIEW_ShrinkId>
 80038e2:	4604      	mov	r4, r0
 80038e4:	2000      	movs	r0, #0
 80038e6:	f003 f9c9 	bl	8006c7c <SEGGER_SYSVIEW_ShrinkId>
 80038ea:	4602      	mov	r2, r0
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2101      	movs	r1, #1
 80038f0:	9100      	str	r1, [sp, #0]
 80038f2:	4621      	mov	r1, r4
 80038f4:	205c      	movs	r0, #92	; 0x5c
 80038f6:	f002 fccf 	bl	8006298 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80038fa:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3734      	adds	r7, #52	; 0x34
 8003900:	46bd      	mov	sp, r7
 8003902:	bd90      	pop	{r4, r7, pc}
 8003904:	e000ed04 	.word	0xe000ed04

08003908 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003914:	2300      	movs	r3, #0
 8003916:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10d      	bne.n	8003942 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d14d      	bne.n	80039ca <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	4618      	mov	r0, r3
 8003934:	f000 ff18 	bl	8004768 <xTaskPriorityDisinherit>
 8003938:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	609a      	str	r2, [r3, #8]
 8003940:	e043      	b.n	80039ca <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d119      	bne.n	800397c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6858      	ldr	r0, [r3, #4]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003950:	461a      	mov	r2, r3
 8003952:	68b9      	ldr	r1, [r7, #8]
 8003954:	f003 fb12 	bl	8006f7c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003960:	441a      	add	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	429a      	cmp	r2, r3
 8003970:	d32b      	bcc.n	80039ca <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	605a      	str	r2, [r3, #4]
 800397a:	e026      	b.n	80039ca <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	68d8      	ldr	r0, [r3, #12]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003984:	461a      	mov	r2, r3
 8003986:	68b9      	ldr	r1, [r7, #8]
 8003988:	f003 faf8 	bl	8006f7c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	68da      	ldr	r2, [r3, #12]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003994:	425b      	negs	r3, r3
 8003996:	441a      	add	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d207      	bcs.n	80039b8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b0:	425b      	negs	r3, r3
 80039b2:	441a      	add	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d105      	bne.n	80039ca <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1c5a      	adds	r2, r3, #1
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80039d2:	697b      	ldr	r3, [r7, #20]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3718      	adds	r7, #24
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d018      	beq.n	8003a20 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	441a      	add	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68da      	ldr	r2, [r3, #12]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d303      	bcc.n	8003a10 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68d9      	ldr	r1, [r3, #12]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	461a      	mov	r2, r3
 8003a1a:	6838      	ldr	r0, [r7, #0]
 8003a1c:	f003 faae 	bl	8006f7c <memcpy>
    }
}
 8003a20:	bf00      	nop
 8003a22:	3708      	adds	r7, #8
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003a30:	f001 fc50 	bl	80052d4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a3a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a3c:	e011      	b.n	8003a62 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d012      	beq.n	8003a6c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	3324      	adds	r3, #36	; 0x24
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 fcce 	bl	80043ec <xTaskRemoveFromEventList>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8003a56:	f000 fdab 	bl	80045b0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003a5a:	7bfb      	ldrb	r3, [r7, #15]
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	dce9      	bgt.n	8003a3e <prvUnlockQueue+0x16>
 8003a6a:	e000      	b.n	8003a6e <prvUnlockQueue+0x46>
                        break;
 8003a6c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	22ff      	movs	r2, #255	; 0xff
 8003a72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003a76:	f001 fc5d 	bl	8005334 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003a7a:	f001 fc2b 	bl	80052d4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a84:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a86:	e011      	b.n	8003aac <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d012      	beq.n	8003ab6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3310      	adds	r3, #16
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 fca9 	bl	80043ec <xTaskRemoveFromEventList>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003aa0:	f000 fd86 	bl	80045b0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003aa4:	7bbb      	ldrb	r3, [r7, #14]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003aac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	dce9      	bgt.n	8003a88 <prvUnlockQueue+0x60>
 8003ab4:	e000      	b.n	8003ab8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003ab6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	22ff      	movs	r2, #255	; 0xff
 8003abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003ac0:	f001 fc38 	bl	8005334 <vPortExitCritical>
}
 8003ac4:	bf00      	nop
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003ad4:	f001 fbfe 	bl	80052d4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d102      	bne.n	8003ae6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	e001      	b.n	8003aea <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003aea:	f001 fc23 	bl	8005334 <vPortExitCritical>

    return xReturn;
 8003aee:	68fb      	ldr	r3, [r7, #12]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003b00:	f001 fbe8 	bl	80052d4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d102      	bne.n	8003b16 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003b10:	2301      	movs	r3, #1
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	e001      	b.n	8003b1a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003b16:	2300      	movs	r3, #0
 8003b18:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003b1a:	f001 fc0b 	bl	8005334 <vPortExitCritical>

    return xReturn;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b32:	2300      	movs	r3, #0
 8003b34:	60fb      	str	r3, [r7, #12]
 8003b36:	e01e      	b.n	8003b76 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003b38:	4a13      	ldr	r2, [pc, #76]	; (8003b88 <vQueueAddToRegistry+0x60>)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d115      	bne.n	8003b70 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003b44:	4910      	ldr	r1, [pc, #64]	; (8003b88 <vQueueAddToRegistry+0x60>)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8003b4e:	4a0e      	ldr	r2, [pc, #56]	; (8003b88 <vQueueAddToRegistry+0x60>)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	4413      	add	r3, r2
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f003 f88d 	bl	8006c7c <SEGGER_SYSVIEW_ShrinkId>
 8003b62:	4601      	mov	r1, r0
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	461a      	mov	r2, r3
 8003b68:	2071      	movs	r0, #113	; 0x71
 8003b6a:	f002 fac5 	bl	80060f8 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8003b6e:	e006      	b.n	8003b7e <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	3301      	adds	r3, #1
 8003b74:	60fb      	str	r3, [r7, #12]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2b07      	cmp	r3, #7
 8003b7a:	d9dd      	bls.n	8003b38 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003b7c:	bf00      	nop
 8003b7e:	bf00      	nop
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	20003018 	.word	0x20003018

08003b8c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003b9c:	f001 fb9a 	bl	80052d4 <vPortEnterCritical>
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ba6:	b25b      	sxtb	r3, r3
 8003ba8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bac:	d103      	bne.n	8003bb6 <vQueueWaitForMessageRestricted+0x2a>
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bbc:	b25b      	sxtb	r3, r3
 8003bbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bc2:	d103      	bne.n	8003bcc <vQueueWaitForMessageRestricted+0x40>
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bcc:	f001 fbb2 	bl	8005334 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d106      	bne.n	8003be6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	3324      	adds	r3, #36	; 0x24
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	68b9      	ldr	r1, [r7, #8]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f000 fbd5 	bl	8004390 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003be6:	6978      	ldr	r0, [r7, #20]
 8003be8:	f7ff ff1e 	bl	8003a28 <prvUnlockQueue>
    }
 8003bec:	bf00      	nop
 8003bee:	3718      	adds	r7, #24
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b08c      	sub	sp, #48	; 0x30
 8003bf8:	af04      	add	r7, sp, #16
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	603b      	str	r3, [r7, #0]
 8003c00:	4613      	mov	r3, r2
 8003c02:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003c04:	88fb      	ldrh	r3, [r7, #6]
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f001 fc8f 	bl	800552c <pvPortMalloc>
 8003c0e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00e      	beq.n	8003c34 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003c16:	2058      	movs	r0, #88	; 0x58
 8003c18:	f001 fc88 	bl	800552c <pvPortMalloc>
 8003c1c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	631a      	str	r2, [r3, #48]	; 0x30
 8003c2a:	e005      	b.n	8003c38 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003c2c:	6978      	ldr	r0, [r7, #20]
 8003c2e:	f001 fd5d 	bl	80056ec <vPortFree>
 8003c32:	e001      	b.n	8003c38 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003c34:	2300      	movs	r3, #0
 8003c36:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d013      	beq.n	8003c66 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c3e:	88fa      	ldrh	r2, [r7, #6]
 8003c40:	2300      	movs	r3, #0
 8003c42:	9303      	str	r3, [sp, #12]
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	9302      	str	r3, [sp, #8]
 8003c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4a:	9301      	str	r3, [sp, #4]
 8003c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	68b9      	ldr	r1, [r7, #8]
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 f80e 	bl	8003c76 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003c5a:	69f8      	ldr	r0, [r7, #28]
 8003c5c:	f000 f8a2 	bl	8003da4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003c60:	2301      	movs	r3, #1
 8003c62:	61bb      	str	r3, [r7, #24]
 8003c64:	e002      	b.n	8003c6c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c6a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003c6c:	69bb      	ldr	r3, [r7, #24]
    }
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3720      	adds	r7, #32
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b088      	sub	sp, #32
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	60f8      	str	r0, [r7, #12]
 8003c7e:	60b9      	str	r1, [r7, #8]
 8003c80:	607a      	str	r2, [r7, #4]
 8003c82:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c86:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	21a5      	movs	r1, #165	; 0xa5
 8003c90:	f003 f982 	bl	8006f98 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4413      	add	r3, r2
 8003ca4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	f023 0307 	bic.w	r3, r3, #7
 8003cac:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00a      	beq.n	8003cce <prvInitialiseNewTask+0x58>
        __asm volatile
 8003cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbc:	f383 8811 	msr	BASEPRI, r3
 8003cc0:	f3bf 8f6f 	isb	sy
 8003cc4:	f3bf 8f4f 	dsb	sy
 8003cc8:	617b      	str	r3, [r7, #20]
    }
 8003cca:	bf00      	nop
 8003ccc:	e7fe      	b.n	8003ccc <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d01f      	beq.n	8003d14 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	61fb      	str	r3, [r7, #28]
 8003cd8:	e012      	b.n	8003d00 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003cda:	68ba      	ldr	r2, [r7, #8]
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	4413      	add	r3, r2
 8003ce0:	7819      	ldrb	r1, [r3, #0]
 8003ce2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	3334      	adds	r3, #52	; 0x34
 8003cea:	460a      	mov	r2, r1
 8003cec:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d006      	beq.n	8003d08 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	61fb      	str	r3, [r7, #28]
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	2b09      	cmp	r3, #9
 8003d04:	d9e9      	bls.n	8003cda <prvInitialiseNewTask+0x64>
 8003d06:	e000      	b.n	8003d0a <prvInitialiseNewTask+0x94>
            {
                break;
 8003d08:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003d12:	e003      	b.n	8003d1c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	d901      	bls.n	8003d26 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d22:	2304      	movs	r3, #4
 8003d24:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d2a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d30:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d34:	2200      	movs	r2, #0
 8003d36:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff f96b 	bl	8003018 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d44:	3318      	adds	r3, #24
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7ff f966 	bl	8003018 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d50:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d54:	f1c3 0205 	rsb	r2, r3, #5
 8003d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d60:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d64:	3350      	adds	r3, #80	; 0x50
 8003d66:	2204      	movs	r2, #4
 8003d68:	2100      	movs	r1, #0
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f003 f914 	bl	8006f98 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d72:	3354      	adds	r3, #84	; 0x54
 8003d74:	2201      	movs	r2, #1
 8003d76:	2100      	movs	r1, #0
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f003 f90d 	bl	8006f98 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	68f9      	ldr	r1, [r7, #12]
 8003d82:	69b8      	ldr	r0, [r7, #24]
 8003d84:	f001 f8fa 	bl	8004f7c <pxPortInitialiseStack>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d002      	beq.n	8003d9a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d98:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003d9a:	bf00      	nop
 8003d9c:	3720      	adds	r7, #32
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
	...

08003da4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003da4:	b5b0      	push	{r4, r5, r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af02      	add	r7, sp, #8
 8003daa:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003dac:	f001 fa92 	bl	80052d4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003db0:	4b3b      	ldr	r3, [pc, #236]	; (8003ea0 <prvAddNewTaskToReadyList+0xfc>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	3301      	adds	r3, #1
 8003db6:	4a3a      	ldr	r2, [pc, #232]	; (8003ea0 <prvAddNewTaskToReadyList+0xfc>)
 8003db8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003dba:	4b3a      	ldr	r3, [pc, #232]	; (8003ea4 <prvAddNewTaskToReadyList+0x100>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d109      	bne.n	8003dd6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003dc2:	4a38      	ldr	r2, [pc, #224]	; (8003ea4 <prvAddNewTaskToReadyList+0x100>)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003dc8:	4b35      	ldr	r3, [pc, #212]	; (8003ea0 <prvAddNewTaskToReadyList+0xfc>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d110      	bne.n	8003df2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003dd0:	f000 fc12 	bl	80045f8 <prvInitialiseTaskLists>
 8003dd4:	e00d      	b.n	8003df2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003dd6:	4b34      	ldr	r3, [pc, #208]	; (8003ea8 <prvAddNewTaskToReadyList+0x104>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d109      	bne.n	8003df2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003dde:	4b31      	ldr	r3, [pc, #196]	; (8003ea4 <prvAddNewTaskToReadyList+0x100>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d802      	bhi.n	8003df2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003dec:	4a2d      	ldr	r2, [pc, #180]	; (8003ea4 <prvAddNewTaskToReadyList+0x100>)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003df2:	4b2e      	ldr	r3, [pc, #184]	; (8003eac <prvAddNewTaskToReadyList+0x108>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3301      	adds	r3, #1
 8003df8:	4a2c      	ldr	r2, [pc, #176]	; (8003eac <prvAddNewTaskToReadyList+0x108>)
 8003dfa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003dfc:	4b2b      	ldr	r3, [pc, #172]	; (8003eac <prvAddNewTaskToReadyList+0x108>)
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d016      	beq.n	8003e38 <prvAddNewTaskToReadyList+0x94>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f002 fe0f 	bl	8006a30 <SEGGER_SYSVIEW_OnTaskCreate>
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e22:	461d      	mov	r5, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	461c      	mov	r4, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2e:	1ae3      	subs	r3, r4, r3
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	462b      	mov	r3, r5
 8003e34:	f001 fd78 	bl	8005928 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f002 fe7c 	bl	8006b38 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e44:	2201      	movs	r2, #1
 8003e46:	409a      	lsls	r2, r3
 8003e48:	4b19      	ldr	r3, [pc, #100]	; (8003eb0 <prvAddNewTaskToReadyList+0x10c>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	4a18      	ldr	r2, [pc, #96]	; (8003eb0 <prvAddNewTaskToReadyList+0x10c>)
 8003e50:	6013      	str	r3, [r2, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e56:	4613      	mov	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4413      	add	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4a15      	ldr	r2, [pc, #84]	; (8003eb4 <prvAddNewTaskToReadyList+0x110>)
 8003e60:	441a      	add	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	3304      	adds	r3, #4
 8003e66:	4619      	mov	r1, r3
 8003e68:	4610      	mov	r0, r2
 8003e6a:	f7ff f8e2 	bl	8003032 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003e6e:	f001 fa61 	bl	8005334 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003e72:	4b0d      	ldr	r3, [pc, #52]	; (8003ea8 <prvAddNewTaskToReadyList+0x104>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00e      	beq.n	8003e98 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ea4 <prvAddNewTaskToReadyList+0x100>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d207      	bcs.n	8003e98 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003e88:	4b0b      	ldr	r3, [pc, #44]	; (8003eb8 <prvAddNewTaskToReadyList+0x114>)
 8003e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	f3bf 8f4f 	dsb	sy
 8003e94:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003e98:	bf00      	nop
 8003e9a:	3708      	adds	r7, #8
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bdb0      	pop	{r4, r5, r7, pc}
 8003ea0:	20000170 	.word	0x20000170
 8003ea4:	20000098 	.word	0x20000098
 8003ea8:	2000017c 	.word	0x2000017c
 8003eac:	2000018c 	.word	0x2000018c
 8003eb0:	20000178 	.word	0x20000178
 8003eb4:	2000009c 	.word	0x2000009c
 8003eb8:	e000ed04 	.word	0xe000ed04

08003ebc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003ec2:	4b27      	ldr	r3, [pc, #156]	; (8003f60 <vTaskStartScheduler+0xa4>)
 8003ec4:	9301      	str	r3, [sp, #4]
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	2300      	movs	r3, #0
 8003ecc:	2282      	movs	r2, #130	; 0x82
 8003ece:	4925      	ldr	r1, [pc, #148]	; (8003f64 <vTaskStartScheduler+0xa8>)
 8003ed0:	4825      	ldr	r0, [pc, #148]	; (8003f68 <vTaskStartScheduler+0xac>)
 8003ed2:	f7ff fe8f 	bl	8003bf4 <xTaskCreate>
 8003ed6:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d102      	bne.n	8003ee4 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003ede:	f000 fd3b 	bl	8004958 <xTimerCreateTimerTask>
 8003ee2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d124      	bne.n	8003f34 <vTaskStartScheduler+0x78>
        __asm volatile
 8003eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eee:	f383 8811 	msr	BASEPRI, r3
 8003ef2:	f3bf 8f6f 	isb	sy
 8003ef6:	f3bf 8f4f 	dsb	sy
 8003efa:	60bb      	str	r3, [r7, #8]
    }
 8003efc:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003efe:	4b1b      	ldr	r3, [pc, #108]	; (8003f6c <vTaskStartScheduler+0xb0>)
 8003f00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f04:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003f06:	4b1a      	ldr	r3, [pc, #104]	; (8003f70 <vTaskStartScheduler+0xb4>)
 8003f08:	2201      	movs	r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f0c:	4b19      	ldr	r3, [pc, #100]	; (8003f74 <vTaskStartScheduler+0xb8>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003f12:	4b19      	ldr	r3, [pc, #100]	; (8003f78 <vTaskStartScheduler+0xbc>)
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	4b12      	ldr	r3, [pc, #72]	; (8003f60 <vTaskStartScheduler+0xa4>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d102      	bne.n	8003f24 <vTaskStartScheduler+0x68>
 8003f1e:	f002 fd6b 	bl	80069f8 <SEGGER_SYSVIEW_OnIdle>
 8003f22:	e004      	b.n	8003f2e <vTaskStartScheduler+0x72>
 8003f24:	4b14      	ldr	r3, [pc, #80]	; (8003f78 <vTaskStartScheduler+0xbc>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f002 fdc3 	bl	8006ab4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003f2e:	f001 f8b1 	bl	8005094 <xPortStartScheduler>
 8003f32:	e00e      	b.n	8003f52 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f3a:	d10a      	bne.n	8003f52 <vTaskStartScheduler+0x96>
        __asm volatile
 8003f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f40:	f383 8811 	msr	BASEPRI, r3
 8003f44:	f3bf 8f6f 	isb	sy
 8003f48:	f3bf 8f4f 	dsb	sy
 8003f4c:	607b      	str	r3, [r7, #4]
    }
 8003f4e:	bf00      	nop
 8003f50:	e7fe      	b.n	8003f50 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003f52:	4b0a      	ldr	r3, [pc, #40]	; (8003f7c <vTaskStartScheduler+0xc0>)
 8003f54:	681b      	ldr	r3, [r3, #0]
}
 8003f56:	bf00      	nop
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	20000194 	.word	0x20000194
 8003f64:	08007f48 	.word	0x08007f48
 8003f68:	080045c9 	.word	0x080045c9
 8003f6c:	20000190 	.word	0x20000190
 8003f70:	2000017c 	.word	0x2000017c
 8003f74:	20000174 	.word	0x20000174
 8003f78:	20000098 	.word	0x20000098
 8003f7c:	2000000c 	.word	0x2000000c

08003f80 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003f84:	4b04      	ldr	r3, [pc, #16]	; (8003f98 <vTaskSuspendAll+0x18>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	4a03      	ldr	r2, [pc, #12]	; (8003f98 <vTaskSuspendAll+0x18>)
 8003f8c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003f8e:	bf00      	nop
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr
 8003f98:	20000198 	.word	0x20000198

08003f9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003faa:	4b43      	ldr	r3, [pc, #268]	; (80040b8 <xTaskResumeAll+0x11c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10a      	bne.n	8003fc8 <xTaskResumeAll+0x2c>
        __asm volatile
 8003fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb6:	f383 8811 	msr	BASEPRI, r3
 8003fba:	f3bf 8f6f 	isb	sy
 8003fbe:	f3bf 8f4f 	dsb	sy
 8003fc2:	603b      	str	r3, [r7, #0]
    }
 8003fc4:	bf00      	nop
 8003fc6:	e7fe      	b.n	8003fc6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003fc8:	f001 f984 	bl	80052d4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003fcc:	4b3a      	ldr	r3, [pc, #232]	; (80040b8 <xTaskResumeAll+0x11c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	4a39      	ldr	r2, [pc, #228]	; (80040b8 <xTaskResumeAll+0x11c>)
 8003fd4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fd6:	4b38      	ldr	r3, [pc, #224]	; (80040b8 <xTaskResumeAll+0x11c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d165      	bne.n	80040aa <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003fde:	4b37      	ldr	r3, [pc, #220]	; (80040bc <xTaskResumeAll+0x120>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d061      	beq.n	80040aa <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003fe6:	e032      	b.n	800404e <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fe8:	4b35      	ldr	r3, [pc, #212]	; (80040c0 <xTaskResumeAll+0x124>)
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	3318      	adds	r3, #24
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff f879 	bl	80030ec <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7ff f874 	bl	80030ec <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4618      	mov	r0, r3
 8004008:	f002 fd96 	bl	8006b38 <SEGGER_SYSVIEW_OnTaskStartReady>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004010:	2201      	movs	r2, #1
 8004012:	409a      	lsls	r2, r3
 8004014:	4b2b      	ldr	r3, [pc, #172]	; (80040c4 <xTaskResumeAll+0x128>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4313      	orrs	r3, r2
 800401a:	4a2a      	ldr	r2, [pc, #168]	; (80040c4 <xTaskResumeAll+0x128>)
 800401c:	6013      	str	r3, [r2, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004022:	4613      	mov	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4a27      	ldr	r2, [pc, #156]	; (80040c8 <xTaskResumeAll+0x12c>)
 800402c:	441a      	add	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	3304      	adds	r3, #4
 8004032:	4619      	mov	r1, r3
 8004034:	4610      	mov	r0, r2
 8004036:	f7fe fffc 	bl	8003032 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800403e:	4b23      	ldr	r3, [pc, #140]	; (80040cc <xTaskResumeAll+0x130>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004044:	429a      	cmp	r2, r3
 8004046:	d302      	bcc.n	800404e <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8004048:	4b21      	ldr	r3, [pc, #132]	; (80040d0 <xTaskResumeAll+0x134>)
 800404a:	2201      	movs	r2, #1
 800404c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800404e:	4b1c      	ldr	r3, [pc, #112]	; (80040c0 <xTaskResumeAll+0x124>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1c8      	bne.n	8003fe8 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800405c:	f000 fb4a 	bl	80046f4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004060:	4b1c      	ldr	r3, [pc, #112]	; (80040d4 <xTaskResumeAll+0x138>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d010      	beq.n	800408e <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800406c:	f000 f846 	bl	80040fc <xTaskIncrementTick>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d002      	beq.n	800407c <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8004076:	4b16      	ldr	r3, [pc, #88]	; (80040d0 <xTaskResumeAll+0x134>)
 8004078:	2201      	movs	r2, #1
 800407a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3b01      	subs	r3, #1
 8004080:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1f1      	bne.n	800406c <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8004088:	4b12      	ldr	r3, [pc, #72]	; (80040d4 <xTaskResumeAll+0x138>)
 800408a:	2200      	movs	r2, #0
 800408c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800408e:	4b10      	ldr	r3, [pc, #64]	; (80040d0 <xTaskResumeAll+0x134>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d009      	beq.n	80040aa <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8004096:	2301      	movs	r3, #1
 8004098:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800409a:	4b0f      	ldr	r3, [pc, #60]	; (80040d8 <xTaskResumeAll+0x13c>)
 800409c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	f3bf 8f4f 	dsb	sy
 80040a6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80040aa:	f001 f943 	bl	8005334 <vPortExitCritical>

    return xAlreadyYielded;
 80040ae:	68bb      	ldr	r3, [r7, #8]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	20000198 	.word	0x20000198
 80040bc:	20000170 	.word	0x20000170
 80040c0:	20000130 	.word	0x20000130
 80040c4:	20000178 	.word	0x20000178
 80040c8:	2000009c 	.word	0x2000009c
 80040cc:	20000098 	.word	0x20000098
 80040d0:	20000184 	.word	0x20000184
 80040d4:	20000180 	.word	0x20000180
 80040d8:	e000ed04 	.word	0xe000ed04

080040dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80040e2:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <xTaskGetTickCount+0x1c>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80040e8:	687b      	ldr	r3, [r7, #4]
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	20000174 	.word	0x20000174

080040fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004102:	2300      	movs	r3, #0
 8004104:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004106:	4b50      	ldr	r3, [pc, #320]	; (8004248 <xTaskIncrementTick+0x14c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	f040 8092 	bne.w	8004234 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004110:	4b4e      	ldr	r3, [pc, #312]	; (800424c <xTaskIncrementTick+0x150>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3301      	adds	r3, #1
 8004116:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004118:	4a4c      	ldr	r2, [pc, #304]	; (800424c <xTaskIncrementTick+0x150>)
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d120      	bne.n	8004166 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8004124:	4b4a      	ldr	r3, [pc, #296]	; (8004250 <xTaskIncrementTick+0x154>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <xTaskIncrementTick+0x48>
        __asm volatile
 800412e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004132:	f383 8811 	msr	BASEPRI, r3
 8004136:	f3bf 8f6f 	isb	sy
 800413a:	f3bf 8f4f 	dsb	sy
 800413e:	603b      	str	r3, [r7, #0]
    }
 8004140:	bf00      	nop
 8004142:	e7fe      	b.n	8004142 <xTaskIncrementTick+0x46>
 8004144:	4b42      	ldr	r3, [pc, #264]	; (8004250 <xTaskIncrementTick+0x154>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	60fb      	str	r3, [r7, #12]
 800414a:	4b42      	ldr	r3, [pc, #264]	; (8004254 <xTaskIncrementTick+0x158>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a40      	ldr	r2, [pc, #256]	; (8004250 <xTaskIncrementTick+0x154>)
 8004150:	6013      	str	r3, [r2, #0]
 8004152:	4a40      	ldr	r2, [pc, #256]	; (8004254 <xTaskIncrementTick+0x158>)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6013      	str	r3, [r2, #0]
 8004158:	4b3f      	ldr	r3, [pc, #252]	; (8004258 <xTaskIncrementTick+0x15c>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	3301      	adds	r3, #1
 800415e:	4a3e      	ldr	r2, [pc, #248]	; (8004258 <xTaskIncrementTick+0x15c>)
 8004160:	6013      	str	r3, [r2, #0]
 8004162:	f000 fac7 	bl	80046f4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004166:	4b3d      	ldr	r3, [pc, #244]	; (800425c <xTaskIncrementTick+0x160>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	429a      	cmp	r2, r3
 800416e:	d34c      	bcc.n	800420a <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004170:	4b37      	ldr	r3, [pc, #220]	; (8004250 <xTaskIncrementTick+0x154>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d104      	bne.n	8004184 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800417a:	4b38      	ldr	r3, [pc, #224]	; (800425c <xTaskIncrementTick+0x160>)
 800417c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004180:	601a      	str	r2, [r3, #0]
                    break;
 8004182:	e042      	b.n	800420a <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004184:	4b32      	ldr	r3, [pc, #200]	; (8004250 <xTaskIncrementTick+0x154>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	429a      	cmp	r2, r3
 800419a:	d203      	bcs.n	80041a4 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800419c:	4a2f      	ldr	r2, [pc, #188]	; (800425c <xTaskIncrementTick+0x160>)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80041a2:	e032      	b.n	800420a <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	3304      	adds	r3, #4
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7fe ff9f 	bl	80030ec <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d004      	beq.n	80041c0 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	3318      	adds	r3, #24
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fe ff96 	bl	80030ec <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f002 fcb8 	bl	8006b38 <SEGGER_SYSVIEW_OnTaskStartReady>
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041cc:	2201      	movs	r2, #1
 80041ce:	409a      	lsls	r2, r3
 80041d0:	4b23      	ldr	r3, [pc, #140]	; (8004260 <xTaskIncrementTick+0x164>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	4a22      	ldr	r2, [pc, #136]	; (8004260 <xTaskIncrementTick+0x164>)
 80041d8:	6013      	str	r3, [r2, #0]
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041de:	4613      	mov	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4a1f      	ldr	r2, [pc, #124]	; (8004264 <xTaskIncrementTick+0x168>)
 80041e8:	441a      	add	r2, r3
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	3304      	adds	r3, #4
 80041ee:	4619      	mov	r1, r3
 80041f0:	4610      	mov	r0, r2
 80041f2:	f7fe ff1e 	bl	8003032 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041fa:	4b1b      	ldr	r3, [pc, #108]	; (8004268 <xTaskIncrementTick+0x16c>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004200:	429a      	cmp	r2, r3
 8004202:	d3b5      	bcc.n	8004170 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8004204:	2301      	movs	r3, #1
 8004206:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004208:	e7b2      	b.n	8004170 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800420a:	4b17      	ldr	r3, [pc, #92]	; (8004268 <xTaskIncrementTick+0x16c>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004210:	4914      	ldr	r1, [pc, #80]	; (8004264 <xTaskIncrementTick+0x168>)
 8004212:	4613      	mov	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	440b      	add	r3, r1
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d901      	bls.n	8004226 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8004222:	2301      	movs	r3, #1
 8004224:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8004226:	4b11      	ldr	r3, [pc, #68]	; (800426c <xTaskIncrementTick+0x170>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d007      	beq.n	800423e <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 800422e:	2301      	movs	r3, #1
 8004230:	617b      	str	r3, [r7, #20]
 8004232:	e004      	b.n	800423e <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004234:	4b0e      	ldr	r3, [pc, #56]	; (8004270 <xTaskIncrementTick+0x174>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	3301      	adds	r3, #1
 800423a:	4a0d      	ldr	r2, [pc, #52]	; (8004270 <xTaskIncrementTick+0x174>)
 800423c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800423e:	697b      	ldr	r3, [r7, #20]
}
 8004240:	4618      	mov	r0, r3
 8004242:	3718      	adds	r7, #24
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	20000198 	.word	0x20000198
 800424c:	20000174 	.word	0x20000174
 8004250:	20000128 	.word	0x20000128
 8004254:	2000012c 	.word	0x2000012c
 8004258:	20000188 	.word	0x20000188
 800425c:	20000190 	.word	0x20000190
 8004260:	20000178 	.word	0x20000178
 8004264:	2000009c 	.word	0x2000009c
 8004268:	20000098 	.word	0x20000098
 800426c:	20000184 	.word	0x20000184
 8004270:	20000180 	.word	0x20000180

08004274 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800427a:	4b2d      	ldr	r3, [pc, #180]	; (8004330 <vTaskSwitchContext+0xbc>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004282:	4b2c      	ldr	r3, [pc, #176]	; (8004334 <vTaskSwitchContext+0xc0>)
 8004284:	2201      	movs	r2, #1
 8004286:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004288:	e04d      	b.n	8004326 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800428a:	4b2a      	ldr	r3, [pc, #168]	; (8004334 <vTaskSwitchContext+0xc0>)
 800428c:	2200      	movs	r2, #0
 800428e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004290:	4b29      	ldr	r3, [pc, #164]	; (8004338 <vTaskSwitchContext+0xc4>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	fab3 f383 	clz	r3, r3
 800429c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800429e:	7afb      	ldrb	r3, [r7, #11]
 80042a0:	f1c3 031f 	rsb	r3, r3, #31
 80042a4:	617b      	str	r3, [r7, #20]
 80042a6:	4925      	ldr	r1, [pc, #148]	; (800433c <vTaskSwitchContext+0xc8>)
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	4613      	mov	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	440b      	add	r3, r1
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10a      	bne.n	80042d0 <vTaskSwitchContext+0x5c>
        __asm volatile
 80042ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042be:	f383 8811 	msr	BASEPRI, r3
 80042c2:	f3bf 8f6f 	isb	sy
 80042c6:	f3bf 8f4f 	dsb	sy
 80042ca:	607b      	str	r3, [r7, #4]
    }
 80042cc:	bf00      	nop
 80042ce:	e7fe      	b.n	80042ce <vTaskSwitchContext+0x5a>
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	4613      	mov	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4413      	add	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4a18      	ldr	r2, [pc, #96]	; (800433c <vTaskSwitchContext+0xc8>)
 80042dc:	4413      	add	r3, r2
 80042de:	613b      	str	r3, [r7, #16]
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	605a      	str	r2, [r3, #4]
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	3308      	adds	r3, #8
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d104      	bne.n	8004300 <vTaskSwitchContext+0x8c>
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	605a      	str	r2, [r3, #4]
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	4a0e      	ldr	r2, [pc, #56]	; (8004340 <vTaskSwitchContext+0xcc>)
 8004308:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800430a:	4b0d      	ldr	r3, [pc, #52]	; (8004340 <vTaskSwitchContext+0xcc>)
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	4b0d      	ldr	r3, [pc, #52]	; (8004344 <vTaskSwitchContext+0xd0>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	429a      	cmp	r2, r3
 8004314:	d102      	bne.n	800431c <vTaskSwitchContext+0xa8>
 8004316:	f002 fb6f 	bl	80069f8 <SEGGER_SYSVIEW_OnIdle>
}
 800431a:	e004      	b.n	8004326 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 800431c:	4b08      	ldr	r3, [pc, #32]	; (8004340 <vTaskSwitchContext+0xcc>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4618      	mov	r0, r3
 8004322:	f002 fbc7 	bl	8006ab4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8004326:	bf00      	nop
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	20000198 	.word	0x20000198
 8004334:	20000184 	.word	0x20000184
 8004338:	20000178 	.word	0x20000178
 800433c:	2000009c 	.word	0x2000009c
 8004340:	20000098 	.word	0x20000098
 8004344:	20000194 	.word	0x20000194

08004348 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10a      	bne.n	800436e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435c:	f383 8811 	msr	BASEPRI, r3
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	60fb      	str	r3, [r7, #12]
    }
 800436a:	bf00      	nop
 800436c:	e7fe      	b.n	800436c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800436e:	4b07      	ldr	r3, [pc, #28]	; (800438c <vTaskPlaceOnEventList+0x44>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	3318      	adds	r3, #24
 8004374:	4619      	mov	r1, r3
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7fe fe7f 	bl	800307a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800437c:	2101      	movs	r1, #1
 800437e:	6838      	ldr	r0, [r7, #0]
 8004380:	f000 fa72 	bl	8004868 <prvAddCurrentTaskToDelayedList>
}
 8004384:	bf00      	nop
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	20000098 	.word	0x20000098

08004390 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10a      	bne.n	80043b8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80043a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a6:	f383 8811 	msr	BASEPRI, r3
 80043aa:	f3bf 8f6f 	isb	sy
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	617b      	str	r3, [r7, #20]
    }
 80043b4:	bf00      	nop
 80043b6:	e7fe      	b.n	80043b6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043b8:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <vTaskPlaceOnEventListRestricted+0x58>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	3318      	adds	r3, #24
 80043be:	4619      	mov	r1, r3
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f7fe fe36 	bl	8003032 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d002      	beq.n	80043d2 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80043cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043d0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80043d2:	2024      	movs	r0, #36	; 0x24
 80043d4:	f001 fe36 	bl	8006044 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	68b8      	ldr	r0, [r7, #8]
 80043dc:	f000 fa44 	bl	8004868 <prvAddCurrentTaskToDelayedList>
    }
 80043e0:	bf00      	nop
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	20000098 	.word	0x20000098

080043ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10a      	bne.n	8004418 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8004402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004406:	f383 8811 	msr	BASEPRI, r3
 800440a:	f3bf 8f6f 	isb	sy
 800440e:	f3bf 8f4f 	dsb	sy
 8004412:	60fb      	str	r3, [r7, #12]
    }
 8004414:	bf00      	nop
 8004416:	e7fe      	b.n	8004416 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	3318      	adds	r3, #24
 800441c:	4618      	mov	r0, r3
 800441e:	f7fe fe65 	bl	80030ec <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004422:	4b1f      	ldr	r3, [pc, #124]	; (80044a0 <xTaskRemoveFromEventList+0xb4>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d120      	bne.n	800446c <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	3304      	adds	r3, #4
 800442e:	4618      	mov	r0, r3
 8004430:	f7fe fe5c 	bl	80030ec <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	4618      	mov	r0, r3
 8004438:	f002 fb7e 	bl	8006b38 <SEGGER_SYSVIEW_OnTaskStartReady>
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004440:	2201      	movs	r2, #1
 8004442:	409a      	lsls	r2, r3
 8004444:	4b17      	ldr	r3, [pc, #92]	; (80044a4 <xTaskRemoveFromEventList+0xb8>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4313      	orrs	r3, r2
 800444a:	4a16      	ldr	r2, [pc, #88]	; (80044a4 <xTaskRemoveFromEventList+0xb8>)
 800444c:	6013      	str	r3, [r2, #0]
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004452:	4613      	mov	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4413      	add	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4a13      	ldr	r2, [pc, #76]	; (80044a8 <xTaskRemoveFromEventList+0xbc>)
 800445c:	441a      	add	r2, r3
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	3304      	adds	r3, #4
 8004462:	4619      	mov	r1, r3
 8004464:	4610      	mov	r0, r2
 8004466:	f7fe fde4 	bl	8003032 <vListInsertEnd>
 800446a:	e005      	b.n	8004478 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	3318      	adds	r3, #24
 8004470:	4619      	mov	r1, r3
 8004472:	480e      	ldr	r0, [pc, #56]	; (80044ac <xTaskRemoveFromEventList+0xc0>)
 8004474:	f7fe fddd 	bl	8003032 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447c:	4b0c      	ldr	r3, [pc, #48]	; (80044b0 <xTaskRemoveFromEventList+0xc4>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004482:	429a      	cmp	r2, r3
 8004484:	d905      	bls.n	8004492 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004486:	2301      	movs	r3, #1
 8004488:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800448a:	4b0a      	ldr	r3, [pc, #40]	; (80044b4 <xTaskRemoveFromEventList+0xc8>)
 800448c:	2201      	movs	r2, #1
 800448e:	601a      	str	r2, [r3, #0]
 8004490:	e001      	b.n	8004496 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8004492:	2300      	movs	r3, #0
 8004494:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004496:	697b      	ldr	r3, [r7, #20]
}
 8004498:	4618      	mov	r0, r3
 800449a:	3718      	adds	r7, #24
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	20000198 	.word	0x20000198
 80044a4:	20000178 	.word	0x20000178
 80044a8:	2000009c 	.word	0x2000009c
 80044ac:	20000130 	.word	0x20000130
 80044b0:	20000098 	.word	0x20000098
 80044b4:	20000184 	.word	0x20000184

080044b8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80044c0:	4b06      	ldr	r3, [pc, #24]	; (80044dc <vTaskInternalSetTimeOutState+0x24>)
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80044c8:	4b05      	ldr	r3, [pc, #20]	; (80044e0 <vTaskInternalSetTimeOutState+0x28>)
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	605a      	str	r2, [r3, #4]
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	20000188 	.word	0x20000188
 80044e0:	20000174 	.word	0x20000174

080044e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b088      	sub	sp, #32
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10a      	bne.n	800450a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80044f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f8:	f383 8811 	msr	BASEPRI, r3
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	613b      	str	r3, [r7, #16]
    }
 8004506:	bf00      	nop
 8004508:	e7fe      	b.n	8004508 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10a      	bne.n	8004526 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004514:	f383 8811 	msr	BASEPRI, r3
 8004518:	f3bf 8f6f 	isb	sy
 800451c:	f3bf 8f4f 	dsb	sy
 8004520:	60fb      	str	r3, [r7, #12]
    }
 8004522:	bf00      	nop
 8004524:	e7fe      	b.n	8004524 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004526:	f000 fed5 	bl	80052d4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800452a:	4b1f      	ldr	r3, [pc, #124]	; (80045a8 <xTaskCheckForTimeOut+0xc4>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004542:	d102      	bne.n	800454a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004544:	2300      	movs	r3, #0
 8004546:	61fb      	str	r3, [r7, #28]
 8004548:	e026      	b.n	8004598 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	4b17      	ldr	r3, [pc, #92]	; (80045ac <xTaskCheckForTimeOut+0xc8>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	429a      	cmp	r2, r3
 8004554:	d00a      	beq.n	800456c <xTaskCheckForTimeOut+0x88>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	429a      	cmp	r2, r3
 800455e:	d305      	bcc.n	800456c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004560:	2301      	movs	r3, #1
 8004562:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	2200      	movs	r2, #0
 8004568:	601a      	str	r2, [r3, #0]
 800456a:	e015      	b.n	8004598 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	429a      	cmp	r2, r3
 8004574:	d20b      	bcs.n	800458e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	1ad2      	subs	r2, r2, r3
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7ff ff98 	bl	80044b8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004588:	2300      	movs	r3, #0
 800458a:	61fb      	str	r3, [r7, #28]
 800458c:	e004      	b.n	8004598 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	2200      	movs	r2, #0
 8004592:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004594:	2301      	movs	r3, #1
 8004596:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004598:	f000 fecc 	bl	8005334 <vPortExitCritical>

    return xReturn;
 800459c:	69fb      	ldr	r3, [r7, #28]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3720      	adds	r7, #32
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	20000174 	.word	0x20000174
 80045ac:	20000188 	.word	0x20000188

080045b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80045b0:	b480      	push	{r7}
 80045b2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80045b4:	4b03      	ldr	r3, [pc, #12]	; (80045c4 <vTaskMissedYield+0x14>)
 80045b6:	2201      	movs	r2, #1
 80045b8:	601a      	str	r2, [r3, #0]
}
 80045ba:	bf00      	nop
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	20000184 	.word	0x20000184

080045c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80045d0:	f000 f852 	bl	8004678 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80045d4:	4b06      	ldr	r3, [pc, #24]	; (80045f0 <prvIdleTask+0x28>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d9f9      	bls.n	80045d0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80045dc:	4b05      	ldr	r3, [pc, #20]	; (80045f4 <prvIdleTask+0x2c>)
 80045de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80045ec:	e7f0      	b.n	80045d0 <prvIdleTask+0x8>
 80045ee:	bf00      	nop
 80045f0:	2000009c 	.word	0x2000009c
 80045f4:	e000ed04 	.word	0xe000ed04

080045f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045fe:	2300      	movs	r3, #0
 8004600:	607b      	str	r3, [r7, #4]
 8004602:	e00c      	b.n	800461e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	4613      	mov	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4413      	add	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4a12      	ldr	r2, [pc, #72]	; (8004658 <prvInitialiseTaskLists+0x60>)
 8004610:	4413      	add	r3, r2
 8004612:	4618      	mov	r0, r3
 8004614:	f7fe fce0 	bl	8002fd8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3301      	adds	r3, #1
 800461c:	607b      	str	r3, [r7, #4]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b04      	cmp	r3, #4
 8004622:	d9ef      	bls.n	8004604 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004624:	480d      	ldr	r0, [pc, #52]	; (800465c <prvInitialiseTaskLists+0x64>)
 8004626:	f7fe fcd7 	bl	8002fd8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800462a:	480d      	ldr	r0, [pc, #52]	; (8004660 <prvInitialiseTaskLists+0x68>)
 800462c:	f7fe fcd4 	bl	8002fd8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004630:	480c      	ldr	r0, [pc, #48]	; (8004664 <prvInitialiseTaskLists+0x6c>)
 8004632:	f7fe fcd1 	bl	8002fd8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004636:	480c      	ldr	r0, [pc, #48]	; (8004668 <prvInitialiseTaskLists+0x70>)
 8004638:	f7fe fcce 	bl	8002fd8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800463c:	480b      	ldr	r0, [pc, #44]	; (800466c <prvInitialiseTaskLists+0x74>)
 800463e:	f7fe fccb 	bl	8002fd8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004642:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <prvInitialiseTaskLists+0x78>)
 8004644:	4a05      	ldr	r2, [pc, #20]	; (800465c <prvInitialiseTaskLists+0x64>)
 8004646:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004648:	4b0a      	ldr	r3, [pc, #40]	; (8004674 <prvInitialiseTaskLists+0x7c>)
 800464a:	4a05      	ldr	r2, [pc, #20]	; (8004660 <prvInitialiseTaskLists+0x68>)
 800464c:	601a      	str	r2, [r3, #0]
}
 800464e:	bf00      	nop
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	2000009c 	.word	0x2000009c
 800465c:	20000100 	.word	0x20000100
 8004660:	20000114 	.word	0x20000114
 8004664:	20000130 	.word	0x20000130
 8004668:	20000144 	.word	0x20000144
 800466c:	2000015c 	.word	0x2000015c
 8004670:	20000128 	.word	0x20000128
 8004674:	2000012c 	.word	0x2000012c

08004678 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800467e:	e019      	b.n	80046b4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004680:	f000 fe28 	bl	80052d4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004684:	4b10      	ldr	r3, [pc, #64]	; (80046c8 <prvCheckTasksWaitingTermination+0x50>)
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	3304      	adds	r3, #4
 8004690:	4618      	mov	r0, r3
 8004692:	f7fe fd2b 	bl	80030ec <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004696:	4b0d      	ldr	r3, [pc, #52]	; (80046cc <prvCheckTasksWaitingTermination+0x54>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	3b01      	subs	r3, #1
 800469c:	4a0b      	ldr	r2, [pc, #44]	; (80046cc <prvCheckTasksWaitingTermination+0x54>)
 800469e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80046a0:	4b0b      	ldr	r3, [pc, #44]	; (80046d0 <prvCheckTasksWaitingTermination+0x58>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	3b01      	subs	r3, #1
 80046a6:	4a0a      	ldr	r2, [pc, #40]	; (80046d0 <prvCheckTasksWaitingTermination+0x58>)
 80046a8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80046aa:	f000 fe43 	bl	8005334 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f810 	bl	80046d4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046b4:	4b06      	ldr	r3, [pc, #24]	; (80046d0 <prvCheckTasksWaitingTermination+0x58>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1e1      	bne.n	8004680 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80046bc:	bf00      	nop
 80046be:	bf00      	nop
 80046c0:	3708      	adds	r7, #8
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	20000144 	.word	0x20000144
 80046cc:	20000170 	.word	0x20000170
 80046d0:	20000158 	.word	0x20000158

080046d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e0:	4618      	mov	r0, r3
 80046e2:	f001 f803 	bl	80056ec <vPortFree>
                vPortFree( pxTCB );
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f001 f800 	bl	80056ec <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80046ec:	bf00      	nop
 80046ee:	3708      	adds	r7, #8
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046f8:	4b0a      	ldr	r3, [pc, #40]	; (8004724 <prvResetNextTaskUnblockTime+0x30>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d104      	bne.n	800470c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004702:	4b09      	ldr	r3, [pc, #36]	; (8004728 <prvResetNextTaskUnblockTime+0x34>)
 8004704:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004708:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800470a:	e005      	b.n	8004718 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800470c:	4b05      	ldr	r3, [pc, #20]	; (8004724 <prvResetNextTaskUnblockTime+0x30>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a04      	ldr	r2, [pc, #16]	; (8004728 <prvResetNextTaskUnblockTime+0x34>)
 8004716:	6013      	str	r3, [r2, #0]
}
 8004718:	bf00      	nop
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	20000128 	.word	0x20000128
 8004728:	20000190 	.word	0x20000190

0800472c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004732:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <xTaskGetSchedulerState+0x34>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d102      	bne.n	8004740 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800473a:	2301      	movs	r3, #1
 800473c:	607b      	str	r3, [r7, #4]
 800473e:	e008      	b.n	8004752 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004740:	4b08      	ldr	r3, [pc, #32]	; (8004764 <xTaskGetSchedulerState+0x38>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d102      	bne.n	800474e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004748:	2302      	movs	r3, #2
 800474a:	607b      	str	r3, [r7, #4]
 800474c:	e001      	b.n	8004752 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800474e:	2300      	movs	r3, #0
 8004750:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004752:	687b      	ldr	r3, [r7, #4]
    }
 8004754:	4618      	mov	r0, r3
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr
 8004760:	2000017c 	.word	0x2000017c
 8004764:	20000198 	.word	0x20000198

08004768 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004774:	2300      	movs	r3, #0
 8004776:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d068      	beq.n	8004850 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800477e:	4b37      	ldr	r3, [pc, #220]	; (800485c <xTaskPriorityDisinherit+0xf4>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	429a      	cmp	r2, r3
 8004786:	d00a      	beq.n	800479e <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8004788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478c:	f383 8811 	msr	BASEPRI, r3
 8004790:	f3bf 8f6f 	isb	sy
 8004794:	f3bf 8f4f 	dsb	sy
 8004798:	60fb      	str	r3, [r7, #12]
    }
 800479a:	bf00      	nop
 800479c:	e7fe      	b.n	800479c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10a      	bne.n	80047bc <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80047a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047aa:	f383 8811 	msr	BASEPRI, r3
 80047ae:	f3bf 8f6f 	isb	sy
 80047b2:	f3bf 8f4f 	dsb	sy
 80047b6:	60bb      	str	r3, [r7, #8]
    }
 80047b8:	bf00      	nop
 80047ba:	e7fe      	b.n	80047ba <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047c0:	1e5a      	subs	r2, r3, #1
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d03e      	beq.n	8004850 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d13a      	bne.n	8004850 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	3304      	adds	r3, #4
 80047de:	4618      	mov	r0, r3
 80047e0:	f7fe fc84 	bl	80030ec <uxListRemove>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10a      	bne.n	8004800 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ee:	2201      	movs	r2, #1
 80047f0:	fa02 f303 	lsl.w	r3, r2, r3
 80047f4:	43da      	mvns	r2, r3
 80047f6:	4b1a      	ldr	r3, [pc, #104]	; (8004860 <xTaskPriorityDisinherit+0xf8>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4013      	ands	r3, r2
 80047fc:	4a18      	ldr	r2, [pc, #96]	; (8004860 <xTaskPriorityDisinherit+0xf8>)
 80047fe:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4619      	mov	r1, r3
 8004804:	204a      	movs	r0, #74	; 0x4a
 8004806:	f001 fc3b 	bl	8006080 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004816:	f1c3 0205 	rsb	r2, r3, #5
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004822:	2201      	movs	r2, #1
 8004824:	409a      	lsls	r2, r3
 8004826:	4b0e      	ldr	r3, [pc, #56]	; (8004860 <xTaskPriorityDisinherit+0xf8>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4313      	orrs	r3, r2
 800482c:	4a0c      	ldr	r2, [pc, #48]	; (8004860 <xTaskPriorityDisinherit+0xf8>)
 800482e:	6013      	str	r3, [r2, #0]
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004834:	4613      	mov	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4a09      	ldr	r2, [pc, #36]	; (8004864 <xTaskPriorityDisinherit+0xfc>)
 800483e:	441a      	add	r2, r3
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	3304      	adds	r3, #4
 8004844:	4619      	mov	r1, r3
 8004846:	4610      	mov	r0, r2
 8004848:	f7fe fbf3 	bl	8003032 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800484c:	2301      	movs	r3, #1
 800484e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004850:	697b      	ldr	r3, [r7, #20]
    }
 8004852:	4618      	mov	r0, r3
 8004854:	3718      	adds	r7, #24
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	20000098 	.word	0x20000098
 8004860:	20000178 	.word	0x20000178
 8004864:	2000009c 	.word	0x2000009c

08004868 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004872:	4b32      	ldr	r3, [pc, #200]	; (800493c <prvAddCurrentTaskToDelayedList+0xd4>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004878:	4b31      	ldr	r3, [pc, #196]	; (8004940 <prvAddCurrentTaskToDelayedList+0xd8>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	3304      	adds	r3, #4
 800487e:	4618      	mov	r0, r3
 8004880:	f7fe fc34 	bl	80030ec <uxListRemove>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10b      	bne.n	80048a2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800488a:	4b2d      	ldr	r3, [pc, #180]	; (8004940 <prvAddCurrentTaskToDelayedList+0xd8>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004890:	2201      	movs	r2, #1
 8004892:	fa02 f303 	lsl.w	r3, r2, r3
 8004896:	43da      	mvns	r2, r3
 8004898:	4b2a      	ldr	r3, [pc, #168]	; (8004944 <prvAddCurrentTaskToDelayedList+0xdc>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4013      	ands	r3, r2
 800489e:	4a29      	ldr	r2, [pc, #164]	; (8004944 <prvAddCurrentTaskToDelayedList+0xdc>)
 80048a0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048a8:	d110      	bne.n	80048cc <prvAddCurrentTaskToDelayedList+0x64>
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00d      	beq.n	80048cc <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80048b0:	4b23      	ldr	r3, [pc, #140]	; (8004940 <prvAddCurrentTaskToDelayedList+0xd8>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	211b      	movs	r1, #27
 80048b6:	4618      	mov	r0, r3
 80048b8:	f002 f980 	bl	8006bbc <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048bc:	4b20      	ldr	r3, [pc, #128]	; (8004940 <prvAddCurrentTaskToDelayedList+0xd8>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3304      	adds	r3, #4
 80048c2:	4619      	mov	r1, r3
 80048c4:	4820      	ldr	r0, [pc, #128]	; (8004948 <prvAddCurrentTaskToDelayedList+0xe0>)
 80048c6:	f7fe fbb4 	bl	8003032 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80048ca:	e032      	b.n	8004932 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4413      	add	r3, r2
 80048d2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80048d4:	4b1a      	ldr	r3, [pc, #104]	; (8004940 <prvAddCurrentTaskToDelayedList+0xd8>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d20f      	bcs.n	8004904 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80048e4:	4b16      	ldr	r3, [pc, #88]	; (8004940 <prvAddCurrentTaskToDelayedList+0xd8>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2104      	movs	r1, #4
 80048ea:	4618      	mov	r0, r3
 80048ec:	f002 f966 	bl	8006bbc <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048f0:	4b16      	ldr	r3, [pc, #88]	; (800494c <prvAddCurrentTaskToDelayedList+0xe4>)
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	4b12      	ldr	r3, [pc, #72]	; (8004940 <prvAddCurrentTaskToDelayedList+0xd8>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	3304      	adds	r3, #4
 80048fa:	4619      	mov	r1, r3
 80048fc:	4610      	mov	r0, r2
 80048fe:	f7fe fbbc 	bl	800307a <vListInsert>
}
 8004902:	e016      	b.n	8004932 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8004904:	4b0e      	ldr	r3, [pc, #56]	; (8004940 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2104      	movs	r1, #4
 800490a:	4618      	mov	r0, r3
 800490c:	f002 f956 	bl	8006bbc <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004910:	4b0f      	ldr	r3, [pc, #60]	; (8004950 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	4b0a      	ldr	r3, [pc, #40]	; (8004940 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	3304      	adds	r3, #4
 800491a:	4619      	mov	r1, r3
 800491c:	4610      	mov	r0, r2
 800491e:	f7fe fbac 	bl	800307a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004922:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <prvAddCurrentTaskToDelayedList+0xec>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	429a      	cmp	r2, r3
 800492a:	d202      	bcs.n	8004932 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 800492c:	4a09      	ldr	r2, [pc, #36]	; (8004954 <prvAddCurrentTaskToDelayedList+0xec>)
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	6013      	str	r3, [r2, #0]
}
 8004932:	bf00      	nop
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	20000174 	.word	0x20000174
 8004940:	20000098 	.word	0x20000098
 8004944:	20000178 	.word	0x20000178
 8004948:	2000015c 	.word	0x2000015c
 800494c:	2000012c 	.word	0x2000012c
 8004950:	20000128 	.word	0x20000128
 8004954:	20000190 	.word	0x20000190

08004958 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800495e:	2300      	movs	r3, #0
 8004960:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004962:	f000 fad5 	bl	8004f10 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004966:	4b11      	ldr	r3, [pc, #68]	; (80049ac <xTimerCreateTimerTask+0x54>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00b      	beq.n	8004986 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800496e:	4b10      	ldr	r3, [pc, #64]	; (80049b0 <xTimerCreateTimerTask+0x58>)
 8004970:	9301      	str	r3, [sp, #4]
 8004972:	2302      	movs	r3, #2
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	2300      	movs	r3, #0
 8004978:	f44f 7282 	mov.w	r2, #260	; 0x104
 800497c:	490d      	ldr	r1, [pc, #52]	; (80049b4 <xTimerCreateTimerTask+0x5c>)
 800497e:	480e      	ldr	r0, [pc, #56]	; (80049b8 <xTimerCreateTimerTask+0x60>)
 8004980:	f7ff f938 	bl	8003bf4 <xTaskCreate>
 8004984:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10a      	bne.n	80049a2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800498c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	603b      	str	r3, [r7, #0]
    }
 800499e:	bf00      	nop
 80049a0:	e7fe      	b.n	80049a0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80049a2:	687b      	ldr	r3, [r7, #4]
    }
 80049a4:	4618      	mov	r0, r3
 80049a6:	3708      	adds	r7, #8
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	200001cc 	.word	0x200001cc
 80049b0:	200001d0 	.word	0x200001d0
 80049b4:	08007f50 	.word	0x08007f50
 80049b8:	08004af1 	.word	0x08004af1

080049bc <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80049bc:	b580      	push	{r7, lr}
 80049be:	b08a      	sub	sp, #40	; 0x28
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
 80049c8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80049ca:	2300      	movs	r3, #0
 80049cc:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10a      	bne.n	80049ea <xTimerGenericCommand+0x2e>
        __asm volatile
 80049d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d8:	f383 8811 	msr	BASEPRI, r3
 80049dc:	f3bf 8f6f 	isb	sy
 80049e0:	f3bf 8f4f 	dsb	sy
 80049e4:	623b      	str	r3, [r7, #32]
    }
 80049e6:	bf00      	nop
 80049e8:	e7fe      	b.n	80049e8 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80049ea:	4b1a      	ldr	r3, [pc, #104]	; (8004a54 <xTimerGenericCommand+0x98>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d02a      	beq.n	8004a48 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	2b05      	cmp	r3, #5
 8004a02:	dc18      	bgt.n	8004a36 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004a04:	f7ff fe92 	bl	800472c <xTaskGetSchedulerState>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d109      	bne.n	8004a22 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004a0e:	4b11      	ldr	r3, [pc, #68]	; (8004a54 <xTimerGenericCommand+0x98>)
 8004a10:	6818      	ldr	r0, [r3, #0]
 8004a12:	f107 0114 	add.w	r1, r7, #20
 8004a16:	2300      	movs	r3, #0
 8004a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a1a:	f7fe fc81 	bl	8003320 <xQueueGenericSend>
 8004a1e:	6278      	str	r0, [r7, #36]	; 0x24
 8004a20:	e012      	b.n	8004a48 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004a22:	4b0c      	ldr	r3, [pc, #48]	; (8004a54 <xTimerGenericCommand+0x98>)
 8004a24:	6818      	ldr	r0, [r3, #0]
 8004a26:	f107 0114 	add.w	r1, r7, #20
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f7fe fc77 	bl	8003320 <xQueueGenericSend>
 8004a32:	6278      	str	r0, [r7, #36]	; 0x24
 8004a34:	e008      	b.n	8004a48 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004a36:	4b07      	ldr	r3, [pc, #28]	; (8004a54 <xTimerGenericCommand+0x98>)
 8004a38:	6818      	ldr	r0, [r3, #0]
 8004a3a:	f107 0114 	add.w	r1, r7, #20
 8004a3e:	2300      	movs	r3, #0
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	f7fe fd93 	bl	800356c <xQueueGenericSendFromISR>
 8004a46:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3728      	adds	r7, #40	; 0x28
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	200001cc 	.word	0x200001cc

08004a58 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b088      	sub	sp, #32
 8004a5c:	af02      	add	r7, sp, #8
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a62:	4b22      	ldr	r3, [pc, #136]	; (8004aec <prvProcessExpiredTimer+0x94>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	3304      	adds	r3, #4
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7fe fb3b 	bl	80030ec <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d022      	beq.n	8004aca <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	699a      	ldr	r2, [r3, #24]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	18d1      	adds	r1, r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	6978      	ldr	r0, [r7, #20]
 8004a92:	f000 f8d1 	bl	8004c38 <prvInsertTimerInActiveList>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d01f      	beq.n	8004adc <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	9300      	str	r3, [sp, #0]
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	6978      	ldr	r0, [r7, #20]
 8004aa8:	f7ff ff88 	bl	80049bc <xTimerGenericCommand>
 8004aac:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d113      	bne.n	8004adc <prvProcessExpiredTimer+0x84>
        __asm volatile
 8004ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab8:	f383 8811 	msr	BASEPRI, r3
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	60fb      	str	r3, [r7, #12]
    }
 8004ac6:	bf00      	nop
 8004ac8:	e7fe      	b.n	8004ac8 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ad0:	f023 0301 	bic.w	r3, r3, #1
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	6978      	ldr	r0, [r7, #20]
 8004ae2:	4798      	blx	r3
    }
 8004ae4:	bf00      	nop
 8004ae6:	3718      	adds	r7, #24
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	200001c4 	.word	0x200001c4

08004af0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004af8:	f107 0308 	add.w	r3, r7, #8
 8004afc:	4618      	mov	r0, r3
 8004afe:	f000 f857 	bl	8004bb0 <prvGetNextExpireTime>
 8004b02:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	4619      	mov	r1, r3
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 f803 	bl	8004b14 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004b0e:	f000 f8d5 	bl	8004cbc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b12:	e7f1      	b.n	8004af8 <prvTimerTask+0x8>

08004b14 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004b1e:	f7ff fa2f 	bl	8003f80 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b22:	f107 0308 	add.w	r3, r7, #8
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 f866 	bl	8004bf8 <prvSampleTimeNow>
 8004b2c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d130      	bne.n	8004b96 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10a      	bne.n	8004b50 <prvProcessTimerOrBlockTask+0x3c>
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d806      	bhi.n	8004b50 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004b42:	f7ff fa2b 	bl	8003f9c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004b46:	68f9      	ldr	r1, [r7, #12]
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7ff ff85 	bl	8004a58 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004b4e:	e024      	b.n	8004b9a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d008      	beq.n	8004b68 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004b56:	4b13      	ldr	r3, [pc, #76]	; (8004ba4 <prvProcessTimerOrBlockTask+0x90>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d101      	bne.n	8004b64 <prvProcessTimerOrBlockTask+0x50>
 8004b60:	2301      	movs	r3, #1
 8004b62:	e000      	b.n	8004b66 <prvProcessTimerOrBlockTask+0x52>
 8004b64:	2300      	movs	r3, #0
 8004b66:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004b68:	4b0f      	ldr	r3, [pc, #60]	; (8004ba8 <prvProcessTimerOrBlockTask+0x94>)
 8004b6a:	6818      	ldr	r0, [r3, #0]
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	4619      	mov	r1, r3
 8004b76:	f7ff f809 	bl	8003b8c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004b7a:	f7ff fa0f 	bl	8003f9c <xTaskResumeAll>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d10a      	bne.n	8004b9a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004b84:	4b09      	ldr	r3, [pc, #36]	; (8004bac <prvProcessTimerOrBlockTask+0x98>)
 8004b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b8a:	601a      	str	r2, [r3, #0]
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	f3bf 8f6f 	isb	sy
    }
 8004b94:	e001      	b.n	8004b9a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004b96:	f7ff fa01 	bl	8003f9c <xTaskResumeAll>
    }
 8004b9a:	bf00      	nop
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	200001c8 	.word	0x200001c8
 8004ba8:	200001cc 	.word	0x200001cc
 8004bac:	e000ed04 	.word	0xe000ed04

08004bb0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004bb8:	4b0e      	ldr	r3, [pc, #56]	; (8004bf4 <prvGetNextExpireTime+0x44>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <prvGetNextExpireTime+0x16>
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	e000      	b.n	8004bc8 <prvGetNextExpireTime+0x18>
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d105      	bne.n	8004be0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004bd4:	4b07      	ldr	r3, [pc, #28]	; (8004bf4 <prvGetNextExpireTime+0x44>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	60fb      	str	r3, [r7, #12]
 8004bde:	e001      	b.n	8004be4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004be4:	68fb      	ldr	r3, [r7, #12]
    }
 8004be6:	4618      	mov	r0, r3
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	200001c4 	.word	0x200001c4

08004bf8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004c00:	f7ff fa6c 	bl	80040dc <xTaskGetTickCount>
 8004c04:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004c06:	4b0b      	ldr	r3, [pc, #44]	; (8004c34 <prvSampleTimeNow+0x3c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d205      	bcs.n	8004c1c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004c10:	f000 f91a 	bl	8004e48 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	601a      	str	r2, [r3, #0]
 8004c1a:	e002      	b.n	8004c22 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004c22:	4a04      	ldr	r2, [pc, #16]	; (8004c34 <prvSampleTimeNow+0x3c>)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004c28:	68fb      	ldr	r3, [r7, #12]
    }
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	200001d4 	.word	0x200001d4

08004c38 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
 8004c44:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004c46:	2300      	movs	r3, #0
 8004c48:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d812      	bhi.n	8004c84 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	1ad2      	subs	r2, r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d302      	bcc.n	8004c72 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	617b      	str	r3, [r7, #20]
 8004c70:	e01b      	b.n	8004caa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004c72:	4b10      	ldr	r3, [pc, #64]	; (8004cb4 <prvInsertTimerInActiveList+0x7c>)
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	3304      	adds	r3, #4
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	4610      	mov	r0, r2
 8004c7e:	f7fe f9fc 	bl	800307a <vListInsert>
 8004c82:	e012      	b.n	8004caa <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d206      	bcs.n	8004c9a <prvInsertTimerInActiveList+0x62>
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d302      	bcc.n	8004c9a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004c94:	2301      	movs	r3, #1
 8004c96:	617b      	str	r3, [r7, #20]
 8004c98:	e007      	b.n	8004caa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c9a:	4b07      	ldr	r3, [pc, #28]	; (8004cb8 <prvInsertTimerInActiveList+0x80>)
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	4610      	mov	r0, r2
 8004ca6:	f7fe f9e8 	bl	800307a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004caa:	697b      	ldr	r3, [r7, #20]
    }
 8004cac:	4618      	mov	r0, r3
 8004cae:	3718      	adds	r7, #24
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	200001c8 	.word	0x200001c8
 8004cb8:	200001c4 	.word	0x200001c4

08004cbc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b08c      	sub	sp, #48	; 0x30
 8004cc0:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004cc2:	e0ae      	b.n	8004e22 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f2c0 80aa 	blt.w	8004e20 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d004      	beq.n	8004ce2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	3304      	adds	r3, #4
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7fe fa05 	bl	80030ec <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ce2:	1d3b      	adds	r3, r7, #4
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7ff ff87 	bl	8004bf8 <prvSampleTimeNow>
 8004cea:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2b09      	cmp	r3, #9
 8004cf0:	f200 8097 	bhi.w	8004e22 <prvProcessReceivedCommands+0x166>
 8004cf4:	a201      	add	r2, pc, #4	; (adr r2, 8004cfc <prvProcessReceivedCommands+0x40>)
 8004cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfa:	bf00      	nop
 8004cfc:	08004d25 	.word	0x08004d25
 8004d00:	08004d25 	.word	0x08004d25
 8004d04:	08004d25 	.word	0x08004d25
 8004d08:	08004d99 	.word	0x08004d99
 8004d0c:	08004dad 	.word	0x08004dad
 8004d10:	08004df7 	.word	0x08004df7
 8004d14:	08004d25 	.word	0x08004d25
 8004d18:	08004d25 	.word	0x08004d25
 8004d1c:	08004d99 	.word	0x08004d99
 8004d20:	08004dad 	.word	0x08004dad
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d2a:	f043 0301 	orr.w	r3, r3, #1
 8004d2e:	b2da      	uxtb	r2, r3
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	18d1      	adds	r1, r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a3a      	ldr	r2, [r7, #32]
 8004d42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d44:	f7ff ff78 	bl	8004c38 <prvInsertTimerInActiveList>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d069      	beq.n	8004e22 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d54:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d5c:	f003 0304 	and.w	r3, r3, #4
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d05e      	beq.n	8004e22 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	441a      	add	r2, r3
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	2300      	movs	r3, #0
 8004d72:	2100      	movs	r1, #0
 8004d74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d76:	f7ff fe21 	bl	80049bc <xTimerGenericCommand>
 8004d7a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d14f      	bne.n	8004e22 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8004d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d86:	f383 8811 	msr	BASEPRI, r3
 8004d8a:	f3bf 8f6f 	isb	sy
 8004d8e:	f3bf 8f4f 	dsb	sy
 8004d92:	61bb      	str	r3, [r7, #24]
    }
 8004d94:	bf00      	nop
 8004d96:	e7fe      	b.n	8004d96 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d9e:	f023 0301 	bic.w	r3, r3, #1
 8004da2:	b2da      	uxtb	r2, r3
 8004da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004daa:	e03a      	b.n	8004e22 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004db2:	f043 0301 	orr.w	r3, r3, #1
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10a      	bne.n	8004de2 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8004dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd0:	f383 8811 	msr	BASEPRI, r3
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	617b      	str	r3, [r7, #20]
    }
 8004dde:	bf00      	nop
 8004de0:	e7fe      	b.n	8004de0 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	699a      	ldr	r2, [r3, #24]
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	18d1      	adds	r1, r2, r3
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	6a3a      	ldr	r2, [r7, #32]
 8004dee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004df0:	f7ff ff22 	bl	8004c38 <prvInsertTimerInActiveList>
                        break;
 8004df4:	e015      	b.n	8004e22 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d103      	bne.n	8004e0c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8004e04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e06:	f000 fc71 	bl	80056ec <vPortFree>
 8004e0a:	e00a      	b.n	8004e22 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e12:	f023 0301 	bic.w	r3, r3, #1
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004e1e:	e000      	b.n	8004e22 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004e20:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e22:	4b08      	ldr	r3, [pc, #32]	; (8004e44 <prvProcessReceivedCommands+0x188>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f107 0108 	add.w	r1, r7, #8
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7fe fc5b 	bl	80036e8 <xQueueReceive>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f47f af45 	bne.w	8004cc4 <prvProcessReceivedCommands+0x8>
        }
    }
 8004e3a:	bf00      	nop
 8004e3c:	bf00      	nop
 8004e3e:	3728      	adds	r7, #40	; 0x28
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	200001cc 	.word	0x200001cc

08004e48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b088      	sub	sp, #32
 8004e4c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e4e:	e048      	b.n	8004ee2 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e50:	4b2d      	ldr	r3, [pc, #180]	; (8004f08 <prvSwitchTimerLists+0xc0>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e5a:	4b2b      	ldr	r3, [pc, #172]	; (8004f08 <prvSwitchTimerLists+0xc0>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	3304      	adds	r3, #4
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7fe f93f 	bl	80030ec <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e7c:	f003 0304 	and.w	r3, r3, #4
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d02e      	beq.n	8004ee2 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004e8e:	68ba      	ldr	r2, [r7, #8]
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d90e      	bls.n	8004eb4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ea2:	4b19      	ldr	r3, [pc, #100]	; (8004f08 <prvSwitchTimerLists+0xc0>)
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	3304      	adds	r3, #4
 8004eaa:	4619      	mov	r1, r3
 8004eac:	4610      	mov	r0, r2
 8004eae:	f7fe f8e4 	bl	800307a <vListInsert>
 8004eb2:	e016      	b.n	8004ee2 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	2300      	movs	r3, #0
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f7ff fd7c 	bl	80049bc <xTimerGenericCommand>
 8004ec4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d10a      	bne.n	8004ee2 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed0:	f383 8811 	msr	BASEPRI, r3
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	603b      	str	r3, [r7, #0]
    }
 8004ede:	bf00      	nop
 8004ee0:	e7fe      	b.n	8004ee0 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ee2:	4b09      	ldr	r3, [pc, #36]	; (8004f08 <prvSwitchTimerLists+0xc0>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1b1      	bne.n	8004e50 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004eec:	4b06      	ldr	r3, [pc, #24]	; (8004f08 <prvSwitchTimerLists+0xc0>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004ef2:	4b06      	ldr	r3, [pc, #24]	; (8004f0c <prvSwitchTimerLists+0xc4>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a04      	ldr	r2, [pc, #16]	; (8004f08 <prvSwitchTimerLists+0xc0>)
 8004ef8:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004efa:	4a04      	ldr	r2, [pc, #16]	; (8004f0c <prvSwitchTimerLists+0xc4>)
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	6013      	str	r3, [r2, #0]
    }
 8004f00:	bf00      	nop
 8004f02:	3718      	adds	r7, #24
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	200001c4 	.word	0x200001c4
 8004f0c:	200001c8 	.word	0x200001c8

08004f10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004f10:	b580      	push	{r7, lr}
 8004f12:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004f14:	f000 f9de 	bl	80052d4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004f18:	4b12      	ldr	r3, [pc, #72]	; (8004f64 <prvCheckForValidListAndQueue+0x54>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d11d      	bne.n	8004f5c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004f20:	4811      	ldr	r0, [pc, #68]	; (8004f68 <prvCheckForValidListAndQueue+0x58>)
 8004f22:	f7fe f859 	bl	8002fd8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004f26:	4811      	ldr	r0, [pc, #68]	; (8004f6c <prvCheckForValidListAndQueue+0x5c>)
 8004f28:	f7fe f856 	bl	8002fd8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004f2c:	4b10      	ldr	r3, [pc, #64]	; (8004f70 <prvCheckForValidListAndQueue+0x60>)
 8004f2e:	4a0e      	ldr	r2, [pc, #56]	; (8004f68 <prvCheckForValidListAndQueue+0x58>)
 8004f30:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004f32:	4b10      	ldr	r3, [pc, #64]	; (8004f74 <prvCheckForValidListAndQueue+0x64>)
 8004f34:	4a0d      	ldr	r2, [pc, #52]	; (8004f6c <prvCheckForValidListAndQueue+0x5c>)
 8004f36:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004f38:	2200      	movs	r2, #0
 8004f3a:	210c      	movs	r1, #12
 8004f3c:	200a      	movs	r0, #10
 8004f3e:	f7fe f967 	bl	8003210 <xQueueGenericCreate>
 8004f42:	4603      	mov	r3, r0
 8004f44:	4a07      	ldr	r2, [pc, #28]	; (8004f64 <prvCheckForValidListAndQueue+0x54>)
 8004f46:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004f48:	4b06      	ldr	r3, [pc, #24]	; (8004f64 <prvCheckForValidListAndQueue+0x54>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d005      	beq.n	8004f5c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004f50:	4b04      	ldr	r3, [pc, #16]	; (8004f64 <prvCheckForValidListAndQueue+0x54>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4908      	ldr	r1, [pc, #32]	; (8004f78 <prvCheckForValidListAndQueue+0x68>)
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7fe fde6 	bl	8003b28 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004f5c:	f000 f9ea 	bl	8005334 <vPortExitCritical>
    }
 8004f60:	bf00      	nop
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	200001cc 	.word	0x200001cc
 8004f68:	2000019c 	.word	0x2000019c
 8004f6c:	200001b0 	.word	0x200001b0
 8004f70:	200001c4 	.word	0x200001c4
 8004f74:	200001c8 	.word	0x200001c8
 8004f78:	08007f58 	.word	0x08007f58

08004f7c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	3b04      	subs	r3, #4
 8004f8c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f94:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	3b04      	subs	r3, #4
 8004f9a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	f023 0201 	bic.w	r2, r3, #1
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	3b04      	subs	r3, #4
 8004faa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004fac:	4a0c      	ldr	r2, [pc, #48]	; (8004fe0 <pxPortInitialiseStack+0x64>)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	3b14      	subs	r3, #20
 8004fb6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	3b04      	subs	r3, #4
 8004fc2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f06f 0202 	mvn.w	r2, #2
 8004fca:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	3b20      	subs	r3, #32
 8004fd0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3714      	adds	r7, #20
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	08004fe5 	.word	0x08004fe5

08004fe4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004fea:	2300      	movs	r3, #0
 8004fec:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004fee:	4b12      	ldr	r3, [pc, #72]	; (8005038 <prvTaskExitError+0x54>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ff6:	d00a      	beq.n	800500e <prvTaskExitError+0x2a>
        __asm volatile
 8004ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffc:	f383 8811 	msr	BASEPRI, r3
 8005000:	f3bf 8f6f 	isb	sy
 8005004:	f3bf 8f4f 	dsb	sy
 8005008:	60fb      	str	r3, [r7, #12]
    }
 800500a:	bf00      	nop
 800500c:	e7fe      	b.n	800500c <prvTaskExitError+0x28>
        __asm volatile
 800500e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005012:	f383 8811 	msr	BASEPRI, r3
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	60bb      	str	r3, [r7, #8]
    }
 8005020:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005022:	bf00      	nop
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d0fc      	beq.n	8005024 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800502a:	bf00      	nop
 800502c:	bf00      	nop
 800502e:	3714      	adds	r7, #20
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	20000010 	.word	0x20000010
 800503c:	00000000 	.word	0x00000000

08005040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005040:	4b07      	ldr	r3, [pc, #28]	; (8005060 <pxCurrentTCBConst2>)
 8005042:	6819      	ldr	r1, [r3, #0]
 8005044:	6808      	ldr	r0, [r1, #0]
 8005046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800504a:	f380 8809 	msr	PSP, r0
 800504e:	f3bf 8f6f 	isb	sy
 8005052:	f04f 0000 	mov.w	r0, #0
 8005056:	f380 8811 	msr	BASEPRI, r0
 800505a:	4770      	bx	lr
 800505c:	f3af 8000 	nop.w

08005060 <pxCurrentTCBConst2>:
 8005060:	20000098 	.word	0x20000098
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005064:	bf00      	nop
 8005066:	bf00      	nop

08005068 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005068:	4808      	ldr	r0, [pc, #32]	; (800508c <prvPortStartFirstTask+0x24>)
 800506a:	6800      	ldr	r0, [r0, #0]
 800506c:	6800      	ldr	r0, [r0, #0]
 800506e:	f380 8808 	msr	MSP, r0
 8005072:	f04f 0000 	mov.w	r0, #0
 8005076:	f380 8814 	msr	CONTROL, r0
 800507a:	b662      	cpsie	i
 800507c:	b661      	cpsie	f
 800507e:	f3bf 8f4f 	dsb	sy
 8005082:	f3bf 8f6f 	isb	sy
 8005086:	df00      	svc	0
 8005088:	bf00      	nop
 800508a:	0000      	.short	0x0000
 800508c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005090:	bf00      	nop
 8005092:	bf00      	nop

08005094 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800509a:	4b46      	ldr	r3, [pc, #280]	; (80051b4 <xPortStartScheduler+0x120>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a46      	ldr	r2, [pc, #280]	; (80051b8 <xPortStartScheduler+0x124>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d10a      	bne.n	80050ba <xPortStartScheduler+0x26>
        __asm volatile
 80050a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a8:	f383 8811 	msr	BASEPRI, r3
 80050ac:	f3bf 8f6f 	isb	sy
 80050b0:	f3bf 8f4f 	dsb	sy
 80050b4:	613b      	str	r3, [r7, #16]
    }
 80050b6:	bf00      	nop
 80050b8:	e7fe      	b.n	80050b8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80050ba:	4b3e      	ldr	r3, [pc, #248]	; (80051b4 <xPortStartScheduler+0x120>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a3f      	ldr	r2, [pc, #252]	; (80051bc <xPortStartScheduler+0x128>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d10a      	bne.n	80050da <xPortStartScheduler+0x46>
        __asm volatile
 80050c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c8:	f383 8811 	msr	BASEPRI, r3
 80050cc:	f3bf 8f6f 	isb	sy
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	60fb      	str	r3, [r7, #12]
    }
 80050d6:	bf00      	nop
 80050d8:	e7fe      	b.n	80050d8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80050da:	4b39      	ldr	r3, [pc, #228]	; (80051c0 <xPortStartScheduler+0x12c>)
 80050dc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	22ff      	movs	r2, #255	; 0xff
 80050ea:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80050f4:	78fb      	ldrb	r3, [r7, #3]
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80050fc:	b2da      	uxtb	r2, r3
 80050fe:	4b31      	ldr	r3, [pc, #196]	; (80051c4 <xPortStartScheduler+0x130>)
 8005100:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005102:	4b31      	ldr	r3, [pc, #196]	; (80051c8 <xPortStartScheduler+0x134>)
 8005104:	2207      	movs	r2, #7
 8005106:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005108:	e009      	b.n	800511e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800510a:	4b2f      	ldr	r3, [pc, #188]	; (80051c8 <xPortStartScheduler+0x134>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	3b01      	subs	r3, #1
 8005110:	4a2d      	ldr	r2, [pc, #180]	; (80051c8 <xPortStartScheduler+0x134>)
 8005112:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005114:	78fb      	ldrb	r3, [r7, #3]
 8005116:	b2db      	uxtb	r3, r3
 8005118:	005b      	lsls	r3, r3, #1
 800511a:	b2db      	uxtb	r3, r3
 800511c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800511e:	78fb      	ldrb	r3, [r7, #3]
 8005120:	b2db      	uxtb	r3, r3
 8005122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005126:	2b80      	cmp	r3, #128	; 0x80
 8005128:	d0ef      	beq.n	800510a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800512a:	4b27      	ldr	r3, [pc, #156]	; (80051c8 <xPortStartScheduler+0x134>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f1c3 0307 	rsb	r3, r3, #7
 8005132:	2b04      	cmp	r3, #4
 8005134:	d00a      	beq.n	800514c <xPortStartScheduler+0xb8>
        __asm volatile
 8005136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513a:	f383 8811 	msr	BASEPRI, r3
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f3bf 8f4f 	dsb	sy
 8005146:	60bb      	str	r3, [r7, #8]
    }
 8005148:	bf00      	nop
 800514a:	e7fe      	b.n	800514a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800514c:	4b1e      	ldr	r3, [pc, #120]	; (80051c8 <xPortStartScheduler+0x134>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	021b      	lsls	r3, r3, #8
 8005152:	4a1d      	ldr	r2, [pc, #116]	; (80051c8 <xPortStartScheduler+0x134>)
 8005154:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005156:	4b1c      	ldr	r3, [pc, #112]	; (80051c8 <xPortStartScheduler+0x134>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800515e:	4a1a      	ldr	r2, [pc, #104]	; (80051c8 <xPortStartScheduler+0x134>)
 8005160:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	b2da      	uxtb	r2, r3
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800516a:	4b18      	ldr	r3, [pc, #96]	; (80051cc <xPortStartScheduler+0x138>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a17      	ldr	r2, [pc, #92]	; (80051cc <xPortStartScheduler+0x138>)
 8005170:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005174:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005176:	4b15      	ldr	r3, [pc, #84]	; (80051cc <xPortStartScheduler+0x138>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a14      	ldr	r2, [pc, #80]	; (80051cc <xPortStartScheduler+0x138>)
 800517c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005180:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005182:	f000 f963 	bl	800544c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005186:	4b12      	ldr	r3, [pc, #72]	; (80051d0 <xPortStartScheduler+0x13c>)
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800518c:	f000 f982 	bl	8005494 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005190:	4b10      	ldr	r3, [pc, #64]	; (80051d4 <xPortStartScheduler+0x140>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a0f      	ldr	r2, [pc, #60]	; (80051d4 <xPortStartScheduler+0x140>)
 8005196:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800519a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800519c:	f7ff ff64 	bl	8005068 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80051a0:	f7ff f868 	bl	8004274 <vTaskSwitchContext>
    prvTaskExitError();
 80051a4:	f7ff ff1e 	bl	8004fe4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3718      	adds	r7, #24
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	e000ed00 	.word	0xe000ed00
 80051b8:	410fc271 	.word	0x410fc271
 80051bc:	410fc270 	.word	0x410fc270
 80051c0:	e000e400 	.word	0xe000e400
 80051c4:	200001d8 	.word	0x200001d8
 80051c8:	200001dc 	.word	0x200001dc
 80051cc:	e000ed20 	.word	0xe000ed20
 80051d0:	20000010 	.word	0x20000010
 80051d4:	e000ef34 	.word	0xe000ef34

080051d8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80051d8:	b480      	push	{r7}
 80051da:	b087      	sub	sp, #28
 80051dc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80051de:	4b37      	ldr	r3, [pc, #220]	; (80052bc <vInitPrioGroupValue+0xe4>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a37      	ldr	r2, [pc, #220]	; (80052c0 <vInitPrioGroupValue+0xe8>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d10a      	bne.n	80051fe <vInitPrioGroupValue+0x26>
        __asm volatile
 80051e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ec:	f383 8811 	msr	BASEPRI, r3
 80051f0:	f3bf 8f6f 	isb	sy
 80051f4:	f3bf 8f4f 	dsb	sy
 80051f8:	613b      	str	r3, [r7, #16]
    }
 80051fa:	bf00      	nop
 80051fc:	e7fe      	b.n	80051fc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80051fe:	4b2f      	ldr	r3, [pc, #188]	; (80052bc <vInitPrioGroupValue+0xe4>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a30      	ldr	r2, [pc, #192]	; (80052c4 <vInitPrioGroupValue+0xec>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d10a      	bne.n	800521e <vInitPrioGroupValue+0x46>
        __asm volatile
 8005208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520c:	f383 8811 	msr	BASEPRI, r3
 8005210:	f3bf 8f6f 	isb	sy
 8005214:	f3bf 8f4f 	dsb	sy
 8005218:	60fb      	str	r3, [r7, #12]
    }
 800521a:	bf00      	nop
 800521c:	e7fe      	b.n	800521c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800521e:	4b2a      	ldr	r3, [pc, #168]	; (80052c8 <vInitPrioGroupValue+0xf0>)
 8005220:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	b2db      	uxtb	r3, r3
 8005228:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	22ff      	movs	r2, #255	; 0xff
 800522e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	b2db      	uxtb	r3, r3
 8005236:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005238:	78fb      	ldrb	r3, [r7, #3]
 800523a:	b2db      	uxtb	r3, r3
 800523c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005240:	b2da      	uxtb	r2, r3
 8005242:	4b22      	ldr	r3, [pc, #136]	; (80052cc <vInitPrioGroupValue+0xf4>)
 8005244:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005246:	4b22      	ldr	r3, [pc, #136]	; (80052d0 <vInitPrioGroupValue+0xf8>)
 8005248:	2207      	movs	r2, #7
 800524a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800524c:	e009      	b.n	8005262 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800524e:	4b20      	ldr	r3, [pc, #128]	; (80052d0 <vInitPrioGroupValue+0xf8>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	3b01      	subs	r3, #1
 8005254:	4a1e      	ldr	r2, [pc, #120]	; (80052d0 <vInitPrioGroupValue+0xf8>)
 8005256:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005258:	78fb      	ldrb	r3, [r7, #3]
 800525a:	b2db      	uxtb	r3, r3
 800525c:	005b      	lsls	r3, r3, #1
 800525e:	b2db      	uxtb	r3, r3
 8005260:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005262:	78fb      	ldrb	r3, [r7, #3]
 8005264:	b2db      	uxtb	r3, r3
 8005266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800526a:	2b80      	cmp	r3, #128	; 0x80
 800526c:	d0ef      	beq.n	800524e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800526e:	4b18      	ldr	r3, [pc, #96]	; (80052d0 <vInitPrioGroupValue+0xf8>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f1c3 0307 	rsb	r3, r3, #7
 8005276:	2b04      	cmp	r3, #4
 8005278:	d00a      	beq.n	8005290 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	60bb      	str	r3, [r7, #8]
    }
 800528c:	bf00      	nop
 800528e:	e7fe      	b.n	800528e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005290:	4b0f      	ldr	r3, [pc, #60]	; (80052d0 <vInitPrioGroupValue+0xf8>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	021b      	lsls	r3, r3, #8
 8005296:	4a0e      	ldr	r2, [pc, #56]	; (80052d0 <vInitPrioGroupValue+0xf8>)
 8005298:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800529a:	4b0d      	ldr	r3, [pc, #52]	; (80052d0 <vInitPrioGroupValue+0xf8>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80052a2:	4a0b      	ldr	r2, [pc, #44]	; (80052d0 <vInitPrioGroupValue+0xf8>)
 80052a4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80052ae:	bf00      	nop
 80052b0:	371c      	adds	r7, #28
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	e000ed00 	.word	0xe000ed00
 80052c0:	410fc271 	.word	0x410fc271
 80052c4:	410fc270 	.word	0x410fc270
 80052c8:	e000e400 	.word	0xe000e400
 80052cc:	200001d8 	.word	0x200001d8
 80052d0:	200001dc 	.word	0x200001dc

080052d4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
        __asm volatile
 80052da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052de:	f383 8811 	msr	BASEPRI, r3
 80052e2:	f3bf 8f6f 	isb	sy
 80052e6:	f3bf 8f4f 	dsb	sy
 80052ea:	607b      	str	r3, [r7, #4]
    }
 80052ec:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80052ee:	4b0f      	ldr	r3, [pc, #60]	; (800532c <vPortEnterCritical+0x58>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	3301      	adds	r3, #1
 80052f4:	4a0d      	ldr	r2, [pc, #52]	; (800532c <vPortEnterCritical+0x58>)
 80052f6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80052f8:	4b0c      	ldr	r3, [pc, #48]	; (800532c <vPortEnterCritical+0x58>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d10f      	bne.n	8005320 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005300:	4b0b      	ldr	r3, [pc, #44]	; (8005330 <vPortEnterCritical+0x5c>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00a      	beq.n	8005320 <vPortEnterCritical+0x4c>
        __asm volatile
 800530a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530e:	f383 8811 	msr	BASEPRI, r3
 8005312:	f3bf 8f6f 	isb	sy
 8005316:	f3bf 8f4f 	dsb	sy
 800531a:	603b      	str	r3, [r7, #0]
    }
 800531c:	bf00      	nop
 800531e:	e7fe      	b.n	800531e <vPortEnterCritical+0x4a>
    }
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	20000010 	.word	0x20000010
 8005330:	e000ed04 	.word	0xe000ed04

08005334 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800533a:	4b12      	ldr	r3, [pc, #72]	; (8005384 <vPortExitCritical+0x50>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10a      	bne.n	8005358 <vPortExitCritical+0x24>
        __asm volatile
 8005342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005346:	f383 8811 	msr	BASEPRI, r3
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	607b      	str	r3, [r7, #4]
    }
 8005354:	bf00      	nop
 8005356:	e7fe      	b.n	8005356 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005358:	4b0a      	ldr	r3, [pc, #40]	; (8005384 <vPortExitCritical+0x50>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	3b01      	subs	r3, #1
 800535e:	4a09      	ldr	r2, [pc, #36]	; (8005384 <vPortExitCritical+0x50>)
 8005360:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005362:	4b08      	ldr	r3, [pc, #32]	; (8005384 <vPortExitCritical+0x50>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d105      	bne.n	8005376 <vPortExitCritical+0x42>
 800536a:	2300      	movs	r3, #0
 800536c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	f383 8811 	msr	BASEPRI, r3
    }
 8005374:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005376:	bf00      	nop
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	20000010 	.word	0x20000010
	...

08005390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005390:	f3ef 8009 	mrs	r0, PSP
 8005394:	f3bf 8f6f 	isb	sy
 8005398:	4b15      	ldr	r3, [pc, #84]	; (80053f0 <pxCurrentTCBConst>)
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	f01e 0f10 	tst.w	lr, #16
 80053a0:	bf08      	it	eq
 80053a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80053a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053aa:	6010      	str	r0, [r2, #0]
 80053ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80053b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80053b4:	f380 8811 	msr	BASEPRI, r0
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f7fe ff58 	bl	8004274 <vTaskSwitchContext>
 80053c4:	f04f 0000 	mov.w	r0, #0
 80053c8:	f380 8811 	msr	BASEPRI, r0
 80053cc:	bc09      	pop	{r0, r3}
 80053ce:	6819      	ldr	r1, [r3, #0]
 80053d0:	6808      	ldr	r0, [r1, #0]
 80053d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053d6:	f01e 0f10 	tst.w	lr, #16
 80053da:	bf08      	it	eq
 80053dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80053e0:	f380 8809 	msr	PSP, r0
 80053e4:	f3bf 8f6f 	isb	sy
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	f3af 8000 	nop.w

080053f0 <pxCurrentTCBConst>:
 80053f0:	20000098 	.word	0x20000098
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80053f4:	bf00      	nop
 80053f6:	bf00      	nop

080053f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
        __asm volatile
 80053fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005402:	f383 8811 	msr	BASEPRI, r3
 8005406:	f3bf 8f6f 	isb	sy
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	607b      	str	r3, [r7, #4]
    }
 8005410:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8005412:	f001 fa77 	bl	8006904 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005416:	f7fe fe71 	bl	80040fc <xTaskIncrementTick>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d006      	beq.n	800542e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8005420:	f001 face 	bl	80069c0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005424:	4b08      	ldr	r3, [pc, #32]	; (8005448 <SysTick_Handler+0x50>)
 8005426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800542a:	601a      	str	r2, [r3, #0]
 800542c:	e001      	b.n	8005432 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800542e:	f001 faab 	bl	8006988 <SEGGER_SYSVIEW_RecordExitISR>
 8005432:	2300      	movs	r3, #0
 8005434:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	f383 8811 	msr	BASEPRI, r3
    }
 800543c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800543e:	bf00      	nop
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	e000ed04 	.word	0xe000ed04

0800544c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005450:	4b0b      	ldr	r3, [pc, #44]	; (8005480 <vPortSetupTimerInterrupt+0x34>)
 8005452:	2200      	movs	r2, #0
 8005454:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005456:	4b0b      	ldr	r3, [pc, #44]	; (8005484 <vPortSetupTimerInterrupt+0x38>)
 8005458:	2200      	movs	r2, #0
 800545a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800545c:	4b0a      	ldr	r3, [pc, #40]	; (8005488 <vPortSetupTimerInterrupt+0x3c>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a0a      	ldr	r2, [pc, #40]	; (800548c <vPortSetupTimerInterrupt+0x40>)
 8005462:	fba2 2303 	umull	r2, r3, r2, r3
 8005466:	099b      	lsrs	r3, r3, #6
 8005468:	4a09      	ldr	r2, [pc, #36]	; (8005490 <vPortSetupTimerInterrupt+0x44>)
 800546a:	3b01      	subs	r3, #1
 800546c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800546e:	4b04      	ldr	r3, [pc, #16]	; (8005480 <vPortSetupTimerInterrupt+0x34>)
 8005470:	2207      	movs	r2, #7
 8005472:	601a      	str	r2, [r3, #0]
}
 8005474:	bf00      	nop
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	e000e010 	.word	0xe000e010
 8005484:	e000e018 	.word	0xe000e018
 8005488:	20000000 	.word	0x20000000
 800548c:	10624dd3 	.word	0x10624dd3
 8005490:	e000e014 	.word	0xe000e014

08005494 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005494:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80054a4 <vPortEnableVFP+0x10>
 8005498:	6801      	ldr	r1, [r0, #0]
 800549a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800549e:	6001      	str	r1, [r0, #0]
 80054a0:	4770      	bx	lr
 80054a2:	0000      	.short	0x0000
 80054a4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80054a8:	bf00      	nop
 80054aa:	bf00      	nop

080054ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80054b2:	f3ef 8305 	mrs	r3, IPSR
 80054b6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2b0f      	cmp	r3, #15
 80054bc:	d914      	bls.n	80054e8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80054be:	4a17      	ldr	r2, [pc, #92]	; (800551c <vPortValidateInterruptPriority+0x70>)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4413      	add	r3, r2
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80054c8:	4b15      	ldr	r3, [pc, #84]	; (8005520 <vPortValidateInterruptPriority+0x74>)
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	7afa      	ldrb	r2, [r7, #11]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d20a      	bcs.n	80054e8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80054d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	607b      	str	r3, [r7, #4]
    }
 80054e4:	bf00      	nop
 80054e6:	e7fe      	b.n	80054e6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80054e8:	4b0e      	ldr	r3, [pc, #56]	; (8005524 <vPortValidateInterruptPriority+0x78>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80054f0:	4b0d      	ldr	r3, [pc, #52]	; (8005528 <vPortValidateInterruptPriority+0x7c>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d90a      	bls.n	800550e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80054f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fc:	f383 8811 	msr	BASEPRI, r3
 8005500:	f3bf 8f6f 	isb	sy
 8005504:	f3bf 8f4f 	dsb	sy
 8005508:	603b      	str	r3, [r7, #0]
    }
 800550a:	bf00      	nop
 800550c:	e7fe      	b.n	800550c <vPortValidateInterruptPriority+0x60>
    }
 800550e:	bf00      	nop
 8005510:	3714      	adds	r7, #20
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	e000e3f0 	.word	0xe000e3f0
 8005520:	200001d8 	.word	0x200001d8
 8005524:	e000ed0c 	.word	0xe000ed0c
 8005528:	200001dc 	.word	0x200001dc

0800552c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b08a      	sub	sp, #40	; 0x28
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8005534:	2300      	movs	r3, #0
 8005536:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8005538:	f7fe fd22 	bl	8003f80 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800553c:	4b65      	ldr	r3, [pc, #404]	; (80056d4 <pvPortMalloc+0x1a8>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005544:	f000 f934 	bl	80057b0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005548:	4b63      	ldr	r3, [pc, #396]	; (80056d8 <pvPortMalloc+0x1ac>)
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4013      	ands	r3, r2
 8005550:	2b00      	cmp	r3, #0
 8005552:	f040 80a7 	bne.w	80056a4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d02d      	beq.n	80055b8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800555c:	2208      	movs	r2, #8
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	429a      	cmp	r2, r3
 8005566:	d227      	bcs.n	80055b8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8005568:	2208      	movs	r2, #8
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4413      	add	r3, r2
 800556e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	2b00      	cmp	r3, #0
 8005578:	d021      	beq.n	80055be <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f023 0307 	bic.w	r3, r3, #7
 8005580:	3308      	adds	r3, #8
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	429a      	cmp	r2, r3
 8005586:	d214      	bcs.n	80055b2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f023 0307 	bic.w	r3, r3, #7
 800558e:	3308      	adds	r3, #8
 8005590:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f003 0307 	and.w	r3, r3, #7
 8005598:	2b00      	cmp	r3, #0
 800559a:	d010      	beq.n	80055be <pvPortMalloc+0x92>
        __asm volatile
 800559c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a0:	f383 8811 	msr	BASEPRI, r3
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	617b      	str	r3, [r7, #20]
    }
 80055ae:	bf00      	nop
 80055b0:	e7fe      	b.n	80055b0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80055b2:	2300      	movs	r3, #0
 80055b4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80055b6:	e002      	b.n	80055be <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80055b8:	2300      	movs	r3, #0
 80055ba:	607b      	str	r3, [r7, #4]
 80055bc:	e000      	b.n	80055c0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80055be:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d06e      	beq.n	80056a4 <pvPortMalloc+0x178>
 80055c6:	4b45      	ldr	r3, [pc, #276]	; (80056dc <pvPortMalloc+0x1b0>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d869      	bhi.n	80056a4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80055d0:	4b43      	ldr	r3, [pc, #268]	; (80056e0 <pvPortMalloc+0x1b4>)
 80055d2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80055d4:	4b42      	ldr	r3, [pc, #264]	; (80056e0 <pvPortMalloc+0x1b4>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055da:	e004      	b.n	80055e6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d903      	bls.n	80055f8 <pvPortMalloc+0xcc>
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1f1      	bne.n	80055dc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80055f8:	4b36      	ldr	r3, [pc, #216]	; (80056d4 <pvPortMalloc+0x1a8>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055fe:	429a      	cmp	r2, r3
 8005600:	d050      	beq.n	80056a4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005602:	6a3b      	ldr	r3, [r7, #32]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2208      	movs	r2, #8
 8005608:	4413      	add	r3, r2
 800560a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	6a3b      	ldr	r3, [r7, #32]
 8005612:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	1ad2      	subs	r2, r2, r3
 800561c:	2308      	movs	r3, #8
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	429a      	cmp	r2, r3
 8005622:	d91f      	bls.n	8005664 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4413      	add	r3, r2
 800562a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	f003 0307 	and.w	r3, r3, #7
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00a      	beq.n	800564c <pvPortMalloc+0x120>
        __asm volatile
 8005636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563a:	f383 8811 	msr	BASEPRI, r3
 800563e:	f3bf 8f6f 	isb	sy
 8005642:	f3bf 8f4f 	dsb	sy
 8005646:	613b      	str	r3, [r7, #16]
    }
 8005648:	bf00      	nop
 800564a:	e7fe      	b.n	800564a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800564c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564e:	685a      	ldr	r2, [r3, #4]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	1ad2      	subs	r2, r2, r3
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800565e:	69b8      	ldr	r0, [r7, #24]
 8005660:	f000 f908 	bl	8005874 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005664:	4b1d      	ldr	r3, [pc, #116]	; (80056dc <pvPortMalloc+0x1b0>)
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	4a1b      	ldr	r2, [pc, #108]	; (80056dc <pvPortMalloc+0x1b0>)
 8005670:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005672:	4b1a      	ldr	r3, [pc, #104]	; (80056dc <pvPortMalloc+0x1b0>)
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	4b1b      	ldr	r3, [pc, #108]	; (80056e4 <pvPortMalloc+0x1b8>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	429a      	cmp	r2, r3
 800567c:	d203      	bcs.n	8005686 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800567e:	4b17      	ldr	r3, [pc, #92]	; (80056dc <pvPortMalloc+0x1b0>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a18      	ldr	r2, [pc, #96]	; (80056e4 <pvPortMalloc+0x1b8>)
 8005684:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005688:	685a      	ldr	r2, [r3, #4]
 800568a:	4b13      	ldr	r3, [pc, #76]	; (80056d8 <pvPortMalloc+0x1ac>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	431a      	orrs	r2, r3
 8005690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005692:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	2200      	movs	r2, #0
 8005698:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800569a:	4b13      	ldr	r3, [pc, #76]	; (80056e8 <pvPortMalloc+0x1bc>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3301      	adds	r3, #1
 80056a0:	4a11      	ldr	r2, [pc, #68]	; (80056e8 <pvPortMalloc+0x1bc>)
 80056a2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80056a4:	f7fe fc7a 	bl	8003f9c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	f003 0307 	and.w	r3, r3, #7
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00a      	beq.n	80056c8 <pvPortMalloc+0x19c>
        __asm volatile
 80056b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b6:	f383 8811 	msr	BASEPRI, r3
 80056ba:	f3bf 8f6f 	isb	sy
 80056be:	f3bf 8f4f 	dsb	sy
 80056c2:	60fb      	str	r3, [r7, #12]
    }
 80056c4:	bf00      	nop
 80056c6:	e7fe      	b.n	80056c6 <pvPortMalloc+0x19a>
    return pvReturn;
 80056c8:	69fb      	ldr	r3, [r7, #28]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3728      	adds	r7, #40	; 0x28
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	200029e8 	.word	0x200029e8
 80056d8:	200029fc 	.word	0x200029fc
 80056dc:	200029ec 	.word	0x200029ec
 80056e0:	200029e0 	.word	0x200029e0
 80056e4:	200029f0 	.word	0x200029f0
 80056e8:	200029f4 	.word	0x200029f4

080056ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b086      	sub	sp, #24
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d04d      	beq.n	800579a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80056fe:	2308      	movs	r3, #8
 8005700:	425b      	negs	r3, r3
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	4413      	add	r3, r2
 8005706:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	4b24      	ldr	r3, [pc, #144]	; (80057a4 <vPortFree+0xb8>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4013      	ands	r3, r2
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10a      	bne.n	8005730 <vPortFree+0x44>
        __asm volatile
 800571a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571e:	f383 8811 	msr	BASEPRI, r3
 8005722:	f3bf 8f6f 	isb	sy
 8005726:	f3bf 8f4f 	dsb	sy
 800572a:	60fb      	str	r3, [r7, #12]
    }
 800572c:	bf00      	nop
 800572e:	e7fe      	b.n	800572e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00a      	beq.n	800574e <vPortFree+0x62>
        __asm volatile
 8005738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573c:	f383 8811 	msr	BASEPRI, r3
 8005740:	f3bf 8f6f 	isb	sy
 8005744:	f3bf 8f4f 	dsb	sy
 8005748:	60bb      	str	r3, [r7, #8]
    }
 800574a:	bf00      	nop
 800574c:	e7fe      	b.n	800574c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	685a      	ldr	r2, [r3, #4]
 8005752:	4b14      	ldr	r3, [pc, #80]	; (80057a4 <vPortFree+0xb8>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4013      	ands	r3, r2
 8005758:	2b00      	cmp	r3, #0
 800575a:	d01e      	beq.n	800579a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d11a      	bne.n	800579a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	4b0e      	ldr	r3, [pc, #56]	; (80057a4 <vPortFree+0xb8>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	43db      	mvns	r3, r3
 800576e:	401a      	ands	r2, r3
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005774:	f7fe fc04 	bl	8003f80 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	685a      	ldr	r2, [r3, #4]
 800577c:	4b0a      	ldr	r3, [pc, #40]	; (80057a8 <vPortFree+0xbc>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4413      	add	r3, r2
 8005782:	4a09      	ldr	r2, [pc, #36]	; (80057a8 <vPortFree+0xbc>)
 8005784:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005786:	6938      	ldr	r0, [r7, #16]
 8005788:	f000 f874 	bl	8005874 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800578c:	4b07      	ldr	r3, [pc, #28]	; (80057ac <vPortFree+0xc0>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	3301      	adds	r3, #1
 8005792:	4a06      	ldr	r2, [pc, #24]	; (80057ac <vPortFree+0xc0>)
 8005794:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005796:	f7fe fc01 	bl	8003f9c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800579a:	bf00      	nop
 800579c:	3718      	adds	r7, #24
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	200029fc 	.word	0x200029fc
 80057a8:	200029ec 	.word	0x200029ec
 80057ac:	200029f8 	.word	0x200029f8

080057b0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80057b6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80057ba:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80057bc:	4b27      	ldr	r3, [pc, #156]	; (800585c <prvHeapInit+0xac>)
 80057be:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f003 0307 	and.w	r3, r3, #7
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00c      	beq.n	80057e4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	3307      	adds	r3, #7
 80057ce:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f023 0307 	bic.w	r3, r3, #7
 80057d6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80057d8:	68ba      	ldr	r2, [r7, #8]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	4a1f      	ldr	r2, [pc, #124]	; (800585c <prvHeapInit+0xac>)
 80057e0:	4413      	add	r3, r2
 80057e2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80057e8:	4a1d      	ldr	r2, [pc, #116]	; (8005860 <prvHeapInit+0xb0>)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80057ee:	4b1c      	ldr	r3, [pc, #112]	; (8005860 <prvHeapInit+0xb0>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	4413      	add	r3, r2
 80057fa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80057fc:	2208      	movs	r2, #8
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	1a9b      	subs	r3, r3, r2
 8005802:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f023 0307 	bic.w	r3, r3, #7
 800580a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	4a15      	ldr	r2, [pc, #84]	; (8005864 <prvHeapInit+0xb4>)
 8005810:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005812:	4b14      	ldr	r3, [pc, #80]	; (8005864 <prvHeapInit+0xb4>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2200      	movs	r2, #0
 8005818:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800581a:	4b12      	ldr	r3, [pc, #72]	; (8005864 <prvHeapInit+0xb4>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2200      	movs	r2, #0
 8005820:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	1ad2      	subs	r2, r2, r3
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005830:	4b0c      	ldr	r3, [pc, #48]	; (8005864 <prvHeapInit+0xb4>)
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	4a0a      	ldr	r2, [pc, #40]	; (8005868 <prvHeapInit+0xb8>)
 800583e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	4a09      	ldr	r2, [pc, #36]	; (800586c <prvHeapInit+0xbc>)
 8005846:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005848:	4b09      	ldr	r3, [pc, #36]	; (8005870 <prvHeapInit+0xc0>)
 800584a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800584e:	601a      	str	r2, [r3, #0]
}
 8005850:	bf00      	nop
 8005852:	3714      	adds	r7, #20
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr
 800585c:	200001e0 	.word	0x200001e0
 8005860:	200029e0 	.word	0x200029e0
 8005864:	200029e8 	.word	0x200029e8
 8005868:	200029f0 	.word	0x200029f0
 800586c:	200029ec 	.word	0x200029ec
 8005870:	200029fc 	.word	0x200029fc

08005874 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800587c:	4b28      	ldr	r3, [pc, #160]	; (8005920 <prvInsertBlockIntoFreeList+0xac>)
 800587e:	60fb      	str	r3, [r7, #12]
 8005880:	e002      	b.n	8005888 <prvInsertBlockIntoFreeList+0x14>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	429a      	cmp	r2, r3
 8005890:	d8f7      	bhi.n	8005882 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	4413      	add	r3, r2
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d108      	bne.n	80058b6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	441a      	add	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	441a      	add	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d118      	bne.n	80058fc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	4b15      	ldr	r3, [pc, #84]	; (8005924 <prvInsertBlockIntoFreeList+0xb0>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d00d      	beq.n	80058f2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685a      	ldr	r2, [r3, #4]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	441a      	add	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	601a      	str	r2, [r3, #0]
 80058f0:	e008      	b.n	8005904 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80058f2:	4b0c      	ldr	r3, [pc, #48]	; (8005924 <prvInsertBlockIntoFreeList+0xb0>)
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	601a      	str	r2, [r3, #0]
 80058fa:	e003      	b.n	8005904 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	429a      	cmp	r2, r3
 800590a:	d002      	beq.n	8005912 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005912:	bf00      	nop
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	200029e0 	.word	0x200029e0
 8005924:	200029e8 	.word	0x200029e8

08005928 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005928:	b580      	push	{r7, lr}
 800592a:	b086      	sub	sp, #24
 800592c:	af02      	add	r7, sp, #8
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
 8005934:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005936:	2205      	movs	r2, #5
 8005938:	492b      	ldr	r1, [pc, #172]	; (80059e8 <SYSVIEW_AddTask+0xc0>)
 800593a:	68b8      	ldr	r0, [r7, #8]
 800593c:	f001 fb10 	bl	8006f60 <memcmp>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d04b      	beq.n	80059de <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005946:	4b29      	ldr	r3, [pc, #164]	; (80059ec <SYSVIEW_AddTask+0xc4>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2b07      	cmp	r3, #7
 800594c:	d903      	bls.n	8005956 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800594e:	4828      	ldr	r0, [pc, #160]	; (80059f0 <SYSVIEW_AddTask+0xc8>)
 8005950:	f001 fa80 	bl	8006e54 <SEGGER_SYSVIEW_Warn>
    return;
 8005954:	e044      	b.n	80059e0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005956:	4b25      	ldr	r3, [pc, #148]	; (80059ec <SYSVIEW_AddTask+0xc4>)
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	4926      	ldr	r1, [pc, #152]	; (80059f4 <SYSVIEW_AddTask+0xcc>)
 800595c:	4613      	mov	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4413      	add	r3, r2
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	440b      	add	r3, r1
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800596a:	4b20      	ldr	r3, [pc, #128]	; (80059ec <SYSVIEW_AddTask+0xc4>)
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	4921      	ldr	r1, [pc, #132]	; (80059f4 <SYSVIEW_AddTask+0xcc>)
 8005970:	4613      	mov	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	440b      	add	r3, r1
 800597a:	3304      	adds	r3, #4
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005980:	4b1a      	ldr	r3, [pc, #104]	; (80059ec <SYSVIEW_AddTask+0xc4>)
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	491b      	ldr	r1, [pc, #108]	; (80059f4 <SYSVIEW_AddTask+0xcc>)
 8005986:	4613      	mov	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4413      	add	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	440b      	add	r3, r1
 8005990:	3308      	adds	r3, #8
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005996:	4b15      	ldr	r3, [pc, #84]	; (80059ec <SYSVIEW_AddTask+0xc4>)
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	4916      	ldr	r1, [pc, #88]	; (80059f4 <SYSVIEW_AddTask+0xcc>)
 800599c:	4613      	mov	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4413      	add	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	440b      	add	r3, r1
 80059a6:	330c      	adds	r3, #12
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80059ac:	4b0f      	ldr	r3, [pc, #60]	; (80059ec <SYSVIEW_AddTask+0xc4>)
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	4910      	ldr	r1, [pc, #64]	; (80059f4 <SYSVIEW_AddTask+0xcc>)
 80059b2:	4613      	mov	r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	4413      	add	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	440b      	add	r3, r1
 80059bc:	3310      	adds	r3, #16
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80059c2:	4b0a      	ldr	r3, [pc, #40]	; (80059ec <SYSVIEW_AddTask+0xc4>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	3301      	adds	r3, #1
 80059c8:	4a08      	ldr	r2, [pc, #32]	; (80059ec <SYSVIEW_AddTask+0xc4>)
 80059ca:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	9300      	str	r3, [sp, #0]
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	68b9      	ldr	r1, [r7, #8]
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f000 f80e 	bl	80059f8 <SYSVIEW_SendTaskInfo>
 80059dc:	e000      	b.n	80059e0 <SYSVIEW_AddTask+0xb8>
    return;
 80059de:	bf00      	nop

}
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	08007f60 	.word	0x08007f60
 80059ec:	20002aa0 	.word	0x20002aa0
 80059f0:	08007f68 	.word	0x08007f68
 80059f4:	20002a00 	.word	0x20002a00

080059f8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b08a      	sub	sp, #40	; 0x28
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
 8005a04:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005a06:	f107 0314 	add.w	r3, r7, #20
 8005a0a:	2214      	movs	r2, #20
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f001 fac2 	bl	8006f98 <memset>
  TaskInfo.TaskID     = TaskID;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a26:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005a28:	f107 0314 	add.w	r3, r7, #20
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f000 fe3f 	bl	80066b0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005a32:	bf00      	nop
 8005a34:	3728      	adds	r7, #40	; 0x28
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
	...

08005a3c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005a42:	4b24      	ldr	r3, [pc, #144]	; (8005ad4 <_DoInit+0x98>)
 8005a44:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2203      	movs	r2, #3
 8005a4a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2203      	movs	r2, #3
 8005a50:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a20      	ldr	r2, [pc, #128]	; (8005ad8 <_DoInit+0x9c>)
 8005a56:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a20      	ldr	r2, [pc, #128]	; (8005adc <_DoInit+0xa0>)
 8005a5c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a64:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a17      	ldr	r2, [pc, #92]	; (8005ad8 <_DoInit+0x9c>)
 8005a7c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a17      	ldr	r2, [pc, #92]	; (8005ae0 <_DoInit+0xa4>)
 8005a82:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2210      	movs	r2, #16
 8005a88:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	3307      	adds	r3, #7
 8005aa0:	4a10      	ldr	r2, [pc, #64]	; (8005ae4 <_DoInit+0xa8>)
 8005aa2:	6810      	ldr	r0, [r2, #0]
 8005aa4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005aa6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a0e      	ldr	r2, [pc, #56]	; (8005ae8 <_DoInit+0xac>)
 8005aae:	6810      	ldr	r0, [r2, #0]
 8005ab0:	6018      	str	r0, [r3, #0]
 8005ab2:	8891      	ldrh	r1, [r2, #4]
 8005ab4:	7992      	ldrb	r2, [r2, #6]
 8005ab6:	8099      	strh	r1, [r3, #4]
 8005ab8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005aba:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005ac4:	f3bf 8f5f 	dmb	sy
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr
 8005ad4:	20003058 	.word	0x20003058
 8005ad8:	08007fb8 	.word	0x08007fb8
 8005adc:	20002aa4 	.word	0x20002aa4
 8005ae0:	20002ea4 	.word	0x20002ea4
 8005ae4:	08007fc4 	.word	0x08007fc4
 8005ae8:	08007fc8 	.word	0x08007fc8

08005aec <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b08c      	sub	sp, #48	; 0x30
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005af8:	4b3e      	ldr	r3, [pc, #248]	; (8005bf4 <SEGGER_RTT_ReadNoLock+0x108>)
 8005afa:	623b      	str	r3, [r7, #32]
 8005afc:	6a3b      	ldr	r3, [r7, #32]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <SEGGER_RTT_ReadNoLock+0x1e>
 8005b06:	f7ff ff99 	bl	8005a3c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	005b      	lsls	r3, r3, #1
 8005b10:	4413      	add	r3, r2
 8005b12:	00db      	lsls	r3, r3, #3
 8005b14:	3360      	adds	r3, #96	; 0x60
 8005b16:	4a37      	ldr	r2, [pc, #220]	; (8005bf4 <SEGGER_RTT_ReadNoLock+0x108>)
 8005b18:	4413      	add	r3, r2
 8005b1a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005b30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d92b      	bls.n	8005b90 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	689a      	ldr	r2, [r3, #8]
 8005b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4293      	cmp	r3, r2
 8005b48:	bf28      	it	cs
 8005b4a:	4613      	movcs	r3, r2
 8005b4c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	685a      	ldr	r2, [r3, #4]
 8005b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b54:	4413      	add	r3, r2
 8005b56:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005b58:	697a      	ldr	r2, [r7, #20]
 8005b5a:	6939      	ldr	r1, [r7, #16]
 8005b5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b5e:	f001 fa0d 	bl	8006f7c <memcpy>
    NumBytesRead += NumBytesRem;
 8005b62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	4413      	add	r3, r2
 8005b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	4413      	add	r3, r2
 8005b70:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005b7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	4413      	add	r3, r2
 8005b80:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d101      	bne.n	8005b90 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	bf28      	it	cs
 8005ba0:	4613      	movcs	r3, r2
 8005ba2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d019      	beq.n	8005bde <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb0:	4413      	add	r3, r2
 8005bb2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	6939      	ldr	r1, [r7, #16]
 8005bb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bba:	f001 f9df 	bl	8006f7c <memcpy>
    NumBytesRead += NumBytesRem;
 8005bbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	4413      	add	r3, r2
 8005bcc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005bd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	4413      	add	r3, r2
 8005bdc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005be8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3730      	adds	r7, #48	; 0x30
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	20003058 	.word	0x20003058

08005bf8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005bf8:	b480      	push	{r7}
 8005bfa:	b087      	sub	sp, #28
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005c04:	2300      	movs	r3, #0
 8005c06:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00f      	beq.n	8005c2e <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8005c0e:	e002      	b.n	8005c16 <_EncodeStr+0x1e>
      Len++;
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	3301      	adds	r3, #1
 8005c14:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1f6      	bne.n	8005c10 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d901      	bls.n	8005c2e <_EncodeStr+0x36>
      Len = Limit;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	2bfe      	cmp	r3, #254	; 0xfe
 8005c32:	d806      	bhi.n	8005c42 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	1c5a      	adds	r2, r3, #1
 8005c38:	60fa      	str	r2, [r7, #12]
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	b2d2      	uxtb	r2, r2
 8005c3e:	701a      	strb	r2, [r3, #0]
 8005c40:	e011      	b.n	8005c66 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	1c5a      	adds	r2, r3, #1
 8005c46:	60fa      	str	r2, [r7, #12]
 8005c48:	22ff      	movs	r2, #255	; 0xff
 8005c4a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	1c5a      	adds	r2, r3, #1
 8005c50:	60fa      	str	r2, [r7, #12]
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	b2d2      	uxtb	r2, r2
 8005c56:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	0a19      	lsrs	r1, r3, #8
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	1c5a      	adds	r2, r3, #1
 8005c60:	60fa      	str	r2, [r7, #12]
 8005c62:	b2ca      	uxtb	r2, r1
 8005c64:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005c66:	2300      	movs	r3, #0
 8005c68:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005c6a:	e00a      	b.n	8005c82 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	1c53      	adds	r3, r2, #1
 8005c70:	60bb      	str	r3, [r7, #8]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	1c59      	adds	r1, r3, #1
 8005c76:	60f9      	str	r1, [r7, #12]
 8005c78:	7812      	ldrb	r2, [r2, #0]
 8005c7a:	701a      	strb	r2, [r3, #0]
    n++;
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d3f0      	bcc.n	8005c6c <_EncodeStr+0x74>
  }
  return pPayload;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	371c      	adds	r7, #28
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	3304      	adds	r3, #4
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005cb6:	4b36      	ldr	r3, [pc, #216]	; (8005d90 <_HandleIncomingPacket+0xe0>)
 8005cb8:	7e1b      	ldrb	r3, [r3, #24]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	1cfb      	adds	r3, r7, #3
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	f7ff ff13 	bl	8005aec <SEGGER_RTT_ReadNoLock>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	dd54      	ble.n	8005d7a <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8005cd0:	78fb      	ldrb	r3, [r7, #3]
 8005cd2:	2b80      	cmp	r3, #128	; 0x80
 8005cd4:	d032      	beq.n	8005d3c <_HandleIncomingPacket+0x8c>
 8005cd6:	2b80      	cmp	r3, #128	; 0x80
 8005cd8:	dc42      	bgt.n	8005d60 <_HandleIncomingPacket+0xb0>
 8005cda:	2b07      	cmp	r3, #7
 8005cdc:	dc16      	bgt.n	8005d0c <_HandleIncomingPacket+0x5c>
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	dd3e      	ble.n	8005d60 <_HandleIncomingPacket+0xb0>
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	2b06      	cmp	r3, #6
 8005ce6:	d83b      	bhi.n	8005d60 <_HandleIncomingPacket+0xb0>
 8005ce8:	a201      	add	r2, pc, #4	; (adr r2, 8005cf0 <_HandleIncomingPacket+0x40>)
 8005cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cee:	bf00      	nop
 8005cf0:	08005d13 	.word	0x08005d13
 8005cf4:	08005d19 	.word	0x08005d19
 8005cf8:	08005d1f 	.word	0x08005d1f
 8005cfc:	08005d25 	.word	0x08005d25
 8005d00:	08005d2b 	.word	0x08005d2b
 8005d04:	08005d31 	.word	0x08005d31
 8005d08:	08005d37 	.word	0x08005d37
 8005d0c:	2b7f      	cmp	r3, #127	; 0x7f
 8005d0e:	d036      	beq.n	8005d7e <_HandleIncomingPacket+0xce>
 8005d10:	e026      	b.n	8005d60 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005d12:	f000 fb53 	bl	80063bc <SEGGER_SYSVIEW_Start>
      break;
 8005d16:	e037      	b.n	8005d88 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005d18:	f000 fc0a 	bl	8006530 <SEGGER_SYSVIEW_Stop>
      break;
 8005d1c:	e034      	b.n	8005d88 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005d1e:	f000 fdbf 	bl	80068a0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005d22:	e031      	b.n	8005d88 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005d24:	f000 fda8 	bl	8006878 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005d28:	e02e      	b.n	8005d88 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005d2a:	f000 fc27 	bl	800657c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005d2e:	e02b      	b.n	8005d88 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005d30:	f001 f852 	bl	8006dd8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005d34:	e028      	b.n	8005d88 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005d36:	f001 f831 	bl	8006d9c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005d3a:	e025      	b.n	8005d88 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005d3c:	4b14      	ldr	r3, [pc, #80]	; (8005d90 <_HandleIncomingPacket+0xe0>)
 8005d3e:	7e1b      	ldrb	r3, [r3, #24]
 8005d40:	4618      	mov	r0, r3
 8005d42:	1cfb      	adds	r3, r7, #3
 8005d44:	2201      	movs	r2, #1
 8005d46:	4619      	mov	r1, r3
 8005d48:	f7ff fed0 	bl	8005aec <SEGGER_RTT_ReadNoLock>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	dd15      	ble.n	8005d82 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005d56:	78fb      	ldrb	r3, [r7, #3]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f000 ff9f 	bl	8006c9c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005d5e:	e010      	b.n	8005d82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005d60:	78fb      	ldrb	r3, [r7, #3]
 8005d62:	b25b      	sxtb	r3, r3
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	da0e      	bge.n	8005d86 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005d68:	4b09      	ldr	r3, [pc, #36]	; (8005d90 <_HandleIncomingPacket+0xe0>)
 8005d6a:	7e1b      	ldrb	r3, [r3, #24]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	1cfb      	adds	r3, r7, #3
 8005d70:	2201      	movs	r2, #1
 8005d72:	4619      	mov	r1, r3
 8005d74:	f7ff feba 	bl	8005aec <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005d78:	e005      	b.n	8005d86 <_HandleIncomingPacket+0xd6>
    }
  }
 8005d7a:	bf00      	nop
 8005d7c:	e004      	b.n	8005d88 <_HandleIncomingPacket+0xd8>
      break;
 8005d7e:	bf00      	nop
 8005d80:	e002      	b.n	8005d88 <_HandleIncomingPacket+0xd8>
      break;
 8005d82:	bf00      	nop
 8005d84:	e000      	b.n	8005d88 <_HandleIncomingPacket+0xd8>
      break;
 8005d86:	bf00      	nop
}
 8005d88:	bf00      	nop
 8005d8a:	3708      	adds	r7, #8
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	20002eb4 	.word	0x20002eb4

08005d94 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b08c      	sub	sp, #48	; 0x30
 8005d98:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005d9e:	1d3b      	adds	r3, r7, #4
 8005da0:	3301      	adds	r3, #1
 8005da2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005da8:	4b31      	ldr	r3, [pc, #196]	; (8005e70 <_TrySendOverflowPacket+0xdc>)
 8005daa:	695b      	ldr	r3, [r3, #20]
 8005dac:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dae:	e00b      	b.n	8005dc8 <_TrySendOverflowPacket+0x34>
 8005db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db2:	b2da      	uxtb	r2, r3
 8005db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db6:	1c59      	adds	r1, r3, #1
 8005db8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005dba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dbe:	b2d2      	uxtb	r2, r2
 8005dc0:	701a      	strb	r2, [r3, #0]
 8005dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc4:	09db      	lsrs	r3, r3, #7
 8005dc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dca:	2b7f      	cmp	r3, #127	; 0x7f
 8005dcc:	d8f0      	bhi.n	8005db0 <_TrySendOverflowPacket+0x1c>
 8005dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd0:	1c5a      	adds	r2, r3, #1
 8005dd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005dd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dd6:	b2d2      	uxtb	r2, r2
 8005dd8:	701a      	strb	r2, [r3, #0]
 8005dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ddc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005dde:	4b25      	ldr	r3, [pc, #148]	; (8005e74 <_TrySendOverflowPacket+0xe0>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005de4:	4b22      	ldr	r3, [pc, #136]	; (8005e70 <_TrySendOverflowPacket+0xdc>)
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	69ba      	ldr	r2, [r7, #24]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	627b      	str	r3, [r7, #36]	; 0x24
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	623b      	str	r3, [r7, #32]
 8005df6:	e00b      	b.n	8005e10 <_TrySendOverflowPacket+0x7c>
 8005df8:	6a3b      	ldr	r3, [r7, #32]
 8005dfa:	b2da      	uxtb	r2, r3
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfe:	1c59      	adds	r1, r3, #1
 8005e00:	6279      	str	r1, [r7, #36]	; 0x24
 8005e02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e06:	b2d2      	uxtb	r2, r2
 8005e08:	701a      	strb	r2, [r3, #0]
 8005e0a:	6a3b      	ldr	r3, [r7, #32]
 8005e0c:	09db      	lsrs	r3, r3, #7
 8005e0e:	623b      	str	r3, [r7, #32]
 8005e10:	6a3b      	ldr	r3, [r7, #32]
 8005e12:	2b7f      	cmp	r3, #127	; 0x7f
 8005e14:	d8f0      	bhi.n	8005df8 <_TrySendOverflowPacket+0x64>
 8005e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	627a      	str	r2, [r7, #36]	; 0x24
 8005e1c:	6a3a      	ldr	r2, [r7, #32]
 8005e1e:	b2d2      	uxtb	r2, r2
 8005e20:	701a      	strb	r2, [r3, #0]
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e24:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005e26:	4b12      	ldr	r3, [pc, #72]	; (8005e70 <_TrySendOverflowPacket+0xdc>)
 8005e28:	785b      	ldrb	r3, [r3, #1]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	1d3b      	adds	r3, r7, #4
 8005e2e:	69fa      	ldr	r2, [r7, #28]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	461a      	mov	r2, r3
 8005e34:	1d3b      	adds	r3, r7, #4
 8005e36:	4619      	mov	r1, r3
 8005e38:	f7fa f9ca 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d009      	beq.n	8005e5a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005e46:	4a0a      	ldr	r2, [pc, #40]	; (8005e70 <_TrySendOverflowPacket+0xdc>)
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005e4c:	4b08      	ldr	r3, [pc, #32]	; (8005e70 <_TrySendOverflowPacket+0xdc>)
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	3b01      	subs	r3, #1
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	4b06      	ldr	r3, [pc, #24]	; (8005e70 <_TrySendOverflowPacket+0xdc>)
 8005e56:	701a      	strb	r2, [r3, #0]
 8005e58:	e004      	b.n	8005e64 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005e5a:	4b05      	ldr	r3, [pc, #20]	; (8005e70 <_TrySendOverflowPacket+0xdc>)
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	4a03      	ldr	r2, [pc, #12]	; (8005e70 <_TrySendOverflowPacket+0xdc>)
 8005e62:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005e64:	693b      	ldr	r3, [r7, #16]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3730      	adds	r7, #48	; 0x30
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	20002eb4 	.word	0x20002eb4
 8005e74:	e0001004 	.word	0xe0001004

08005e78 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08a      	sub	sp, #40	; 0x28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005e84:	4b6c      	ldr	r3, [pc, #432]	; (8006038 <_SendPacket+0x1c0>)
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d010      	beq.n	8005eae <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005e8c:	4b6a      	ldr	r3, [pc, #424]	; (8006038 <_SendPacket+0x1c0>)
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f000 80a3 	beq.w	8005fdc <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005e96:	4b68      	ldr	r3, [pc, #416]	; (8006038 <_SendPacket+0x1c0>)
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d109      	bne.n	8005eb2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005e9e:	f7ff ff79 	bl	8005d94 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005ea2:	4b65      	ldr	r3, [pc, #404]	; (8006038 <_SendPacket+0x1c0>)
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	f040 809a 	bne.w	8005fe0 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8005eac:	e001      	b.n	8005eb2 <_SendPacket+0x3a>
    goto Send;
 8005eae:	bf00      	nop
 8005eb0:	e000      	b.n	8005eb4 <_SendPacket+0x3c>
Send:
 8005eb2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2b1f      	cmp	r3, #31
 8005eb8:	d809      	bhi.n	8005ece <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005eba:	4b5f      	ldr	r3, [pc, #380]	; (8006038 <_SendPacket+0x1c0>)
 8005ebc:	69da      	ldr	r2, [r3, #28]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f040 808b 	bne.w	8005fe4 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2b17      	cmp	r3, #23
 8005ed2:	d807      	bhi.n	8005ee4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	60fb      	str	r3, [r7, #12]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	701a      	strb	r2, [r3, #0]
 8005ee2:	e03d      	b.n	8005f60 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	2b7f      	cmp	r3, #127	; 0x7f
 8005ef0:	d912      	bls.n	8005f18 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	09da      	lsrs	r2, r3, #7
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	60fb      	str	r3, [r7, #12]
 8005efc:	b2d2      	uxtb	r2, r2
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	3a01      	subs	r2, #1
 8005f0a:	60fa      	str	r2, [r7, #12]
 8005f0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	701a      	strb	r2, [r3, #0]
 8005f16:	e006      	b.n	8005f26 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	60fb      	str	r3, [r7, #12]
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2b7f      	cmp	r3, #127	; 0x7f
 8005f2a:	d912      	bls.n	8005f52 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	09da      	lsrs	r2, r3, #7
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	3b01      	subs	r3, #1
 8005f34:	60fb      	str	r3, [r7, #12]
 8005f36:	b2d2      	uxtb	r2, r2
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	3a01      	subs	r2, #1
 8005f44:	60fa      	str	r2, [r7, #12]
 8005f46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f4a:	b2da      	uxtb	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	701a      	strb	r2, [r3, #0]
 8005f50:	e006      	b.n	8005f60 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	3b01      	subs	r3, #1
 8005f56:	60fb      	str	r3, [r7, #12]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	b2da      	uxtb	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005f60:	4b36      	ldr	r3, [pc, #216]	; (800603c <_SendPacket+0x1c4>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005f66:	4b34      	ldr	r3, [pc, #208]	; (8006038 <_SendPacket+0x1c0>)
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	69ba      	ldr	r2, [r7, #24]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	627b      	str	r3, [r7, #36]	; 0x24
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	623b      	str	r3, [r7, #32]
 8005f78:	e00b      	b.n	8005f92 <_SendPacket+0x11a>
 8005f7a:	6a3b      	ldr	r3, [r7, #32]
 8005f7c:	b2da      	uxtb	r2, r3
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	1c59      	adds	r1, r3, #1
 8005f82:	6279      	str	r1, [r7, #36]	; 0x24
 8005f84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f88:	b2d2      	uxtb	r2, r2
 8005f8a:	701a      	strb	r2, [r3, #0]
 8005f8c:	6a3b      	ldr	r3, [r7, #32]
 8005f8e:	09db      	lsrs	r3, r3, #7
 8005f90:	623b      	str	r3, [r7, #32]
 8005f92:	6a3b      	ldr	r3, [r7, #32]
 8005f94:	2b7f      	cmp	r3, #127	; 0x7f
 8005f96:	d8f0      	bhi.n	8005f7a <_SendPacket+0x102>
 8005f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9a:	1c5a      	adds	r2, r3, #1
 8005f9c:	627a      	str	r2, [r7, #36]	; 0x24
 8005f9e:	6a3a      	ldr	r2, [r7, #32]
 8005fa0:	b2d2      	uxtb	r2, r2
 8005fa2:	701a      	strb	r2, [r3, #0]
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005fa8:	4b23      	ldr	r3, [pc, #140]	; (8006038 <_SendPacket+0x1c0>)
 8005faa:	785b      	ldrb	r3, [r3, #1]
 8005fac:	4618      	mov	r0, r3
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	68f9      	ldr	r1, [r7, #12]
 8005fb8:	f7fa f90a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d003      	beq.n	8005fce <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005fc6:	4a1c      	ldr	r2, [pc, #112]	; (8006038 <_SendPacket+0x1c0>)
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	60d3      	str	r3, [r2, #12]
 8005fcc:	e00b      	b.n	8005fe6 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005fce:	4b1a      	ldr	r3, [pc, #104]	; (8006038 <_SendPacket+0x1c0>)
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	b2da      	uxtb	r2, r3
 8005fd6:	4b18      	ldr	r3, [pc, #96]	; (8006038 <_SendPacket+0x1c0>)
 8005fd8:	701a      	strb	r2, [r3, #0]
 8005fda:	e004      	b.n	8005fe6 <_SendPacket+0x16e>
    goto SendDone;
 8005fdc:	bf00      	nop
 8005fde:	e002      	b.n	8005fe6 <_SendPacket+0x16e>
      goto SendDone;
 8005fe0:	bf00      	nop
 8005fe2:	e000      	b.n	8005fe6 <_SendPacket+0x16e>
      goto SendDone;
 8005fe4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005fe6:	4b14      	ldr	r3, [pc, #80]	; (8006038 <_SendPacket+0x1c0>)
 8005fe8:	7e1b      	ldrb	r3, [r3, #24]
 8005fea:	4619      	mov	r1, r3
 8005fec:	4a14      	ldr	r2, [pc, #80]	; (8006040 <_SendPacket+0x1c8>)
 8005fee:	460b      	mov	r3, r1
 8005ff0:	005b      	lsls	r3, r3, #1
 8005ff2:	440b      	add	r3, r1
 8005ff4:	00db      	lsls	r3, r3, #3
 8005ff6:	4413      	add	r3, r2
 8005ff8:	336c      	adds	r3, #108	; 0x6c
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	4b0e      	ldr	r3, [pc, #56]	; (8006038 <_SendPacket+0x1c0>)
 8005ffe:	7e1b      	ldrb	r3, [r3, #24]
 8006000:	4618      	mov	r0, r3
 8006002:	490f      	ldr	r1, [pc, #60]	; (8006040 <_SendPacket+0x1c8>)
 8006004:	4603      	mov	r3, r0
 8006006:	005b      	lsls	r3, r3, #1
 8006008:	4403      	add	r3, r0
 800600a:	00db      	lsls	r3, r3, #3
 800600c:	440b      	add	r3, r1
 800600e:	3370      	adds	r3, #112	; 0x70
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	429a      	cmp	r2, r3
 8006014:	d00b      	beq.n	800602e <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006016:	4b08      	ldr	r3, [pc, #32]	; (8006038 <_SendPacket+0x1c0>)
 8006018:	789b      	ldrb	r3, [r3, #2]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d107      	bne.n	800602e <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800601e:	4b06      	ldr	r3, [pc, #24]	; (8006038 <_SendPacket+0x1c0>)
 8006020:	2201      	movs	r2, #1
 8006022:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006024:	f7ff fe44 	bl	8005cb0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006028:	4b03      	ldr	r3, [pc, #12]	; (8006038 <_SendPacket+0x1c0>)
 800602a:	2200      	movs	r2, #0
 800602c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800602e:	bf00      	nop
 8006030:	3728      	adds	r7, #40	; 0x28
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	20002eb4 	.word	0x20002eb4
 800603c:	e0001004 	.word	0xe0001004
 8006040:	20003058 	.word	0x20003058

08006044 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800604c:	f3ef 8311 	mrs	r3, BASEPRI
 8006050:	f04f 0120 	mov.w	r1, #32
 8006054:	f381 8811 	msr	BASEPRI, r1
 8006058:	60fb      	str	r3, [r7, #12]
 800605a:	4808      	ldr	r0, [pc, #32]	; (800607c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800605c:	f7ff fe1c 	bl	8005c98 <_PreparePacket>
 8006060:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	68b9      	ldr	r1, [r7, #8]
 8006066:	68b8      	ldr	r0, [r7, #8]
 8006068:	f7ff ff06 	bl	8005e78 <_SendPacket>
  RECORD_END();
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f383 8811 	msr	BASEPRI, r3
}
 8006072:	bf00      	nop
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	20002ee4 	.word	0x20002ee4

08006080 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006080:	b580      	push	{r7, lr}
 8006082:	b088      	sub	sp, #32
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800608a:	f3ef 8311 	mrs	r3, BASEPRI
 800608e:	f04f 0120 	mov.w	r1, #32
 8006092:	f381 8811 	msr	BASEPRI, r1
 8006096:	617b      	str	r3, [r7, #20]
 8006098:	4816      	ldr	r0, [pc, #88]	; (80060f4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800609a:	f7ff fdfd 	bl	8005c98 <_PreparePacket>
 800609e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	61fb      	str	r3, [r7, #28]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	61bb      	str	r3, [r7, #24]
 80060ac:	e00b      	b.n	80060c6 <SEGGER_SYSVIEW_RecordU32+0x46>
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	b2da      	uxtb	r2, r3
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	1c59      	adds	r1, r3, #1
 80060b6:	61f9      	str	r1, [r7, #28]
 80060b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060bc:	b2d2      	uxtb	r2, r2
 80060be:	701a      	strb	r2, [r3, #0]
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	09db      	lsrs	r3, r3, #7
 80060c4:	61bb      	str	r3, [r7, #24]
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	2b7f      	cmp	r3, #127	; 0x7f
 80060ca:	d8f0      	bhi.n	80060ae <SEGGER_SYSVIEW_RecordU32+0x2e>
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	1c5a      	adds	r2, r3, #1
 80060d0:	61fa      	str	r2, [r7, #28]
 80060d2:	69ba      	ldr	r2, [r7, #24]
 80060d4:	b2d2      	uxtb	r2, r2
 80060d6:	701a      	strb	r2, [r3, #0]
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	68f9      	ldr	r1, [r7, #12]
 80060e0:	6938      	ldr	r0, [r7, #16]
 80060e2:	f7ff fec9 	bl	8005e78 <_SendPacket>
  RECORD_END();
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f383 8811 	msr	BASEPRI, r3
}
 80060ec:	bf00      	nop
 80060ee:	3720      	adds	r7, #32
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	20002ee4 	.word	0x20002ee4

080060f8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b08c      	sub	sp, #48	; 0x30
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006104:	f3ef 8311 	mrs	r3, BASEPRI
 8006108:	f04f 0120 	mov.w	r1, #32
 800610c:	f381 8811 	msr	BASEPRI, r1
 8006110:	61fb      	str	r3, [r7, #28]
 8006112:	4825      	ldr	r0, [pc, #148]	; (80061a8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006114:	f7ff fdc0 	bl	8005c98 <_PreparePacket>
 8006118:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	62bb      	str	r3, [r7, #40]	; 0x28
 8006126:	e00b      	b.n	8006140 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612a:	b2da      	uxtb	r2, r3
 800612c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612e:	1c59      	adds	r1, r3, #1
 8006130:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006132:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006136:	b2d2      	uxtb	r2, r2
 8006138:	701a      	strb	r2, [r3, #0]
 800613a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613c:	09db      	lsrs	r3, r3, #7
 800613e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006142:	2b7f      	cmp	r3, #127	; 0x7f
 8006144:	d8f0      	bhi.n	8006128 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006148:	1c5a      	adds	r2, r3, #1
 800614a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800614c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800614e:	b2d2      	uxtb	r2, r2
 8006150:	701a      	strb	r2, [r3, #0]
 8006152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006154:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	627b      	str	r3, [r7, #36]	; 0x24
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	623b      	str	r3, [r7, #32]
 800615e:	e00b      	b.n	8006178 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006160:	6a3b      	ldr	r3, [r7, #32]
 8006162:	b2da      	uxtb	r2, r3
 8006164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006166:	1c59      	adds	r1, r3, #1
 8006168:	6279      	str	r1, [r7, #36]	; 0x24
 800616a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800616e:	b2d2      	uxtb	r2, r2
 8006170:	701a      	strb	r2, [r3, #0]
 8006172:	6a3b      	ldr	r3, [r7, #32]
 8006174:	09db      	lsrs	r3, r3, #7
 8006176:	623b      	str	r3, [r7, #32]
 8006178:	6a3b      	ldr	r3, [r7, #32]
 800617a:	2b7f      	cmp	r3, #127	; 0x7f
 800617c:	d8f0      	bhi.n	8006160 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800617e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006180:	1c5a      	adds	r2, r3, #1
 8006182:	627a      	str	r2, [r7, #36]	; 0x24
 8006184:	6a3a      	ldr	r2, [r7, #32]
 8006186:	b2d2      	uxtb	r2, r2
 8006188:	701a      	strb	r2, [r3, #0]
 800618a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	6979      	ldr	r1, [r7, #20]
 8006192:	69b8      	ldr	r0, [r7, #24]
 8006194:	f7ff fe70 	bl	8005e78 <_SendPacket>
  RECORD_END();
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	f383 8811 	msr	BASEPRI, r3
}
 800619e:	bf00      	nop
 80061a0:	3730      	adds	r7, #48	; 0x30
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	20002ee4 	.word	0x20002ee4

080061ac <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b08e      	sub	sp, #56	; 0x38
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
 80061b8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80061ba:	f3ef 8311 	mrs	r3, BASEPRI
 80061be:	f04f 0120 	mov.w	r1, #32
 80061c2:	f381 8811 	msr	BASEPRI, r1
 80061c6:	61fb      	str	r3, [r7, #28]
 80061c8:	4832      	ldr	r0, [pc, #200]	; (8006294 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80061ca:	f7ff fd65 	bl	8005c98 <_PreparePacket>
 80061ce:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	637b      	str	r3, [r7, #52]	; 0x34
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	633b      	str	r3, [r7, #48]	; 0x30
 80061dc:	e00b      	b.n	80061f6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80061de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e0:	b2da      	uxtb	r2, r3
 80061e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e4:	1c59      	adds	r1, r3, #1
 80061e6:	6379      	str	r1, [r7, #52]	; 0x34
 80061e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061ec:	b2d2      	uxtb	r2, r2
 80061ee:	701a      	strb	r2, [r3, #0]
 80061f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f2:	09db      	lsrs	r3, r3, #7
 80061f4:	633b      	str	r3, [r7, #48]	; 0x30
 80061f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f8:	2b7f      	cmp	r3, #127	; 0x7f
 80061fa:	d8f0      	bhi.n	80061de <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80061fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061fe:	1c5a      	adds	r2, r3, #1
 8006200:	637a      	str	r2, [r7, #52]	; 0x34
 8006202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006204:	b2d2      	uxtb	r2, r2
 8006206:	701a      	strb	r2, [r3, #0]
 8006208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800620a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	62bb      	str	r3, [r7, #40]	; 0x28
 8006214:	e00b      	b.n	800622e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006218:	b2da      	uxtb	r2, r3
 800621a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621c:	1c59      	adds	r1, r3, #1
 800621e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006220:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006224:	b2d2      	uxtb	r2, r2
 8006226:	701a      	strb	r2, [r3, #0]
 8006228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622a:	09db      	lsrs	r3, r3, #7
 800622c:	62bb      	str	r3, [r7, #40]	; 0x28
 800622e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006230:	2b7f      	cmp	r3, #127	; 0x7f
 8006232:	d8f0      	bhi.n	8006216 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006236:	1c5a      	adds	r2, r3, #1
 8006238:	62fa      	str	r2, [r7, #44]	; 0x2c
 800623a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800623c:	b2d2      	uxtb	r2, r2
 800623e:	701a      	strb	r2, [r3, #0]
 8006240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006242:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	627b      	str	r3, [r7, #36]	; 0x24
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	623b      	str	r3, [r7, #32]
 800624c:	e00b      	b.n	8006266 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800624e:	6a3b      	ldr	r3, [r7, #32]
 8006250:	b2da      	uxtb	r2, r3
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	1c59      	adds	r1, r3, #1
 8006256:	6279      	str	r1, [r7, #36]	; 0x24
 8006258:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800625c:	b2d2      	uxtb	r2, r2
 800625e:	701a      	strb	r2, [r3, #0]
 8006260:	6a3b      	ldr	r3, [r7, #32]
 8006262:	09db      	lsrs	r3, r3, #7
 8006264:	623b      	str	r3, [r7, #32]
 8006266:	6a3b      	ldr	r3, [r7, #32]
 8006268:	2b7f      	cmp	r3, #127	; 0x7f
 800626a:	d8f0      	bhi.n	800624e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800626c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626e:	1c5a      	adds	r2, r3, #1
 8006270:	627a      	str	r2, [r7, #36]	; 0x24
 8006272:	6a3a      	ldr	r2, [r7, #32]
 8006274:	b2d2      	uxtb	r2, r2
 8006276:	701a      	strb	r2, [r3, #0]
 8006278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	6979      	ldr	r1, [r7, #20]
 8006280:	69b8      	ldr	r0, [r7, #24]
 8006282:	f7ff fdf9 	bl	8005e78 <_SendPacket>
  RECORD_END();
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	f383 8811 	msr	BASEPRI, r3
}
 800628c:	bf00      	nop
 800628e:	3738      	adds	r7, #56	; 0x38
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	20002ee4 	.word	0x20002ee4

08006298 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006298:	b580      	push	{r7, lr}
 800629a:	b090      	sub	sp, #64	; 0x40
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
 80062a4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80062a6:	f3ef 8311 	mrs	r3, BASEPRI
 80062aa:	f04f 0120 	mov.w	r1, #32
 80062ae:	f381 8811 	msr	BASEPRI, r1
 80062b2:	61fb      	str	r3, [r7, #28]
 80062b4:	4840      	ldr	r0, [pc, #256]	; (80063b8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80062b6:	f7ff fcef 	bl	8005c98 <_PreparePacket>
 80062ba:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80062c8:	e00b      	b.n	80062e2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80062ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062cc:	b2da      	uxtb	r2, r3
 80062ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062d0:	1c59      	adds	r1, r3, #1
 80062d2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80062d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062d8:	b2d2      	uxtb	r2, r2
 80062da:	701a      	strb	r2, [r3, #0]
 80062dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062de:	09db      	lsrs	r3, r3, #7
 80062e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80062e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e4:	2b7f      	cmp	r3, #127	; 0x7f
 80062e6:	d8f0      	bhi.n	80062ca <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80062e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ea:	1c5a      	adds	r2, r3, #1
 80062ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80062ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062f0:	b2d2      	uxtb	r2, r2
 80062f2:	701a      	strb	r2, [r3, #0]
 80062f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	637b      	str	r3, [r7, #52]	; 0x34
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	633b      	str	r3, [r7, #48]	; 0x30
 8006300:	e00b      	b.n	800631a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006304:	b2da      	uxtb	r2, r3
 8006306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006308:	1c59      	adds	r1, r3, #1
 800630a:	6379      	str	r1, [r7, #52]	; 0x34
 800630c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006310:	b2d2      	uxtb	r2, r2
 8006312:	701a      	strb	r2, [r3, #0]
 8006314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006316:	09db      	lsrs	r3, r3, #7
 8006318:	633b      	str	r3, [r7, #48]	; 0x30
 800631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631c:	2b7f      	cmp	r3, #127	; 0x7f
 800631e:	d8f0      	bhi.n	8006302 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006322:	1c5a      	adds	r2, r3, #1
 8006324:	637a      	str	r2, [r7, #52]	; 0x34
 8006326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006328:	b2d2      	uxtb	r2, r2
 800632a:	701a      	strb	r2, [r3, #0]
 800632c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800632e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	62bb      	str	r3, [r7, #40]	; 0x28
 8006338:	e00b      	b.n	8006352 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800633a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633c:	b2da      	uxtb	r2, r3
 800633e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006340:	1c59      	adds	r1, r3, #1
 8006342:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006344:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006348:	b2d2      	uxtb	r2, r2
 800634a:	701a      	strb	r2, [r3, #0]
 800634c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634e:	09db      	lsrs	r3, r3, #7
 8006350:	62bb      	str	r3, [r7, #40]	; 0x28
 8006352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006354:	2b7f      	cmp	r3, #127	; 0x7f
 8006356:	d8f0      	bhi.n	800633a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635a:	1c5a      	adds	r2, r3, #1
 800635c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800635e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006360:	b2d2      	uxtb	r2, r2
 8006362:	701a      	strb	r2, [r3, #0]
 8006364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006366:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	627b      	str	r3, [r7, #36]	; 0x24
 800636c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800636e:	623b      	str	r3, [r7, #32]
 8006370:	e00b      	b.n	800638a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006372:	6a3b      	ldr	r3, [r7, #32]
 8006374:	b2da      	uxtb	r2, r3
 8006376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006378:	1c59      	adds	r1, r3, #1
 800637a:	6279      	str	r1, [r7, #36]	; 0x24
 800637c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006380:	b2d2      	uxtb	r2, r2
 8006382:	701a      	strb	r2, [r3, #0]
 8006384:	6a3b      	ldr	r3, [r7, #32]
 8006386:	09db      	lsrs	r3, r3, #7
 8006388:	623b      	str	r3, [r7, #32]
 800638a:	6a3b      	ldr	r3, [r7, #32]
 800638c:	2b7f      	cmp	r3, #127	; 0x7f
 800638e:	d8f0      	bhi.n	8006372 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006392:	1c5a      	adds	r2, r3, #1
 8006394:	627a      	str	r2, [r7, #36]	; 0x24
 8006396:	6a3a      	ldr	r2, [r7, #32]
 8006398:	b2d2      	uxtb	r2, r2
 800639a:	701a      	strb	r2, [r3, #0]
 800639c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	6979      	ldr	r1, [r7, #20]
 80063a4:	69b8      	ldr	r0, [r7, #24]
 80063a6:	f7ff fd67 	bl	8005e78 <_SendPacket>
  RECORD_END();
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	f383 8811 	msr	BASEPRI, r3
}
 80063b0:	bf00      	nop
 80063b2:	3740      	adds	r7, #64	; 0x40
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	20002ee4 	.word	0x20002ee4

080063bc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80063bc:	b580      	push	{r7, lr}
 80063be:	b08c      	sub	sp, #48	; 0x30
 80063c0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80063c2:	4b58      	ldr	r3, [pc, #352]	; (8006524 <SEGGER_SYSVIEW_Start+0x168>)
 80063c4:	2201      	movs	r2, #1
 80063c6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80063c8:	f3ef 8311 	mrs	r3, BASEPRI
 80063cc:	f04f 0120 	mov.w	r1, #32
 80063d0:	f381 8811 	msr	BASEPRI, r1
 80063d4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80063d6:	4b53      	ldr	r3, [pc, #332]	; (8006524 <SEGGER_SYSVIEW_Start+0x168>)
 80063d8:	785b      	ldrb	r3, [r3, #1]
 80063da:	220a      	movs	r2, #10
 80063dc:	4952      	ldr	r1, [pc, #328]	; (8006528 <SEGGER_SYSVIEW_Start+0x16c>)
 80063de:	4618      	mov	r0, r3
 80063e0:	f7f9 fef6 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80063ea:	200a      	movs	r0, #10
 80063ec:	f7ff fe2a 	bl	8006044 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80063f0:	f3ef 8311 	mrs	r3, BASEPRI
 80063f4:	f04f 0120 	mov.w	r1, #32
 80063f8:	f381 8811 	msr	BASEPRI, r1
 80063fc:	60bb      	str	r3, [r7, #8]
 80063fe:	484b      	ldr	r0, [pc, #300]	; (800652c <SEGGER_SYSVIEW_Start+0x170>)
 8006400:	f7ff fc4a 	bl	8005c98 <_PreparePacket>
 8006404:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800640e:	4b45      	ldr	r3, [pc, #276]	; (8006524 <SEGGER_SYSVIEW_Start+0x168>)
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	62bb      	str	r3, [r7, #40]	; 0x28
 8006414:	e00b      	b.n	800642e <SEGGER_SYSVIEW_Start+0x72>
 8006416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006418:	b2da      	uxtb	r2, r3
 800641a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641c:	1c59      	adds	r1, r3, #1
 800641e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006420:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006424:	b2d2      	uxtb	r2, r2
 8006426:	701a      	strb	r2, [r3, #0]
 8006428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642a:	09db      	lsrs	r3, r3, #7
 800642c:	62bb      	str	r3, [r7, #40]	; 0x28
 800642e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006430:	2b7f      	cmp	r3, #127	; 0x7f
 8006432:	d8f0      	bhi.n	8006416 <SEGGER_SYSVIEW_Start+0x5a>
 8006434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006436:	1c5a      	adds	r2, r3, #1
 8006438:	62fa      	str	r2, [r7, #44]	; 0x2c
 800643a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800643c:	b2d2      	uxtb	r2, r2
 800643e:	701a      	strb	r2, [r3, #0]
 8006440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006442:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	627b      	str	r3, [r7, #36]	; 0x24
 8006448:	4b36      	ldr	r3, [pc, #216]	; (8006524 <SEGGER_SYSVIEW_Start+0x168>)
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	623b      	str	r3, [r7, #32]
 800644e:	e00b      	b.n	8006468 <SEGGER_SYSVIEW_Start+0xac>
 8006450:	6a3b      	ldr	r3, [r7, #32]
 8006452:	b2da      	uxtb	r2, r3
 8006454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006456:	1c59      	adds	r1, r3, #1
 8006458:	6279      	str	r1, [r7, #36]	; 0x24
 800645a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800645e:	b2d2      	uxtb	r2, r2
 8006460:	701a      	strb	r2, [r3, #0]
 8006462:	6a3b      	ldr	r3, [r7, #32]
 8006464:	09db      	lsrs	r3, r3, #7
 8006466:	623b      	str	r3, [r7, #32]
 8006468:	6a3b      	ldr	r3, [r7, #32]
 800646a:	2b7f      	cmp	r3, #127	; 0x7f
 800646c:	d8f0      	bhi.n	8006450 <SEGGER_SYSVIEW_Start+0x94>
 800646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006470:	1c5a      	adds	r2, r3, #1
 8006472:	627a      	str	r2, [r7, #36]	; 0x24
 8006474:	6a3a      	ldr	r2, [r7, #32]
 8006476:	b2d2      	uxtb	r2, r2
 8006478:	701a      	strb	r2, [r3, #0]
 800647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	61fb      	str	r3, [r7, #28]
 8006482:	4b28      	ldr	r3, [pc, #160]	; (8006524 <SEGGER_SYSVIEW_Start+0x168>)
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	61bb      	str	r3, [r7, #24]
 8006488:	e00b      	b.n	80064a2 <SEGGER_SYSVIEW_Start+0xe6>
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	b2da      	uxtb	r2, r3
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	1c59      	adds	r1, r3, #1
 8006492:	61f9      	str	r1, [r7, #28]
 8006494:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006498:	b2d2      	uxtb	r2, r2
 800649a:	701a      	strb	r2, [r3, #0]
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	09db      	lsrs	r3, r3, #7
 80064a0:	61bb      	str	r3, [r7, #24]
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	2b7f      	cmp	r3, #127	; 0x7f
 80064a6:	d8f0      	bhi.n	800648a <SEGGER_SYSVIEW_Start+0xce>
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	1c5a      	adds	r2, r3, #1
 80064ac:	61fa      	str	r2, [r7, #28]
 80064ae:	69ba      	ldr	r2, [r7, #24]
 80064b0:	b2d2      	uxtb	r2, r2
 80064b2:	701a      	strb	r2, [r3, #0]
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	617b      	str	r3, [r7, #20]
 80064bc:	2300      	movs	r3, #0
 80064be:	613b      	str	r3, [r7, #16]
 80064c0:	e00b      	b.n	80064da <SEGGER_SYSVIEW_Start+0x11e>
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	b2da      	uxtb	r2, r3
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	1c59      	adds	r1, r3, #1
 80064ca:	6179      	str	r1, [r7, #20]
 80064cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064d0:	b2d2      	uxtb	r2, r2
 80064d2:	701a      	strb	r2, [r3, #0]
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	09db      	lsrs	r3, r3, #7
 80064d8:	613b      	str	r3, [r7, #16]
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	2b7f      	cmp	r3, #127	; 0x7f
 80064de:	d8f0      	bhi.n	80064c2 <SEGGER_SYSVIEW_Start+0x106>
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	1c5a      	adds	r2, r3, #1
 80064e4:	617a      	str	r2, [r7, #20]
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	b2d2      	uxtb	r2, r2
 80064ea:	701a      	strb	r2, [r3, #0]
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80064f0:	2218      	movs	r2, #24
 80064f2:	6839      	ldr	r1, [r7, #0]
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f7ff fcbf 	bl	8005e78 <_SendPacket>
      RECORD_END();
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006500:	4b08      	ldr	r3, [pc, #32]	; (8006524 <SEGGER_SYSVIEW_Start+0x168>)
 8006502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006504:	2b00      	cmp	r3, #0
 8006506:	d002      	beq.n	800650e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006508:	4b06      	ldr	r3, [pc, #24]	; (8006524 <SEGGER_SYSVIEW_Start+0x168>)
 800650a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800650e:	f000 f9c7 	bl	80068a0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006512:	f000 f9b1 	bl	8006878 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006516:	f000 fc5f 	bl	8006dd8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800651a:	bf00      	nop
 800651c:	3730      	adds	r7, #48	; 0x30
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	20002eb4 	.word	0x20002eb4
 8006528:	08008008 	.word	0x08008008
 800652c:	20002ee4 	.word	0x20002ee4

08006530 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006536:	f3ef 8311 	mrs	r3, BASEPRI
 800653a:	f04f 0120 	mov.w	r1, #32
 800653e:	f381 8811 	msr	BASEPRI, r1
 8006542:	607b      	str	r3, [r7, #4]
 8006544:	480b      	ldr	r0, [pc, #44]	; (8006574 <SEGGER_SYSVIEW_Stop+0x44>)
 8006546:	f7ff fba7 	bl	8005c98 <_PreparePacket>
 800654a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800654c:	4b0a      	ldr	r3, [pc, #40]	; (8006578 <SEGGER_SYSVIEW_Stop+0x48>)
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d007      	beq.n	8006564 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006554:	220b      	movs	r2, #11
 8006556:	6839      	ldr	r1, [r7, #0]
 8006558:	6838      	ldr	r0, [r7, #0]
 800655a:	f7ff fc8d 	bl	8005e78 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800655e:	4b06      	ldr	r3, [pc, #24]	; (8006578 <SEGGER_SYSVIEW_Stop+0x48>)
 8006560:	2200      	movs	r2, #0
 8006562:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f383 8811 	msr	BASEPRI, r3
}
 800656a:	bf00      	nop
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	20002ee4 	.word	0x20002ee4
 8006578:	20002eb4 	.word	0x20002eb4

0800657c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800657c:	b580      	push	{r7, lr}
 800657e:	b08c      	sub	sp, #48	; 0x30
 8006580:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006582:	f3ef 8311 	mrs	r3, BASEPRI
 8006586:	f04f 0120 	mov.w	r1, #32
 800658a:	f381 8811 	msr	BASEPRI, r1
 800658e:	60fb      	str	r3, [r7, #12]
 8006590:	4845      	ldr	r0, [pc, #276]	; (80066a8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006592:	f7ff fb81 	bl	8005c98 <_PreparePacket>
 8006596:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065a0:	4b42      	ldr	r3, [pc, #264]	; (80066ac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80065a6:	e00b      	b.n	80065c0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80065a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065aa:	b2da      	uxtb	r2, r3
 80065ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ae:	1c59      	adds	r1, r3, #1
 80065b0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80065b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065b6:	b2d2      	uxtb	r2, r2
 80065b8:	701a      	strb	r2, [r3, #0]
 80065ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065bc:	09db      	lsrs	r3, r3, #7
 80065be:	62bb      	str	r3, [r7, #40]	; 0x28
 80065c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c2:	2b7f      	cmp	r3, #127	; 0x7f
 80065c4:	d8f0      	bhi.n	80065a8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80065c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c8:	1c5a      	adds	r2, r3, #1
 80065ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065ce:	b2d2      	uxtb	r2, r2
 80065d0:	701a      	strb	r2, [r3, #0]
 80065d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	627b      	str	r3, [r7, #36]	; 0x24
 80065da:	4b34      	ldr	r3, [pc, #208]	; (80066ac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	623b      	str	r3, [r7, #32]
 80065e0:	e00b      	b.n	80065fa <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80065e2:	6a3b      	ldr	r3, [r7, #32]
 80065e4:	b2da      	uxtb	r2, r3
 80065e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e8:	1c59      	adds	r1, r3, #1
 80065ea:	6279      	str	r1, [r7, #36]	; 0x24
 80065ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065f0:	b2d2      	uxtb	r2, r2
 80065f2:	701a      	strb	r2, [r3, #0]
 80065f4:	6a3b      	ldr	r3, [r7, #32]
 80065f6:	09db      	lsrs	r3, r3, #7
 80065f8:	623b      	str	r3, [r7, #32]
 80065fa:	6a3b      	ldr	r3, [r7, #32]
 80065fc:	2b7f      	cmp	r3, #127	; 0x7f
 80065fe:	d8f0      	bhi.n	80065e2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006602:	1c5a      	adds	r2, r3, #1
 8006604:	627a      	str	r2, [r7, #36]	; 0x24
 8006606:	6a3a      	ldr	r2, [r7, #32]
 8006608:	b2d2      	uxtb	r2, r2
 800660a:	701a      	strb	r2, [r3, #0]
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	61fb      	str	r3, [r7, #28]
 8006614:	4b25      	ldr	r3, [pc, #148]	; (80066ac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	61bb      	str	r3, [r7, #24]
 800661a:	e00b      	b.n	8006634 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	b2da      	uxtb	r2, r3
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	1c59      	adds	r1, r3, #1
 8006624:	61f9      	str	r1, [r7, #28]
 8006626:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800662a:	b2d2      	uxtb	r2, r2
 800662c:	701a      	strb	r2, [r3, #0]
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	09db      	lsrs	r3, r3, #7
 8006632:	61bb      	str	r3, [r7, #24]
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	2b7f      	cmp	r3, #127	; 0x7f
 8006638:	d8f0      	bhi.n	800661c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	1c5a      	adds	r2, r3, #1
 800663e:	61fa      	str	r2, [r7, #28]
 8006640:	69ba      	ldr	r2, [r7, #24]
 8006642:	b2d2      	uxtb	r2, r2
 8006644:	701a      	strb	r2, [r3, #0]
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	617b      	str	r3, [r7, #20]
 800664e:	2300      	movs	r3, #0
 8006650:	613b      	str	r3, [r7, #16]
 8006652:	e00b      	b.n	800666c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	b2da      	uxtb	r2, r3
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	1c59      	adds	r1, r3, #1
 800665c:	6179      	str	r1, [r7, #20]
 800665e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006662:	b2d2      	uxtb	r2, r2
 8006664:	701a      	strb	r2, [r3, #0]
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	09db      	lsrs	r3, r3, #7
 800666a:	613b      	str	r3, [r7, #16]
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	2b7f      	cmp	r3, #127	; 0x7f
 8006670:	d8f0      	bhi.n	8006654 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	1c5a      	adds	r2, r3, #1
 8006676:	617a      	str	r2, [r7, #20]
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	b2d2      	uxtb	r2, r2
 800667c:	701a      	strb	r2, [r3, #0]
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006682:	2218      	movs	r2, #24
 8006684:	6879      	ldr	r1, [r7, #4]
 8006686:	68b8      	ldr	r0, [r7, #8]
 8006688:	f7ff fbf6 	bl	8005e78 <_SendPacket>
  RECORD_END();
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006692:	4b06      	ldr	r3, [pc, #24]	; (80066ac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006696:	2b00      	cmp	r3, #0
 8006698:	d002      	beq.n	80066a0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800669a:	4b04      	ldr	r3, [pc, #16]	; (80066ac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800669c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669e:	4798      	blx	r3
  }
}
 80066a0:	bf00      	nop
 80066a2:	3730      	adds	r7, #48	; 0x30
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	20002ee4 	.word	0x20002ee4
 80066ac:	20002eb4 	.word	0x20002eb4

080066b0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b092      	sub	sp, #72	; 0x48
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80066b8:	f3ef 8311 	mrs	r3, BASEPRI
 80066bc:	f04f 0120 	mov.w	r1, #32
 80066c0:	f381 8811 	msr	BASEPRI, r1
 80066c4:	617b      	str	r3, [r7, #20]
 80066c6:	486a      	ldr	r0, [pc, #424]	; (8006870 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80066c8:	f7ff fae6 	bl	8005c98 <_PreparePacket>
 80066cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	647b      	str	r3, [r7, #68]	; 0x44
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	4b66      	ldr	r3, [pc, #408]	; (8006874 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	643b      	str	r3, [r7, #64]	; 0x40
 80066e2:	e00b      	b.n	80066fc <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80066e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066ea:	1c59      	adds	r1, r3, #1
 80066ec:	6479      	str	r1, [r7, #68]	; 0x44
 80066ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066f2:	b2d2      	uxtb	r2, r2
 80066f4:	701a      	strb	r2, [r3, #0]
 80066f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066f8:	09db      	lsrs	r3, r3, #7
 80066fa:	643b      	str	r3, [r7, #64]	; 0x40
 80066fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066fe:	2b7f      	cmp	r3, #127	; 0x7f
 8006700:	d8f0      	bhi.n	80066e4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006704:	1c5a      	adds	r2, r3, #1
 8006706:	647a      	str	r2, [r7, #68]	; 0x44
 8006708:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800670a:	b2d2      	uxtb	r2, r2
 800670c:	701a      	strb	r2, [r3, #0]
 800670e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006710:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	63bb      	str	r3, [r7, #56]	; 0x38
 800671c:	e00b      	b.n	8006736 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800671e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006720:	b2da      	uxtb	r2, r3
 8006722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006724:	1c59      	adds	r1, r3, #1
 8006726:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006728:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800672c:	b2d2      	uxtb	r2, r2
 800672e:	701a      	strb	r2, [r3, #0]
 8006730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006732:	09db      	lsrs	r3, r3, #7
 8006734:	63bb      	str	r3, [r7, #56]	; 0x38
 8006736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006738:	2b7f      	cmp	r3, #127	; 0x7f
 800673a:	d8f0      	bhi.n	800671e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800673c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800673e:	1c5a      	adds	r2, r3, #1
 8006740:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006742:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006744:	b2d2      	uxtb	r2, r2
 8006746:	701a      	strb	r2, [r3, #0]
 8006748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800674a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	2220      	movs	r2, #32
 8006752:	4619      	mov	r1, r3
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f7ff fa4f 	bl	8005bf8 <_EncodeStr>
 800675a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800675c:	2209      	movs	r2, #9
 800675e:	68f9      	ldr	r1, [r7, #12]
 8006760:	6938      	ldr	r0, [r7, #16]
 8006762:	f7ff fb89 	bl	8005e78 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	637b      	str	r3, [r7, #52]	; 0x34
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	4b40      	ldr	r3, [pc, #256]	; (8006874 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	633b      	str	r3, [r7, #48]	; 0x30
 800677a:	e00b      	b.n	8006794 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800677c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677e:	b2da      	uxtb	r2, r3
 8006780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006782:	1c59      	adds	r1, r3, #1
 8006784:	6379      	str	r1, [r7, #52]	; 0x34
 8006786:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800678a:	b2d2      	uxtb	r2, r2
 800678c:	701a      	strb	r2, [r3, #0]
 800678e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006790:	09db      	lsrs	r3, r3, #7
 8006792:	633b      	str	r3, [r7, #48]	; 0x30
 8006794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006796:	2b7f      	cmp	r3, #127	; 0x7f
 8006798:	d8f0      	bhi.n	800677c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800679a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800679c:	1c5a      	adds	r2, r3, #1
 800679e:	637a      	str	r2, [r7, #52]	; 0x34
 80067a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067a2:	b2d2      	uxtb	r2, r2
 80067a4:	701a      	strb	r2, [r3, #0]
 80067a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80067b4:	e00b      	b.n	80067ce <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80067b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067bc:	1c59      	adds	r1, r3, #1
 80067be:	62f9      	str	r1, [r7, #44]	; 0x2c
 80067c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067c4:	b2d2      	uxtb	r2, r2
 80067c6:	701a      	strb	r2, [r3, #0]
 80067c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ca:	09db      	lsrs	r3, r3, #7
 80067cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80067ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d0:	2b7f      	cmp	r3, #127	; 0x7f
 80067d2:	d8f0      	bhi.n	80067b6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80067d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d6:	1c5a      	adds	r2, r3, #1
 80067d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067dc:	b2d2      	uxtb	r2, r2
 80067de:	701a      	strb	r2, [r3, #0]
 80067e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	627b      	str	r3, [r7, #36]	; 0x24
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	623b      	str	r3, [r7, #32]
 80067ee:	e00b      	b.n	8006808 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80067f0:	6a3b      	ldr	r3, [r7, #32]
 80067f2:	b2da      	uxtb	r2, r3
 80067f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f6:	1c59      	adds	r1, r3, #1
 80067f8:	6279      	str	r1, [r7, #36]	; 0x24
 80067fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067fe:	b2d2      	uxtb	r2, r2
 8006800:	701a      	strb	r2, [r3, #0]
 8006802:	6a3b      	ldr	r3, [r7, #32]
 8006804:	09db      	lsrs	r3, r3, #7
 8006806:	623b      	str	r3, [r7, #32]
 8006808:	6a3b      	ldr	r3, [r7, #32]
 800680a:	2b7f      	cmp	r3, #127	; 0x7f
 800680c:	d8f0      	bhi.n	80067f0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800680e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006810:	1c5a      	adds	r2, r3, #1
 8006812:	627a      	str	r2, [r7, #36]	; 0x24
 8006814:	6a3a      	ldr	r2, [r7, #32]
 8006816:	b2d2      	uxtb	r2, r2
 8006818:	701a      	strb	r2, [r3, #0]
 800681a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	61fb      	str	r3, [r7, #28]
 8006822:	2300      	movs	r3, #0
 8006824:	61bb      	str	r3, [r7, #24]
 8006826:	e00b      	b.n	8006840 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	b2da      	uxtb	r2, r3
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	1c59      	adds	r1, r3, #1
 8006830:	61f9      	str	r1, [r7, #28]
 8006832:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006836:	b2d2      	uxtb	r2, r2
 8006838:	701a      	strb	r2, [r3, #0]
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	09db      	lsrs	r3, r3, #7
 800683e:	61bb      	str	r3, [r7, #24]
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	2b7f      	cmp	r3, #127	; 0x7f
 8006844:	d8f0      	bhi.n	8006828 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	1c5a      	adds	r2, r3, #1
 800684a:	61fa      	str	r2, [r7, #28]
 800684c:	69ba      	ldr	r2, [r7, #24]
 800684e:	b2d2      	uxtb	r2, r2
 8006850:	701a      	strb	r2, [r3, #0]
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006856:	2215      	movs	r2, #21
 8006858:	68f9      	ldr	r1, [r7, #12]
 800685a:	6938      	ldr	r0, [r7, #16]
 800685c:	f7ff fb0c 	bl	8005e78 <_SendPacket>
  RECORD_END();
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	f383 8811 	msr	BASEPRI, r3
}
 8006866:	bf00      	nop
 8006868:	3748      	adds	r7, #72	; 0x48
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	20002ee4 	.word	0x20002ee4
 8006874:	20002eb4 	.word	0x20002eb4

08006878 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006878:	b580      	push	{r7, lr}
 800687a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800687c:	4b07      	ldr	r3, [pc, #28]	; (800689c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800687e:	6a1b      	ldr	r3, [r3, #32]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d008      	beq.n	8006896 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006884:	4b05      	ldr	r3, [pc, #20]	; (800689c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006886:	6a1b      	ldr	r3, [r3, #32]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d003      	beq.n	8006896 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800688e:	4b03      	ldr	r3, [pc, #12]	; (800689c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006890:	6a1b      	ldr	r3, [r3, #32]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	4798      	blx	r3
  }
}
 8006896:	bf00      	nop
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	20002eb4 	.word	0x20002eb4

080068a0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80068a0:	b590      	push	{r4, r7, lr}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80068a6:	4b15      	ldr	r3, [pc, #84]	; (80068fc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80068a8:	6a1b      	ldr	r3, [r3, #32]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d01a      	beq.n	80068e4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80068ae:	4b13      	ldr	r3, [pc, #76]	; (80068fc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d015      	beq.n	80068e4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80068b8:	4b10      	ldr	r3, [pc, #64]	; (80068fc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80068ba:	6a1b      	ldr	r3, [r3, #32]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4798      	blx	r3
 80068c0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80068c4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80068c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068ca:	f04f 0200 	mov.w	r2, #0
 80068ce:	f04f 0300 	mov.w	r3, #0
 80068d2:	000a      	movs	r2, r1
 80068d4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80068d6:	4613      	mov	r3, r2
 80068d8:	461a      	mov	r2, r3
 80068da:	4621      	mov	r1, r4
 80068dc:	200d      	movs	r0, #13
 80068de:	f7ff fc0b 	bl	80060f8 <SEGGER_SYSVIEW_RecordU32x2>
 80068e2:	e006      	b.n	80068f2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80068e4:	4b06      	ldr	r3, [pc, #24]	; (8006900 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4619      	mov	r1, r3
 80068ea:	200c      	movs	r0, #12
 80068ec:	f7ff fbc8 	bl	8006080 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80068f0:	bf00      	nop
 80068f2:	bf00      	nop
 80068f4:	370c      	adds	r7, #12
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd90      	pop	{r4, r7, pc}
 80068fa:	bf00      	nop
 80068fc:	20002eb4 	.word	0x20002eb4
 8006900:	e0001004 	.word	0xe0001004

08006904 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006904:	b580      	push	{r7, lr}
 8006906:	b086      	sub	sp, #24
 8006908:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800690a:	f3ef 8311 	mrs	r3, BASEPRI
 800690e:	f04f 0120 	mov.w	r1, #32
 8006912:	f381 8811 	msr	BASEPRI, r1
 8006916:	60fb      	str	r3, [r7, #12]
 8006918:	4819      	ldr	r0, [pc, #100]	; (8006980 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800691a:	f7ff f9bd 	bl	8005c98 <_PreparePacket>
 800691e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006924:	4b17      	ldr	r3, [pc, #92]	; (8006984 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800692c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	617b      	str	r3, [r7, #20]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	613b      	str	r3, [r7, #16]
 8006936:	e00b      	b.n	8006950 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	b2da      	uxtb	r2, r3
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	1c59      	adds	r1, r3, #1
 8006940:	6179      	str	r1, [r7, #20]
 8006942:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006946:	b2d2      	uxtb	r2, r2
 8006948:	701a      	strb	r2, [r3, #0]
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	09db      	lsrs	r3, r3, #7
 800694e:	613b      	str	r3, [r7, #16]
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	2b7f      	cmp	r3, #127	; 0x7f
 8006954:	d8f0      	bhi.n	8006938 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	1c5a      	adds	r2, r3, #1
 800695a:	617a      	str	r2, [r7, #20]
 800695c:	693a      	ldr	r2, [r7, #16]
 800695e:	b2d2      	uxtb	r2, r2
 8006960:	701a      	strb	r2, [r3, #0]
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006966:	2202      	movs	r2, #2
 8006968:	6879      	ldr	r1, [r7, #4]
 800696a:	68b8      	ldr	r0, [r7, #8]
 800696c:	f7ff fa84 	bl	8005e78 <_SendPacket>
  RECORD_END();
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f383 8811 	msr	BASEPRI, r3
}
 8006976:	bf00      	nop
 8006978:	3718      	adds	r7, #24
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	20002ee4 	.word	0x20002ee4
 8006984:	e000ed04 	.word	0xe000ed04

08006988 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800698e:	f3ef 8311 	mrs	r3, BASEPRI
 8006992:	f04f 0120 	mov.w	r1, #32
 8006996:	f381 8811 	msr	BASEPRI, r1
 800699a:	607b      	str	r3, [r7, #4]
 800699c:	4807      	ldr	r0, [pc, #28]	; (80069bc <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800699e:	f7ff f97b 	bl	8005c98 <_PreparePacket>
 80069a2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80069a4:	2203      	movs	r2, #3
 80069a6:	6839      	ldr	r1, [r7, #0]
 80069a8:	6838      	ldr	r0, [r7, #0]
 80069aa:	f7ff fa65 	bl	8005e78 <_SendPacket>
  RECORD_END();
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f383 8811 	msr	BASEPRI, r3
}
 80069b4:	bf00      	nop
 80069b6:	3708      	adds	r7, #8
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	20002ee4 	.word	0x20002ee4

080069c0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80069c6:	f3ef 8311 	mrs	r3, BASEPRI
 80069ca:	f04f 0120 	mov.w	r1, #32
 80069ce:	f381 8811 	msr	BASEPRI, r1
 80069d2:	607b      	str	r3, [r7, #4]
 80069d4:	4807      	ldr	r0, [pc, #28]	; (80069f4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80069d6:	f7ff f95f 	bl	8005c98 <_PreparePacket>
 80069da:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80069dc:	2212      	movs	r2, #18
 80069de:	6839      	ldr	r1, [r7, #0]
 80069e0:	6838      	ldr	r0, [r7, #0]
 80069e2:	f7ff fa49 	bl	8005e78 <_SendPacket>
  RECORD_END();
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f383 8811 	msr	BASEPRI, r3
}
 80069ec:	bf00      	nop
 80069ee:	3708      	adds	r7, #8
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	20002ee4 	.word	0x20002ee4

080069f8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80069fe:	f3ef 8311 	mrs	r3, BASEPRI
 8006a02:	f04f 0120 	mov.w	r1, #32
 8006a06:	f381 8811 	msr	BASEPRI, r1
 8006a0a:	607b      	str	r3, [r7, #4]
 8006a0c:	4807      	ldr	r0, [pc, #28]	; (8006a2c <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006a0e:	f7ff f943 	bl	8005c98 <_PreparePacket>
 8006a12:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006a14:	2211      	movs	r2, #17
 8006a16:	6839      	ldr	r1, [r7, #0]
 8006a18:	6838      	ldr	r0, [r7, #0]
 8006a1a:	f7ff fa2d 	bl	8005e78 <_SendPacket>
  RECORD_END();
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f383 8811 	msr	BASEPRI, r3
}
 8006a24:	bf00      	nop
 8006a26:	3708      	adds	r7, #8
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	20002ee4 	.word	0x20002ee4

08006a30 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b088      	sub	sp, #32
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a38:	f3ef 8311 	mrs	r3, BASEPRI
 8006a3c:	f04f 0120 	mov.w	r1, #32
 8006a40:	f381 8811 	msr	BASEPRI, r1
 8006a44:	617b      	str	r3, [r7, #20]
 8006a46:	4819      	ldr	r0, [pc, #100]	; (8006aac <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006a48:	f7ff f926 	bl	8005c98 <_PreparePacket>
 8006a4c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a52:	4b17      	ldr	r3, [pc, #92]	; (8006ab0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	61fb      	str	r3, [r7, #28]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	61bb      	str	r3, [r7, #24]
 8006a64:	e00b      	b.n	8006a7e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	b2da      	uxtb	r2, r3
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	1c59      	adds	r1, r3, #1
 8006a6e:	61f9      	str	r1, [r7, #28]
 8006a70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a74:	b2d2      	uxtb	r2, r2
 8006a76:	701a      	strb	r2, [r3, #0]
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	09db      	lsrs	r3, r3, #7
 8006a7c:	61bb      	str	r3, [r7, #24]
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	2b7f      	cmp	r3, #127	; 0x7f
 8006a82:	d8f0      	bhi.n	8006a66 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	1c5a      	adds	r2, r3, #1
 8006a88:	61fa      	str	r2, [r7, #28]
 8006a8a:	69ba      	ldr	r2, [r7, #24]
 8006a8c:	b2d2      	uxtb	r2, r2
 8006a8e:	701a      	strb	r2, [r3, #0]
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006a94:	2208      	movs	r2, #8
 8006a96:	68f9      	ldr	r1, [r7, #12]
 8006a98:	6938      	ldr	r0, [r7, #16]
 8006a9a:	f7ff f9ed 	bl	8005e78 <_SendPacket>
  RECORD_END();
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	f383 8811 	msr	BASEPRI, r3
}
 8006aa4:	bf00      	nop
 8006aa6:	3720      	adds	r7, #32
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	20002ee4 	.word	0x20002ee4
 8006ab0:	20002eb4 	.word	0x20002eb4

08006ab4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b088      	sub	sp, #32
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006abc:	f3ef 8311 	mrs	r3, BASEPRI
 8006ac0:	f04f 0120 	mov.w	r1, #32
 8006ac4:	f381 8811 	msr	BASEPRI, r1
 8006ac8:	617b      	str	r3, [r7, #20]
 8006aca:	4819      	ldr	r0, [pc, #100]	; (8006b30 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006acc:	f7ff f8e4 	bl	8005c98 <_PreparePacket>
 8006ad0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006ad6:	4b17      	ldr	r3, [pc, #92]	; (8006b34 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	61fb      	str	r3, [r7, #28]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	61bb      	str	r3, [r7, #24]
 8006ae8:	e00b      	b.n	8006b02 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	b2da      	uxtb	r2, r3
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	1c59      	adds	r1, r3, #1
 8006af2:	61f9      	str	r1, [r7, #28]
 8006af4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006af8:	b2d2      	uxtb	r2, r2
 8006afa:	701a      	strb	r2, [r3, #0]
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	09db      	lsrs	r3, r3, #7
 8006b00:	61bb      	str	r3, [r7, #24]
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	2b7f      	cmp	r3, #127	; 0x7f
 8006b06:	d8f0      	bhi.n	8006aea <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	1c5a      	adds	r2, r3, #1
 8006b0c:	61fa      	str	r2, [r7, #28]
 8006b0e:	69ba      	ldr	r2, [r7, #24]
 8006b10:	b2d2      	uxtb	r2, r2
 8006b12:	701a      	strb	r2, [r3, #0]
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006b18:	2204      	movs	r2, #4
 8006b1a:	68f9      	ldr	r1, [r7, #12]
 8006b1c:	6938      	ldr	r0, [r7, #16]
 8006b1e:	f7ff f9ab 	bl	8005e78 <_SendPacket>
  RECORD_END();
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	f383 8811 	msr	BASEPRI, r3
}
 8006b28:	bf00      	nop
 8006b2a:	3720      	adds	r7, #32
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	20002ee4 	.word	0x20002ee4
 8006b34:	20002eb4 	.word	0x20002eb4

08006b38 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b088      	sub	sp, #32
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006b40:	f3ef 8311 	mrs	r3, BASEPRI
 8006b44:	f04f 0120 	mov.w	r1, #32
 8006b48:	f381 8811 	msr	BASEPRI, r1
 8006b4c:	617b      	str	r3, [r7, #20]
 8006b4e:	4819      	ldr	r0, [pc, #100]	; (8006bb4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006b50:	f7ff f8a2 	bl	8005c98 <_PreparePacket>
 8006b54:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006b5a:	4b17      	ldr	r3, [pc, #92]	; (8006bb8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	61fb      	str	r3, [r7, #28]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	61bb      	str	r3, [r7, #24]
 8006b6c:	e00b      	b.n	8006b86 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	b2da      	uxtb	r2, r3
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	1c59      	adds	r1, r3, #1
 8006b76:	61f9      	str	r1, [r7, #28]
 8006b78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b7c:	b2d2      	uxtb	r2, r2
 8006b7e:	701a      	strb	r2, [r3, #0]
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	09db      	lsrs	r3, r3, #7
 8006b84:	61bb      	str	r3, [r7, #24]
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	2b7f      	cmp	r3, #127	; 0x7f
 8006b8a:	d8f0      	bhi.n	8006b6e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	1c5a      	adds	r2, r3, #1
 8006b90:	61fa      	str	r2, [r7, #28]
 8006b92:	69ba      	ldr	r2, [r7, #24]
 8006b94:	b2d2      	uxtb	r2, r2
 8006b96:	701a      	strb	r2, [r3, #0]
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006b9c:	2206      	movs	r2, #6
 8006b9e:	68f9      	ldr	r1, [r7, #12]
 8006ba0:	6938      	ldr	r0, [r7, #16]
 8006ba2:	f7ff f969 	bl	8005e78 <_SendPacket>
  RECORD_END();
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	f383 8811 	msr	BASEPRI, r3
}
 8006bac:	bf00      	nop
 8006bae:	3720      	adds	r7, #32
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	20002ee4 	.word	0x20002ee4
 8006bb8:	20002eb4 	.word	0x20002eb4

08006bbc <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b08a      	sub	sp, #40	; 0x28
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006bc6:	f3ef 8311 	mrs	r3, BASEPRI
 8006bca:	f04f 0120 	mov.w	r1, #32
 8006bce:	f381 8811 	msr	BASEPRI, r1
 8006bd2:	617b      	str	r3, [r7, #20]
 8006bd4:	4827      	ldr	r0, [pc, #156]	; (8006c74 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006bd6:	f7ff f85f 	bl	8005c98 <_PreparePacket>
 8006bda:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006be0:	4b25      	ldr	r3, [pc, #148]	; (8006c78 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	627b      	str	r3, [r7, #36]	; 0x24
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	623b      	str	r3, [r7, #32]
 8006bf2:	e00b      	b.n	8006c0c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006bf4:	6a3b      	ldr	r3, [r7, #32]
 8006bf6:	b2da      	uxtb	r2, r3
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfa:	1c59      	adds	r1, r3, #1
 8006bfc:	6279      	str	r1, [r7, #36]	; 0x24
 8006bfe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c02:	b2d2      	uxtb	r2, r2
 8006c04:	701a      	strb	r2, [r3, #0]
 8006c06:	6a3b      	ldr	r3, [r7, #32]
 8006c08:	09db      	lsrs	r3, r3, #7
 8006c0a:	623b      	str	r3, [r7, #32]
 8006c0c:	6a3b      	ldr	r3, [r7, #32]
 8006c0e:	2b7f      	cmp	r3, #127	; 0x7f
 8006c10:	d8f0      	bhi.n	8006bf4 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c14:	1c5a      	adds	r2, r3, #1
 8006c16:	627a      	str	r2, [r7, #36]	; 0x24
 8006c18:	6a3a      	ldr	r2, [r7, #32]
 8006c1a:	b2d2      	uxtb	r2, r2
 8006c1c:	701a      	strb	r2, [r3, #0]
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c20:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	61fb      	str	r3, [r7, #28]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	61bb      	str	r3, [r7, #24]
 8006c2a:	e00b      	b.n	8006c44 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	b2da      	uxtb	r2, r3
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	1c59      	adds	r1, r3, #1
 8006c34:	61f9      	str	r1, [r7, #28]
 8006c36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c3a:	b2d2      	uxtb	r2, r2
 8006c3c:	701a      	strb	r2, [r3, #0]
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	09db      	lsrs	r3, r3, #7
 8006c42:	61bb      	str	r3, [r7, #24]
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	2b7f      	cmp	r3, #127	; 0x7f
 8006c48:	d8f0      	bhi.n	8006c2c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	1c5a      	adds	r2, r3, #1
 8006c4e:	61fa      	str	r2, [r7, #28]
 8006c50:	69ba      	ldr	r2, [r7, #24]
 8006c52:	b2d2      	uxtb	r2, r2
 8006c54:	701a      	strb	r2, [r3, #0]
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006c5a:	2207      	movs	r2, #7
 8006c5c:	68f9      	ldr	r1, [r7, #12]
 8006c5e:	6938      	ldr	r0, [r7, #16]
 8006c60:	f7ff f90a 	bl	8005e78 <_SendPacket>
  RECORD_END();
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f383 8811 	msr	BASEPRI, r3
}
 8006c6a:	bf00      	nop
 8006c6c:	3728      	adds	r7, #40	; 0x28
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	20002ee4 	.word	0x20002ee4
 8006c78:	20002eb4 	.word	0x20002eb4

08006c7c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006c84:	4b04      	ldr	r3, [pc, #16]	; (8006c98 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	1ad3      	subs	r3, r2, r3
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr
 8006c98:	20002eb4 	.word	0x20002eb4

08006c9c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b08c      	sub	sp, #48	; 0x30
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006ca6:	4b3b      	ldr	r3, [pc, #236]	; (8006d94 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d06d      	beq.n	8006d8a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006cae:	4b39      	ldr	r3, [pc, #228]	; (8006d94 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cb8:	e008      	b.n	8006ccc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d007      	beq.n	8006cd6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc8:	3301      	adds	r3, #1
 8006cca:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ccc:	79fb      	ldrb	r3, [r7, #7]
 8006cce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d3f2      	bcc.n	8006cba <SEGGER_SYSVIEW_SendModule+0x1e>
 8006cd4:	e000      	b.n	8006cd8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006cd6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d055      	beq.n	8006d8a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006cde:	f3ef 8311 	mrs	r3, BASEPRI
 8006ce2:	f04f 0120 	mov.w	r1, #32
 8006ce6:	f381 8811 	msr	BASEPRI, r1
 8006cea:	617b      	str	r3, [r7, #20]
 8006cec:	482a      	ldr	r0, [pc, #168]	; (8006d98 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006cee:	f7fe ffd3 	bl	8005c98 <_PreparePacket>
 8006cf2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8006cfc:	79fb      	ldrb	r3, [r7, #7]
 8006cfe:	623b      	str	r3, [r7, #32]
 8006d00:	e00b      	b.n	8006d1a <SEGGER_SYSVIEW_SendModule+0x7e>
 8006d02:	6a3b      	ldr	r3, [r7, #32]
 8006d04:	b2da      	uxtb	r2, r3
 8006d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d08:	1c59      	adds	r1, r3, #1
 8006d0a:	6279      	str	r1, [r7, #36]	; 0x24
 8006d0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d10:	b2d2      	uxtb	r2, r2
 8006d12:	701a      	strb	r2, [r3, #0]
 8006d14:	6a3b      	ldr	r3, [r7, #32]
 8006d16:	09db      	lsrs	r3, r3, #7
 8006d18:	623b      	str	r3, [r7, #32]
 8006d1a:	6a3b      	ldr	r3, [r7, #32]
 8006d1c:	2b7f      	cmp	r3, #127	; 0x7f
 8006d1e:	d8f0      	bhi.n	8006d02 <SEGGER_SYSVIEW_SendModule+0x66>
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	1c5a      	adds	r2, r3, #1
 8006d24:	627a      	str	r2, [r7, #36]	; 0x24
 8006d26:	6a3a      	ldr	r2, [r7, #32]
 8006d28:	b2d2      	uxtb	r2, r2
 8006d2a:	701a      	strb	r2, [r3, #0]
 8006d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	61fb      	str	r3, [r7, #28]
 8006d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	61bb      	str	r3, [r7, #24]
 8006d3a:	e00b      	b.n	8006d54 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	b2da      	uxtb	r2, r3
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	1c59      	adds	r1, r3, #1
 8006d44:	61f9      	str	r1, [r7, #28]
 8006d46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d4a:	b2d2      	uxtb	r2, r2
 8006d4c:	701a      	strb	r2, [r3, #0]
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	09db      	lsrs	r3, r3, #7
 8006d52:	61bb      	str	r3, [r7, #24]
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	2b7f      	cmp	r3, #127	; 0x7f
 8006d58:	d8f0      	bhi.n	8006d3c <SEGGER_SYSVIEW_SendModule+0xa0>
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	1c5a      	adds	r2, r3, #1
 8006d5e:	61fa      	str	r2, [r7, #28]
 8006d60:	69ba      	ldr	r2, [r7, #24]
 8006d62:	b2d2      	uxtb	r2, r2
 8006d64:	701a      	strb	r2, [r3, #0]
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2280      	movs	r2, #128	; 0x80
 8006d70:	4619      	mov	r1, r3
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f7fe ff40 	bl	8005bf8 <_EncodeStr>
 8006d78:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006d7a:	2216      	movs	r2, #22
 8006d7c:	68f9      	ldr	r1, [r7, #12]
 8006d7e:	6938      	ldr	r0, [r7, #16]
 8006d80:	f7ff f87a 	bl	8005e78 <_SendPacket>
      RECORD_END();
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006d8a:	bf00      	nop
 8006d8c:	3730      	adds	r7, #48	; 0x30
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	20002edc 	.word	0x20002edc
 8006d98:	20002ee4 	.word	0x20002ee4

08006d9c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006da2:	4b0c      	ldr	r3, [pc, #48]	; (8006dd4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00f      	beq.n	8006dca <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006daa:	4b0a      	ldr	r3, [pc, #40]	; (8006dd4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d002      	beq.n	8006dbe <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1f2      	bne.n	8006db0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006dca:	bf00      	nop
 8006dcc:	3708      	adds	r7, #8
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	20002edc 	.word	0x20002edc

08006dd8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006dde:	f3ef 8311 	mrs	r3, BASEPRI
 8006de2:	f04f 0120 	mov.w	r1, #32
 8006de6:	f381 8811 	msr	BASEPRI, r1
 8006dea:	60fb      	str	r3, [r7, #12]
 8006dec:	4817      	ldr	r0, [pc, #92]	; (8006e4c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006dee:	f7fe ff53 	bl	8005c98 <_PreparePacket>
 8006df2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	617b      	str	r3, [r7, #20]
 8006dfc:	4b14      	ldr	r3, [pc, #80]	; (8006e50 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	613b      	str	r3, [r7, #16]
 8006e02:	e00b      	b.n	8006e1c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	b2da      	uxtb	r2, r3
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	1c59      	adds	r1, r3, #1
 8006e0c:	6179      	str	r1, [r7, #20]
 8006e0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e12:	b2d2      	uxtb	r2, r2
 8006e14:	701a      	strb	r2, [r3, #0]
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	09db      	lsrs	r3, r3, #7
 8006e1a:	613b      	str	r3, [r7, #16]
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	2b7f      	cmp	r3, #127	; 0x7f
 8006e20:	d8f0      	bhi.n	8006e04 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	1c5a      	adds	r2, r3, #1
 8006e26:	617a      	str	r2, [r7, #20]
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	b2d2      	uxtb	r2, r2
 8006e2c:	701a      	strb	r2, [r3, #0]
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006e32:	221b      	movs	r2, #27
 8006e34:	6879      	ldr	r1, [r7, #4]
 8006e36:	68b8      	ldr	r0, [r7, #8]
 8006e38:	f7ff f81e 	bl	8005e78 <_SendPacket>
  RECORD_END();
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f383 8811 	msr	BASEPRI, r3
}
 8006e42:	bf00      	nop
 8006e44:	3718      	adds	r7, #24
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	20002ee4 	.word	0x20002ee4
 8006e50:	20002ee0 	.word	0x20002ee0

08006e54 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b08a      	sub	sp, #40	; 0x28
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e5c:	f3ef 8311 	mrs	r3, BASEPRI
 8006e60:	f04f 0120 	mov.w	r1, #32
 8006e64:	f381 8811 	msr	BASEPRI, r1
 8006e68:	617b      	str	r3, [r7, #20]
 8006e6a:	4827      	ldr	r0, [pc, #156]	; (8006f08 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006e6c:	f7fe ff14 	bl	8005c98 <_PreparePacket>
 8006e70:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e72:	2280      	movs	r2, #128	; 0x80
 8006e74:	6879      	ldr	r1, [r7, #4]
 8006e76:	6938      	ldr	r0, [r7, #16]
 8006e78:	f7fe febe 	bl	8005bf8 <_EncodeStr>
 8006e7c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	627b      	str	r3, [r7, #36]	; 0x24
 8006e82:	2301      	movs	r3, #1
 8006e84:	623b      	str	r3, [r7, #32]
 8006e86:	e00b      	b.n	8006ea0 <SEGGER_SYSVIEW_Warn+0x4c>
 8006e88:	6a3b      	ldr	r3, [r7, #32]
 8006e8a:	b2da      	uxtb	r2, r3
 8006e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8e:	1c59      	adds	r1, r3, #1
 8006e90:	6279      	str	r1, [r7, #36]	; 0x24
 8006e92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e96:	b2d2      	uxtb	r2, r2
 8006e98:	701a      	strb	r2, [r3, #0]
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	09db      	lsrs	r3, r3, #7
 8006e9e:	623b      	str	r3, [r7, #32]
 8006ea0:	6a3b      	ldr	r3, [r7, #32]
 8006ea2:	2b7f      	cmp	r3, #127	; 0x7f
 8006ea4:	d8f0      	bhi.n	8006e88 <SEGGER_SYSVIEW_Warn+0x34>
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea8:	1c5a      	adds	r2, r3, #1
 8006eaa:	627a      	str	r2, [r7, #36]	; 0x24
 8006eac:	6a3a      	ldr	r2, [r7, #32]
 8006eae:	b2d2      	uxtb	r2, r2
 8006eb0:	701a      	strb	r2, [r3, #0]
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	61fb      	str	r3, [r7, #28]
 8006eba:	2300      	movs	r3, #0
 8006ebc:	61bb      	str	r3, [r7, #24]
 8006ebe:	e00b      	b.n	8006ed8 <SEGGER_SYSVIEW_Warn+0x84>
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	b2da      	uxtb	r2, r3
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	1c59      	adds	r1, r3, #1
 8006ec8:	61f9      	str	r1, [r7, #28]
 8006eca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ece:	b2d2      	uxtb	r2, r2
 8006ed0:	701a      	strb	r2, [r3, #0]
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	09db      	lsrs	r3, r3, #7
 8006ed6:	61bb      	str	r3, [r7, #24]
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	2b7f      	cmp	r3, #127	; 0x7f
 8006edc:	d8f0      	bhi.n	8006ec0 <SEGGER_SYSVIEW_Warn+0x6c>
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	1c5a      	adds	r2, r3, #1
 8006ee2:	61fa      	str	r2, [r7, #28]
 8006ee4:	69ba      	ldr	r2, [r7, #24]
 8006ee6:	b2d2      	uxtb	r2, r2
 8006ee8:	701a      	strb	r2, [r3, #0]
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006eee:	221a      	movs	r2, #26
 8006ef0:	68f9      	ldr	r1, [r7, #12]
 8006ef2:	6938      	ldr	r0, [r7, #16]
 8006ef4:	f7fe ffc0 	bl	8005e78 <_SendPacket>
  RECORD_END();
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	f383 8811 	msr	BASEPRI, r3
}
 8006efe:	bf00      	nop
 8006f00:	3728      	adds	r7, #40	; 0x28
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	20002ee4 	.word	0x20002ee4

08006f0c <__errno>:
 8006f0c:	4b01      	ldr	r3, [pc, #4]	; (8006f14 <__errno+0x8>)
 8006f0e:	6818      	ldr	r0, [r3, #0]
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	20000014 	.word	0x20000014

08006f18 <__libc_init_array>:
 8006f18:	b570      	push	{r4, r5, r6, lr}
 8006f1a:	4d0d      	ldr	r5, [pc, #52]	; (8006f50 <__libc_init_array+0x38>)
 8006f1c:	4c0d      	ldr	r4, [pc, #52]	; (8006f54 <__libc_init_array+0x3c>)
 8006f1e:	1b64      	subs	r4, r4, r5
 8006f20:	10a4      	asrs	r4, r4, #2
 8006f22:	2600      	movs	r6, #0
 8006f24:	42a6      	cmp	r6, r4
 8006f26:	d109      	bne.n	8006f3c <__libc_init_array+0x24>
 8006f28:	4d0b      	ldr	r5, [pc, #44]	; (8006f58 <__libc_init_array+0x40>)
 8006f2a:	4c0c      	ldr	r4, [pc, #48]	; (8006f5c <__libc_init_array+0x44>)
 8006f2c:	f000 fff2 	bl	8007f14 <_init>
 8006f30:	1b64      	subs	r4, r4, r5
 8006f32:	10a4      	asrs	r4, r4, #2
 8006f34:	2600      	movs	r6, #0
 8006f36:	42a6      	cmp	r6, r4
 8006f38:	d105      	bne.n	8006f46 <__libc_init_array+0x2e>
 8006f3a:	bd70      	pop	{r4, r5, r6, pc}
 8006f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f40:	4798      	blx	r3
 8006f42:	3601      	adds	r6, #1
 8006f44:	e7ee      	b.n	8006f24 <__libc_init_array+0xc>
 8006f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f4a:	4798      	blx	r3
 8006f4c:	3601      	adds	r6, #1
 8006f4e:	e7f2      	b.n	8006f36 <__libc_init_array+0x1e>
 8006f50:	08008058 	.word	0x08008058
 8006f54:	08008058 	.word	0x08008058
 8006f58:	08008058 	.word	0x08008058
 8006f5c:	0800805c 	.word	0x0800805c

08006f60 <memcmp>:
 8006f60:	b530      	push	{r4, r5, lr}
 8006f62:	3901      	subs	r1, #1
 8006f64:	2400      	movs	r4, #0
 8006f66:	42a2      	cmp	r2, r4
 8006f68:	d101      	bne.n	8006f6e <memcmp+0xe>
 8006f6a:	2000      	movs	r0, #0
 8006f6c:	e005      	b.n	8006f7a <memcmp+0x1a>
 8006f6e:	5d03      	ldrb	r3, [r0, r4]
 8006f70:	3401      	adds	r4, #1
 8006f72:	5d0d      	ldrb	r5, [r1, r4]
 8006f74:	42ab      	cmp	r3, r5
 8006f76:	d0f6      	beq.n	8006f66 <memcmp+0x6>
 8006f78:	1b58      	subs	r0, r3, r5
 8006f7a:	bd30      	pop	{r4, r5, pc}

08006f7c <memcpy>:
 8006f7c:	440a      	add	r2, r1
 8006f7e:	4291      	cmp	r1, r2
 8006f80:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006f84:	d100      	bne.n	8006f88 <memcpy+0xc>
 8006f86:	4770      	bx	lr
 8006f88:	b510      	push	{r4, lr}
 8006f8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f92:	4291      	cmp	r1, r2
 8006f94:	d1f9      	bne.n	8006f8a <memcpy+0xe>
 8006f96:	bd10      	pop	{r4, pc}

08006f98 <memset>:
 8006f98:	4402      	add	r2, r0
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d100      	bne.n	8006fa2 <memset+0xa>
 8006fa0:	4770      	bx	lr
 8006fa2:	f803 1b01 	strb.w	r1, [r3], #1
 8006fa6:	e7f9      	b.n	8006f9c <memset+0x4>

08006fa8 <pow>:
 8006fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fac:	ec59 8b10 	vmov	r8, r9, d0
 8006fb0:	ec57 6b11 	vmov	r6, r7, d1
 8006fb4:	f000 f8a8 	bl	8007108 <__ieee754_pow>
 8006fb8:	4b4e      	ldr	r3, [pc, #312]	; (80070f4 <pow+0x14c>)
 8006fba:	f993 3000 	ldrsb.w	r3, [r3]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	ec55 4b10 	vmov	r4, r5, d0
 8006fc4:	d015      	beq.n	8006ff2 <pow+0x4a>
 8006fc6:	4632      	mov	r2, r6
 8006fc8:	463b      	mov	r3, r7
 8006fca:	4630      	mov	r0, r6
 8006fcc:	4639      	mov	r1, r7
 8006fce:	f7f9 fd9f 	bl	8000b10 <__aeabi_dcmpun>
 8006fd2:	b970      	cbnz	r0, 8006ff2 <pow+0x4a>
 8006fd4:	4642      	mov	r2, r8
 8006fd6:	464b      	mov	r3, r9
 8006fd8:	4640      	mov	r0, r8
 8006fda:	4649      	mov	r1, r9
 8006fdc:	f7f9 fd98 	bl	8000b10 <__aeabi_dcmpun>
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	b148      	cbz	r0, 8006ffa <pow+0x52>
 8006fe6:	4630      	mov	r0, r6
 8006fe8:	4639      	mov	r1, r7
 8006fea:	f7f9 fd5f 	bl	8000aac <__aeabi_dcmpeq>
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	d17d      	bne.n	80070ee <pow+0x146>
 8006ff2:	ec45 4b10 	vmov	d0, r4, r5
 8006ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ffa:	4640      	mov	r0, r8
 8006ffc:	4649      	mov	r1, r9
 8006ffe:	f7f9 fd55 	bl	8000aac <__aeabi_dcmpeq>
 8007002:	b1e0      	cbz	r0, 800703e <pow+0x96>
 8007004:	2200      	movs	r2, #0
 8007006:	2300      	movs	r3, #0
 8007008:	4630      	mov	r0, r6
 800700a:	4639      	mov	r1, r7
 800700c:	f7f9 fd4e 	bl	8000aac <__aeabi_dcmpeq>
 8007010:	2800      	cmp	r0, #0
 8007012:	d16c      	bne.n	80070ee <pow+0x146>
 8007014:	ec47 6b10 	vmov	d0, r6, r7
 8007018:	f000 fe55 	bl	8007cc6 <finite>
 800701c:	2800      	cmp	r0, #0
 800701e:	d0e8      	beq.n	8006ff2 <pow+0x4a>
 8007020:	2200      	movs	r2, #0
 8007022:	2300      	movs	r3, #0
 8007024:	4630      	mov	r0, r6
 8007026:	4639      	mov	r1, r7
 8007028:	f7f9 fd4a 	bl	8000ac0 <__aeabi_dcmplt>
 800702c:	2800      	cmp	r0, #0
 800702e:	d0e0      	beq.n	8006ff2 <pow+0x4a>
 8007030:	f7ff ff6c 	bl	8006f0c <__errno>
 8007034:	2321      	movs	r3, #33	; 0x21
 8007036:	6003      	str	r3, [r0, #0]
 8007038:	2400      	movs	r4, #0
 800703a:	4d2f      	ldr	r5, [pc, #188]	; (80070f8 <pow+0x150>)
 800703c:	e7d9      	b.n	8006ff2 <pow+0x4a>
 800703e:	ec45 4b10 	vmov	d0, r4, r5
 8007042:	f000 fe40 	bl	8007cc6 <finite>
 8007046:	bbb8      	cbnz	r0, 80070b8 <pow+0x110>
 8007048:	ec49 8b10 	vmov	d0, r8, r9
 800704c:	f000 fe3b 	bl	8007cc6 <finite>
 8007050:	b390      	cbz	r0, 80070b8 <pow+0x110>
 8007052:	ec47 6b10 	vmov	d0, r6, r7
 8007056:	f000 fe36 	bl	8007cc6 <finite>
 800705a:	b368      	cbz	r0, 80070b8 <pow+0x110>
 800705c:	4622      	mov	r2, r4
 800705e:	462b      	mov	r3, r5
 8007060:	4620      	mov	r0, r4
 8007062:	4629      	mov	r1, r5
 8007064:	f7f9 fd54 	bl	8000b10 <__aeabi_dcmpun>
 8007068:	b160      	cbz	r0, 8007084 <pow+0xdc>
 800706a:	f7ff ff4f 	bl	8006f0c <__errno>
 800706e:	2321      	movs	r3, #33	; 0x21
 8007070:	6003      	str	r3, [r0, #0]
 8007072:	2200      	movs	r2, #0
 8007074:	2300      	movs	r3, #0
 8007076:	4610      	mov	r0, r2
 8007078:	4619      	mov	r1, r3
 800707a:	f7f9 fbd9 	bl	8000830 <__aeabi_ddiv>
 800707e:	4604      	mov	r4, r0
 8007080:	460d      	mov	r5, r1
 8007082:	e7b6      	b.n	8006ff2 <pow+0x4a>
 8007084:	f7ff ff42 	bl	8006f0c <__errno>
 8007088:	2322      	movs	r3, #34	; 0x22
 800708a:	6003      	str	r3, [r0, #0]
 800708c:	2200      	movs	r2, #0
 800708e:	2300      	movs	r3, #0
 8007090:	4640      	mov	r0, r8
 8007092:	4649      	mov	r1, r9
 8007094:	f7f9 fd14 	bl	8000ac0 <__aeabi_dcmplt>
 8007098:	2400      	movs	r4, #0
 800709a:	b158      	cbz	r0, 80070b4 <pow+0x10c>
 800709c:	ec47 6b10 	vmov	d0, r6, r7
 80070a0:	f000 fe26 	bl	8007cf0 <rint>
 80070a4:	4632      	mov	r2, r6
 80070a6:	ec51 0b10 	vmov	r0, r1, d0
 80070aa:	463b      	mov	r3, r7
 80070ac:	f7f9 fcfe 	bl	8000aac <__aeabi_dcmpeq>
 80070b0:	2800      	cmp	r0, #0
 80070b2:	d0c2      	beq.n	800703a <pow+0x92>
 80070b4:	4d11      	ldr	r5, [pc, #68]	; (80070fc <pow+0x154>)
 80070b6:	e79c      	b.n	8006ff2 <pow+0x4a>
 80070b8:	2200      	movs	r2, #0
 80070ba:	2300      	movs	r3, #0
 80070bc:	4620      	mov	r0, r4
 80070be:	4629      	mov	r1, r5
 80070c0:	f7f9 fcf4 	bl	8000aac <__aeabi_dcmpeq>
 80070c4:	2800      	cmp	r0, #0
 80070c6:	d094      	beq.n	8006ff2 <pow+0x4a>
 80070c8:	ec49 8b10 	vmov	d0, r8, r9
 80070cc:	f000 fdfb 	bl	8007cc6 <finite>
 80070d0:	2800      	cmp	r0, #0
 80070d2:	d08e      	beq.n	8006ff2 <pow+0x4a>
 80070d4:	ec47 6b10 	vmov	d0, r6, r7
 80070d8:	f000 fdf5 	bl	8007cc6 <finite>
 80070dc:	2800      	cmp	r0, #0
 80070de:	d088      	beq.n	8006ff2 <pow+0x4a>
 80070e0:	f7ff ff14 	bl	8006f0c <__errno>
 80070e4:	2322      	movs	r3, #34	; 0x22
 80070e6:	6003      	str	r3, [r0, #0]
 80070e8:	2400      	movs	r4, #0
 80070ea:	2500      	movs	r5, #0
 80070ec:	e781      	b.n	8006ff2 <pow+0x4a>
 80070ee:	4d04      	ldr	r5, [pc, #16]	; (8007100 <pow+0x158>)
 80070f0:	2400      	movs	r4, #0
 80070f2:	e77e      	b.n	8006ff2 <pow+0x4a>
 80070f4:	20000078 	.word	0x20000078
 80070f8:	fff00000 	.word	0xfff00000
 80070fc:	7ff00000 	.word	0x7ff00000
 8007100:	3ff00000 	.word	0x3ff00000
 8007104:	00000000 	.word	0x00000000

08007108 <__ieee754_pow>:
 8007108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800710c:	ed2d 8b06 	vpush	{d8-d10}
 8007110:	b08d      	sub	sp, #52	; 0x34
 8007112:	ed8d 1b02 	vstr	d1, [sp, #8]
 8007116:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800711a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800711e:	ea56 0100 	orrs.w	r1, r6, r0
 8007122:	ec53 2b10 	vmov	r2, r3, d0
 8007126:	f000 84d1 	beq.w	8007acc <__ieee754_pow+0x9c4>
 800712a:	497f      	ldr	r1, [pc, #508]	; (8007328 <__ieee754_pow+0x220>)
 800712c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8007130:	428c      	cmp	r4, r1
 8007132:	ee10 8a10 	vmov	r8, s0
 8007136:	4699      	mov	r9, r3
 8007138:	dc09      	bgt.n	800714e <__ieee754_pow+0x46>
 800713a:	d103      	bne.n	8007144 <__ieee754_pow+0x3c>
 800713c:	b97a      	cbnz	r2, 800715e <__ieee754_pow+0x56>
 800713e:	42a6      	cmp	r6, r4
 8007140:	dd02      	ble.n	8007148 <__ieee754_pow+0x40>
 8007142:	e00c      	b.n	800715e <__ieee754_pow+0x56>
 8007144:	428e      	cmp	r6, r1
 8007146:	dc02      	bgt.n	800714e <__ieee754_pow+0x46>
 8007148:	428e      	cmp	r6, r1
 800714a:	d110      	bne.n	800716e <__ieee754_pow+0x66>
 800714c:	b178      	cbz	r0, 800716e <__ieee754_pow+0x66>
 800714e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007152:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007156:	ea54 0308 	orrs.w	r3, r4, r8
 800715a:	f000 84b7 	beq.w	8007acc <__ieee754_pow+0x9c4>
 800715e:	4873      	ldr	r0, [pc, #460]	; (800732c <__ieee754_pow+0x224>)
 8007160:	b00d      	add	sp, #52	; 0x34
 8007162:	ecbd 8b06 	vpop	{d8-d10}
 8007166:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800716a:	f000 bdb9 	b.w	8007ce0 <nan>
 800716e:	f1b9 0f00 	cmp.w	r9, #0
 8007172:	da36      	bge.n	80071e2 <__ieee754_pow+0xda>
 8007174:	496e      	ldr	r1, [pc, #440]	; (8007330 <__ieee754_pow+0x228>)
 8007176:	428e      	cmp	r6, r1
 8007178:	dc51      	bgt.n	800721e <__ieee754_pow+0x116>
 800717a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800717e:	428e      	cmp	r6, r1
 8007180:	f340 84af 	ble.w	8007ae2 <__ieee754_pow+0x9da>
 8007184:	1531      	asrs	r1, r6, #20
 8007186:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800718a:	2914      	cmp	r1, #20
 800718c:	dd0f      	ble.n	80071ae <__ieee754_pow+0xa6>
 800718e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8007192:	fa20 fc01 	lsr.w	ip, r0, r1
 8007196:	fa0c f101 	lsl.w	r1, ip, r1
 800719a:	4281      	cmp	r1, r0
 800719c:	f040 84a1 	bne.w	8007ae2 <__ieee754_pow+0x9da>
 80071a0:	f00c 0c01 	and.w	ip, ip, #1
 80071a4:	f1cc 0102 	rsb	r1, ip, #2
 80071a8:	9100      	str	r1, [sp, #0]
 80071aa:	b180      	cbz	r0, 80071ce <__ieee754_pow+0xc6>
 80071ac:	e059      	b.n	8007262 <__ieee754_pow+0x15a>
 80071ae:	2800      	cmp	r0, #0
 80071b0:	d155      	bne.n	800725e <__ieee754_pow+0x156>
 80071b2:	f1c1 0114 	rsb	r1, r1, #20
 80071b6:	fa46 fc01 	asr.w	ip, r6, r1
 80071ba:	fa0c f101 	lsl.w	r1, ip, r1
 80071be:	42b1      	cmp	r1, r6
 80071c0:	f040 848c 	bne.w	8007adc <__ieee754_pow+0x9d4>
 80071c4:	f00c 0c01 	and.w	ip, ip, #1
 80071c8:	f1cc 0102 	rsb	r1, ip, #2
 80071cc:	9100      	str	r1, [sp, #0]
 80071ce:	4959      	ldr	r1, [pc, #356]	; (8007334 <__ieee754_pow+0x22c>)
 80071d0:	428e      	cmp	r6, r1
 80071d2:	d12d      	bne.n	8007230 <__ieee754_pow+0x128>
 80071d4:	2f00      	cmp	r7, #0
 80071d6:	da79      	bge.n	80072cc <__ieee754_pow+0x1c4>
 80071d8:	4956      	ldr	r1, [pc, #344]	; (8007334 <__ieee754_pow+0x22c>)
 80071da:	2000      	movs	r0, #0
 80071dc:	f7f9 fb28 	bl	8000830 <__aeabi_ddiv>
 80071e0:	e016      	b.n	8007210 <__ieee754_pow+0x108>
 80071e2:	2100      	movs	r1, #0
 80071e4:	9100      	str	r1, [sp, #0]
 80071e6:	2800      	cmp	r0, #0
 80071e8:	d13b      	bne.n	8007262 <__ieee754_pow+0x15a>
 80071ea:	494f      	ldr	r1, [pc, #316]	; (8007328 <__ieee754_pow+0x220>)
 80071ec:	428e      	cmp	r6, r1
 80071ee:	d1ee      	bne.n	80071ce <__ieee754_pow+0xc6>
 80071f0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80071f4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80071f8:	ea53 0308 	orrs.w	r3, r3, r8
 80071fc:	f000 8466 	beq.w	8007acc <__ieee754_pow+0x9c4>
 8007200:	4b4d      	ldr	r3, [pc, #308]	; (8007338 <__ieee754_pow+0x230>)
 8007202:	429c      	cmp	r4, r3
 8007204:	dd0d      	ble.n	8007222 <__ieee754_pow+0x11a>
 8007206:	2f00      	cmp	r7, #0
 8007208:	f280 8464 	bge.w	8007ad4 <__ieee754_pow+0x9cc>
 800720c:	2000      	movs	r0, #0
 800720e:	2100      	movs	r1, #0
 8007210:	ec41 0b10 	vmov	d0, r0, r1
 8007214:	b00d      	add	sp, #52	; 0x34
 8007216:	ecbd 8b06 	vpop	{d8-d10}
 800721a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800721e:	2102      	movs	r1, #2
 8007220:	e7e0      	b.n	80071e4 <__ieee754_pow+0xdc>
 8007222:	2f00      	cmp	r7, #0
 8007224:	daf2      	bge.n	800720c <__ieee754_pow+0x104>
 8007226:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800722a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800722e:	e7ef      	b.n	8007210 <__ieee754_pow+0x108>
 8007230:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8007234:	d104      	bne.n	8007240 <__ieee754_pow+0x138>
 8007236:	4610      	mov	r0, r2
 8007238:	4619      	mov	r1, r3
 800723a:	f7f9 f9cf 	bl	80005dc <__aeabi_dmul>
 800723e:	e7e7      	b.n	8007210 <__ieee754_pow+0x108>
 8007240:	493e      	ldr	r1, [pc, #248]	; (800733c <__ieee754_pow+0x234>)
 8007242:	428f      	cmp	r7, r1
 8007244:	d10d      	bne.n	8007262 <__ieee754_pow+0x15a>
 8007246:	f1b9 0f00 	cmp.w	r9, #0
 800724a:	db0a      	blt.n	8007262 <__ieee754_pow+0x15a>
 800724c:	ec43 2b10 	vmov	d0, r2, r3
 8007250:	b00d      	add	sp, #52	; 0x34
 8007252:	ecbd 8b06 	vpop	{d8-d10}
 8007256:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800725a:	f000 bc77 	b.w	8007b4c <__ieee754_sqrt>
 800725e:	2100      	movs	r1, #0
 8007260:	9100      	str	r1, [sp, #0]
 8007262:	ec43 2b10 	vmov	d0, r2, r3
 8007266:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800726a:	f000 fd23 	bl	8007cb4 <fabs>
 800726e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007272:	ec51 0b10 	vmov	r0, r1, d0
 8007276:	f1b8 0f00 	cmp.w	r8, #0
 800727a:	d12a      	bne.n	80072d2 <__ieee754_pow+0x1ca>
 800727c:	b12c      	cbz	r4, 800728a <__ieee754_pow+0x182>
 800727e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8007334 <__ieee754_pow+0x22c>
 8007282:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8007286:	45e6      	cmp	lr, ip
 8007288:	d123      	bne.n	80072d2 <__ieee754_pow+0x1ca>
 800728a:	2f00      	cmp	r7, #0
 800728c:	da05      	bge.n	800729a <__ieee754_pow+0x192>
 800728e:	4602      	mov	r2, r0
 8007290:	460b      	mov	r3, r1
 8007292:	2000      	movs	r0, #0
 8007294:	4927      	ldr	r1, [pc, #156]	; (8007334 <__ieee754_pow+0x22c>)
 8007296:	f7f9 facb 	bl	8000830 <__aeabi_ddiv>
 800729a:	f1b9 0f00 	cmp.w	r9, #0
 800729e:	dab7      	bge.n	8007210 <__ieee754_pow+0x108>
 80072a0:	9b00      	ldr	r3, [sp, #0]
 80072a2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80072a6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80072aa:	4323      	orrs	r3, r4
 80072ac:	d108      	bne.n	80072c0 <__ieee754_pow+0x1b8>
 80072ae:	4602      	mov	r2, r0
 80072b0:	460b      	mov	r3, r1
 80072b2:	4610      	mov	r0, r2
 80072b4:	4619      	mov	r1, r3
 80072b6:	f7f8 ffd9 	bl	800026c <__aeabi_dsub>
 80072ba:	4602      	mov	r2, r0
 80072bc:	460b      	mov	r3, r1
 80072be:	e78d      	b.n	80071dc <__ieee754_pow+0xd4>
 80072c0:	9b00      	ldr	r3, [sp, #0]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d1a4      	bne.n	8007210 <__ieee754_pow+0x108>
 80072c6:	4602      	mov	r2, r0
 80072c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80072cc:	4610      	mov	r0, r2
 80072ce:	4619      	mov	r1, r3
 80072d0:	e79e      	b.n	8007210 <__ieee754_pow+0x108>
 80072d2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 80072d6:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 80072da:	950a      	str	r5, [sp, #40]	; 0x28
 80072dc:	9d00      	ldr	r5, [sp, #0]
 80072de:	46ac      	mov	ip, r5
 80072e0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80072e2:	ea5c 0505 	orrs.w	r5, ip, r5
 80072e6:	d0e4      	beq.n	80072b2 <__ieee754_pow+0x1aa>
 80072e8:	4b15      	ldr	r3, [pc, #84]	; (8007340 <__ieee754_pow+0x238>)
 80072ea:	429e      	cmp	r6, r3
 80072ec:	f340 80fc 	ble.w	80074e8 <__ieee754_pow+0x3e0>
 80072f0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80072f4:	429e      	cmp	r6, r3
 80072f6:	4b10      	ldr	r3, [pc, #64]	; (8007338 <__ieee754_pow+0x230>)
 80072f8:	dd07      	ble.n	800730a <__ieee754_pow+0x202>
 80072fa:	429c      	cmp	r4, r3
 80072fc:	dc0a      	bgt.n	8007314 <__ieee754_pow+0x20c>
 80072fe:	2f00      	cmp	r7, #0
 8007300:	da84      	bge.n	800720c <__ieee754_pow+0x104>
 8007302:	a307      	add	r3, pc, #28	; (adr r3, 8007320 <__ieee754_pow+0x218>)
 8007304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007308:	e795      	b.n	8007236 <__ieee754_pow+0x12e>
 800730a:	429c      	cmp	r4, r3
 800730c:	dbf7      	blt.n	80072fe <__ieee754_pow+0x1f6>
 800730e:	4b09      	ldr	r3, [pc, #36]	; (8007334 <__ieee754_pow+0x22c>)
 8007310:	429c      	cmp	r4, r3
 8007312:	dd17      	ble.n	8007344 <__ieee754_pow+0x23c>
 8007314:	2f00      	cmp	r7, #0
 8007316:	dcf4      	bgt.n	8007302 <__ieee754_pow+0x1fa>
 8007318:	e778      	b.n	800720c <__ieee754_pow+0x104>
 800731a:	bf00      	nop
 800731c:	f3af 8000 	nop.w
 8007320:	8800759c 	.word	0x8800759c
 8007324:	7e37e43c 	.word	0x7e37e43c
 8007328:	7ff00000 	.word	0x7ff00000
 800732c:	08008012 	.word	0x08008012
 8007330:	433fffff 	.word	0x433fffff
 8007334:	3ff00000 	.word	0x3ff00000
 8007338:	3fefffff 	.word	0x3fefffff
 800733c:	3fe00000 	.word	0x3fe00000
 8007340:	41e00000 	.word	0x41e00000
 8007344:	4b64      	ldr	r3, [pc, #400]	; (80074d8 <__ieee754_pow+0x3d0>)
 8007346:	2200      	movs	r2, #0
 8007348:	f7f8 ff90 	bl	800026c <__aeabi_dsub>
 800734c:	a356      	add	r3, pc, #344	; (adr r3, 80074a8 <__ieee754_pow+0x3a0>)
 800734e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007352:	4604      	mov	r4, r0
 8007354:	460d      	mov	r5, r1
 8007356:	f7f9 f941 	bl	80005dc <__aeabi_dmul>
 800735a:	a355      	add	r3, pc, #340	; (adr r3, 80074b0 <__ieee754_pow+0x3a8>)
 800735c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007360:	4606      	mov	r6, r0
 8007362:	460f      	mov	r7, r1
 8007364:	4620      	mov	r0, r4
 8007366:	4629      	mov	r1, r5
 8007368:	f7f9 f938 	bl	80005dc <__aeabi_dmul>
 800736c:	4b5b      	ldr	r3, [pc, #364]	; (80074dc <__ieee754_pow+0x3d4>)
 800736e:	4682      	mov	sl, r0
 8007370:	468b      	mov	fp, r1
 8007372:	2200      	movs	r2, #0
 8007374:	4620      	mov	r0, r4
 8007376:	4629      	mov	r1, r5
 8007378:	f7f9 f930 	bl	80005dc <__aeabi_dmul>
 800737c:	4602      	mov	r2, r0
 800737e:	460b      	mov	r3, r1
 8007380:	a14d      	add	r1, pc, #308	; (adr r1, 80074b8 <__ieee754_pow+0x3b0>)
 8007382:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007386:	f7f8 ff71 	bl	800026c <__aeabi_dsub>
 800738a:	4622      	mov	r2, r4
 800738c:	462b      	mov	r3, r5
 800738e:	f7f9 f925 	bl	80005dc <__aeabi_dmul>
 8007392:	4602      	mov	r2, r0
 8007394:	460b      	mov	r3, r1
 8007396:	2000      	movs	r0, #0
 8007398:	4951      	ldr	r1, [pc, #324]	; (80074e0 <__ieee754_pow+0x3d8>)
 800739a:	f7f8 ff67 	bl	800026c <__aeabi_dsub>
 800739e:	4622      	mov	r2, r4
 80073a0:	4680      	mov	r8, r0
 80073a2:	4689      	mov	r9, r1
 80073a4:	462b      	mov	r3, r5
 80073a6:	4620      	mov	r0, r4
 80073a8:	4629      	mov	r1, r5
 80073aa:	f7f9 f917 	bl	80005dc <__aeabi_dmul>
 80073ae:	4602      	mov	r2, r0
 80073b0:	460b      	mov	r3, r1
 80073b2:	4640      	mov	r0, r8
 80073b4:	4649      	mov	r1, r9
 80073b6:	f7f9 f911 	bl	80005dc <__aeabi_dmul>
 80073ba:	a341      	add	r3, pc, #260	; (adr r3, 80074c0 <__ieee754_pow+0x3b8>)
 80073bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c0:	f7f9 f90c 	bl	80005dc <__aeabi_dmul>
 80073c4:	4602      	mov	r2, r0
 80073c6:	460b      	mov	r3, r1
 80073c8:	4650      	mov	r0, sl
 80073ca:	4659      	mov	r1, fp
 80073cc:	f7f8 ff4e 	bl	800026c <__aeabi_dsub>
 80073d0:	4602      	mov	r2, r0
 80073d2:	460b      	mov	r3, r1
 80073d4:	4680      	mov	r8, r0
 80073d6:	4689      	mov	r9, r1
 80073d8:	4630      	mov	r0, r6
 80073da:	4639      	mov	r1, r7
 80073dc:	f7f8 ff48 	bl	8000270 <__adddf3>
 80073e0:	2400      	movs	r4, #0
 80073e2:	4632      	mov	r2, r6
 80073e4:	463b      	mov	r3, r7
 80073e6:	4620      	mov	r0, r4
 80073e8:	460d      	mov	r5, r1
 80073ea:	f7f8 ff3f 	bl	800026c <__aeabi_dsub>
 80073ee:	4602      	mov	r2, r0
 80073f0:	460b      	mov	r3, r1
 80073f2:	4640      	mov	r0, r8
 80073f4:	4649      	mov	r1, r9
 80073f6:	f7f8 ff39 	bl	800026c <__aeabi_dsub>
 80073fa:	9b00      	ldr	r3, [sp, #0]
 80073fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073fe:	3b01      	subs	r3, #1
 8007400:	4313      	orrs	r3, r2
 8007402:	4682      	mov	sl, r0
 8007404:	468b      	mov	fp, r1
 8007406:	f040 81f1 	bne.w	80077ec <__ieee754_pow+0x6e4>
 800740a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80074c8 <__ieee754_pow+0x3c0>
 800740e:	eeb0 8a47 	vmov.f32	s16, s14
 8007412:	eef0 8a67 	vmov.f32	s17, s15
 8007416:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800741a:	2600      	movs	r6, #0
 800741c:	4632      	mov	r2, r6
 800741e:	463b      	mov	r3, r7
 8007420:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007424:	f7f8 ff22 	bl	800026c <__aeabi_dsub>
 8007428:	4622      	mov	r2, r4
 800742a:	462b      	mov	r3, r5
 800742c:	f7f9 f8d6 	bl	80005dc <__aeabi_dmul>
 8007430:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007434:	4680      	mov	r8, r0
 8007436:	4689      	mov	r9, r1
 8007438:	4650      	mov	r0, sl
 800743a:	4659      	mov	r1, fp
 800743c:	f7f9 f8ce 	bl	80005dc <__aeabi_dmul>
 8007440:	4602      	mov	r2, r0
 8007442:	460b      	mov	r3, r1
 8007444:	4640      	mov	r0, r8
 8007446:	4649      	mov	r1, r9
 8007448:	f7f8 ff12 	bl	8000270 <__adddf3>
 800744c:	4632      	mov	r2, r6
 800744e:	463b      	mov	r3, r7
 8007450:	4680      	mov	r8, r0
 8007452:	4689      	mov	r9, r1
 8007454:	4620      	mov	r0, r4
 8007456:	4629      	mov	r1, r5
 8007458:	f7f9 f8c0 	bl	80005dc <__aeabi_dmul>
 800745c:	460b      	mov	r3, r1
 800745e:	4604      	mov	r4, r0
 8007460:	460d      	mov	r5, r1
 8007462:	4602      	mov	r2, r0
 8007464:	4649      	mov	r1, r9
 8007466:	4640      	mov	r0, r8
 8007468:	f7f8 ff02 	bl	8000270 <__adddf3>
 800746c:	4b1d      	ldr	r3, [pc, #116]	; (80074e4 <__ieee754_pow+0x3dc>)
 800746e:	4299      	cmp	r1, r3
 8007470:	ec45 4b19 	vmov	d9, r4, r5
 8007474:	4606      	mov	r6, r0
 8007476:	460f      	mov	r7, r1
 8007478:	468b      	mov	fp, r1
 800747a:	f340 82fe 	ble.w	8007a7a <__ieee754_pow+0x972>
 800747e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007482:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007486:	4303      	orrs	r3, r0
 8007488:	f000 81f0 	beq.w	800786c <__ieee754_pow+0x764>
 800748c:	a310      	add	r3, pc, #64	; (adr r3, 80074d0 <__ieee754_pow+0x3c8>)
 800748e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007492:	ec51 0b18 	vmov	r0, r1, d8
 8007496:	f7f9 f8a1 	bl	80005dc <__aeabi_dmul>
 800749a:	a30d      	add	r3, pc, #52	; (adr r3, 80074d0 <__ieee754_pow+0x3c8>)
 800749c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a0:	e6cb      	b.n	800723a <__ieee754_pow+0x132>
 80074a2:	bf00      	nop
 80074a4:	f3af 8000 	nop.w
 80074a8:	60000000 	.word	0x60000000
 80074ac:	3ff71547 	.word	0x3ff71547
 80074b0:	f85ddf44 	.word	0xf85ddf44
 80074b4:	3e54ae0b 	.word	0x3e54ae0b
 80074b8:	55555555 	.word	0x55555555
 80074bc:	3fd55555 	.word	0x3fd55555
 80074c0:	652b82fe 	.word	0x652b82fe
 80074c4:	3ff71547 	.word	0x3ff71547
 80074c8:	00000000 	.word	0x00000000
 80074cc:	bff00000 	.word	0xbff00000
 80074d0:	8800759c 	.word	0x8800759c
 80074d4:	7e37e43c 	.word	0x7e37e43c
 80074d8:	3ff00000 	.word	0x3ff00000
 80074dc:	3fd00000 	.word	0x3fd00000
 80074e0:	3fe00000 	.word	0x3fe00000
 80074e4:	408fffff 	.word	0x408fffff
 80074e8:	4bd7      	ldr	r3, [pc, #860]	; (8007848 <__ieee754_pow+0x740>)
 80074ea:	ea03 0309 	and.w	r3, r3, r9
 80074ee:	2200      	movs	r2, #0
 80074f0:	b92b      	cbnz	r3, 80074fe <__ieee754_pow+0x3f6>
 80074f2:	4bd6      	ldr	r3, [pc, #856]	; (800784c <__ieee754_pow+0x744>)
 80074f4:	f7f9 f872 	bl	80005dc <__aeabi_dmul>
 80074f8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80074fc:	460c      	mov	r4, r1
 80074fe:	1523      	asrs	r3, r4, #20
 8007500:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007504:	4413      	add	r3, r2
 8007506:	9309      	str	r3, [sp, #36]	; 0x24
 8007508:	4bd1      	ldr	r3, [pc, #836]	; (8007850 <__ieee754_pow+0x748>)
 800750a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800750e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007512:	429c      	cmp	r4, r3
 8007514:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007518:	dd08      	ble.n	800752c <__ieee754_pow+0x424>
 800751a:	4bce      	ldr	r3, [pc, #824]	; (8007854 <__ieee754_pow+0x74c>)
 800751c:	429c      	cmp	r4, r3
 800751e:	f340 8163 	ble.w	80077e8 <__ieee754_pow+0x6e0>
 8007522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007524:	3301      	adds	r3, #1
 8007526:	9309      	str	r3, [sp, #36]	; 0x24
 8007528:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800752c:	2400      	movs	r4, #0
 800752e:	00e3      	lsls	r3, r4, #3
 8007530:	930b      	str	r3, [sp, #44]	; 0x2c
 8007532:	4bc9      	ldr	r3, [pc, #804]	; (8007858 <__ieee754_pow+0x750>)
 8007534:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007538:	ed93 7b00 	vldr	d7, [r3]
 800753c:	4629      	mov	r1, r5
 800753e:	ec53 2b17 	vmov	r2, r3, d7
 8007542:	eeb0 8a47 	vmov.f32	s16, s14
 8007546:	eef0 8a67 	vmov.f32	s17, s15
 800754a:	4682      	mov	sl, r0
 800754c:	f7f8 fe8e 	bl	800026c <__aeabi_dsub>
 8007550:	4652      	mov	r2, sl
 8007552:	4606      	mov	r6, r0
 8007554:	460f      	mov	r7, r1
 8007556:	462b      	mov	r3, r5
 8007558:	ec51 0b18 	vmov	r0, r1, d8
 800755c:	f7f8 fe88 	bl	8000270 <__adddf3>
 8007560:	4602      	mov	r2, r0
 8007562:	460b      	mov	r3, r1
 8007564:	2000      	movs	r0, #0
 8007566:	49bd      	ldr	r1, [pc, #756]	; (800785c <__ieee754_pow+0x754>)
 8007568:	f7f9 f962 	bl	8000830 <__aeabi_ddiv>
 800756c:	ec41 0b19 	vmov	d9, r0, r1
 8007570:	4602      	mov	r2, r0
 8007572:	460b      	mov	r3, r1
 8007574:	4630      	mov	r0, r6
 8007576:	4639      	mov	r1, r7
 8007578:	f7f9 f830 	bl	80005dc <__aeabi_dmul>
 800757c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007580:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007584:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007588:	2300      	movs	r3, #0
 800758a:	9304      	str	r3, [sp, #16]
 800758c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007590:	46ab      	mov	fp, r5
 8007592:	106d      	asrs	r5, r5, #1
 8007594:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007598:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800759c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80075a0:	2200      	movs	r2, #0
 80075a2:	4640      	mov	r0, r8
 80075a4:	4649      	mov	r1, r9
 80075a6:	4614      	mov	r4, r2
 80075a8:	461d      	mov	r5, r3
 80075aa:	f7f9 f817 	bl	80005dc <__aeabi_dmul>
 80075ae:	4602      	mov	r2, r0
 80075b0:	460b      	mov	r3, r1
 80075b2:	4630      	mov	r0, r6
 80075b4:	4639      	mov	r1, r7
 80075b6:	f7f8 fe59 	bl	800026c <__aeabi_dsub>
 80075ba:	ec53 2b18 	vmov	r2, r3, d8
 80075be:	4606      	mov	r6, r0
 80075c0:	460f      	mov	r7, r1
 80075c2:	4620      	mov	r0, r4
 80075c4:	4629      	mov	r1, r5
 80075c6:	f7f8 fe51 	bl	800026c <__aeabi_dsub>
 80075ca:	4602      	mov	r2, r0
 80075cc:	460b      	mov	r3, r1
 80075ce:	4650      	mov	r0, sl
 80075d0:	4659      	mov	r1, fp
 80075d2:	f7f8 fe4b 	bl	800026c <__aeabi_dsub>
 80075d6:	4642      	mov	r2, r8
 80075d8:	464b      	mov	r3, r9
 80075da:	f7f8 ffff 	bl	80005dc <__aeabi_dmul>
 80075de:	4602      	mov	r2, r0
 80075e0:	460b      	mov	r3, r1
 80075e2:	4630      	mov	r0, r6
 80075e4:	4639      	mov	r1, r7
 80075e6:	f7f8 fe41 	bl	800026c <__aeabi_dsub>
 80075ea:	ec53 2b19 	vmov	r2, r3, d9
 80075ee:	f7f8 fff5 	bl	80005dc <__aeabi_dmul>
 80075f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80075f6:	ec41 0b18 	vmov	d8, r0, r1
 80075fa:	4610      	mov	r0, r2
 80075fc:	4619      	mov	r1, r3
 80075fe:	f7f8 ffed 	bl	80005dc <__aeabi_dmul>
 8007602:	a37d      	add	r3, pc, #500	; (adr r3, 80077f8 <__ieee754_pow+0x6f0>)
 8007604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007608:	4604      	mov	r4, r0
 800760a:	460d      	mov	r5, r1
 800760c:	f7f8 ffe6 	bl	80005dc <__aeabi_dmul>
 8007610:	a37b      	add	r3, pc, #492	; (adr r3, 8007800 <__ieee754_pow+0x6f8>)
 8007612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007616:	f7f8 fe2b 	bl	8000270 <__adddf3>
 800761a:	4622      	mov	r2, r4
 800761c:	462b      	mov	r3, r5
 800761e:	f7f8 ffdd 	bl	80005dc <__aeabi_dmul>
 8007622:	a379      	add	r3, pc, #484	; (adr r3, 8007808 <__ieee754_pow+0x700>)
 8007624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007628:	f7f8 fe22 	bl	8000270 <__adddf3>
 800762c:	4622      	mov	r2, r4
 800762e:	462b      	mov	r3, r5
 8007630:	f7f8 ffd4 	bl	80005dc <__aeabi_dmul>
 8007634:	a376      	add	r3, pc, #472	; (adr r3, 8007810 <__ieee754_pow+0x708>)
 8007636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763a:	f7f8 fe19 	bl	8000270 <__adddf3>
 800763e:	4622      	mov	r2, r4
 8007640:	462b      	mov	r3, r5
 8007642:	f7f8 ffcb 	bl	80005dc <__aeabi_dmul>
 8007646:	a374      	add	r3, pc, #464	; (adr r3, 8007818 <__ieee754_pow+0x710>)
 8007648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764c:	f7f8 fe10 	bl	8000270 <__adddf3>
 8007650:	4622      	mov	r2, r4
 8007652:	462b      	mov	r3, r5
 8007654:	f7f8 ffc2 	bl	80005dc <__aeabi_dmul>
 8007658:	a371      	add	r3, pc, #452	; (adr r3, 8007820 <__ieee754_pow+0x718>)
 800765a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765e:	f7f8 fe07 	bl	8000270 <__adddf3>
 8007662:	4622      	mov	r2, r4
 8007664:	4606      	mov	r6, r0
 8007666:	460f      	mov	r7, r1
 8007668:	462b      	mov	r3, r5
 800766a:	4620      	mov	r0, r4
 800766c:	4629      	mov	r1, r5
 800766e:	f7f8 ffb5 	bl	80005dc <__aeabi_dmul>
 8007672:	4602      	mov	r2, r0
 8007674:	460b      	mov	r3, r1
 8007676:	4630      	mov	r0, r6
 8007678:	4639      	mov	r1, r7
 800767a:	f7f8 ffaf 	bl	80005dc <__aeabi_dmul>
 800767e:	4642      	mov	r2, r8
 8007680:	4604      	mov	r4, r0
 8007682:	460d      	mov	r5, r1
 8007684:	464b      	mov	r3, r9
 8007686:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800768a:	f7f8 fdf1 	bl	8000270 <__adddf3>
 800768e:	ec53 2b18 	vmov	r2, r3, d8
 8007692:	f7f8 ffa3 	bl	80005dc <__aeabi_dmul>
 8007696:	4622      	mov	r2, r4
 8007698:	462b      	mov	r3, r5
 800769a:	f7f8 fde9 	bl	8000270 <__adddf3>
 800769e:	4642      	mov	r2, r8
 80076a0:	4682      	mov	sl, r0
 80076a2:	468b      	mov	fp, r1
 80076a4:	464b      	mov	r3, r9
 80076a6:	4640      	mov	r0, r8
 80076a8:	4649      	mov	r1, r9
 80076aa:	f7f8 ff97 	bl	80005dc <__aeabi_dmul>
 80076ae:	4b6c      	ldr	r3, [pc, #432]	; (8007860 <__ieee754_pow+0x758>)
 80076b0:	2200      	movs	r2, #0
 80076b2:	4606      	mov	r6, r0
 80076b4:	460f      	mov	r7, r1
 80076b6:	f7f8 fddb 	bl	8000270 <__adddf3>
 80076ba:	4652      	mov	r2, sl
 80076bc:	465b      	mov	r3, fp
 80076be:	f7f8 fdd7 	bl	8000270 <__adddf3>
 80076c2:	9c04      	ldr	r4, [sp, #16]
 80076c4:	460d      	mov	r5, r1
 80076c6:	4622      	mov	r2, r4
 80076c8:	460b      	mov	r3, r1
 80076ca:	4640      	mov	r0, r8
 80076cc:	4649      	mov	r1, r9
 80076ce:	f7f8 ff85 	bl	80005dc <__aeabi_dmul>
 80076d2:	4b63      	ldr	r3, [pc, #396]	; (8007860 <__ieee754_pow+0x758>)
 80076d4:	4680      	mov	r8, r0
 80076d6:	4689      	mov	r9, r1
 80076d8:	2200      	movs	r2, #0
 80076da:	4620      	mov	r0, r4
 80076dc:	4629      	mov	r1, r5
 80076de:	f7f8 fdc5 	bl	800026c <__aeabi_dsub>
 80076e2:	4632      	mov	r2, r6
 80076e4:	463b      	mov	r3, r7
 80076e6:	f7f8 fdc1 	bl	800026c <__aeabi_dsub>
 80076ea:	4602      	mov	r2, r0
 80076ec:	460b      	mov	r3, r1
 80076ee:	4650      	mov	r0, sl
 80076f0:	4659      	mov	r1, fp
 80076f2:	f7f8 fdbb 	bl	800026c <__aeabi_dsub>
 80076f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076fa:	f7f8 ff6f 	bl	80005dc <__aeabi_dmul>
 80076fe:	4622      	mov	r2, r4
 8007700:	4606      	mov	r6, r0
 8007702:	460f      	mov	r7, r1
 8007704:	462b      	mov	r3, r5
 8007706:	ec51 0b18 	vmov	r0, r1, d8
 800770a:	f7f8 ff67 	bl	80005dc <__aeabi_dmul>
 800770e:	4602      	mov	r2, r0
 8007710:	460b      	mov	r3, r1
 8007712:	4630      	mov	r0, r6
 8007714:	4639      	mov	r1, r7
 8007716:	f7f8 fdab 	bl	8000270 <__adddf3>
 800771a:	4606      	mov	r6, r0
 800771c:	460f      	mov	r7, r1
 800771e:	4602      	mov	r2, r0
 8007720:	460b      	mov	r3, r1
 8007722:	4640      	mov	r0, r8
 8007724:	4649      	mov	r1, r9
 8007726:	f7f8 fda3 	bl	8000270 <__adddf3>
 800772a:	9c04      	ldr	r4, [sp, #16]
 800772c:	a33e      	add	r3, pc, #248	; (adr r3, 8007828 <__ieee754_pow+0x720>)
 800772e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007732:	4620      	mov	r0, r4
 8007734:	460d      	mov	r5, r1
 8007736:	f7f8 ff51 	bl	80005dc <__aeabi_dmul>
 800773a:	4642      	mov	r2, r8
 800773c:	ec41 0b18 	vmov	d8, r0, r1
 8007740:	464b      	mov	r3, r9
 8007742:	4620      	mov	r0, r4
 8007744:	4629      	mov	r1, r5
 8007746:	f7f8 fd91 	bl	800026c <__aeabi_dsub>
 800774a:	4602      	mov	r2, r0
 800774c:	460b      	mov	r3, r1
 800774e:	4630      	mov	r0, r6
 8007750:	4639      	mov	r1, r7
 8007752:	f7f8 fd8b 	bl	800026c <__aeabi_dsub>
 8007756:	a336      	add	r3, pc, #216	; (adr r3, 8007830 <__ieee754_pow+0x728>)
 8007758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775c:	f7f8 ff3e 	bl	80005dc <__aeabi_dmul>
 8007760:	a335      	add	r3, pc, #212	; (adr r3, 8007838 <__ieee754_pow+0x730>)
 8007762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007766:	4606      	mov	r6, r0
 8007768:	460f      	mov	r7, r1
 800776a:	4620      	mov	r0, r4
 800776c:	4629      	mov	r1, r5
 800776e:	f7f8 ff35 	bl	80005dc <__aeabi_dmul>
 8007772:	4602      	mov	r2, r0
 8007774:	460b      	mov	r3, r1
 8007776:	4630      	mov	r0, r6
 8007778:	4639      	mov	r1, r7
 800777a:	f7f8 fd79 	bl	8000270 <__adddf3>
 800777e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007780:	4b38      	ldr	r3, [pc, #224]	; (8007864 <__ieee754_pow+0x75c>)
 8007782:	4413      	add	r3, r2
 8007784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007788:	f7f8 fd72 	bl	8000270 <__adddf3>
 800778c:	4682      	mov	sl, r0
 800778e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007790:	468b      	mov	fp, r1
 8007792:	f7f8 feb9 	bl	8000508 <__aeabi_i2d>
 8007796:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007798:	4b33      	ldr	r3, [pc, #204]	; (8007868 <__ieee754_pow+0x760>)
 800779a:	4413      	add	r3, r2
 800779c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80077a0:	4606      	mov	r6, r0
 80077a2:	460f      	mov	r7, r1
 80077a4:	4652      	mov	r2, sl
 80077a6:	465b      	mov	r3, fp
 80077a8:	ec51 0b18 	vmov	r0, r1, d8
 80077ac:	f7f8 fd60 	bl	8000270 <__adddf3>
 80077b0:	4642      	mov	r2, r8
 80077b2:	464b      	mov	r3, r9
 80077b4:	f7f8 fd5c 	bl	8000270 <__adddf3>
 80077b8:	4632      	mov	r2, r6
 80077ba:	463b      	mov	r3, r7
 80077bc:	f7f8 fd58 	bl	8000270 <__adddf3>
 80077c0:	9c04      	ldr	r4, [sp, #16]
 80077c2:	4632      	mov	r2, r6
 80077c4:	463b      	mov	r3, r7
 80077c6:	4620      	mov	r0, r4
 80077c8:	460d      	mov	r5, r1
 80077ca:	f7f8 fd4f 	bl	800026c <__aeabi_dsub>
 80077ce:	4642      	mov	r2, r8
 80077d0:	464b      	mov	r3, r9
 80077d2:	f7f8 fd4b 	bl	800026c <__aeabi_dsub>
 80077d6:	ec53 2b18 	vmov	r2, r3, d8
 80077da:	f7f8 fd47 	bl	800026c <__aeabi_dsub>
 80077de:	4602      	mov	r2, r0
 80077e0:	460b      	mov	r3, r1
 80077e2:	4650      	mov	r0, sl
 80077e4:	4659      	mov	r1, fp
 80077e6:	e606      	b.n	80073f6 <__ieee754_pow+0x2ee>
 80077e8:	2401      	movs	r4, #1
 80077ea:	e6a0      	b.n	800752e <__ieee754_pow+0x426>
 80077ec:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007840 <__ieee754_pow+0x738>
 80077f0:	e60d      	b.n	800740e <__ieee754_pow+0x306>
 80077f2:	bf00      	nop
 80077f4:	f3af 8000 	nop.w
 80077f8:	4a454eef 	.word	0x4a454eef
 80077fc:	3fca7e28 	.word	0x3fca7e28
 8007800:	93c9db65 	.word	0x93c9db65
 8007804:	3fcd864a 	.word	0x3fcd864a
 8007808:	a91d4101 	.word	0xa91d4101
 800780c:	3fd17460 	.word	0x3fd17460
 8007810:	518f264d 	.word	0x518f264d
 8007814:	3fd55555 	.word	0x3fd55555
 8007818:	db6fabff 	.word	0xdb6fabff
 800781c:	3fdb6db6 	.word	0x3fdb6db6
 8007820:	33333303 	.word	0x33333303
 8007824:	3fe33333 	.word	0x3fe33333
 8007828:	e0000000 	.word	0xe0000000
 800782c:	3feec709 	.word	0x3feec709
 8007830:	dc3a03fd 	.word	0xdc3a03fd
 8007834:	3feec709 	.word	0x3feec709
 8007838:	145b01f5 	.word	0x145b01f5
 800783c:	be3e2fe0 	.word	0xbe3e2fe0
 8007840:	00000000 	.word	0x00000000
 8007844:	3ff00000 	.word	0x3ff00000
 8007848:	7ff00000 	.word	0x7ff00000
 800784c:	43400000 	.word	0x43400000
 8007850:	0003988e 	.word	0x0003988e
 8007854:	000bb679 	.word	0x000bb679
 8007858:	08008018 	.word	0x08008018
 800785c:	3ff00000 	.word	0x3ff00000
 8007860:	40080000 	.word	0x40080000
 8007864:	08008038 	.word	0x08008038
 8007868:	08008028 	.word	0x08008028
 800786c:	a3b5      	add	r3, pc, #724	; (adr r3, 8007b44 <__ieee754_pow+0xa3c>)
 800786e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007872:	4640      	mov	r0, r8
 8007874:	4649      	mov	r1, r9
 8007876:	f7f8 fcfb 	bl	8000270 <__adddf3>
 800787a:	4622      	mov	r2, r4
 800787c:	ec41 0b1a 	vmov	d10, r0, r1
 8007880:	462b      	mov	r3, r5
 8007882:	4630      	mov	r0, r6
 8007884:	4639      	mov	r1, r7
 8007886:	f7f8 fcf1 	bl	800026c <__aeabi_dsub>
 800788a:	4602      	mov	r2, r0
 800788c:	460b      	mov	r3, r1
 800788e:	ec51 0b1a 	vmov	r0, r1, d10
 8007892:	f7f9 f933 	bl	8000afc <__aeabi_dcmpgt>
 8007896:	2800      	cmp	r0, #0
 8007898:	f47f adf8 	bne.w	800748c <__ieee754_pow+0x384>
 800789c:	4aa4      	ldr	r2, [pc, #656]	; (8007b30 <__ieee754_pow+0xa28>)
 800789e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80078a2:	4293      	cmp	r3, r2
 80078a4:	f340 810b 	ble.w	8007abe <__ieee754_pow+0x9b6>
 80078a8:	151b      	asrs	r3, r3, #20
 80078aa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80078ae:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80078b2:	fa4a f303 	asr.w	r3, sl, r3
 80078b6:	445b      	add	r3, fp
 80078b8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80078bc:	4e9d      	ldr	r6, [pc, #628]	; (8007b34 <__ieee754_pow+0xa2c>)
 80078be:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80078c2:	4116      	asrs	r6, r2
 80078c4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80078c8:	2000      	movs	r0, #0
 80078ca:	ea23 0106 	bic.w	r1, r3, r6
 80078ce:	f1c2 0214 	rsb	r2, r2, #20
 80078d2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80078d6:	fa4a fa02 	asr.w	sl, sl, r2
 80078da:	f1bb 0f00 	cmp.w	fp, #0
 80078de:	4602      	mov	r2, r0
 80078e0:	460b      	mov	r3, r1
 80078e2:	4620      	mov	r0, r4
 80078e4:	4629      	mov	r1, r5
 80078e6:	bfb8      	it	lt
 80078e8:	f1ca 0a00 	rsblt	sl, sl, #0
 80078ec:	f7f8 fcbe 	bl	800026c <__aeabi_dsub>
 80078f0:	ec41 0b19 	vmov	d9, r0, r1
 80078f4:	4642      	mov	r2, r8
 80078f6:	464b      	mov	r3, r9
 80078f8:	ec51 0b19 	vmov	r0, r1, d9
 80078fc:	f7f8 fcb8 	bl	8000270 <__adddf3>
 8007900:	2400      	movs	r4, #0
 8007902:	a379      	add	r3, pc, #484	; (adr r3, 8007ae8 <__ieee754_pow+0x9e0>)
 8007904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007908:	4620      	mov	r0, r4
 800790a:	460d      	mov	r5, r1
 800790c:	f7f8 fe66 	bl	80005dc <__aeabi_dmul>
 8007910:	ec53 2b19 	vmov	r2, r3, d9
 8007914:	4606      	mov	r6, r0
 8007916:	460f      	mov	r7, r1
 8007918:	4620      	mov	r0, r4
 800791a:	4629      	mov	r1, r5
 800791c:	f7f8 fca6 	bl	800026c <__aeabi_dsub>
 8007920:	4602      	mov	r2, r0
 8007922:	460b      	mov	r3, r1
 8007924:	4640      	mov	r0, r8
 8007926:	4649      	mov	r1, r9
 8007928:	f7f8 fca0 	bl	800026c <__aeabi_dsub>
 800792c:	a370      	add	r3, pc, #448	; (adr r3, 8007af0 <__ieee754_pow+0x9e8>)
 800792e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007932:	f7f8 fe53 	bl	80005dc <__aeabi_dmul>
 8007936:	a370      	add	r3, pc, #448	; (adr r3, 8007af8 <__ieee754_pow+0x9f0>)
 8007938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793c:	4680      	mov	r8, r0
 800793e:	4689      	mov	r9, r1
 8007940:	4620      	mov	r0, r4
 8007942:	4629      	mov	r1, r5
 8007944:	f7f8 fe4a 	bl	80005dc <__aeabi_dmul>
 8007948:	4602      	mov	r2, r0
 800794a:	460b      	mov	r3, r1
 800794c:	4640      	mov	r0, r8
 800794e:	4649      	mov	r1, r9
 8007950:	f7f8 fc8e 	bl	8000270 <__adddf3>
 8007954:	4604      	mov	r4, r0
 8007956:	460d      	mov	r5, r1
 8007958:	4602      	mov	r2, r0
 800795a:	460b      	mov	r3, r1
 800795c:	4630      	mov	r0, r6
 800795e:	4639      	mov	r1, r7
 8007960:	f7f8 fc86 	bl	8000270 <__adddf3>
 8007964:	4632      	mov	r2, r6
 8007966:	463b      	mov	r3, r7
 8007968:	4680      	mov	r8, r0
 800796a:	4689      	mov	r9, r1
 800796c:	f7f8 fc7e 	bl	800026c <__aeabi_dsub>
 8007970:	4602      	mov	r2, r0
 8007972:	460b      	mov	r3, r1
 8007974:	4620      	mov	r0, r4
 8007976:	4629      	mov	r1, r5
 8007978:	f7f8 fc78 	bl	800026c <__aeabi_dsub>
 800797c:	4642      	mov	r2, r8
 800797e:	4606      	mov	r6, r0
 8007980:	460f      	mov	r7, r1
 8007982:	464b      	mov	r3, r9
 8007984:	4640      	mov	r0, r8
 8007986:	4649      	mov	r1, r9
 8007988:	f7f8 fe28 	bl	80005dc <__aeabi_dmul>
 800798c:	a35c      	add	r3, pc, #368	; (adr r3, 8007b00 <__ieee754_pow+0x9f8>)
 800798e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007992:	4604      	mov	r4, r0
 8007994:	460d      	mov	r5, r1
 8007996:	f7f8 fe21 	bl	80005dc <__aeabi_dmul>
 800799a:	a35b      	add	r3, pc, #364	; (adr r3, 8007b08 <__ieee754_pow+0xa00>)
 800799c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a0:	f7f8 fc64 	bl	800026c <__aeabi_dsub>
 80079a4:	4622      	mov	r2, r4
 80079a6:	462b      	mov	r3, r5
 80079a8:	f7f8 fe18 	bl	80005dc <__aeabi_dmul>
 80079ac:	a358      	add	r3, pc, #352	; (adr r3, 8007b10 <__ieee754_pow+0xa08>)
 80079ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b2:	f7f8 fc5d 	bl	8000270 <__adddf3>
 80079b6:	4622      	mov	r2, r4
 80079b8:	462b      	mov	r3, r5
 80079ba:	f7f8 fe0f 	bl	80005dc <__aeabi_dmul>
 80079be:	a356      	add	r3, pc, #344	; (adr r3, 8007b18 <__ieee754_pow+0xa10>)
 80079c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c4:	f7f8 fc52 	bl	800026c <__aeabi_dsub>
 80079c8:	4622      	mov	r2, r4
 80079ca:	462b      	mov	r3, r5
 80079cc:	f7f8 fe06 	bl	80005dc <__aeabi_dmul>
 80079d0:	a353      	add	r3, pc, #332	; (adr r3, 8007b20 <__ieee754_pow+0xa18>)
 80079d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d6:	f7f8 fc4b 	bl	8000270 <__adddf3>
 80079da:	4622      	mov	r2, r4
 80079dc:	462b      	mov	r3, r5
 80079de:	f7f8 fdfd 	bl	80005dc <__aeabi_dmul>
 80079e2:	4602      	mov	r2, r0
 80079e4:	460b      	mov	r3, r1
 80079e6:	4640      	mov	r0, r8
 80079e8:	4649      	mov	r1, r9
 80079ea:	f7f8 fc3f 	bl	800026c <__aeabi_dsub>
 80079ee:	4604      	mov	r4, r0
 80079f0:	460d      	mov	r5, r1
 80079f2:	4602      	mov	r2, r0
 80079f4:	460b      	mov	r3, r1
 80079f6:	4640      	mov	r0, r8
 80079f8:	4649      	mov	r1, r9
 80079fa:	f7f8 fdef 	bl	80005dc <__aeabi_dmul>
 80079fe:	2200      	movs	r2, #0
 8007a00:	ec41 0b19 	vmov	d9, r0, r1
 8007a04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a08:	4620      	mov	r0, r4
 8007a0a:	4629      	mov	r1, r5
 8007a0c:	f7f8 fc2e 	bl	800026c <__aeabi_dsub>
 8007a10:	4602      	mov	r2, r0
 8007a12:	460b      	mov	r3, r1
 8007a14:	ec51 0b19 	vmov	r0, r1, d9
 8007a18:	f7f8 ff0a 	bl	8000830 <__aeabi_ddiv>
 8007a1c:	4632      	mov	r2, r6
 8007a1e:	4604      	mov	r4, r0
 8007a20:	460d      	mov	r5, r1
 8007a22:	463b      	mov	r3, r7
 8007a24:	4640      	mov	r0, r8
 8007a26:	4649      	mov	r1, r9
 8007a28:	f7f8 fdd8 	bl	80005dc <__aeabi_dmul>
 8007a2c:	4632      	mov	r2, r6
 8007a2e:	463b      	mov	r3, r7
 8007a30:	f7f8 fc1e 	bl	8000270 <__adddf3>
 8007a34:	4602      	mov	r2, r0
 8007a36:	460b      	mov	r3, r1
 8007a38:	4620      	mov	r0, r4
 8007a3a:	4629      	mov	r1, r5
 8007a3c:	f7f8 fc16 	bl	800026c <__aeabi_dsub>
 8007a40:	4642      	mov	r2, r8
 8007a42:	464b      	mov	r3, r9
 8007a44:	f7f8 fc12 	bl	800026c <__aeabi_dsub>
 8007a48:	460b      	mov	r3, r1
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	493a      	ldr	r1, [pc, #232]	; (8007b38 <__ieee754_pow+0xa30>)
 8007a4e:	2000      	movs	r0, #0
 8007a50:	f7f8 fc0c 	bl	800026c <__aeabi_dsub>
 8007a54:	e9cd 0100 	strd	r0, r1, [sp]
 8007a58:	9b01      	ldr	r3, [sp, #4]
 8007a5a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007a5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a62:	da2f      	bge.n	8007ac4 <__ieee754_pow+0x9bc>
 8007a64:	4650      	mov	r0, sl
 8007a66:	ed9d 0b00 	vldr	d0, [sp]
 8007a6a:	f000 f9cd 	bl	8007e08 <scalbn>
 8007a6e:	ec51 0b10 	vmov	r0, r1, d0
 8007a72:	ec53 2b18 	vmov	r2, r3, d8
 8007a76:	f7ff bbe0 	b.w	800723a <__ieee754_pow+0x132>
 8007a7a:	4b30      	ldr	r3, [pc, #192]	; (8007b3c <__ieee754_pow+0xa34>)
 8007a7c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007a80:	429e      	cmp	r6, r3
 8007a82:	f77f af0b 	ble.w	800789c <__ieee754_pow+0x794>
 8007a86:	4b2e      	ldr	r3, [pc, #184]	; (8007b40 <__ieee754_pow+0xa38>)
 8007a88:	440b      	add	r3, r1
 8007a8a:	4303      	orrs	r3, r0
 8007a8c:	d00b      	beq.n	8007aa6 <__ieee754_pow+0x99e>
 8007a8e:	a326      	add	r3, pc, #152	; (adr r3, 8007b28 <__ieee754_pow+0xa20>)
 8007a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a94:	ec51 0b18 	vmov	r0, r1, d8
 8007a98:	f7f8 fda0 	bl	80005dc <__aeabi_dmul>
 8007a9c:	a322      	add	r3, pc, #136	; (adr r3, 8007b28 <__ieee754_pow+0xa20>)
 8007a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa2:	f7ff bbca 	b.w	800723a <__ieee754_pow+0x132>
 8007aa6:	4622      	mov	r2, r4
 8007aa8:	462b      	mov	r3, r5
 8007aaa:	f7f8 fbdf 	bl	800026c <__aeabi_dsub>
 8007aae:	4642      	mov	r2, r8
 8007ab0:	464b      	mov	r3, r9
 8007ab2:	f7f9 f819 	bl	8000ae8 <__aeabi_dcmpge>
 8007ab6:	2800      	cmp	r0, #0
 8007ab8:	f43f aef0 	beq.w	800789c <__ieee754_pow+0x794>
 8007abc:	e7e7      	b.n	8007a8e <__ieee754_pow+0x986>
 8007abe:	f04f 0a00 	mov.w	sl, #0
 8007ac2:	e717      	b.n	80078f4 <__ieee754_pow+0x7ec>
 8007ac4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ac8:	4619      	mov	r1, r3
 8007aca:	e7d2      	b.n	8007a72 <__ieee754_pow+0x96a>
 8007acc:	491a      	ldr	r1, [pc, #104]	; (8007b38 <__ieee754_pow+0xa30>)
 8007ace:	2000      	movs	r0, #0
 8007ad0:	f7ff bb9e 	b.w	8007210 <__ieee754_pow+0x108>
 8007ad4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ad8:	f7ff bb9a 	b.w	8007210 <__ieee754_pow+0x108>
 8007adc:	9000      	str	r0, [sp, #0]
 8007ade:	f7ff bb76 	b.w	80071ce <__ieee754_pow+0xc6>
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	f7ff bb60 	b.w	80071a8 <__ieee754_pow+0xa0>
 8007ae8:	00000000 	.word	0x00000000
 8007aec:	3fe62e43 	.word	0x3fe62e43
 8007af0:	fefa39ef 	.word	0xfefa39ef
 8007af4:	3fe62e42 	.word	0x3fe62e42
 8007af8:	0ca86c39 	.word	0x0ca86c39
 8007afc:	be205c61 	.word	0xbe205c61
 8007b00:	72bea4d0 	.word	0x72bea4d0
 8007b04:	3e663769 	.word	0x3e663769
 8007b08:	c5d26bf1 	.word	0xc5d26bf1
 8007b0c:	3ebbbd41 	.word	0x3ebbbd41
 8007b10:	af25de2c 	.word	0xaf25de2c
 8007b14:	3f11566a 	.word	0x3f11566a
 8007b18:	16bebd93 	.word	0x16bebd93
 8007b1c:	3f66c16c 	.word	0x3f66c16c
 8007b20:	5555553e 	.word	0x5555553e
 8007b24:	3fc55555 	.word	0x3fc55555
 8007b28:	c2f8f359 	.word	0xc2f8f359
 8007b2c:	01a56e1f 	.word	0x01a56e1f
 8007b30:	3fe00000 	.word	0x3fe00000
 8007b34:	000fffff 	.word	0x000fffff
 8007b38:	3ff00000 	.word	0x3ff00000
 8007b3c:	4090cbff 	.word	0x4090cbff
 8007b40:	3f6f3400 	.word	0x3f6f3400
 8007b44:	652b82fe 	.word	0x652b82fe
 8007b48:	3c971547 	.word	0x3c971547

08007b4c <__ieee754_sqrt>:
 8007b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b50:	ec55 4b10 	vmov	r4, r5, d0
 8007b54:	4e56      	ldr	r6, [pc, #344]	; (8007cb0 <__ieee754_sqrt+0x164>)
 8007b56:	43ae      	bics	r6, r5
 8007b58:	ee10 0a10 	vmov	r0, s0
 8007b5c:	ee10 3a10 	vmov	r3, s0
 8007b60:	4629      	mov	r1, r5
 8007b62:	462a      	mov	r2, r5
 8007b64:	d110      	bne.n	8007b88 <__ieee754_sqrt+0x3c>
 8007b66:	ee10 2a10 	vmov	r2, s0
 8007b6a:	462b      	mov	r3, r5
 8007b6c:	f7f8 fd36 	bl	80005dc <__aeabi_dmul>
 8007b70:	4602      	mov	r2, r0
 8007b72:	460b      	mov	r3, r1
 8007b74:	4620      	mov	r0, r4
 8007b76:	4629      	mov	r1, r5
 8007b78:	f7f8 fb7a 	bl	8000270 <__adddf3>
 8007b7c:	4604      	mov	r4, r0
 8007b7e:	460d      	mov	r5, r1
 8007b80:	ec45 4b10 	vmov	d0, r4, r5
 8007b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b88:	2d00      	cmp	r5, #0
 8007b8a:	dc10      	bgt.n	8007bae <__ieee754_sqrt+0x62>
 8007b8c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007b90:	4330      	orrs	r0, r6
 8007b92:	d0f5      	beq.n	8007b80 <__ieee754_sqrt+0x34>
 8007b94:	b15d      	cbz	r5, 8007bae <__ieee754_sqrt+0x62>
 8007b96:	ee10 2a10 	vmov	r2, s0
 8007b9a:	462b      	mov	r3, r5
 8007b9c:	ee10 0a10 	vmov	r0, s0
 8007ba0:	f7f8 fb64 	bl	800026c <__aeabi_dsub>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	f7f8 fe42 	bl	8000830 <__aeabi_ddiv>
 8007bac:	e7e6      	b.n	8007b7c <__ieee754_sqrt+0x30>
 8007bae:	1509      	asrs	r1, r1, #20
 8007bb0:	d076      	beq.n	8007ca0 <__ieee754_sqrt+0x154>
 8007bb2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007bb6:	07ce      	lsls	r6, r1, #31
 8007bb8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8007bbc:	bf5e      	ittt	pl
 8007bbe:	0fda      	lsrpl	r2, r3, #31
 8007bc0:	005b      	lslpl	r3, r3, #1
 8007bc2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8007bc6:	0fda      	lsrs	r2, r3, #31
 8007bc8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8007bcc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007bd0:	2000      	movs	r0, #0
 8007bd2:	106d      	asrs	r5, r5, #1
 8007bd4:	005b      	lsls	r3, r3, #1
 8007bd6:	f04f 0e16 	mov.w	lr, #22
 8007bda:	4684      	mov	ip, r0
 8007bdc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007be0:	eb0c 0401 	add.w	r4, ip, r1
 8007be4:	4294      	cmp	r4, r2
 8007be6:	bfde      	ittt	le
 8007be8:	1b12      	suble	r2, r2, r4
 8007bea:	eb04 0c01 	addle.w	ip, r4, r1
 8007bee:	1840      	addle	r0, r0, r1
 8007bf0:	0052      	lsls	r2, r2, #1
 8007bf2:	f1be 0e01 	subs.w	lr, lr, #1
 8007bf6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007bfa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007bfe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007c02:	d1ed      	bne.n	8007be0 <__ieee754_sqrt+0x94>
 8007c04:	4671      	mov	r1, lr
 8007c06:	2720      	movs	r7, #32
 8007c08:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007c0c:	4562      	cmp	r2, ip
 8007c0e:	eb04 060e 	add.w	r6, r4, lr
 8007c12:	dc02      	bgt.n	8007c1a <__ieee754_sqrt+0xce>
 8007c14:	d113      	bne.n	8007c3e <__ieee754_sqrt+0xf2>
 8007c16:	429e      	cmp	r6, r3
 8007c18:	d811      	bhi.n	8007c3e <__ieee754_sqrt+0xf2>
 8007c1a:	2e00      	cmp	r6, #0
 8007c1c:	eb06 0e04 	add.w	lr, r6, r4
 8007c20:	da43      	bge.n	8007caa <__ieee754_sqrt+0x15e>
 8007c22:	f1be 0f00 	cmp.w	lr, #0
 8007c26:	db40      	blt.n	8007caa <__ieee754_sqrt+0x15e>
 8007c28:	f10c 0801 	add.w	r8, ip, #1
 8007c2c:	eba2 020c 	sub.w	r2, r2, ip
 8007c30:	429e      	cmp	r6, r3
 8007c32:	bf88      	it	hi
 8007c34:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8007c38:	1b9b      	subs	r3, r3, r6
 8007c3a:	4421      	add	r1, r4
 8007c3c:	46c4      	mov	ip, r8
 8007c3e:	0052      	lsls	r2, r2, #1
 8007c40:	3f01      	subs	r7, #1
 8007c42:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007c46:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007c4a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007c4e:	d1dd      	bne.n	8007c0c <__ieee754_sqrt+0xc0>
 8007c50:	4313      	orrs	r3, r2
 8007c52:	d006      	beq.n	8007c62 <__ieee754_sqrt+0x116>
 8007c54:	1c4c      	adds	r4, r1, #1
 8007c56:	bf13      	iteet	ne
 8007c58:	3101      	addne	r1, #1
 8007c5a:	3001      	addeq	r0, #1
 8007c5c:	4639      	moveq	r1, r7
 8007c5e:	f021 0101 	bicne.w	r1, r1, #1
 8007c62:	1043      	asrs	r3, r0, #1
 8007c64:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007c68:	0849      	lsrs	r1, r1, #1
 8007c6a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007c6e:	07c2      	lsls	r2, r0, #31
 8007c70:	bf48      	it	mi
 8007c72:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007c76:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8007c7a:	460c      	mov	r4, r1
 8007c7c:	463d      	mov	r5, r7
 8007c7e:	e77f      	b.n	8007b80 <__ieee754_sqrt+0x34>
 8007c80:	0ada      	lsrs	r2, r3, #11
 8007c82:	3815      	subs	r0, #21
 8007c84:	055b      	lsls	r3, r3, #21
 8007c86:	2a00      	cmp	r2, #0
 8007c88:	d0fa      	beq.n	8007c80 <__ieee754_sqrt+0x134>
 8007c8a:	02d7      	lsls	r7, r2, #11
 8007c8c:	d50a      	bpl.n	8007ca4 <__ieee754_sqrt+0x158>
 8007c8e:	f1c1 0420 	rsb	r4, r1, #32
 8007c92:	fa23 f404 	lsr.w	r4, r3, r4
 8007c96:	1e4d      	subs	r5, r1, #1
 8007c98:	408b      	lsls	r3, r1
 8007c9a:	4322      	orrs	r2, r4
 8007c9c:	1b41      	subs	r1, r0, r5
 8007c9e:	e788      	b.n	8007bb2 <__ieee754_sqrt+0x66>
 8007ca0:	4608      	mov	r0, r1
 8007ca2:	e7f0      	b.n	8007c86 <__ieee754_sqrt+0x13a>
 8007ca4:	0052      	lsls	r2, r2, #1
 8007ca6:	3101      	adds	r1, #1
 8007ca8:	e7ef      	b.n	8007c8a <__ieee754_sqrt+0x13e>
 8007caa:	46e0      	mov	r8, ip
 8007cac:	e7be      	b.n	8007c2c <__ieee754_sqrt+0xe0>
 8007cae:	bf00      	nop
 8007cb0:	7ff00000 	.word	0x7ff00000

08007cb4 <fabs>:
 8007cb4:	ec51 0b10 	vmov	r0, r1, d0
 8007cb8:	ee10 2a10 	vmov	r2, s0
 8007cbc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007cc0:	ec43 2b10 	vmov	d0, r2, r3
 8007cc4:	4770      	bx	lr

08007cc6 <finite>:
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	ed8d 0b00 	vstr	d0, [sp]
 8007ccc:	9801      	ldr	r0, [sp, #4]
 8007cce:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007cd2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007cd6:	0fc0      	lsrs	r0, r0, #31
 8007cd8:	b002      	add	sp, #8
 8007cda:	4770      	bx	lr
 8007cdc:	0000      	movs	r0, r0
	...

08007ce0 <nan>:
 8007ce0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007ce8 <nan+0x8>
 8007ce4:	4770      	bx	lr
 8007ce6:	bf00      	nop
 8007ce8:	00000000 	.word	0x00000000
 8007cec:	7ff80000 	.word	0x7ff80000

08007cf0 <rint>:
 8007cf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cf2:	ec51 0b10 	vmov	r0, r1, d0
 8007cf6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007cfa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007cfe:	2e13      	cmp	r6, #19
 8007d00:	ee10 4a10 	vmov	r4, s0
 8007d04:	460b      	mov	r3, r1
 8007d06:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8007d0a:	dc58      	bgt.n	8007dbe <rint+0xce>
 8007d0c:	2e00      	cmp	r6, #0
 8007d0e:	da2b      	bge.n	8007d68 <rint+0x78>
 8007d10:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007d14:	4302      	orrs	r2, r0
 8007d16:	d023      	beq.n	8007d60 <rint+0x70>
 8007d18:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007d1c:	4302      	orrs	r2, r0
 8007d1e:	4254      	negs	r4, r2
 8007d20:	4314      	orrs	r4, r2
 8007d22:	0c4b      	lsrs	r3, r1, #17
 8007d24:	0b24      	lsrs	r4, r4, #12
 8007d26:	045b      	lsls	r3, r3, #17
 8007d28:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8007d2c:	ea44 0103 	orr.w	r1, r4, r3
 8007d30:	4b32      	ldr	r3, [pc, #200]	; (8007dfc <rint+0x10c>)
 8007d32:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007d36:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	4630      	mov	r0, r6
 8007d40:	4639      	mov	r1, r7
 8007d42:	f7f8 fa95 	bl	8000270 <__adddf3>
 8007d46:	e9cd 0100 	strd	r0, r1, [sp]
 8007d4a:	463b      	mov	r3, r7
 8007d4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d50:	4632      	mov	r2, r6
 8007d52:	f7f8 fa8b 	bl	800026c <__aeabi_dsub>
 8007d56:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007d5a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8007d5e:	4639      	mov	r1, r7
 8007d60:	ec41 0b10 	vmov	d0, r0, r1
 8007d64:	b003      	add	sp, #12
 8007d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d68:	4a25      	ldr	r2, [pc, #148]	; (8007e00 <rint+0x110>)
 8007d6a:	4132      	asrs	r2, r6
 8007d6c:	ea01 0702 	and.w	r7, r1, r2
 8007d70:	4307      	orrs	r7, r0
 8007d72:	d0f5      	beq.n	8007d60 <rint+0x70>
 8007d74:	0851      	lsrs	r1, r2, #1
 8007d76:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8007d7a:	4314      	orrs	r4, r2
 8007d7c:	d00c      	beq.n	8007d98 <rint+0xa8>
 8007d7e:	ea23 0201 	bic.w	r2, r3, r1
 8007d82:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007d86:	2e13      	cmp	r6, #19
 8007d88:	fa43 f606 	asr.w	r6, r3, r6
 8007d8c:	bf0c      	ite	eq
 8007d8e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8007d92:	2400      	movne	r4, #0
 8007d94:	ea42 0306 	orr.w	r3, r2, r6
 8007d98:	4918      	ldr	r1, [pc, #96]	; (8007dfc <rint+0x10c>)
 8007d9a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8007d9e:	4622      	mov	r2, r4
 8007da0:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007da4:	4620      	mov	r0, r4
 8007da6:	4629      	mov	r1, r5
 8007da8:	f7f8 fa62 	bl	8000270 <__adddf3>
 8007dac:	e9cd 0100 	strd	r0, r1, [sp]
 8007db0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007db4:	4622      	mov	r2, r4
 8007db6:	462b      	mov	r3, r5
 8007db8:	f7f8 fa58 	bl	800026c <__aeabi_dsub>
 8007dbc:	e7d0      	b.n	8007d60 <rint+0x70>
 8007dbe:	2e33      	cmp	r6, #51	; 0x33
 8007dc0:	dd07      	ble.n	8007dd2 <rint+0xe2>
 8007dc2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007dc6:	d1cb      	bne.n	8007d60 <rint+0x70>
 8007dc8:	ee10 2a10 	vmov	r2, s0
 8007dcc:	f7f8 fa50 	bl	8000270 <__adddf3>
 8007dd0:	e7c6      	b.n	8007d60 <rint+0x70>
 8007dd2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8007dd6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8007dda:	40d6      	lsrs	r6, r2
 8007ddc:	4230      	tst	r0, r6
 8007dde:	d0bf      	beq.n	8007d60 <rint+0x70>
 8007de0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8007de4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8007de8:	bf1f      	itttt	ne
 8007dea:	ea24 0101 	bicne.w	r1, r4, r1
 8007dee:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8007df2:	fa44 f202 	asrne.w	r2, r4, r2
 8007df6:	ea41 0402 	orrne.w	r4, r1, r2
 8007dfa:	e7cd      	b.n	8007d98 <rint+0xa8>
 8007dfc:	08008048 	.word	0x08008048
 8007e00:	000fffff 	.word	0x000fffff
 8007e04:	00000000 	.word	0x00000000

08007e08 <scalbn>:
 8007e08:	b570      	push	{r4, r5, r6, lr}
 8007e0a:	ec55 4b10 	vmov	r4, r5, d0
 8007e0e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007e12:	4606      	mov	r6, r0
 8007e14:	462b      	mov	r3, r5
 8007e16:	b99a      	cbnz	r2, 8007e40 <scalbn+0x38>
 8007e18:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007e1c:	4323      	orrs	r3, r4
 8007e1e:	d036      	beq.n	8007e8e <scalbn+0x86>
 8007e20:	4b39      	ldr	r3, [pc, #228]	; (8007f08 <scalbn+0x100>)
 8007e22:	4629      	mov	r1, r5
 8007e24:	ee10 0a10 	vmov	r0, s0
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f7f8 fbd7 	bl	80005dc <__aeabi_dmul>
 8007e2e:	4b37      	ldr	r3, [pc, #220]	; (8007f0c <scalbn+0x104>)
 8007e30:	429e      	cmp	r6, r3
 8007e32:	4604      	mov	r4, r0
 8007e34:	460d      	mov	r5, r1
 8007e36:	da10      	bge.n	8007e5a <scalbn+0x52>
 8007e38:	a32b      	add	r3, pc, #172	; (adr r3, 8007ee8 <scalbn+0xe0>)
 8007e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3e:	e03a      	b.n	8007eb6 <scalbn+0xae>
 8007e40:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007e44:	428a      	cmp	r2, r1
 8007e46:	d10c      	bne.n	8007e62 <scalbn+0x5a>
 8007e48:	ee10 2a10 	vmov	r2, s0
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	4629      	mov	r1, r5
 8007e50:	f7f8 fa0e 	bl	8000270 <__adddf3>
 8007e54:	4604      	mov	r4, r0
 8007e56:	460d      	mov	r5, r1
 8007e58:	e019      	b.n	8007e8e <scalbn+0x86>
 8007e5a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007e5e:	460b      	mov	r3, r1
 8007e60:	3a36      	subs	r2, #54	; 0x36
 8007e62:	4432      	add	r2, r6
 8007e64:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007e68:	428a      	cmp	r2, r1
 8007e6a:	dd08      	ble.n	8007e7e <scalbn+0x76>
 8007e6c:	2d00      	cmp	r5, #0
 8007e6e:	a120      	add	r1, pc, #128	; (adr r1, 8007ef0 <scalbn+0xe8>)
 8007e70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e74:	da1c      	bge.n	8007eb0 <scalbn+0xa8>
 8007e76:	a120      	add	r1, pc, #128	; (adr r1, 8007ef8 <scalbn+0xf0>)
 8007e78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e7c:	e018      	b.n	8007eb0 <scalbn+0xa8>
 8007e7e:	2a00      	cmp	r2, #0
 8007e80:	dd08      	ble.n	8007e94 <scalbn+0x8c>
 8007e82:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007e86:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007e8a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007e8e:	ec45 4b10 	vmov	d0, r4, r5
 8007e92:	bd70      	pop	{r4, r5, r6, pc}
 8007e94:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007e98:	da19      	bge.n	8007ece <scalbn+0xc6>
 8007e9a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007e9e:	429e      	cmp	r6, r3
 8007ea0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007ea4:	dd0a      	ble.n	8007ebc <scalbn+0xb4>
 8007ea6:	a112      	add	r1, pc, #72	; (adr r1, 8007ef0 <scalbn+0xe8>)
 8007ea8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d1e2      	bne.n	8007e76 <scalbn+0x6e>
 8007eb0:	a30f      	add	r3, pc, #60	; (adr r3, 8007ef0 <scalbn+0xe8>)
 8007eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb6:	f7f8 fb91 	bl	80005dc <__aeabi_dmul>
 8007eba:	e7cb      	b.n	8007e54 <scalbn+0x4c>
 8007ebc:	a10a      	add	r1, pc, #40	; (adr r1, 8007ee8 <scalbn+0xe0>)
 8007ebe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d0b8      	beq.n	8007e38 <scalbn+0x30>
 8007ec6:	a10e      	add	r1, pc, #56	; (adr r1, 8007f00 <scalbn+0xf8>)
 8007ec8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ecc:	e7b4      	b.n	8007e38 <scalbn+0x30>
 8007ece:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007ed2:	3236      	adds	r2, #54	; 0x36
 8007ed4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007ed8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007edc:	4620      	mov	r0, r4
 8007ede:	4b0c      	ldr	r3, [pc, #48]	; (8007f10 <scalbn+0x108>)
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	e7e8      	b.n	8007eb6 <scalbn+0xae>
 8007ee4:	f3af 8000 	nop.w
 8007ee8:	c2f8f359 	.word	0xc2f8f359
 8007eec:	01a56e1f 	.word	0x01a56e1f
 8007ef0:	8800759c 	.word	0x8800759c
 8007ef4:	7e37e43c 	.word	0x7e37e43c
 8007ef8:	8800759c 	.word	0x8800759c
 8007efc:	fe37e43c 	.word	0xfe37e43c
 8007f00:	c2f8f359 	.word	0xc2f8f359
 8007f04:	81a56e1f 	.word	0x81a56e1f
 8007f08:	43500000 	.word	0x43500000
 8007f0c:	ffff3cb0 	.word	0xffff3cb0
 8007f10:	3c900000 	.word	0x3c900000

08007f14 <_init>:
 8007f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f16:	bf00      	nop
 8007f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f1a:	bc08      	pop	{r3}
 8007f1c:	469e      	mov	lr, r3
 8007f1e:	4770      	bx	lr

08007f20 <_fini>:
 8007f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f22:	bf00      	nop
 8007f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f26:	bc08      	pop	{r3}
 8007f28:	469e      	mov	lr, r3
 8007f2a:	4770      	bx	lr
